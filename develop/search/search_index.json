{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AUI Framework","text":"<p>Welcome to AUI framework documentation!</p> <p>AUI is cross-platform high performance efficient module-based framework for developing and deploying hardware accelerated graphical desktop applications using modern C++20.</p> <p></p> <p>The project is inspired by Qt and aims to provide developers with the best possible experience (including, but not limited to: dependency management, packaging, ui building, styling, debugger visualizing) with pure C++, without custom programming languages and external compilers.</p>"},{"location":"#modules","title":"Modules","text":"<ul> <li> <p>aui::core</p> <p>Main central library</p> </li> <li> <p>aui::views</p> <p>UI toolkit</p> </li> <li> <p>aui::image</p> <p>Image loading and processing</p> </li> <li> <p>aui::crypt</p> <p>OpenSSL wrapper</p> </li> <li> <p>aui::curl</p> <p>http(s)/ftp requests</p> </li> <li> <p>aui::network</p> <p>TCP/UDP networking library</p> </li> <li> <p>aui::json</p> <p>JSON parser</p> </li> <li> <p>aui::xml</p> <p>XML parser</p> </li> <li> <p>aui::uitests</p> <p>UI testing</p> </li> <li> <p>aui::audio</p> <p>Audio recording and playback</p> </li> <li> <p>aui::updater</p> <p>Deliver updates on non-centralized distribution methods</p> </li> </ul>"},{"location":"7guis-cells/","title":"7GUIs Cells","text":"<p>Example's page</p> <p>This page describes an example listed in 7guis category.</p> <p>Spreadsheet processor (Excel).</p> <p></p> <p>Challenges: change propagation, widget customization, implementing a more authentic/involved GUI application.</p> <p>The task is to create a simple but usable spreadsheet application. The spreadsheet should be scrollable. The rows should be numbered from 0 to 99 and the columns from A to Z. Double-clicking a cell C lets the user change C\u2019s formula. After having finished editing the formula is parsed and evaluated and its updated value is shown in C. In addition, all cells which depend on C must be reevaluated. This process repeats until there are no more changes in the values of any cell ( change propagation). Note that one should not just recompute the value of every cell but only of those cells that depend on another cell\u2019s changed value. If there is an already provided spreadsheet widget it should not be used. Instead, another similar widget (like JTable in Swing) should be customized to become a reusable spreadsheet widget.</p> <p>Cells is a more authentic and involved task that tests if a particular approach also scales to a somewhat bigger application. The two primary GUI-related challenges are intelligent propagation of changes and widget customization. Admittedly, there is a substantial part that is not necessarily very GUI-related but that is just the nature of a more authentic challenge. A good solution\u2019s change propagation will not involve much effort and the customization of a widget should not prove too difficult. The domain-specific code is clearly separated from the GUI-specific code. The resulting spreadsheet widget is reusable.</p>"},{"location":"7guis-cells/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"7guis-cells/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.cells)\naui_link(aui.example.cells PRIVATE aui::views)\naui_enable_tests(aui.example.cells)\n</code></pre>"},{"location":"7guis-cells/#testsformulatestscpp","title":"tests/FormulaTests.cpp","text":"<pre><code>#include &lt;gtest/gtest.h&gt;\n#include \"Formula.h\"\n#include \"Spreadsheet.h\"\n\nclass Cells_Formula: public testing::Test {\npublic:\n\nprotected:\n    Spreadsheet mSpreadsheet{glm::uvec2(100)};\n};\n\nTEST_F(Cells_Formula, Constant) {\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"0\")), 0.0);\n}\n\nTEST_F(Cells_Formula, String) {\n    EXPECT_EQ(std::get&lt;AString&gt;(formula::evaluate(mSpreadsheet, \"test\")), \"test\");\n}\n\nTEST_F(Cells_Formula, EConstant) {\n    EXPECT_DOUBLE_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=1\")), 1.0);\n}\n\nTEST_F(Cells_Formula, Math1) {\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=1+2\")), 3);\n}\n\nTEST_F(Cells_Formula, Math2) {\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=5/2\")), 2.5f);\n}\n\nTEST_F(Cells_Formula, Math3) {\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=(2+3)*4\")), 20);\n}\n\nTEST_F(Cells_Formula, Math4) {\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=4*(2+3)\")), 20);\n}\n\nTEST_F(Cells_Formula, Math5) {\n    mSpreadsheet[{0, 0}].expression = \"1\";\n    mSpreadsheet[{1, 0}].expression = \"2\";\n    mSpreadsheet[{2, 0}].expression = \"3\";\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=A0+B0*C0\")), 7);\n}\n\nTEST_F(Cells_Formula, Math6) {\n    mSpreadsheet[{0, 0}].expression = \"1\";\n    mSpreadsheet[{1, 0}].expression = \"2\";\n    mSpreadsheet[{2, 0}].expression = \"3\";\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=(A0+B0)*C0\")), 9);\n}\n\nTEST_F(Cells_Formula, FSum1) {\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=SUM(1;2)\")), 3);\n}\n\nTEST_F(Cells_Formula, FSum2) {\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=SUM(1;2;3)\")), 6);\n}\n\nTEST_F(Cells_Formula, CellRef) {\n    mSpreadsheet[{0, 0}].expression = \"228\";\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=A0\")), 228);\n\n    mSpreadsheet[{0, 0}].expression = \"229\";\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=A0\")), 229);\n}\n\nTEST_F(Cells_Formula, ChangePropagation) {\n    mSpreadsheet[{1, 0}].expression = \"=A0+1\";\n\n    mSpreadsheet[{0, 0}].expression = \"228\";\n    EXPECT_EQ(std::get&lt;double&gt;(mSpreadsheet[{1, 0}].value.value()), 229);\n\n    mSpreadsheet[{0, 0}].expression = \"0\";\n    EXPECT_EQ(std::get&lt;double&gt;(mSpreadsheet[{1, 0}].value.value()), 1);\n}\n\nTEST_F(Cells_Formula, Range1) {\n    mSpreadsheet[{0, 0}].expression = \"1\";\n    mSpreadsheet[{0, 1}].expression = \"2\";\n    mSpreadsheet[{0, 2}].expression = \"3\";\n    mSpreadsheet[{1, 0}].expression = \"3\";\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=SUM(A:A)\")), 6);\n}\n\nTEST_F(Cells_Formula, Range2) {\n    mSpreadsheet[{0, 0}].expression = \"1\";\n    mSpreadsheet[{0, 1}].expression = \"2\";\n    mSpreadsheet[{0, 2}].expression = \"3\";\n    mSpreadsheet[{1, 0}].expression = \"4\";\n    mSpreadsheet[{1, 1}].expression = \"5\";\n    mSpreadsheet[{1, 2}].expression = \"6\";\n    mSpreadsheet[{2, 0}].expression = \"7\";\n    mSpreadsheet[{2, 1}].expression = \"8\";\n    mSpreadsheet[{2, 2}].expression = \"9\";\n    // 1 4 7\n    // 2 5 8\n    // 3 6 9\n    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=SUM(A0:B1)\")), 12);\n}\n\n\nTEST_F(Cells_Formula, EvaluationLoop) {\n    mSpreadsheet[{ 0, 0 }].expression = \"=A1\";\n    mSpreadsheet[{ 0, 1 }].expression = \"=A0\";\n    EXPECT_EQ(std::get&lt;AString&gt;(*mSpreadsheet[{ 0, 1 }].value), \"#LOOP!\");\n}\n</code></pre>"},{"location":"7guis-cells/#srcformulacpp","title":"src/Formula.cpp","text":"<pre><code>// Created by alex2772 on 3/7/25.\n//\n\n#include \"Formula.h\"\n#include \"AUI/Common/AVector.h\"\n#include \"AUI/Util/ATokenizer.h\"\n#include \"Tokens.h\"\n#include \"AUI/Logging/ALogger.h\"\n#include \"AST.h\"\n#include \"AUI/Util/AEvaluationLoopException.h\"\n\nformula::Value formula::evaluate(const Spreadsheet&amp; spreadsheet, const AString&amp; expression) {\n    return precompile(expression)(spreadsheet);\n}\n\nformula::Precompiled formula::precompile(const AString&amp; expression) {\n    if (expression.empty()) {\n        return [](const Spreadsheet&amp;) { return std::nullopt; };\n    }\n    if (auto d = expression.toDouble()) {\n        return [d = *d](const Spreadsheet&amp;) { return d; };\n    }\n    if (!expression.startsWith('=')) {\n        return [stringConstant = expression](const Spreadsheet&amp;) { return stringConstant; };\n    }\n    try {\n        auto tokens = token::parse(ATokenizer(expression));\n        auto p = ast::parseExpression(tokens);\n\n        return [p = std::shared_ptr(std::move(p))](const Spreadsheet&amp; ctx) -&gt; formula::Value {\n            try {\n                return p-&gt;evaluate(ctx);\n            } catch (const AEvaluationLoopException&amp; e) {\n                return \"#LOOP!\";\n            } catch (const AException&amp; e) {\n                return \"#{}!\"_format(e.getMessage());\n            }\n        };\n    } catch (const AException&amp; e) {\n        ALogger::err(\"Formula\") &lt;&lt; \"Can't parse expression \" &lt;&lt; expression &lt;&lt; \"\\n\" &lt;&lt; e;\n        return [msg = e.getMessage()](const Spreadsheet&amp;) { return \"#{}!\"_format(msg); };\n    }\n}\n</code></pre>"},{"location":"7guis-cells/#srcfunctionsh","title":"src/Functions.h","text":"<pre><code>#pragma once\n\n#include \"Spreadsheet.h\"\n#include &lt;AUI/Common/AMap.h&gt;\n\nnamespace functions {\nstruct Ctx {\n    const Spreadsheet&amp; spreadsheet;\n    AVector&lt;formula::Value&gt; args;\n};\nusing Invocable = std::function&lt;formula::Value(Ctx ctx)&gt;;\n\nconst AMap&lt;AString, Invocable&gt;&amp; predefined();\n}\n</code></pre>"},{"location":"7guis-cells/#srcasth","title":"src/AST.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Common/AObject.h&gt;\n#include \"Tokens.h\"\n#include \"Formula.h\"\n\nnamespace ast {\n\nclass INodeVisitor {\npublic:\n    virtual ~INodeVisitor() = default;\n\n};\n\nclass INode {\npublic:\n    INode() = default;\n    virtual ~INode() = default;\n\n    virtual formula::Value evaluate(const Spreadsheet&amp; ctx) = 0;\n};\n\n_unique&lt;INode&gt; parseExpression(std::span&lt;token::Any&gt; tokens);\n\n}\n</code></pre>"},{"location":"7guis-cells/#srcfunctionscpp","title":"src/Functions.cpp","text":"<pre><code>// Created by alex2772 on 3/7/25.\n//\n\n#include &lt;range/v3/all.hpp&gt;\n#include \"Functions.h\"\n\nnamespace {\ntemplate&lt;aui::invocable&lt;formula::Value&gt; Callback&gt;\nvoid forEachArgAndRangeCell(const functions::Ctx&amp; ctx, Callback&amp;&amp; callback) {\n    for (const auto&amp; arg : ctx.args) {\n        if (auto rng = std::get_if&lt;formula::Range&gt;(&amp;arg)) {\n            for (const auto&amp; cell : ctx.spreadsheet[*rng]) {\n                callback(cell.value);\n            }\n            continue;\n        }\n        callback(arg);\n    }\n}\n}\n\nconst AMap&lt;AString, functions::Invocable&gt;&amp; functions::predefined() {\n    static AMap&lt;AString, functions::Invocable&gt; out = {\n        { \"SUM\",\n          [](Ctx ctx) {\n              double accumulator = 0.0;\n              forEachArgAndRangeCell(ctx, [&amp;](const formula::Value&amp; v) {\n                  if (auto d = std::get_if&lt;double&gt;(&amp;v)) {\n                      accumulator += *d;\n                  }\n              });\n              return accumulator;\n          } },\n        { \"COUNT\",\n            [](Ctx ctx) {\n              int accumulator  = 0;\n              forEachArgAndRangeCell(ctx, [&amp;](const formula::Value&amp; v) {\n                if (std::holds_alternative&lt;std::nullopt_t&gt;(v)) {\n                    return;\n                }\n                accumulator++;\n              });\n              return double(accumulator);\n            } },\n        { \"IF\",\n            [](Ctx ctx) {\n              if (ctx.args.size() != 3) {\n                  throw AException(\"ARG\");\n              }\n              auto condition = std::get_if&lt;double&gt;(&amp;ctx.args[0]);\n              if (condition == nullptr) {\n                  throw AException(\"ARG0\");\n              }\n              if (*condition == 0.0) {\n                  return ctx.args[2];\n              }\n              return ctx.args[1];\n            } },\n    };\n    return out;\n}\n</code></pre>"},{"location":"7guis-cells/#srctokensh","title":"src/Tokens.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Common/AObject.h&gt;\n#include \"AUI/Util/ATokenizer.h\"\n\nnamespace token {\nstruct Identifier {\n    AString name;\n};\nstruct Double {\n    double value;\n};\nstruct Semicolon {};   // ;\nstruct LPar {};        // (\nstruct RPar {};        // )\nstruct Colon {};       // :\nstruct Plus {};        // +\nstruct Minus {};       // -\nstruct Asterisk {};    // *\nstruct Slash {};       // /\nstruct LAngle {};      // &lt;\nstruct RAngle {};      // &gt;\nstruct StringLiteral {\n    AString value;\n};\n\nusing Any = std::variant&lt;Identifier, Double, Semicolon, LPar, RPar, Colon, Plus, Minus, Asterisk, Slash, LAngle, RAngle, StringLiteral&gt;;\n\nAVector&lt;token::Any&gt; parse(aui::no_escape&lt;ATokenizer&gt; t);\n\n}   // namespace token\n</code></pre>"},{"location":"7guis-cells/#srccellcpp","title":"src/Cell.cpp","text":"<pre><code>#include \"Cell.h\"\n\nAString Cell::columnName(unsigned int index) {\n    return AString(U'A') + index;\n}\nAString Cell::rowName(unsigned int index) {\n    return AString::number(index);\n}\n\nformula::Value Cell::evaluate() {\n    return formula::evaluate(*spreadsheet, expression);\n}\n\nglm::uvec2 Cell::fromName(const AString&amp; name) {\n    glm::uvec2 out{UNDEFINED};\n    auto it = name.begin();\n    for (;it != name.end() &amp;&amp; 'A' &lt;= *it &amp;&amp; *it &lt;= 'Z'; ++it) {\n        if (out.x == UNDEFINED) { out.x = 0; }\n        out.x *= 26;\n        out.x += *it - 'A';\n    }\n    for (;it != name.end() &amp;&amp; '0' &lt;= *it &amp;&amp; *it &lt;= '9'; ++it) {\n        if (out.y == UNDEFINED) { out.y = 0; }\n        out.y *= 10;\n        out.y += *it - '0';\n    }\n\n    return out;\n}\n\nformula::Precompiled Cell::precompile() {\n    return formula::precompile(expression);\n}\n</code></pre>"},{"location":"7guis-cells/#srccellh","title":"src/Cell.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Common/AString.h&gt;\n#include &lt;AUI/Common/AProperty.h&gt;\n#include \"Formula.h\"\n\nclass Spreadsheet;\n\nstruct Cell {\nprivate:\n    formula::Precompiled precompile();\n    APropertyPrecomputed&lt;formula::Precompiled&gt; expressionPrecompiled = [&amp;] { return precompile(); };\n    formula::Value evaluate();\n\npublic:\n    Spreadsheet* spreadsheet = nullptr;\n    AProperty&lt;AString&gt; expression;\n    APropertyPrecomputed&lt;formula::Value&gt; value = [&amp;] { return (*expressionPrecompiled)(*spreadsheet); };\n\n    static AString columnName(unsigned index);\n    static AString rowName(unsigned index);\n\n    static constexpr auto UNDEFINED = std::numeric_limits&lt;unsigned&gt;::max();\n\n    static glm::uvec2 fromName(const AString&amp; name);\n};\n</code></pre>"},{"location":"7guis-cells/#srcspreadsheeth","title":"src/Spreadsheet.h","text":"<pre><code>#pragma once\n\n#include \"Cell.h\"\n#include \"AUI/Common/AVector.h\"\n#include \"AUI/Common/AException.h\"\n\nclass Spreadsheet {\npublic:\n    explicit Spreadsheet(glm::uvec2 size) : mSize(size) {\n        mCells.resize(size.x * size.y);\n        for (auto&amp; v : mCells) {\n            v = std::make_unique&lt;Cell&gt;();\n            v-&gt;spreadsheet = this;\n        }\n    }\n\n    Cell&amp; operator[](glm::uvec2 pos) { return *mCells[pos.y * mSize.x + pos.x]; }\n\n    const Cell&amp; operator[](glm::uvec2 pos) const {\n        if (glm::any(glm::greaterThanEqual(pos, mSize))) {\n            throw AException(\"OUTOFBOUNDS\");\n        }\n        return *mCells[pos.y * mSize.x + pos.x];\n    }\n\n    auto operator[](formula::Range range) const {\n        if (range.from.x == Cell::UNDEFINED) {\n            range.from.x = 0;\n            if (range.to.x != Cell::UNDEFINED) {\n                throw AException(\"BADRANGE\");\n            }\n            range.to.x = mSize.x - 1;\n        }\n        if (range.from.y == Cell::UNDEFINED) {\n            range.from.y = 0;\n            if (range.to.y != Cell::UNDEFINED) {\n                throw AException(\"BADRANGE\");\n            }\n            range.to.y = mSize.y - 1;\n        }\n        if (range.to.x == Cell::UNDEFINED || range.to.y == Cell::UNDEFINED) {\n            throw AException(\"BADRANGE\");\n        }\n        range = { .from = glm::min(range.from, range.to), .to = glm::max(range.from, range.to) };\n\n        struct RangeIterator {\n            const Spreadsheet* spreadsheet;\n            formula::Range range;\n            glm::uvec2 current;\n\n            RangeIterator operator++() {\n                current.x += 1;\n                if (current.x &lt;= range.to.x) {\n                    return *this;\n                }\n                current.x = range.from.x;\n                current.y += 1;\n                if (current.y &lt;= range.to.y) {\n                    return *this;\n                }\n                current = { Cell::UNDEFINED, Cell::UNDEFINED };\n                return *this;\n            }\n\n            const Cell&amp; operator*() const {\n                return (*spreadsheet)[current];\n            }\n\n            bool operator==(const RangeIterator&amp;) const = default;\n            bool operator!=(const RangeIterator&amp;) const = default;\n        };\n        return aui::range(\n            RangeIterator { .spreadsheet = this, .range = range, .current = range.from },\n            RangeIterator { .spreadsheet = this, .range = range, .current = { Cell::UNDEFINED, Cell::UNDEFINED } });\n    }\n\n    glm::uvec2 size() const { return mSize; }\n\nprivate:\n    glm::uvec2 mSize;\n    AVector&lt;_unique&lt;Cell&gt;&gt; mCells;\n};\n</code></pre>"},{"location":"7guis-cells/#srcastcpp","title":"src/AST.cpp","text":"<pre><code>#include &lt;range/v3/all.hpp&gt;\n#include \"AST.h\"\n#include \"AUI/Traits/variant.h\"\n#include \"Functions.h\"\n#include &lt;AUI/Common/AMap.h&gt;\n\nusing namespace ast;\n\nnamespace {\n\ntemplate &lt;typename type&gt;\nconstexpr size_t got = aui::variant::index_of&lt;token::Any, type&gt;::value;\n\ntemplate &lt;typename T, typename Variant&gt;\nconst T&amp; expect(const Variant&amp; variant) {\n    if (std::holds_alternative&lt;T&gt;(variant)) {\n        return std::get&lt;T&gt;(variant);\n    }\n    throw AException(\"VALUE {}\"_format(AClass&lt;T&gt;::name()).uppercase());\n}\n\nstruct BinaryOperatorNode : public INode {\n    _unique&lt;INode&gt; left;\n    _unique&lt;INode&gt; right;\n};\n\ntemplate &lt;typename F&gt;\nstruct BinaryOperatorNodeImpl : BinaryOperatorNode {\n    virtual ~BinaryOperatorNodeImpl() = default;\n\n    formula::Value evaluate(const Spreadsheet&amp; ctx) override {\n        return double(F {}(expect&lt;double&gt;(left-&gt;evaluate(ctx)), expect&lt;double&gt;(right-&gt;evaluate(ctx))));\n    }\n};\n\nstruct DoubleNode : INode {\n    double value;\n    explicit DoubleNode(double value) : value(value) {}\n    ~DoubleNode() override = default;\n\n    formula::Value evaluate(const Spreadsheet&amp; ctx) override { return value; }\n};\n\nstruct StringLiteralNode : INode {\n    AString value;\n    explicit StringLiteralNode(AString value) : value(std::move(value)) {}\n    ~StringLiteralNode() override = default;\n\n    formula::Value evaluate(const Spreadsheet&amp; ctx) override { return value; }\n};\n\nstruct RangeNode : INode {\n    formula::Range range;\n    explicit RangeNode(const formula::Range&amp; range) : range(range) {}\n\n    ~RangeNode() override = default;\n\n    formula::Value evaluate(const Spreadsheet&amp; ctx) override { return range; }\n};\n\nstruct IdentifierNode : INode {\n    AString name;\n    explicit IdentifierNode(AString name) : name(std::move(name)) {}\n    ~IdentifierNode() = default;\n    formula::Value evaluate(const Spreadsheet&amp; ctx) override {\n        auto result = *ctx[Cell::fromName(name)].value;\n        if (std::holds_alternative&lt;std::nullopt_t&gt;(result)) {\n            return 0.0;\n        }\n        return result;\n    }\n};\n\nclass AstState {\npublic:\n    explicit AstState(std::span&lt;token::Any&gt; tokens) : mTokens(tokens) {}\n\n    _unique&lt;INode&gt; parseExpression() {\n        _unique&lt;INode&gt; temporaryValue;   // storage for temporary non-binary nodes such ast constants, function calls,\n                                         // etc\n\n        struct BinaryOperatorAndItsPriority {\n            BinaryOperatorNode* op;\n            int priority = -1;\n            _unique&lt;BinaryOperatorNode&gt; owning;\n        };\n\n        AVector&lt;BinaryOperatorAndItsPriority&gt; binaryOperators;\n\n        auto putValue = [&amp;](_unique&lt;INode&gt; node) {\n            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n            temporaryValue = std::move(node);\n        };\n\n        auto takeValue = [&amp;] {\n            if (!temporaryValue) {\n                throw AException {};\n            }\n            auto v = std::move(temporaryValue);\n            temporaryValue = nullptr;   // to be sure\n            return v;\n        };\n\n        enum class Priority {\n            // to do last\n            ASSIGNMENT,\n            COMPARISON,\n            BINARY_SHIFT,\n            PLUS_MINUS,\n            ASTERISK_SLASH,\n            ARRAY_ACCESS,\n            MEMBER_ACCESS,\n            // to do first\n        };\n\n        auto handleBinaryOperator = [&amp;]&lt;aui::derived_from&lt;BinaryOperatorNode&gt; T&gt;(Priority p) {\n            mIterator++;\n            const int currentPriority = int(p);\n\n            if (temporaryValue) {\n                auto out = std::make_unique&lt;T&gt;();\n                out-&gt;left = std::move(temporaryValue);\n                binaryOperators &lt;&lt; BinaryOperatorAndItsPriority {\n                    .op = out.get(),\n                    .priority = currentPriority,\n                    .owning = std::move(out),\n                };\n                AUI_ASSERT(temporaryValue == nullptr);\n                return;\n            }\n\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.priority &lt; currentPriority &amp;&amp; o.op-&gt;right) {\n                    // steal rhs\n                    auto currentOperator = std::make_unique&lt;T&gt;();\n                    currentOperator-&gt;left = std::move(o.op-&gt;right);\n                    auto ptr = currentOperator.get();\n                    o.op-&gt;right = std::move(currentOperator);\n                    binaryOperators &lt;&lt; BinaryOperatorAndItsPriority {\n                        .op = ptr,\n                        .priority = currentPriority,\n                    };\n                    return;\n                }\n            }\n            if (!binaryOperators.empty()) {\n                auto root = std::min_element(\n                    binaryOperators.begin(), binaryOperators.end(),\n                    [](const BinaryOperatorAndItsPriority&amp; lhs, const BinaryOperatorAndItsPriority&amp; rhs) {\n                        return lhs.priority &lt; rhs.priority;\n                    });\n                auto out = std::make_unique&lt;T&gt;();\n                AUI_ASSERT(root-&gt;owning != nullptr);\n                out-&gt;left = std::move(root-&gt;owning);\n                binaryOperators &lt;&lt; BinaryOperatorAndItsPriority {\n                    .op = out.get(),\n                    .priority = currentPriority,\n                    .owning = std::move(out),\n                };\n                AUI_ASSERT(temporaryValue == nullptr);\n                return;\n            }\n\n            throw AException {};\n        };\n\n        auto handleUnaryOperator = [&amp;]&lt;aui::derived_from&lt;INode&gt; T&gt;() {\n\n        };\n\n        for (; mIterator != mTokens.end();) {\n            const auto&amp; currentTokenValue = currentToken();\n            switch (currentTokenValue.index()) {\n                case got&lt;token::Identifier&gt;: {\n                    if (auto it = std::next(mIterator);\n                        it != mTokens.end()) {\n                        switch (it-&gt;index()) {\n                            case got&lt;token::LPar&gt;:\n                                putValue(parseFunctionCall());\n                                continue;\n                            case got&lt;token::Colon&gt;:\n                                putValue(parseRange());\n                                continue;\n                            default:\n                                break;\n                        }\n                    }\n                    putValue(parseIdentifier());\n                    mIterator++;\n                    break;\n                }\n\n                case got&lt;token::Plus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::plus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n                    break;\n                }\n\n                case got&lt;token::Minus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::minus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n                    break;\n                }\n\n                case got&lt;token::Asterisk&gt;: {   // pointer dereference or multiply\n                    handleBinaryOperator.\n                    operator()&lt;BinaryOperatorNodeImpl&lt;std::multiplies&lt;&gt;&gt;&gt;(Priority::ASTERISK_SLASH);\n                    break;\n                }\n\n                case got&lt;token::Slash&gt;: {   // divide\n                    handleBinaryOperator.\n                    operator()&lt;BinaryOperatorNodeImpl&lt;std::divides&lt;&gt;&gt;&gt;(Priority::ASTERISK_SLASH);\n                    break;\n                }\n\n                case got&lt;token::LAngle&gt;: {\n                    handleBinaryOperator.\n                        operator()&lt;BinaryOperatorNodeImpl&lt;std::less&lt;&gt;&gt;&gt;(Priority::COMPARISON);\n                    break;\n                }\n\n                case got&lt;token::RAngle&gt;: {\n                    handleBinaryOperator.\n                        operator()&lt;BinaryOperatorNodeImpl&lt;std::greater&lt;&gt;&gt;&gt;(Priority::COMPARISON);\n                    break;\n                }\n\n                case got&lt;token::Double&gt;: {\n                    putValue(parseDouble());\n                    ++mIterator;\n                    break;\n                }\n\n                case got&lt;token::StringLiteral&gt;: {\n                    putValue(parseStringLiteral());\n                    ++mIterator;\n                    break;\n                }\n\n                case got&lt;token::LPar&gt;: {\n                    ++mIterator;\n                    putValue(parseExpression());\n                    expect&lt;token::RPar&gt;();\n                    ++mIterator;\n                    break;\n                }\n\n                default:\n                    goto naxyi;\n            }\n        }\n    naxyi:\n        if (temporaryValue &amp;&amp; !binaryOperators.empty()) {\n            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n        if (!binaryOperators.empty()) {\n            auto e = ranges::min_element(binaryOperators, [](const auto&amp; l, const auto&amp; r) {\n                return l.priority &lt;= r.priority;\n            });\n            AUI_ASSERT(e-&gt;owning != nullptr);\n            return std::move(e-&gt;owning);\n        }\n        if (temporaryValue) {\n            return temporaryValue;\n        }\n        throw AException {};\n    }\n\nprivate:\n    std::span&lt;token::Any&gt; mTokens;\n    std::span&lt;token::Any&gt;::iterator mIterator = mTokens.begin();\n\n    const token::Any&amp; currentToken() { return *safeIteratorRead(mIterator); }\n\n    std::span&lt;token::Any&gt;::iterator safeIteratorRead(std::span&lt;token::Any&gt;::iterator it) {\n        if (it == mTokens.end()) {\n            throw AException(\"END\");\n        }\n        return it;\n    }\n\n    template &lt;typename T&gt;\n    const T&amp; expect() {\n        return ::expect&lt;T&gt;(currentToken());\n    }\n\n    _unique&lt;INode&gt; parseFunctionCall() {\n        struct FunctionCall : INode {\n            functions::Invocable function;\n            AVector&lt;_unique&lt;INode&gt;&gt; args;\n\n            ~FunctionCall() override = default;\n            formula::Value evaluate(const Spreadsheet&amp; ctx) override {\n                return function(functions::Ctx {\n                  .spreadsheet = ctx,\n                  .args = AVector(\n                      args | ranges::view::transform([&amp;](const _unique&lt;INode&gt;&amp; node) { return node-&gt;evaluate(ctx); }) |\n                      ranges::to_vector),\n                });\n            }\n        };\n        auto out = std::make_unique&lt;FunctionCall&gt;();\n        out-&gt;function = functions::predefined().at(expect&lt;token::Identifier&gt;().name.uppercase());\n        mIterator++;\n        expect&lt;token::LPar&gt;();\n        mIterator++;\n\n        for (;;) {\n            switch (auto it = safeIteratorRead(mIterator); it-&gt;index()) {\n                case got&lt;token::RPar&gt;:\n                    ++mIterator;\n                    return out;\n                case got&lt;token::Semicolon&gt;:\n                    ++mIterator;\n                    break;\n                default:\n                    out-&gt;args &lt;&lt; parseExpression();\n            }\n        }\n\n        return out;\n    }\n\n    _unique&lt;INode&gt; parseIdentifier() { return std::make_unique&lt;IdentifierNode&gt;(expect&lt;token::Identifier&gt;().name); }\n\n    _unique&lt;INode&gt; parseDouble() { return std::make_unique&lt;DoubleNode&gt;(expect&lt;token::Double&gt;().value); }\n    _unique&lt;INode&gt; parseStringLiteral() { return std::make_unique&lt;StringLiteralNode&gt;(expect&lt;token::StringLiteral&gt;().value); }\n\n    _unique&lt;INode&gt; parseRange() {\n        formula::Range rng;\n        rng.from = Cell::fromName(expect&lt;token::Identifier&gt;().name);\n        mIterator++;\n        expect&lt;token::Colon&gt;();\n        mIterator++;\n        rng.to = Cell::fromName(expect&lt;token::Identifier&gt;().name);\n        mIterator++;\n        return std::make_unique&lt;RangeNode&gt;(rng);\n    }\n};\n\n}   // namespace\n\n_unique&lt;INode&gt; ast::parseExpression(std::span&lt;token::Any&gt; tokens) { return AstState { tokens }.parseExpression(); }\n</code></pre>"},{"location":"7guis-cells/#srcformulah","title":"src/Formula.h","text":"<pre><code>#pragma once\n\n\n#include &lt;AUI/Common/AString.h&gt;\n\nclass Spreadsheet;\n\nnamespace formula {\n    struct Range {\n        glm::uvec2 from{}, to{};\n\n        bool operator==(const Range&amp;) const = default;\n        bool operator!=(const Range&amp;) const = default;\n    };\n\n    using Value = std::variant&lt;std::nullopt_t, double, AString, Range&gt;;\n    using Precompiled = std::function&lt;formula::Value(const Spreadsheet&amp; spreadsheet)&gt;;\n    formula::Value evaluate(const Spreadsheet&amp; spreadsheet, const AString&amp; expression);\n    Precompiled precompile(const AString&amp; expression);\n}\n</code></pre>"},{"location":"7guis-cells/#srctokenscpp","title":"src/Tokens.cpp","text":"<pre><code>#include \"Tokens.h\"\n\nAVector&lt;token::Any&gt; token::parse(aui::no_escape&lt;ATokenizer&gt; t) {\n    AVector&lt;token::Any&gt; out;\n    t-&gt;readChar();   // =\n    try {\n        while (!t-&gt;isEof()) {\n            switch (char c = t-&gt;readChar()) {\n                case ' ':\n                    break;\n                case '(':\n                    out &lt;&lt; token::LPar {};\n                    break;\n                case ')':\n                    out &lt;&lt; token::RPar {};\n                    break;\n                case ';':\n                    out &lt;&lt; token::Semicolon {};\n                    break;\n                case ':':\n                    out &lt;&lt; token::Colon {};\n                    break;\n                case '+':\n                    out &lt;&lt; token::Plus {};\n                    break;\n                case '-':\n                    out &lt;&lt; token::Minus {};\n                    break;\n                case '*':\n                    out &lt;&lt; token::Asterisk {};\n                    break;\n                case '/':\n                    out &lt;&lt; token::Slash {};\n                    break;\n                case '&lt;':\n                    out &lt;&lt; token::LAngle {};\n                    break;\n                case '&gt;':\n                    out &lt;&lt; token::RAngle {};\n                    break;\n                case '\\'':\n                    out &lt;&lt; token::StringLiteral { t-&gt;readStringUntilUnescaped('\\'') };\n                    break;\n                case '\"':\n                    out &lt;&lt; token::StringLiteral { t-&gt;readStringUntilUnescaped('\"') };\n                    break;\n                default:\n                    if ('0' &lt;= c &amp;&amp; c &lt;= '9') {\n                        t-&gt;reverseByte();\n                        out &lt;&lt; token::Double { t-&gt;readFloat() };\n                        continue;\n                    }\n                    if ('a' &lt;= c &amp;&amp; c &lt;= 'z' || 'A' &lt;= c &amp;&amp; c &lt;= 'Z') {\n                        t-&gt;reverseByte();\n                        out &lt;&lt; token::Identifier { t-&gt;readStringWhile([](char c) -&gt; bool { return std::isalnum(c); }) };\n                        continue;\n                    }\n                    throw AException(\"UNEXPECTED {}\"_format(c));\n            }\n        }\n    } catch (const AEOFException&amp;) {}\n    return out;\n}\n</code></pre>"},{"location":"7guis-cells/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include \"AUI/View/ATextField.h\"\n#include \"AUI/View/AScrollArea.h\"\n#include \"AUI/View/AGridSplitter.h\"\n#include \"Spreadsheet.h\"\n\nusing namespace declarative;\nusing namespace ass;\n\nstruct State {\n    Spreadsheet spreadsheet{glm::uvec2 { 'Z' - 'A' + 1, 100 }};\n    AProperty&lt;AString&gt; currentExpression;\n};\n\nstatic _&lt;AView&gt; labelTitle(AString s) {\n    return _new&lt;ALabel&gt;(std::move(s)) AUI_WITH_STYLE {\n        Opacity { 0.5f },\n        ATextAlign::CENTER,\n    };\n}\n\nclass CellView : public AViewContainer {\npublic:\n    CellView(_&lt;State&gt; state, Cell&amp; cell) : mState(std::move(state)), mCell(cell) { inflateLabel(); }\n    int getContentMinimumWidth() override { return 0; }\n    int getContentMinimumHeight() override { return 0; }\n\nprivate:\n    _&lt;State&gt; mState;\n    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n                      [](double v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) } AUI_WITH_STYLE { ATextAlign::RIGHT }; },\n                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n        ALayoutInflater::inflate(\n            this,\n            _new&lt;ATextField&gt;() AUI_WITH_STYLE {\n                  MinSize { 0 },\n                  Margin { 0 },\n                  BorderRadius { 0 },\n                } AUI_LET {\n                    it &amp;&amp; mState-&gt;currentExpression;\n                    it-&gt;focus();\n                    connect(it-&gt;focusLost, me::commitExpression);\n                });\n    }\n\n    void commitExpression() {\n        mCell.expression = mState-&gt;currentExpression;\n        inflateLabel();\n    }\n};\n\nclass CellsView : public AViewContainer {\npublic:\n    CellsView(_&lt;State&gt; state) : mState(std::move(state)) {\n        ALayoutInflater::inflate(\n            this,\n            AGridSplitter::Builder()\n                    .noDefaultSpacers()\n                    .withItems([&amp;] {\n                        AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt; views;\n                        views.resize(mState-&gt;spreadsheet.size().y + 1);\n                        for (auto&amp; c : views) {\n                            c.resize(mState-&gt;spreadsheet.size().x + 1);\n                        }\n\n                        views[0][0] = _new&lt;AView&gt;();   // blank\n                        for (unsigned i = 0; i &lt; mState-&gt;spreadsheet.size().x; ++i) {\n                            views[0][i + 1] = Centered{ labelTitle(Cell::columnName(i)) } AUI_WITH_STYLE { Expanding(1, 0) };\n                        }\n                        for (unsigned row = 0; row &lt; mState-&gt;spreadsheet.size().y; ++row) {\n                            views[row + 1][0] = labelTitle(\"{}\"_format(Cell::rowName(row)));\n                            for (unsigned column = 0; column &lt; mState-&gt;spreadsheet.size().x; ++column) {\n                                views[row + 1][column + 1] = _new&lt;CellView&gt;(mState, mState-&gt;spreadsheet[{ column, row }]) AUI_WITH_STYLE {\n                                    BackgroundSolid { AColor::WHITE },\n                                    MinSize { {}, 20_dp },\n                                };\n                            }\n                        }\n                        return views;\n                    }())\n                    .build() AUI_WITH_STYLE { Expanding(), LayoutSpacing { 1_dp }, MinSize { 80_dp * float(mState-&gt;spreadsheet.size().x), {} } });\n    }\n\nprivate:\n    _&lt;State&gt; mState;\n};\n\nclass CellsWindow : public AWindow {\npublic:\n    CellsWindow() : AWindow(\"AUI - 7GUIs - Cells\", 500_dp, 400_dp) {\n        setContents(Centered {\n          AScrollArea::Builder()\n                  .withContents(Horizontal { _new&lt;CellsView&gt;(_new&lt;State&gt;()) })\n                  .build() AUI_WITH_STYLE {\n                Expanding(),\n                ScrollbarAppearance(ScrollbarAppearance::ALWAYS, ScrollbarAppearance::ALWAYS),\n              },\n        } AUI_WITH_STYLE { Padding(0) });\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;CellsWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"7guis-circle-drawer/","title":"7GUIs Circle Drawer","text":"<p>Example's page</p> <p>This page describes an example listed in 7guis category.</p> <p>Undo, redo, dialog control.</p> <p></p> <p>Challenges: undo/redo, custom drawing, dialog control.</p> <p>The task is to build a frame containing an undo and redo button as well as a canvas area underneath. Left-clicking inside an empty area inside the canvas will create an unfilled circle with a fixed diameter whose center is the left-clicked point. The circle nearest to the mouse pointer such that the distance from its center to the pointer is less than its radius, if it exists, is filled with the color gray. The gray circle is the selected circle C. Right-clicking C will make a popup menu appear with one entry \u201cAdjust diameter..\u201d. Clicking on this entry will open another frame with a slider inside that adjusts the diameter of C. Changes are applied immediately. Closing this frame will mark the last diameter as significant for the undo/redo history. Clicking undo will undo the last significant change (i.e. circle creation or diameter adjustment). Clicking redo will reapply the last undoed change unless new changes were made by the user in the meantime.</p> <p>Circle Drawer\u2019s goal is, among other things, to test how good the common challenge of implementing an undo/redo functionality for a GUI application can be solved. In an ideal solution the undo/redo functionality comes for free resp. just comes out as a natural consequence of the language / toolkit / paradigm. Moreover, Circle Drawer tests how dialog control, i.e. keeping the relevant context between several successive GUI interaction steps, is achieved in the source code. Last but not least, the ease of custom drawing is tested.</p>"},{"location":"7guis-circle-drawer/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"7guis-circle-drawer/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.circle_drawer)\naui_link(aui.example.circle_drawer PRIVATE aui::views)\n</code></pre>"},{"location":"7guis-circle-drawer/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include \"AUI/View/AProgressBar.h\"\n#include \"AUI/View/ASlider.h\"\n#include \"AUI/View/AButton.h\"\n\nusing namespace declarative;\n\nstruct Circle {\n    glm::vec2 position;\n    float radius = 10_dp;\n};\n\nclass IAction {   // IAction: candidate to be committed to the framework\npublic:\n    virtual ~IAction() = default;\n    virtual void undo() = 0;\n    virtual void redo() = 0;\n};\n\nclass UndoStack {\npublic:\n    using Container = std::list&lt;_unique&lt;IAction&gt;&gt;;\n    using Iterator = Container::const_iterator;\nprivate:\n    Container mStack;\n\npublic:\n\n    void undo() {\n        if (nextAction == mStack.begin()) {\n            return;\n        }\n        nextAction = std::prev(*nextAction);\n        (**nextAction)-&gt;undo();\n    }\n\n    void redo() {\n        if (nextAction == mStack.end()) {\n            return;\n        }\n        (**nextAction)-&gt;redo();\n        nextAction = std::next(*nextAction);\n    }\n\n    void add(_unique&lt;IAction&gt; action) {\n        action-&gt;redo();\n        nextAction = std::next(mStack.insert(mStack.erase(*nextAction, mStack.end()), std::move(action)));\n        nextAction.notify();\n    }\n\n    Iterator begin() const {\n        return mStack.begin();\n    }\n\n    Iterator end() const {\n        return mStack.end();\n    }\n\n    AProperty&lt;Iterator&gt; nextAction = mStack.end();\n};\n\nstruct State {\n    AProperty&lt;std::list&lt;Circle&gt;&gt; circles;\n    UndoStack history;\n};\n\nstatic constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n\n        for (const auto&amp; circle : *mState-&gt;circles) {\n            if (&amp;circle == mHoveredCircle) {\n                ctx.render.roundedRectangle(\n                    ASolidBrush { AColor::GRAY }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n                    circle.radius);\n            }\n            ctx.render.roundedRectangleBorder(\n                ASolidBrush { AColor::BLACK }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n                circle.radius, 1);\n        }\n    }\n\n    void onPointerMove(glm::vec2 pos, const APointerMoveEvent&amp; event) override {\n        AView::onPointerMove(pos, event);\n        mHoveredCircle = [&amp;] {\n            Circle* result = nullptr;\n            float nearestDistanceToCursor = std::numeric_limits&lt;float&gt;::max();\n            for (auto&amp; circle : mState-&gt;circles.raw) {\n                float distanceToCursor = glm::distance2(circle.position, pos);\n                if (distanceToCursor &gt; nearestDistanceToCursor) {\n                    continue;\n                }\n                if (distanceToCursor &gt; circle.radius * circle.radius) {\n                    continue;\n                }\n                result = &amp;circle;\n                nearestDistanceToCursor = distanceToCursor;\n            }\n            return result;\n        }();\n    }\n\nprotected:\n    AMenuModel composeContextMenu() override {\n        auto circle = *mHoveredCircle;\n        if (circle == nullptr) {\n            return {};\n        }\n        return {\n            {},\n            {\n              .name = \"Adjust radius...\",\n              .onAction =\n                  [this, circle] {\n\n\n                      auto radiusPopup = _new&lt;AWindow&gt;(\n                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n                                connect(\n                                    it-&gt;valueChanging, [this, circle](aui::float_within_0_1 s) {\n                                        circle-&gt;radius = s * MAX_RADIUS;\n                                        mState-&gt;circles.notify();\n                                    });\n                            },\n                      });\n                      connect(radiusPopup-&gt;closed, [this, circle, oldRadius = circle-&gt;radius] {\n                          if (oldRadius == circle-&gt;radius) {\n                              return;\n                          }\n                          class ActionChangeRadius : public IAction {\n                          public:\n                              ActionChangeRadius(Circle* circle, float prevRadius, float newRadius)\n                                : mCircle(circle), mPrevRadius(prevRadius), mNewRadius(newRadius) {}\n\n                              ~ActionChangeRadius() override = default;\n\n                              void undo() override {\n                                  mCircle-&gt;radius = mPrevRadius;\n                              }\n\n                              void redo() override {\n                                  mCircle-&gt;radius = mNewRadius;\n                              }\n\n                          private:\n                              Circle* mCircle;\n                              float mPrevRadius;\n                              float mNewRadius;\n                          };\n                          mState-&gt;history.add(std::make_unique&lt;ActionChangeRadius&gt;(circle, oldRadius, circle-&gt;radius));\n                      });\n                      radiusPopup-&gt;show();\n                  },\n            },\n        };\n    }\n\npublic:\n    void onPointerReleased(const APointerReleasedEvent&amp; event) override {\n        AView::onPointerReleased(event);\n        if (event.asButton != AInput::LBUTTON) {\n            return;\n        }\n        class ActionAddCircle : public IAction {\n        public:\n            ActionAddCircle(_&lt;State&gt; state, Circle circle) : mState(std::move(state)), mCircle(std::move(circle)) {}\n            ~ActionAddCircle() override = default;\n            void undo() override {\n                mState-&gt;circles.writeScope()-&gt;pop_back();\n            }\n            void redo() override {\n                mState-&gt;circles.writeScope()-&gt;push_back(mCircle);\n            }\n\n        private:\n            _&lt;State&gt; mState;\n            Circle mCircle;\n        };\n        mState-&gt;history.add(std::make_unique&lt;ActionAddCircle&gt;(mState, Circle { .position = event.position }));\n    }\n\nprivate:\n    _&lt;State&gt; mState;\n    AProperty&lt;Circle*&gt; mHoveredCircle = nullptr;\n};\n\nclass CircleDrawerWindow : public AWindow {\npublic:\n    CircleDrawerWindow() : AWindow(\"AUI - 7GUIs - Circle Drawer\", 300_dp, 250_dp) {\n        setContents(Vertical {\n          Centered {\n            Horizontal {\n              Button { Label { \"Undo\" }, {me::undo} } AUI_LET {\n                  it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.begin(); }) &gt; &amp;AView::setEnabled;\n              },\n              Button { Label { \"Redo\" }, {me::redo} } AUI_LET {\n                it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.end(); }) &gt; &amp;AView::setEnabled;\n              },\n            },\n          },\n          _new&lt;CircleDrawArea&gt;(aui::ptr::fake_shared(&amp;mState)),\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp }});\n    }\n\nprivate:\n    State mState;\n\n    void undo() {\n        mState.history.undo();\n    }\n\n    void redo() {\n        mState.history.redo();\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;CircleDrawerWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"7guis-counter/","title":"7GUIs Counter","text":"<p>Example's page</p> <p>This page describes an example listed in 7guis category.</p> <p>Simple counter.</p> <p></p> <p>Challenge: Understanding the basic ideas of a language/toolkit.</p> <p>The task is to build a frame containing a label or read-only textfield T and a button B. Initially, the value in T is \u201c0\u201d and each click of B increases the value in T by one.</p> <p>Counter serves as a gentle introduction to the basics of the language, paradigm and toolkit for one of the simplest GUI applications imaginable. Thus, Counter reveals the required scaffolding and how the very basic features work together to build a GUI application. A good solution will have almost no scaffolding.</p> <pre><code>/*\n * AUI Framework - Declarative UI toolkit for modern C++20\n * Copyright (C) 2020-2025 Alex2772 and Contributors\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include \"AUI/View/ATextField.h\"\n\nusing namespace declarative;\n\n/// [counter]\nclass CounterWindow : public AWindow {\npublic:\n    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCounter;\n};\n/// [counter]\n\nAUI_ENTRY {\n    _new&lt;CounterWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"7guis-counter/#comparison-to-jetpack-compose","title":"Comparison to Jetpack Compose","text":"<p>Here's implementation of the same app with Jetpack Compose:</p> <pre><code>package ...\n\nimport ...\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            CounterTheme {\n                Counter()\n            }\n        }\n    }\n}\n\n@Composable\nfun Counter() {\n    var counter by remember { mutableIntStateOf(0) }\n    Row(\n        verticalAlignment = Alignment.CenterVertically,\n        modifier = Modifier.fillMaxSize(),\n        horizontalArrangement = Arrangement.SpaceAround\n    ) {\n        Text(text = \"Counter $counter\"),\n        Button(onClick = { counter++ }) {\n            Text(text = \"Click to increment\")\n        }\n    }\n}\n</code></pre> <p></p> AUI Kotlin State Inside class Local variable (<code>remember</code>) <code>Vertical</code> <code>Column</code> <code>Horizontal</code> <code>Row</code> Display <code>Label { AUI_REACT(\"{}\"_format(mCounter)) }</code> <code>Text(text = \"Counter $counter\")</code> Increment <code>Button { .content = Label { \"Count\" }, .onClick = [this] { mCounter += 1; } }</code> <code>Button(onClick = { counter++ })</code> <p>AUI tends to have longer expressions but does not differ that much. Jetpack Compose is an immediate mode UI, whereas AUI is a retained mode UI.</p>"},{"location":"7guis-counter/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"7guis-counter/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.counter)\naui_link(aui.example.counter PRIVATE aui::views)\n</code></pre>"},{"location":"7guis-counter/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include \"AUI/View/ATextField.h\"\n\nusing namespace declarative;\n\n/// [counter]\nclass CounterWindow : public AWindow {\npublic:\n    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCounter;\n};\n/// [counter]\n\nAUI_ENTRY {\n    _new&lt;CounterWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"7guis-crud/","title":"7GUIs CRUD","text":"<p>Example's page</p> <p>This page describes an example listed in 7guis category.</p> <p>Create/Read/Update/Delete example.</p> <p></p> <p>Challenges: separating the domain and presentation logic, managing mutation, building a non-trivial layout.</p> <p>The task is to build a frame containing the following elements: a textfield Tprefix, a pair of textfields Tname and Tsurname, a listbox L, buttons BC, BU and BD and the three labels as seen in the screenshot. L presents a view of the data in the database that consists of a list of names. At most one entry can be selected in L at a time. By entering a string into Tprefix the user can filter the names whose surname start with the entered prefix\u2014this should happen immediately without having to submit the prefix with enter. Clicking BC will append the resulting name from concatenating the strings in Tname and Tsurname to L. BU and BD are enabled iff an entry in L is selected. In contrast to BC, BU will not append the resulting name but instead replace the selected entry with the new name. BD will remove the selected entry. The layout is to be done like suggested in the screenshot. In particular, L must occupy all the remaining space.</p> <p>CRUD (Create, Read, Update and Delete) represents a typical graphical business application. The primary challenge is the separation of domain and presentation logic in the source code that is more or less forced on the implementer due to the ability to filter the view by a prefix. Traditionally, some form of MVC pattern is used to achieve the separation of domain and presentation logic. Also, the approach to managing the mutation of the list of names is tested. A good solution will have a good separation between the domain and presentation logic without much overhead (e.g. in the form of toolkit specific concepts or language/paradigm concepts), a mutation management that is fast but not error-prone and a natural representation of the layout (layout builders are allowed, of course, but would increase the overhead).</p>"},{"location":"7guis-crud/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"7guis-crud/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.crud)\naui_link(aui.example.crud PRIVATE aui::views)\n</code></pre>"},{"location":"7guis-crud/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;range/v3/all.hpp&gt;\n\n#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AForEachUI.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include \"AUI/View/ATextField.h\"\n#include \"AUI/View/AListView.h\"\n\nusing namespace declarative;\n\nstruct User {\n    AProperty&lt;AString&gt; name;\n    AProperty&lt;AString&gt; surname;\n    APropertyPrecomputed&lt;AString&gt; displayName = [this] { return \"{}, {}\"_format(name, surname); };\n};\n\nclass CRUDWindow: public AWindow {\npublic:\n    CRUDWindow(): AWindow(\"AUI - 7GUIs - CRUD\", 300_dp, 200_dp) {\n        setExtraStylesheet(AStylesheet {\n          {\n            c(\"selected\"),\n            BackgroundSolid { AColor::BLUE.transparentize(0.5f) },\n          }\n        });\n\n        auto FILTER_VIEW = ranges::views::filter([this](const _&lt;User&gt;&amp; user) {\n            return user-&gt;displayName-&gt;startsWith(*mFilterPrefix);\n        });\n\n        setContents(Vertical {\n          Horizontal::Expanding {\n            Vertical::Expanding {\n              Horizontal {\n                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n                    connect(view-&gt;clicked, [this, i] {\n                        mSelectedUser = i;\n                        mEditedUser.name = i-&gt;name;\n                        mEditedUser.surname = i-&gt;surname;\n                    });\n                    return view;\n                  }\n              ).build() AUI_WITH_STYLE { BackgroundSolid { AColor::WHITE } },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            Centered::Expanding {\n              _form({\n                { \"Name:\", _new&lt;ATextField&gt;() &amp;&amp; mEditedUser.name },\n                { \"Surname:\", _new&lt;ATextField&gt;() &amp;&amp; mEditedUser.surname },\n              }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n          Horizontal {\n            Button { Label { \"Create\" }, {me::createClicked} } &amp; mCreateEnabled &gt; &amp;AView::setEnabled,\n            Button { Label { \"Update\" }, {me::updateClicked} } &amp; mUpdateEnabled &gt; &amp;AView::setEnabled,\n            Button { Label { \"Delete\" }, {me::deleteClicked} } &amp; mDeleteEnabled &gt; &amp;AView::setEnabled,\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n    }\n\nprivate:\n    AProperty&lt;AVector&lt;_&lt;User&gt;&gt;&gt; mUsers;\n    User mEditedUser;\n    AProperty&lt;_&lt;User&gt;&gt; mSelectedUser;\n    AProperty&lt;AString&gt; mFilterPrefix;\n    APropertyPrecomputed&lt;bool&gt; mCreateEnabled = [this] { return !(mEditedUser.surname-&gt;empty() || mEditedUser.name-&gt;empty()); };\n    APropertyPrecomputed&lt;bool&gt; mDeleteEnabled = [this] { return mSelectedUser != nullptr; };\n    APropertyPrecomputed&lt;bool&gt; mUpdateEnabled = [this] { return mCreateEnabled &amp;&amp; mDeleteEnabled; };\n\n    void createClicked() {\n        mUsers.writeScope() &lt;&lt; aui::ptr::manage_shared(new User {\n          .name = std::exchange(mEditedUser.name, {}), .surname = std::exchange(mEditedUser.surname, {}) });\n    }\n\n    void updateClicked() {\n        (*mSelectedUser)-&gt;name = std::exchange(mEditedUser.name, {});\n        (*mSelectedUser)-&gt;surname = std::exchange(mEditedUser.surname, {});\n    }\n\n    void deleteClicked() {\n        mUsers.writeScope()-&gt;removeFirst(*mSelectedUser);\n        mSelectedUser = nullptr;\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;CRUDWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"7guis-flight-booker/","title":"7GUIs Flight Booker","text":"<p>Example's page</p> <p>This page describes an example listed in 7guis category.</p> <p>Flight Booker.</p> <p></p> <p>Challenge: Constraints.</p> <p>The task is to build a frame containing a combobox C with the two options \u201cone-way flight\u201d and \u201creturn flight\u201d, two textfields T1 and T2 representing the start and return date, respectively, and a button B for submitting the selected flight. T2 is enabled iff C\u2019s value is \u201creturn flight\u201d. When C has the value \u201creturn flight\u201d and T2\u2019s date is strictly before T1\u2019s then B is disabled. When a non-disabled textfield T has an ill-formatted date then T is colored red and B is disabled. When clicking B a message is displayed informing the user of his selection (e.g. \u201cYou have booked a one-way flight on 04.04.2014.\u201d). Initially, C has the value \u201cone-way flight\u201d and T1 as well as T2 have the same (arbitrary) date (it is implied that T2 is disabled).</p> <p>The focus of Flight Booker lies on modelling constraints between widgets on the one hand and modelling constraints within a widget on the other hand. Such constraints are very common in everyday interactions with GUI applications. A good solution for Flight Booker will make the constraints clear, succinct and explicit in the source code and not hidden behind a lot of scaffolding.</p>"},{"location":"7guis-flight-booker/#regex-library","title":"Regex Library","text":"<p>For validation in this example, we've chosen using regex technology, as it's fairly simple and extensible way to make parsers.</p> <p>Despite STL provides regex implementation, it varies from compiler to compiler, compiles the regex expression at runtime only, and some platforms may even lack builtin regex library. To avoid possible issues, custom implementation should be used.</p> <p>Although AUI does not provide a regex parser on its own, nothing stops you from using AUI.Boot in order to pull awesome 3rdparty implementation of your choice that suits your exact needs. For this example, we've chosen ctre, as it evaluates the regex expression at compile-time, emitting effective code, as if we were validating the string manually.</p>"},{"location":"7guis-flight-booker/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"7guis-flight-booker/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>auib_import(ctre https://github.com/hanickadot/compile-time-regular-expressions\n            VERSION v3.9.0)\n\naui_executable(aui.example.flight_booker)\naui_link(aui.example.flight_booker PRIVATE aui::views ctre::ctre)\n</code></pre>"},{"location":"7guis-flight-booker/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;ctre.hpp&gt;\n#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include \"AUI/View/ADropdownList.h\"\n#include \"AUI/Model/AListModel.h\"\n#include \"AUI/View/ATextField.h\"\n#include \"AUI/Platform/AMessageBox.h\"\n\nusing namespace declarative;\nusing namespace std::chrono;\n\nconstexpr auto REGEX_DATE = ctre::match&lt;\"([0-9]+)\\\\.([0-9]+)\\\\.([0-9]{4})\"&gt;;\n\nstruct DateTextFieldState {\n    AProperty&lt;AOptional&lt;system_clock::time_point&gt;&gt; parsed;\n};\n\nauto formatDate(system_clock::time_point date) { return \"{0:%d}.{0:%m}.{0:%G}\"_format(date); }\n\nauto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n                  return formatDate(*v);\n              },\n              [](const AString&amp; s) -&gt; AOptional&lt;system_clock::time_point&gt; {\n                  auto std = s.toStdString();\n                  auto match = REGEX_DATE.match(std);\n                  if (!match) {\n                      return std::nullopt;\n                  }\n                  year_month_day ymd(\n                      year(std::stoi(match.get&lt;3&gt;().str())), month(std::stoi(match.get&lt;2&gt;().str())),\n                      day(std::stoi(match.get&lt;1&gt;().str())));\n                  if (!ymd.ok()) {\n                      return std::nullopt;\n                  }\n                  return sys_days(ymd);\n              },\n            }),\n            it-&gt;text());\n        it &amp; state.parsed &gt; [](AView&amp; textField, const AOptional&lt;system_clock::time_point&gt;&amp; value) {\n            textField.setAssName(\".red\", !value.hasValue());\n        };\n    };\n}\n\nclass FlightBookerWindow : public AWindow {\npublic:\n    FlightBookerWindow() : AWindow(\"AUI - 7GUIs - Book Flight\", 150_dp, 50_dp) {\n        setExtraStylesheet(AStylesheet { {\n          ass::c(\".red\"),\n          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n                    connect(it-&gt;clicked, me::book);\n                    connect(mIsValid, AUI_SLOT(it)::setEnabled);\n                },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    DateTextFieldState mDepartureDate { system_clock::now() }, mReturnDate { system_clock::now() };\n    AProperty&lt;bool&gt; mIsReturnFlight;\n    APropertyPrecomputed&lt;bool&gt; mIsValid = [&amp;] {\n        if (!mDepartureDate.parsed-&gt;hasValue()) {\n            return false;\n        }\n        if (!mIsReturnFlight) {\n            return true;\n        }\n        if (!mReturnDate.parsed-&gt;hasValue()) {\n            return false;\n        }\n        if (mDepartureDate.parsed-&gt;value() &gt; mReturnDate.parsed-&gt;value()) {\n            return false;\n        }\n        return true;\n    };\n\n    void book() {\n        AString msg = \"Departure - {}\"_format(formatDate(mDepartureDate.parsed-&gt;value()));\n        if (mIsReturnFlight) {\n            msg += \"\\nReturn - {}\"_format(formatDate(mReturnDate.parsed-&gt;value()));\n        }\n        AMessageBox::show(this, \"You've booked the flight\", msg);\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;FlightBookerWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"7guis-temperature-converter/","title":"7GUIs Temperature Converter","text":"<p>Example's page</p> <p>This page describes an example listed in 7guis category.</p> <p>Fahrenheit to Celsius and vice versa.</p> <p></p> <p>Challenges: bidirectional data flow, user-provided text input.</p> <p>The task is to build a frame containing two textfields TC and TF representing the temperature in Celsius and Fahrenheit, respectively. Initially, both TC and TF are empty. When the user enters a numerical value into TC the corresponding value in TF is automatically updated and vice versa. When the user enters a non-numerical string into TC the value in TF is not updated and vice versa. The formula for converting a temperature C in Celsius into a temperature F in Fahrenheit is C = (F - 32) * (5/9) and the dual direction is F = C * (9/5) + 32.</p> <p>Temperature Converter increases the complexity of Counter by having bidirectional data flow between the Celsius and Fahrenheit inputs and the need to check the user input for validity. A good solution will make the bidirectional dependency very clear with minimal boilerplate code.</p> <pre><code>/*\n * AUI Framework - Declarative UI toolkit for modern C++20\n * Copyright (C) 2020-2025 Alex2772 and Contributors\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include \"AUI/View/ATextField.h\"\n#include \"AUI/View/ANumberPicker.h\"\n\nusing namespace declarative;\n\nauto myPicker() {\n    return _new&lt;ANumberPicker&gt;() AUI_LET {\n        it-&gt;setMin(-999);\n        it-&gt;setMax(999);\n    };\n}\n\n/// [window]\nclass TemperatureConverterWindow : public AWindow {\npublic:\n    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n};\n/// [window]\n\nAUI_ENTRY {\n    _new&lt;TemperatureConverterWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"7guis-temperature-converter/#comparison-to-jetpack-compose","title":"Comparison to Jetpack Compose","text":"<p>Here's implementation of the same app with Jetpack Compose:</p> <pre><code>package ...\n\nimport ...\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            CounterTheme {\n                Counter()\n            }\n        }\n    }\n}\n\n@Composable\nfun TemperatureBiConverter() {\n    var celsiusInputData by remember { mutableStateOf(\"0.0\") }\n    var fahrenheitInputData by remember { mutableStateOf(\"32.0\") }\n    Row(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(horizontal = 8.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.SpaceBetween\n    ) {\n        OutlinedTextField(\n            modifier = Modifier.weight(1f),\n            value = celsiusInputData,\n            onValueChange = { input -&gt;\n                celsiusInputData = input\n                input.toFloatOrNull()?.also {\n                    fahrenheitInputData = (it * (9f / 5f) + 32f).toString()\n                }\n            },\n            label = { Text(\"Celsius\") }\n        )\n        Text(\n            text = \"=\", fontSize = 18.sp,\n            modifier = Modifier.padding(horizontal = 8.dp)\n        )\n        OutlinedTextField(\n            modifier = Modifier.weight(1f),\n            value = fahrenheitInputData,\n            onValueChange = { input -&gt;\n                fahrenheitInputData = input\n                input.toFloatOrNull()\n                    ?.also {\n                        celsiusInputData = ((it - 32) * (5f / 9f)).toString()\n                    }\n            },\n            label = { Text(\"Fahrenheit\") }\n        )\n    }\n}\n</code></pre>"},{"location":"7guis-temperature-converter/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"7guis-temperature-converter/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.temperature_converter)\naui_link(aui.example.temperature_converter PRIVATE aui::views)\n</code></pre>"},{"location":"7guis-temperature-converter/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include \"AUI/View/ATextField.h\"\n#include \"AUI/View/ANumberPicker.h\"\n\nusing namespace declarative;\n\nauto myPicker() {\n    return _new&lt;ANumberPicker&gt;() AUI_LET {\n        it-&gt;setMin(-999);\n        it-&gt;setMax(999);\n    };\n}\n\n/// [window]\nclass TemperatureConverterWindow : public AWindow {\npublic:\n    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n};\n/// [window]\n\nAUI_ENTRY {\n    _new&lt;TemperatureConverterWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"7guis-timer/","title":"7GUIs Timer","text":"<p>Example's page</p> <p>This page describes an example listed in 7guis category.</p> <p>Timer example.</p> <p></p> <p>Challenges: concurrency, competing user/signal interactions, responsiveness.</p> <p>The task is to build a frame containing a gauge G for the elapsed time e, a label which shows the elapsed time as a numerical value, a slider S by which the duration d of the timer can be adjusted while the timer is running and a reset button R. Adjusting S must immediately reflect on d and not only when S is released. It follows that while moving S the filled amount of G will (usually) change immediately. When e \u2265 d is true then the timer stops (and G will be full). If, thereafter, d is increased such that d &gt; e will be true then the timer restarts to tick until e \u2265 d is true again. Clicking R will reset e to zero.</p> <p>Timer deals with concurrency in the sense that a timer process that updates the elapsed time runs concurrently to the user\u2019s interactions with the GUI application. This also means that the solution to competing user and signal interactions is tested. The fact that slider adjustments must be reflected immediately moreover tests the responsiveness of the solution. A good solution will make it clear that the signal is a timer tick and, as always, has not much scaffolding.</p>"},{"location":"7guis-timer/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"7guis-timer/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.timer)\naui_link(aui.example.timer PRIVATE aui::views)\n</code></pre>"},{"location":"7guis-timer/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include \"AUI/View/AProgressBar.h\"\n#include \"AUI/View/ASlider.h\"\n#include \"AUI/View/AButton.h\"\n\nusing namespace declarative;\n\nusing namespace std::chrono;\nusing namespace std::chrono_literals;\n\nstatic constexpr high_resolution_clock::duration MAX_DURATION = 60s;\n\n/// [example]\nclass TimerWindow : public AWindow {\npublic:\n    TimerWindow() : AWindow(\"AUI - 7GUIs - Timer\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Vertical::Expanding {\n            Horizontal {\n              Label { \"Elapsed Time:\" },\n              Centered::Expanding {\n                _new&lt;AProgressBar&gt;() AUI_LET {\n                        it &amp; mElapsedTimeRatio;\n                        it-&gt;setCustomStyle({ Expanding { 1, 0 } });\n                    },\n              },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n                            return float(d.count()) / float(MAX_DURATION.count());\n                        },\n                        [](aui::float_within_0_1 d) -&gt; high_resolution_clock::duration {\n                            return high_resolution_clock::duration(long(float(d) * float(MAX_DURATION.count())));\n                        },\n                      });\n                      it-&gt;setCustomStyle({ Expanding {} });\n                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n    }\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    high_resolution_clock::time_point mStartTime = high_resolution_clock::now();\n    AProperty&lt;high_resolution_clock::time_point&gt; mCurrentTime;\n    AProperty&lt;high_resolution_clock::duration&gt; mDuration = 30s;\n\n    APropertyPrecomputed&lt;high_resolution_clock::duration&gt; mElapsedTime = [&amp;] {\n        return std::min(mCurrentTime - mStartTime, *mDuration);\n    };\n\n    APropertyPrecomputed&lt;aui::float_within_0_1&gt; mElapsedTimeRatio = [&amp;] {\n        return float(mElapsedTime-&gt;count()) / float(mDuration-&gt;count());\n    };\n\n    void update() { mCurrentTime = high_resolution_clock::now(); }\n\n    void reset() { mStartTime = high_resolution_clock::now(); }\n};\n/// [example]\n\nAUI_ENTRY {\n    _new&lt;TimerWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"_/","title":"_","text":"<p>An std::shared_ptr with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/SharedPtrTypes.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"_/#detailed-description","title":"Detailed Description","text":"<p>Note</p> <p>Of course, it is not good tone to define a class with _ type but it significantly increases coding speed. Instead of writing every time std::shared_ptr you should write only the _ symbol.</p>"},{"location":"_/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre></p> examples/app/minesweeper/src/MinesweeperWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    bool mBombsPlanted = false;\n    int mBombs;\n    int mOpenedCells;\n\n    _&lt;AViewContainer&gt; mGrid;\n    AVector&lt;FieldCell&gt; mField;\n\n    void openCell(int x, int y, bool doGameLoseIfBomb);\n    int countBombsAround(int x, int y);\n    bool isValidCell(int x, int y) { return x &gt;= 0 &amp;&amp; x &lt; mFieldColumns &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; mFieldRows; }\n</code></pre></p> examples/app/minesweeper/src/NewGameWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    NewGameWindow(MinesweeperWindow* minesweeper);\n\nprivate:\n    MinesweeperWindow* mMinesweeper;\n    _&lt;ANumberPicker&gt; mWidth;\n    _&lt;ANumberPicker&gt; mHeight;\n    _&lt;ANumberPicker&gt; mMines;\n    _&lt;ALabel&gt; mDifficultyLabel;\n\n    void updateMinesMax();\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>#include \"FractalView.h\"\n\nclass JumpToCoordsWindow : public AWindow {\npublic:\n    explicit JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent);\n};\n</code></pre></p> examples/app/fractal/src/FractalView.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>class FractalView : public AView {\nprivate:\n    gl::Program mShader;\n    _&lt;gl::Texture2D&gt; mTexture;\n    glm::mat4 mTransform;\n\n    float mAspectRatio;\n\n    void handleMatrixUpdated();\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>#include &lt;AUI/Platform/AMessageBox.h&gt;\n\nusing namespace declarative;\n\nJumpToCoordsWindow::JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent)\n  : AWindow(\"Jump to coords\", 854_dp, 500_dp, parent, WindowStyle::NO_RESIZE) {\n    auto re = _new&lt;ATextField&gt;();\n    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>#include &lt;AUI/View/AViewContainer.h&gt;\n\nclass ContactDetailsView : public AViewContainerBase {\npublic:\n    ContactDetailsView(_&lt;Contact&gt; contact);\n\nsignals:\n    emits&lt;&gt; deleteAction;\n\nprivate:\n</code></pre></p> examples/ui/contacts/src/view/common.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>#include &lt;AUI/View/AView.h&gt;\n\nnamespace common_views {\n_&lt;AView&gt; divider();\n}\n</code></pre></p> examples/ui/contacts/src/view/common.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>using namespace ass;\nusing namespace declarative;\n\n_&lt;AView&gt; common_views::divider() {\n    return _new&lt;AView&gt;() AUI_WITH_STYLE { FixedSize { {}, 1_px }, BackgroundSolid { AColor::GRAY } };\n}\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>using namespace declarative;\nusing namespace ass;\n\nstatic auto headerWithContents(_&lt;AView&gt; content) {\n    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n</code></pre></p> examples/ui/views/src/ExampleWindow.h <p>Views Example - All-in-one views building example. <pre><code>    bool onDragEnter(const ADragNDrop::EnterEvent&amp; event) override;\n\nprivate:\n    ADeque&lt;_&lt;AWindow&gt;&gt; mWindows;\n    AAsyncHolder mAsync;\n    _&lt;IAudioPlayer&gt; mWavAudio;\n    _&lt;IAudioPlayer&gt; mOggAudio;\n};\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>static constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n</code></pre></p>"},{"location":"_/#public-methods","title":"Public Methods","text":"<pre><code>_::_(const std::shared_ptr&lt;T&gt;&amp; v)\n</code></pre> <p>Constructs a shared_ptr which shares ownership of the object managed by <code>v</code>.</p> <p>Constructs a shared_ptr which shares ownership of the object managed by <code>v</code>. If <code>v</code> manages no object, <code>*this</code> manages no object either.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>static constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> <pre><code>_::_(std::shared_ptr&lt;T &gt;&amp;&amp; v)\n</code></pre> <p>Move-constructs a shared_ptr from <code>v</code>.</p> <p>After the construction, <code>*this</code> contains a copy of the previous state of <code>v</code>, <code>v</code> is empty and its stored pointer is null.</p> <p>In comparison to copy-constructing, the move-constructor is cheaper, as it does not require an atomic operation.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>static constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> <pre><code>_::_(const _&amp; v)\n</code></pre> <p>Constructs a shared_ptr which shares ownership of the object managed by <code>v</code>.</p> <p>Constructs a shared_ptr which shares ownership of the object managed by <code>v</code>. If <code>v</code> manages no object, <code>*this</code> manages no object either.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>static constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> <pre><code>_::_(_&amp;&amp; v)\n</code></pre> <p>Move-constructs a shared_ptr from <code>v</code>.</p> <p>After the construction, <code>*this</code> contains a copy of the previous state of <code>v</code>, <code>v</code> is empty and its stored pointer is null.</p> <p>In comparison to copy-constructing, the move-constructor is cheaper, as it does not require an atomic operation.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>static constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> <pre><code>_::_(const std::weak_ptr&lt;T&gt;&amp; v)\n</code></pre> <p>Constructs a shared_ptr which shares ownership of the object managed by <code>v</code>.</p> <p>Throws <code>std::bad_weak_ptr</code> if expired.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>static constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> <pre><code>_::_(const _weak&lt;T&gt;&amp; v)\n</code></pre> <p>Constructs a shared_ptr which shares ownership of the object managed by <code>v</code>.</p> <p>Throws <code>std::bad_weak_ptr</code> if expired.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>static constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> <pre><code>_::_(T* v)\n</code></pre> <p>Trap constructor</p> <p>In order to make shared pointer from the raw one, please explicitly specify how do you want manage memory by using either <code>aui::ptr::manage</code> or <code>aui::ptr::fake</code>.  **Examples:**   ??? note \"examples/app/game_of_life/src/main.cpp\"      [Game of Life](game-of-life.md) - Game of Life implementation that uses advanced large dynamic data rendering techniques such as [ITexture](itexture.md), [AImage](aimage.md) to be GPU friendly. The computation is performed in [AThreadPool](athreadpool.md).      <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre>  ??? note \"examples/7guis/circle_drawer/src/main.cpp\"      [7GUIs Circle Drawer](7guis-circle-drawer.md) - Undo, redo, dialog control.      <pre><code>static constexpr auto MAX_RADIUS = 128.f;\n\nclass CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n</code></pre>  ??? note \"examples/ui/infinite_lazy_list/src/main.cpp\"      [Infinite Lazy List](infinite-lazy-list.md) - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.      <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre>  ### value { #_::value _::value() }    ---  <pre><code>std::add_lvalue_reference_t&lt;T&gt; _::value()\n</code></pre>  Dereferences the stored pointer.   On a debug build, throws an assertion failure if the stored pointer is `nullptr`, otherwise behaviour is undefined.  **Examples:**   ??? note \"examples/ui/infinite_lazy_list/src/main.cpp\"      [Infinite Lazy List](infinite-lazy-list.md) - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.      <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre>  ??? note \"examples/7guis/flight_booker/src/main.cpp\"      [7GUIs Flight Booker](7guis-flight-booker.md) - Flight Booker.      <pre><code>                  return sys_days(ymd);\n              },\n            }),\n            it-&gt;text());\n        it &amp; state.parsed &gt; [](AView&amp; textField, const AOptional&lt;system_clock::time_point&gt;&amp; value) {\n            textField.setAssName(\".red\", !value.hasValue());\n        };\n    };\n}\n</code></pre>  ??? note \"examples/7guis/cells/tests/FormulaTests.cpp\"      [7GUIs Cells](7guis-cells.md) - Spreadsheet processor (Excel).      <pre><code>TEST_F(Cells_Formula, ChangePropagation) {\n    mSpreadsheet[{1, 0}].expression = \"=A0+1\";\n\n    mSpreadsheet[{0, 0}].expression = \"228\";\n    EXPECT_EQ(std::get&lt;double&gt;(mSpreadsheet[{1, 0}].value.value()), 229);\n\n    mSpreadsheet[{0, 0}].expression = \"0\";\n    EXPECT_EQ(std::get&lt;double&gt;(mSpreadsheet[{1, 0}].value.value()), 1);\n}\n</code></pre>  ??? note \"examples/7guis/temperature_converter/src/main.cpp\"      [7GUIs Temperature Converter](7guis-temperature-converter.md) - Fahrenheit to Celsius and vice versa.      <pre><code>    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n</code></pre>  ### weak { #_::weak _::weak() }    ---  <pre><code>_weak&lt;T&gt; _::weak()\n</code></pre> Returns weak reference   **Examples:**   ??? note \"examples/ui/infinite_lazy_list/src/main.cpp\"      [Infinite Lazy List](infinite-lazy-list.md) - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.      <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre>"},{"location":"_/#constructor","title":"constructor { #:: ::() }","text":""},{"location":"_weak/","title":"_weak","text":"<p>An std::weak_ptr with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/SharedPtrTypes.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"a2fingertransformarea/","title":"A2FingerTransformArea","text":"<p>Handles and processes the multitouch scale, transform and rotation events based on two-finger gestures.</p> <p></p> Header:<code>#include &lt;AUI/View/A2FingerTransformArea.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"a2fingertransformarea/#detailed-description","title":"Detailed Description","text":"<p>Represents a translucent area that handles and processes multi-finger transformation gestures (i.e. pinch-to-zoom, move, rotate). A2FingerTransformArea is a container, so the transformed view should be somewhere inside. A2FingerTransformArea does not apply any transformation though, so you can control transformation behaviour.</p> <p>The transformation data is emitted on delta basis via <code>transform</code> signal. This allows to easily incorporate A2FingerTransformArea to transforming routines, including limit handling.</p> <p>Consider the following example, where the transformation is applied through ASS styles: <pre><code>_&lt;AView&gt; multitouchDemo() {\n  return _new&lt;A2FingerTransformArea&gt;() AUI_LET {\n      it-&gt;setCustomStyle({\n        MinSize { 256_dp },\n        Border { 1_px, AColor::BLACK },\n      });\n      _&lt;AView&gt; blackRect = Stacked { _new&lt;ALabel&gt;(\"A2FingerTransformArea\") AUI_WITH_STYLE {\n        FixedSize{200_dp, 100_dp},\n        BackgroundSolid{AColor::BLACK},\n        TextColor{AColor::WHITE},\n        ATextAlign::CENTER,\n      }};\n      ALayoutInflater::inflate(it, Stacked { blackRect });\n      connect(it-&gt;transformed, blackRect, [blackRect = blackRect.get(),\n                                           keptTransform = _new&lt;A2DTransform&gt;()](const A2DTransform&amp; transform) {\n          keptTransform-&gt;applyDelta(transform);\n          blackRect-&gt;setCustomStyle({\n              TransformOffset{AMetric(keptTransform-&gt;offset.x, AMetric::T_PX),\n                              AMetric(keptTransform-&gt;offset.y, AMetric::T_PX)},\n              TransformScale{keptTransform-&gt;scale},\n              TransformRotate{keptTransform-&gt;rotation},\n          });\n      });\n  };\n}\n</code></pre></p> <p>This example renders to the following result: </p>"},{"location":"aabsolutelayout/","title":"AAbsoluteLayout","text":"<p>Absolute positioning layout. Allows to explicitly set your own coordinates.</p> Header:<code>#include &lt;AUI/Layout/AAbsoluteLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aabstractlabel/","title":"AAbstractLabel","text":"<p>Represents an abstract text display view.</p> Header:<code>#include &lt;AUI/View/AAbstractLabel.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aabstractlabel/#public-methods","title":"Public Methods","text":"<pre><code>auto AAbstractLabel::text()\n</code></pre> <p>Label's text property.</p> <p>Examples:</p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n                    auto dScale = std::stod((*re-&gt;text()).toStdString());\n                    fractalView-&gt;setPlotPositionAndScale(glm::dvec2 { dRe, dIm }, dScale);\n                    close();\n                } catch (...) {\n</code></pre> examples/ui/views/tests/LayoutManagerTest.cpp <p>Views Example - All-in-one views building example.</p> <pre><code> * Checks height of all buttons - they should be the same (see \"Show all views...\" button above).\n */\nTEST_F(UILayoutManager, Height) {\n    // check height\n    (By::text(\"Common button\") | By::text(\"Show all views...\")).check(sameHeight(), \"height mismatch\");\n}\n\n\n/**\n * Checks alignment (see \"Alex2772, 2021, alex2772.ru\" - it is not perfectly aligned)\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>                  }\n                  return sys_days(ymd);\n              },\n            }),\n            it-&gt;text());\n        it &amp; state.parsed &gt; [](AView&amp; textField, const AOptional&lt;system_clock::time_point&gt;&amp; value) {\n            textField.setAssName(\".red\", !value.hasValue());\n        };\n    };\n}\n</code></pre>"},{"location":"aabstractlabel/#AAbstractLabel::text","title":"text","text":""},{"location":"aabstractsignal/","title":"AAbstractSignal","text":"<p>Base class for signal.</p> Header:<code>#include &lt;AUI/Common/AAbstractSignal.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aabstractsignal/#detailed-description","title":"Detailed Description","text":"<p>Since ASignal is a template class, AAbstractSignal provides unified access to template inseparable fields of ASignal.</p>"},{"location":"aabstractsignal/#examples","title":"Examples","text":"examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>private:\n    _&lt;State&gt; mState;\n    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n</code></pre></p>"},{"location":"aabstractsignal/#public-types","title":"Public Types","text":"<p><code>struct AAbstractSignal::Connection</code></p> <p>Connection handle.</p> <p>Empty structure.</p> <p><code>struct AAbstractSignal::AutoDestroyedConnection</code></p> <p>Connection owner which destroys the connection in destructor.</p> <code>_&lt;Connection&gt; value</code> <code>AutoDestroyedConnection&amp; operator</code> <code>AutoDestroyedConnection&amp; operator</code> <code>AutoDestroyedConnection&amp; operator</code>"},{"location":"aabstractsignal/#AAbstractSignal::Connection","title":"Connection","text":""},{"location":"aabstractsignal/#AAbstractSignal::AutoDestroyedConnection","title":"AutoDestroyedConnection","text":""},{"location":"aabstractsignal/#public-methods","title":"Public Methods","text":"<pre><code>virtual _&lt;Connection&gt; AAbstractSignal::addGenericObserver(AObjectBase* receiver, std::function&lt;void()&gt; observer)\n</code></pre> <p>Creates generic connection (without arguments).</p> Arguments <code>receiver</code>  receiver object. <code>observer</code>  function to be called when signal is fired. <pre><code>static void AAbstractSignal::addIngoingConnectionIn(aui::no_escape&lt;AObjectBase&gt; object, _&lt;Connection&gt; connection)\n</code></pre> <p>Adds a connection to the specified object.</p> <pre><code>virtual void AAbstractSignal::clearAllOutgoingConnections()\n</code></pre> <p>Destroys all connections of this signal, if any.</p> <pre><code>virtual void AAbstractSignal::clearAllOutgoingConnectionsWith(aui::no_escape&lt;AObjectBase&gt; receiver)\n</code></pre> <p>Destroys all connections with passed receiver, if any.</p> Arguments <code>receiver</code>  object to clear connections with. <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    }\n\n    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> <pre><code>virtual bool AAbstractSignal::hasOutgoingConnectionsWith(aui::no_escape&lt;AObjectBase&gt; receiver)\n</code></pre> Arguments <code>receiver</code>  receiver objects to check connections with. Returns Whether this signal has connections with passed receiver object. <pre><code>static void AAbstractSignal::removeIngoingConnectionIn(aui::no_escape&lt;AObjectBase&gt; object, Connection&amp; connection, std::unique_lock&lt;ASpinlockMutex&gt;&amp; lock)\n</code></pre> <p>Removes a connection from the specified object.</p>"},{"location":"aabstractsignal/#AAbstractSignal::addGenericObserver","title":"addGenericObserver","text":""},{"location":"aabstractsignal/#AAbstractSignal::addIngoingConnectionIn","title":"addIngoingConnectionIn","text":""},{"location":"aabstractsignal/#AAbstractSignal::clearAllOutgoingConnections","title":"clearAllOutgoingConnections","text":""},{"location":"aabstractsignal/#AAbstractSignal::clearAllOutgoingConnectionsWith","title":"clearAllOutgoingConnectionsWith","text":""},{"location":"aabstractsignal/#AAbstractSignal::hasOutgoingConnectionsWith","title":"hasOutgoingConnectionsWith","text":""},{"location":"aabstractsignal/#AAbstractSignal::removeIngoingConnectionIn","title":"removeIngoingConnectionIn","text":""},{"location":"aabstractsocket/","title":"AAbstractSocket","text":"<p>Base class for all sockets.</p> Header:<code>#include &lt;AUI/Network/AAbstractSocket.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::network)</code>"},{"location":"aabstractsocket/#public-methods","title":"Public Methods","text":"<pre><code>void AAbstractSocket::bind(uint16_t bindingPort)\n</code></pre> <p>Binds socket for port. Used for ATcpServerSocket and AUdpSocket</p> Arguments <code>bindingPort</code>  port <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>void FractalView::render(ARenderContext context) {\n    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n</code></pre> <pre><code>virtual int AAbstractSocket::createSocket()\n</code></pre> <p>Creates socket handle.</p> <pre><code>void AAbstractSocket::init()\n</code></pre> <p>Initialise socket</p>"},{"location":"aabstractsocket/#AAbstractSocket::bind","title":"bind","text":""},{"location":"aabstractsocket/#AAbstractSocket::createSocket","title":"createSocket","text":""},{"location":"aabstractsocket/#AAbstractSocket::init","title":"init","text":""},{"location":"aabstracttextfield/","title":"AAbstractTextField","text":"<p>Text field implementation</p> Header:<code>#include &lt;AUI/View/AAbstractTextField.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aabstracttextfield/#detailed-description","title":"Detailed Description","text":"<p>ATextField is separated into the different class in order to simplify styling.</p>"},{"location":"aabstractthread/","title":"AAbstractThread","text":"<p>Represents an abstract thread which might be not created with AThread.</p> Header:<code>#include &lt;AUI/Thread/AThread.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aabstractthread/#detailed-description","title":"Detailed Description","text":"<p>Not all threads are created through AThread - these are interfaced with AAbstractThread.</p>"},{"location":"aabstractthread/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>id mId</code></p> <p>Thread ID.</p>"},{"location":"aabstractthread/#AAbstractThread::mId","title":"mId","text":""},{"location":"aabstractthread/#public-methods","title":"Public Methods","text":"<pre><code>void AAbstractThread::enqueue(AMessageQueue&lt;&gt;::Message f)\n</code></pre> <p>Delivers task for execution (message) to this thread's event queue. Messages are processed by framework        itself using AEventLoop. This behaviour may be overwritten using the <code>AThread::processMessages() </code> function.</p> <pre><code>IEventLoop* AAbstractThread::getCurrentEventLoop()\n</code></pre> <p>Get current event loop for this thread.</p> Returns current event loop for this thread <pre><code>id AAbstractThread::getId()\n</code></pre> Returns thread ID <pre><code>virtual void AAbstractThread::interrupt()\n</code></pre> <p>Interrupt thread's execution.</p> <p>Raises the interruption flag of the thread. In order to check whether thread interrupted use AThread::interruptionPoint() or AAbstractThread::isInterrupted().</p> <pre><code>virtual bool AAbstractThread::isInterrupted()\n</code></pre> Returns true if interrupt requested for this thread. <pre><code>virtual void AAbstractThread::resetInterruptFlag()\n</code></pre> <p>Reset interruption flag.</p> <pre><code>AStacktrace AAbstractThread::threadStacktrace()\n</code></pre> <p>Retrieve stacktrace of the thread.</p>"},{"location":"aabstractthread/#AAbstractThread::enqueue","title":"enqueue","text":""},{"location":"aabstractthread/#AAbstractThread::getCurrentEventLoop","title":"getCurrentEventLoop","text":""},{"location":"aabstractthread/#AAbstractThread::getId","title":"getId","text":""},{"location":"aabstractthread/#AAbstractThread::interrupt","title":"interrupt","text":""},{"location":"aabstractthread/#AAbstractThread::isInterrupted","title":"isInterrupted","text":""},{"location":"aabstractthread/#AAbstractThread::resetInterruptFlag","title":"resetInterruptFlag","text":""},{"location":"aabstractthread/#AAbstractThread::threadStacktrace","title":"threadStacktrace","text":""},{"location":"aabstracttypeable/","title":"AAbstractTypeable","text":"<p>Base class for AAbstractTypeableView which is template class.</p> Header:<code>#include &lt;AUI/View/AAbstractTypeable.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aabstracttypeable/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;&gt; actionButtonPressed</code></p> <p>When action button of touchscreen keyboard or AInput::RETURN is pressed.</p> <p><code>emits&lt;Selection&gt; selectionChanged</code></p> <p>Selection is changed due to user's action or code operation.</p> <p><code>emits&lt;AString&gt; textChanged</code></p> <p>The user changed text and focused another view or <code>AAbstractTextField::updateText</code> is called.</p> <p><code>emits&lt;AString&gt; textChanging</code></p> <p>When the user changed one or more symbols.</p>"},{"location":"aabstracttypeable/#AAbstractTypeable::actionButtonPressed","title":"actionButtonPressed","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::selectionChanged","title":"selectionChanged","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::textChanged","title":"textChanged","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::textChanging","title":"textChanging","text":""},{"location":"aabstracttypeable/#public-methods","title":"Public Methods","text":"<pre><code>void AAbstractTypeable::copyToClipboard()\n</code></pre> <p>Performs copy operation (CTRL+C) to system clipboard.</p> <pre><code>void AAbstractTypeable::cutToClipboard()\n</code></pre> <p>Performs cut operation (CTRL+X) to system clipboard.</p> <pre><code>void AAbstractTypeable::enterChar(AChar c)\n</code></pre> Arguments <code>c</code> <p>Char enter implementation. Should be called in onCharEntered.</p> <pre><code>virtual bool AAbstractTypeable::isPasswordField()\n</code></pre> Returns true if this typeable should be treated as password. <pre><code>void AAbstractTypeable::moveCursorDown()\n</code></pre> <p>Performs move up operation (like AInput::DOWN)</p> <pre><code>void AAbstractTypeable::moveCursorLeft()\n</code></pre> <p>Performs move left operation (like AInput::LEFT)</p> <pre><code>void AAbstractTypeable::moveCursorRight()\n</code></pre> <p>Performs move right operation (like AInput::RIGHT)</p> <pre><code>void AAbstractTypeable::moveCursorUp()\n</code></pre> <p>Performs move up operation (like AInput::UP)</p> <pre><code>void AAbstractTypeable::paste(AString content)\n</code></pre> <p>Performs paste operation (CTRL+V).</p> Arguments <code>content</code>  string to insert <p>Performs paste operation at cursor's position. If the view has selection, the selected contents are removed before insertion.</p> <p>After operation, selection is reset and cursor is set to the end of inserted contents.</p> <pre><code>void AAbstractTypeable::pasteFromClipboard()\n</code></pre> <p>Performs paste operation (CTRL+V) from system clipboard.</p> <p>Effectively: <pre><code>paste(AClipboard::pasteFromClipboard());\n</code></pre></p> <pre><code>void AAbstractTypeable::setTextInputActionIcon(ATextInputActionIcon textInputActionIcon)\n</code></pre> <pre><code>ATextInputActionIcon AAbstractTypeable::textInputActionIcon()\n</code></pre> Returns text input type of this typeable. <pre><code>virtual ATextInputType AAbstractTypeable::textInputType()\n</code></pre> Returns text input type of this typeable. <pre><code>virtual bool AAbstractTypeable::typeableInsert(size_t at, const AString&amp; toInsert)\n</code></pre> Returns true, if successfully inserted; false otherwise <p>Inserts string. When insert could not be completed (i.e. isValidText discarded the new string contents), the state is left unchanged as like if <code>typeableInsert</code> have not been called.</p> <pre><code>virtual bool AAbstractTypeable::typeableInsert(size_t at, AChar toInsert)\n</code></pre> Returns true, if successfully inserted; false otherwise When insert could not be completed (i.e. isValidText discarded the new string contents), the state is left unchanged as like if <code>typeableInsert</code> have not been called. <p>Inserts string.</p>"},{"location":"aabstracttypeable/#AAbstractTypeable::copyToClipboard","title":"copyToClipboard","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::cutToClipboard","title":"cutToClipboard","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::enterChar","title":"enterChar","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::isPasswordField","title":"isPasswordField","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::moveCursorDown","title":"moveCursorDown","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::moveCursorLeft","title":"moveCursorLeft","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::moveCursorRight","title":"moveCursorRight","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::moveCursorUp","title":"moveCursorUp","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::paste","title":"paste","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::pasteFromClipboard","title":"pasteFromClipboard","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::setTextInputActionIcon","title":"setTextInputActionIcon","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::textInputActionIcon","title":"textInputActionIcon","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::textInputType","title":"textInputType","text":""},{"location":"aabstracttypeable/#AAbstractTypeable::typeableInsert","title":"typeableInsert","text":""},{"location":"aabstracttypeableview/","title":"AAbstractTypeableView","text":"<p>Basic implementation of type shortcuts and selection for editable text fields.</p> Header:<code>#include &lt;AUI/View/AAbstractTypeableView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aabstracttypeableview/#detailed-description","title":"Detailed Description","text":"<p>Used as base in ATextArea and ATextField, both of them using own way of text handling and rendering.</p>"},{"location":"aabstracttypeableview/#public-methods","title":"Public Methods","text":"<pre><code>auto AAbstractTypeableView::text()\n</code></pre> <p>Text property.</p> <p>Examples:</p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n                    auto dScale = std::stod((*re-&gt;text()).toStdString());\n                    fractalView-&gt;setPlotPositionAndScale(glm::dvec2 { dRe, dIm }, dScale);\n                    close();\n                } catch (...) {\n</code></pre> examples/ui/views/tests/LayoutManagerTest.cpp <p>Views Example - All-in-one views building example.</p> <pre><code> * Checks height of all buttons - they should be the same (see \"Show all views...\" button above).\n */\nTEST_F(UILayoutManager, Height) {\n    // check height\n    (By::text(\"Common button\") | By::text(\"Show all views...\")).check(sameHeight(), \"height mismatch\");\n}\n\n\n/**\n * Checks alignment (see \"Alex2772, 2021, alex2772.ru\" - it is not perfectly aligned)\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>                  }\n                  return sys_days(ymd);\n              },\n            }),\n            it-&gt;text());\n        it &amp; state.parsed &gt; [](AView&amp; textField, const AOptional&lt;system_clock::time_point&gt;&amp; value) {\n            textField.setAssName(\".red\", !value.hasValue());\n        };\n    };\n}\n</code></pre>"},{"location":"aabstracttypeableview/#AAbstractTypeableView::text","title":"text","text":""},{"location":"aadvancedgridlayout/","title":"AAdvancedGridLayout","text":"<p>Grid layout. Unlike AGridLayout, cells may have different sizes.</p> Header:<code>#include &lt;AUI/Layout/AAdvancedGridLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aadvancedgridlayout/#public-types","title":"Public Types","text":"<p><code>struct AAdvancedGridLayout::CompositionCache</code></p> <p>Empty structure.</p> <p><code>struct AAdvancedGridLayout::GridCell</code></p> <p>Empty structure.</p>"},{"location":"aadvancedgridlayout/#AAdvancedGridLayout::CompositionCache","title":"CompositionCache","text":""},{"location":"aadvancedgridlayout/#AAdvancedGridLayout::GridCell","title":"GridCell","text":""},{"location":"aangleradians/","title":"AAngleRadians","text":"<p>Strong type used to store angle in radians.</p> Header:<code>#include &lt;AUI/Util/AAngleRadians.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aangleradians/#detailed-description","title":"Detailed Description","text":""},{"location":"aangleradians/#initialization","title":"Initialization","text":"<p>Recommended way is to use operator literal format: <pre><code>auto angle = 180_deg;\nangle.radians() --&gt; 3.14\nangle.degrees() --&gt; 180\n</code></pre> <pre><code>auto angle = 3.14_rad;\nangle.radians() --&gt; 3.14\nangle.degrees() --&gt; 180\n</code></pre></p>"},{"location":"aarrayview/","title":"AArrayView","text":"Header:<code>#include &lt;AUI/Util/AArrayView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aasshelper/","title":"AAssHelper","text":"<p>Remember, ASS is not a butt. ASS is Aui Style Sheets</p> Header:<code>#include &lt;AUI/ASS/AAssHelper.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aasshelper/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        }\n        return false;\n    }\n\n    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n</code></pre></p>"},{"location":"aasshelper/#public-types","title":"Public Types","text":"<p><code>struct AAssHelper::State</code></p> <p>Empty structure.</p>"},{"location":"aasshelper/#AAssHelper::State","title":"State","text":""},{"location":"aasyncholder/","title":"AAsyncHolder","text":"<p>Holds a set of futures keeping them valid.</p> Header:<code>#include &lt;AUI/Thread/AAsyncHolder.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aasyncholder/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>Unlike AFutureSet, AAsyncHolder is intended to hold void futures (AFuture), however, non-void types can be also supported (but with extra overhead). When AFuture's task is complete, the AFuture is removed from AAsyncHolder. <p>Guarantees that held futures will never be executed or be during execution after AAsyncHolder is destroyed.</p> <p>Cancels all futures in destructor.</p>"},{"location":"aasyncholder/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.h <p>Views Example - All-in-one views building example. <pre><code>    bool onDragEnter(const ADragNDrop::EnterEvent&amp; event) override;\n\nprivate:\n    ADeque&lt;_&lt;AWindow&gt;&gt; mWindows;\n    AAsyncHolder mAsync;\n    _&lt;IAudioPlayer&gt; mWavAudio;\n    _&lt;IAudioPlayer&gt; mOggAudio;\n};\n</code></pre></p>"},{"location":"aaudioformat/","title":"AAudioFormat","text":"<p>Audio format descriptor.</p> Header:<code>#include &lt;AUI/Audio/AAudioFormat.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"aaudioformat/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>AChannelFormat channelCount</code></p> <p>Channel count.</p> <p><code>std::uint32_t sampleRate</code></p> <p>Samples count per second (i.e. 48000, 44100).</p>"},{"location":"aaudioformat/#AAudioFormat::channelCount","title":"channelCount","text":""},{"location":"aaudioformat/#AAudioFormat::sampleRate","title":"sampleRate","text":""},{"location":"aaudiomixer/","title":"AAudioMixer","text":"<p>Manages audio players and mixes them into one sound stream.</p> Header:<code>#include &lt;AUI/Audio/AAudioMixer.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"aaudiomixer/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p>"},{"location":"aaudiomixer/#public-methods","title":"Public Methods","text":"<pre><code>void AAudioMixer::addSoundSource(aui::non_null&lt;_&lt;IAudioPlayer&gt; &gt; s)\n</code></pre> <p>Add new sound source for mixing</p> Arguments <code>s</code>  New sound source <pre><code>std::size_t AAudioMixer::readSoundData(std::span&lt;std::byte&gt; destination)\n</code></pre> <p>Write mixed audio data into buffer.</p> Arguments <code>destination</code>  Pre-allocated buffer to write into Returns Number of bytes written <pre><code>void AAudioMixer::removeSoundSource(aui::non_null&lt;_&lt;IAudioPlayer&gt; &gt; s)\n</code></pre> <p>Remove sound source if it is represented in list of added sound sources, otherwise do nothing</p> Arguments <code>s</code> Sound source to remove"},{"location":"aaudiomixer/#AAudioMixer::addSoundSource","title":"addSoundSource","text":""},{"location":"aaudiomixer/#AAudioMixer::readSoundData","title":"readSoundData","text":""},{"location":"aaudiomixer/#AAudioMixer::removeSoundSource","title":"removeSoundSource","text":""},{"location":"abasemap/","title":"ABaseMap","text":"<p>Base class for maps with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/AMap.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"abasemap/#public-types","title":"Public Types","text":"<p><code>struct ABaseMap::contains_iterator</code></p> <p>Empty structure.</p> <p><code>struct ABaseMap::const_contains_iterator</code></p> <p>Empty structure.</p>"},{"location":"abasemap/#ABaseMap::contains_iterator","title":"contains_iterator","text":""},{"location":"abasemap/#ABaseMap::const_contains_iterator","title":"const_contains_iterator","text":""},{"location":"abasemap/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;typename Factory &gt;\nValueType&amp; ABaseMap::getOrInsert(const KeyType&amp; keyType, Factory&amp;&amp; factory)\n</code></pre> Arguments <code>keyType</code>  key; <code>factory</code>  factory function that will return a new value. Called only if map does not contain value of        specified key. Returns stored or new value. <p>If value of specified key exists, the existing value returned. Otherwise, <code>factory</code> function called.</p>"},{"location":"abasemap/#ABaseMap::getOrInsert","title":"getOrInsert","text":""},{"location":"abasiclisteditor/","title":"ABasicListEditor","text":"<p>Helper UI to edit list models.</p> Header:<code>#include &lt;AUI/View/ABasicListEditor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"abasiclisteditor/#public-types","title":"Public Types","text":"<p><code>class ABasicListEditor::Builder</code></p> <p>Empty structure.</p>"},{"location":"abasiclisteditor/#ABasicListEditor::Builder","title":"Builder","text":""},{"location":"abitfield/","title":"ABitField","text":"<p>Bit field implementation.</p> Header:<code>#include &lt;AUI/Util/ABitField.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"abitfield/#public-methods","title":"Public Methods","text":"<pre><code>bool ABitField::checkAndReset(T flag)\n</code></pre> <p>Determines whether flag set or not and sets flag.</p> Arguments <code>flag</code>  flag Returns true if flag was reset <pre><code>bool ABitField::checkAndSet(T flag)\n</code></pre> <p>Determines whether flag set or not and resets flag.</p> Arguments <code>flag</code>  flag Returns true if flag was set <pre><code>bool ABitField::test(T flags)\n</code></pre> <p>Determines whether flag (or all flags) set or not.</p> Arguments <code>flags</code>  flag(s) Returns true if flag(s) set <p>This function supports multiple flags (i.e <code>check(FLAG1 | FLAG2)</code>).</p> <p>Examples:</p> examples/7guis/cells/tests/FormulaTests.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"0\")), 0.0);\n}\n\nTEST_F(Cells_Formula, String) {\n    EXPECT_EQ(std::get&lt;AString&gt;(formula::evaluate(mSpreadsheet, \"test\")), \"test\");\n}\n\nTEST_F(Cells_Formula, EConstant) {\n    EXPECT_DOUBLE_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=1\")), 1.0);\n}\n</code></pre> <pre><code>bool ABitField::testAny(T flags)\n</code></pre> <p>Determines whether flag (or one of the flags flags) set or not.</p> Arguments <code>flags</code>  flag(s) Returns true if flag(s) set <p>This function supports multiple flags (i.e <code>check(FLAG1 | FLAG2)</code>).</p>"},{"location":"abitfield/#ABitField::checkAndReset","title":"checkAndReset","text":""},{"location":"abitfield/#ABitField::checkAndSet","title":"checkAndSet","text":""},{"location":"abitfield/#ABitField::test","title":"test","text":""},{"location":"abitfield/#ABitField::testAny","title":"testAny","text":""},{"location":"aborderstyle/","title":"ABorderStyle","text":"<p>Describes border style, like CSS border-style.</p> Header:<code>#include &lt;AUI/Render/ABorderStyle.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aborderstyle/#detailed-description","title":"Detailed Description","text":"<p>ABorderStyle is std::variant-based type that stores one of defined subclass types: <pre><code>ABorderStyle borderStyle = ABorderStyle::Solid{}; // valid\n</code></pre></p>"},{"location":"aborderstyle/#examples","title":"Examples","text":"examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example. <pre><code>void DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre></p>"},{"location":"aborderstyle/#public-types","title":"Public Types","text":"<p><code>struct ABorderStyle::Solid</code></p> <p>Empty structure.</p> <p><code>struct ABorderStyle::Dashed</code></p> <p>Displays a series of short square-ended dashes or line segments.</p> <code>AOptional&lt;float&gt; dashWidth</code>  If set, renderer would be forced to keep specified space between dashes. The value of this property is expressed in border width units. That is, 1.0 equals square.  If both dashWidth and spaceBetweenDashes are specified, renderer would roughly cut the line dash sequence. Otherwise, it would try to adjust unset values in order to achieve smooth results.  <code>AOptional&lt;float&gt; spaceBetweenDashes</code>  If set, renderer would be forced to keep specified space between dashes. The value of this property is expressed in border width units. That is, 1.0 equals square.  If both dashWidth and spaceBetweenDashes are specified, renderer would roughly cut the line dash sequence. Otherwise, it would try to adjust unset values in order to achieve smooth results."},{"location":"aborderstyle/#ABorderStyle::Solid","title":"Solid","text":""},{"location":"aborderstyle/#ABorderStyle::Dashed","title":"Dashed","text":""},{"location":"aboxfields/","title":"ABoxFields","text":"<p>Represents a rectangle fields. Useful for margin and padding around AViews.</p> Header:<code>#include &lt;AUI/Common/ABoxFields.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"abuiltinfiles/","title":"ABuiltinFiles","text":"<p>Filesystem for AUI Assets.</p> Header:<code>#include &lt;AUI/Util/ABuiltinFiles.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"abutton/","title":"AButton","text":"<p>Button with text, which can be pushed to make some action.</p> <p></p> Header:<code>#include &lt;AUI/View/AButton.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"abutton/#detailed-description","title":"Detailed Description","text":"<p>Button is a fundamental view which can be pushed to make some action.</p> The button view being pressed. <p>Button is styled with background, box shadow, and a border that highlights on hover. When pushed, the shadow disappears, making an illusion of pressing.</p> <p>Button can be made default. In such case, it is colored to user's accent color, making it stand out. Also, when the user presses Enter, the button is pushed automatically.</p> <p>Button usually contains text only, but in practice any view can be put in it.</p> <p>Starting from AUI 8.0.0, AButton itself does not render text; instead, it's a styled container, which is populated with any views by the user, i.e., ALabel. AButton used to have Qt-like methods for customization like <code>setIcon</code>, but now a modern approach takes place, which allows extensive options of customization.</p> <p>AButton supports both retained and immediate modes.</p>"},{"location":"abutton/#api-surface","title":"API surface","text":"<p><code>struct declarative::Button</code></p> <code>_&lt;AView&gt; content</code>  Content of the button. Can be any view, i.e., <code>Label</code> to display text.  <code>contract::Slot&lt;&gt; onClick</code>  Handler for button click event. Called when user activates the button.  <code>bool isDefault</code>  Determines if the button is default. Default buttons are colored with user's accent color and respond to Enter key."},{"location":"abutton/#button-with-a-lambda-handler","title":"Button with a lambda handler","text":"<p>This button executes the lambda upon click.</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n\nusing namespace ass;\nusing namespace declarative;\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Button\", 600_dp, 300_dp);\n    window-&gt;setContents(Centered {\n      Button {\n        .content = Label { \"Click me\" },\n        .onClick = [] { ALogger::info(\"Test\") &lt;&lt; \"Hello world!\"; },\n      },\n    });\n    window-&gt;show();\n    return 0;\n}\n</code></pre> <p></p>"},{"location":"abutton/#button-with-a-signal-slot-handler","title":"Button with a signal-slot handler","text":"<p>This button executes the member function upon click.</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n\nusing namespace ass;\nusing namespace declarative;\n\nclass MainWindow: public AWindow {\npublic:\n    MainWindow(): AWindow(\"Button\", 600_dp, 300_dp) {\n        setContents(Centered {\n            Button {\n                .content = Label { \"Click me\" },\n                .onClick = {me::onClick},\n            },\n        });\n    }\n\nprivate:\n    void onClick() {\n        ALogger::info(\"Test\") &lt;&lt; \"Hello world!\";\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;MainWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> <p></p>"},{"location":"abutton/#default-button","title":"Default button","text":"<p>Button can be made default. In such case, it is colored to user's accent color, making it stand out. Also, when the user presses Enter, the button is pushed automatically.</p> <pre><code>Button {\n    .content = Label { \"Click me\" },\n    .onClick = {me::onClick},\n    .isDefault = true,\n},\n</code></pre> <p>.</p>"},{"location":"abutton/#button-with-icon","title":"Button with icon","text":"<p>While buttons typically display text, they are actually flexible containers that can hold any view component. This means you can place various UI elements inside a button, such as images, icons, custom layouts, or combinations of different views.</p> <p>See AUI Assets for more information on how to put icons in your application.</p> <pre><code>Button {\n  .content =\n      Horizontal {\n        Icon { \":img/save.svg\" },\n        SpacerFixed { 2_dp },\n        Label { \"Button with icon\" },\n      },\n  .onClick = { me::onClick },\n},\n</code></pre> <p></p>"},{"location":"abutton/#styling-a-button","title":"Styling a button","text":"<p>AButton is styled as follows:</p> <pre><code>{\n    t&lt;AButton&gt;(),\n    BackgroundSolid {0xffffff_rgb},\n    Padding {3_dp, 5_dp},\n    MinSize {60_dp, 22_dp },\n    Border { 1_dp, 0xcacaca_rgb },\n    BorderRadius {5_dp},\n    ATextAlign::CENTER,\n    VerticalAlign::MIDDLE,\n    BoxShadow {{}, 1_dp, 4_dp, -2_dp, 0x80000000_argb},\n},\n{\n    t&lt;AButton&gt;::hover(),\n    Border {1_dp, getOsThemeColor() * glm::vec4(1, 1, 1, 0.3f)}\n},\n{\n    t&lt;AButton&gt;::active(),\n    BackgroundSolid{0xfafafa_rgb},\n},\n{\n    button::Default(t&lt;AButton&gt;()),\n    FontRendering::ANTIALIASING,\n    BackgroundGradient { ALinearGradientBrush{\n            .colors = {\n                    {0.f, getOsThemeColorLighter()},\n                    {0.f, getOsThemeColor()},\n            },\n    } },\n    BoxShadow { 0, 1_dp, 3_dp, -1_dp, getOsThemeColor() },\n    Border { nullptr },\n    TextColor { 0xffffff_rgb },\n},\n{\n    button::Default(t&lt;AButton&gt;::hover()),\n    BoxShadow { 0, 1_dp, 6_dp, -1_dp, getOsThemeColor() },\n},\n{\n    t&lt;AButton&gt;::active(),\n    BoxShadow { nullptr },\n},\n{\n    button::Default(t&lt;AButton&gt;::hover()),\n    BackgroundGradient { ALinearGradientBrush{\n            .colors = {\n                    {0.f, getOsThemeColorLighter()},\n                    {1.f, getOsThemeColor()},\n            },\n    } },\n},\n{\n    button::Default(t&lt;AButton&gt;::active()),\n    BackgroundSolid { getOsThemeColor() }\n},\n{\n    t&lt;AButton&gt;::disabled(),\n    BackgroundSolid { 0xcccccc_rgb },\n    BoxShadow { nullptr },\n    Border { 1_dp, 0xbfbfbf_rgb },\n    TextColor { 0x838383_rgb }\n},\n</code></pre>"},{"location":"abutton/#examples","title":"Examples","text":"examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      mDifficultyLabel = _new&lt;ALabel&gt;(),\n      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>          },\n        },\n      },\n      Vertical {\n        _new&lt;AButton&gt;(\"Identity\").connect(&amp;AButton::clicked, AUI_SLOT(fractal)::reset),\n        _new&lt;AButton&gt;(\"Jump to coords...\")\n            .connect(&amp;AButton::clicked, this, [&amp;, fractal]() { _new&lt;JumpToCoordsWindow&gt;(fractal, this)-&gt;show(); }),\n        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n</code></pre></p> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter. <pre><code>    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>    CircleDrawerWindow() : AWindow(\"AUI - 7GUIs - Circle Drawer\", 300_dp, 250_dp) {\n        setContents(Vertical {\n          Centered {\n            Horizontal {\n              Button { Label { \"Undo\" }, {me::undo} } AUI_LET {\n                  it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.begin(); }) &gt; &amp;AView::setEnabled;\n              },\n              Button { Label { \"Redo\" }, {me::redo} } AUI_LET {\n                it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.end(); }) &gt; &amp;AView::setEnabled;\n              },\n</code></pre></p> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>          }),\n          Centered {\n            Horizontal::Expanding {\n              SpacerExpanding(),\n              Button { Label { mEditorMode ? \"Discard\" : \"Delete\" }, {me::drop} },\n              Button { Label { mEditorMode ? \"Done\" : \"Edit\" }, {me::toggleEdit} },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(4_dp), LayoutSpacing { 4_dp } },\n          },\n        });\n    });\n</code></pre></p>"},{"location":"abutton/#public-methods","title":"Public Methods","text":"<pre><code>explicit AButton::AButton(AString text)\n</code></pre> <p>Inflates a label with a text.</p> <p>Deprecated</p> <p>Left for compatibility.</p> <p>This setter would override any of existing content within button.</p> <p>Examples:</p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      mDifficultyLabel = _new&lt;ALabel&gt;(),\n      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>          },\n        },\n      },\n      Vertical {\n        _new&lt;AButton&gt;(\"Identity\").connect(&amp;AButton::clicked, AUI_SLOT(fractal)::reset),\n        _new&lt;AButton&gt;(\"Jump to coords...\")\n            .connect(&amp;AButton::clicked, this, [&amp;, fractal]() { _new&lt;JumpToCoordsWindow&gt;(fractal, this)-&gt;show(); }),\n        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> <pre><code>void AButton::setText(AString text)\n</code></pre> <p>Inflates a label with a text.</p> <p>Deprecated</p> <p>Left for compatibility.</p> <p>This setter would override any of existing content within button.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>                      connect(it-&gt;clicked, AUI_SLOT(mCells)::randomize);\n                  },\n              _new&lt;AButton&gt;() AUI_LET {\n                      it &amp; mCells.isRunning &gt; [](AButton&amp; b, bool isRunning) {\n                          b.setText(isRunning ? \"Pause\" : \"Run\");\n                      };\n                      connect(it-&gt;clicked, [&amp;] { mCells.isRunning = !mCells.isRunning; });\n                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n          },\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        case 8:\n            text += \"low\";\n            break;\n    }\n    mDifficultyLabel-&gt;setText(text);\n}\n\nNewGameWindow::NewGameWindow(MinesweeperWindow* minesweeper)\n  : AWindow(\"New game\", 100, 100, minesweeper), mMinesweeper(minesweeper) {\n    setWindowStyle(WindowStyle::MODAL);\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n        fractal,\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n\n    auto pos = fractalView-&gt;getPlotPosition();\n    re-&gt;setText(AString::number(pos.x));\n    im-&gt;setText(AString::number(pos.y));\n    scale-&gt;setText(AString::number(fractalView-&gt;getPlotScale()));\n\n    setContents(Vertical {\n      _form({\n</code></pre>"},{"location":"abutton/#AButton::AButton","title":"constructor","text":""},{"location":"abutton/#AButton::setText","title":"setText","text":""},{"location":"abytebuffer/","title":"AByteBuffer","text":"<p>std::vector-like growing array for byte storage.</p> Header:<code>#include &lt;AUI/Common/AByteBuffer.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"abytebuffer/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;typename T &gt;\nT&amp; AByteBuffer::at(size_t byteIndex)\n</code></pre> <p>Gets value of specified type by byte index relative to the beginning of internal buffer.</p> Arguments <code>byteIndex</code>  byte offset realtive to the beginning of internal buffer Returns data <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                });\n            }\n        };\n        auto out = std::make_unique&lt;FunctionCall&gt;();\n        out-&gt;function = functions::predefined().at(expect&lt;token::Identifier&gt;().name.uppercase());\n        mIterator++;\n        expect&lt;token::LPar&gt;();\n        mIterator++;\n\n        for (;;) {\n</code></pre> <pre><code>template&lt;typename T &gt;\nconst T&amp; AByteBuffer::at(size_t byteIndex)\n</code></pre> <p>Gets value of specified type by byte index relative to the beginning of internal buffer.</p> Arguments <code>byteIndex</code>  byte offset realtive to the beginning of internal buffer Returns data <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                });\n            }\n        };\n        auto out = std::make_unique&lt;FunctionCall&gt;();\n        out-&gt;function = functions::predefined().at(expect&lt;token::Identifier&gt;().name.uppercase());\n        mIterator++;\n        expect&lt;token::LPar&gt;();\n        mIterator++;\n\n        for (;;) {\n</code></pre> <pre><code>size_t AByteBuffer::capacity()\n</code></pre> Returns size of whole buffer (including possibly invalid data) <pre><code>char* AByteBuffer::data()\n</code></pre> Returns Internal buffer. <pre><code>bool AByteBuffer::empty()\n</code></pre> Returns true if size == 0 <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/Formula.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    return precompile(expression)(spreadsheet);\n}\n\nformula::Precompiled formula::precompile(const AString&amp; expression) {\n    if (expression.empty()) {\n        return [](const Spreadsheet&amp;) { return std::nullopt; };\n    }\n    if (auto d = expression.toDouble()) {\n        return [d = *d](const Spreadsheet&amp;) { return d; };\n    }\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>        auto putValue = [&amp;](_unique&lt;INode&gt; node) {\n            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n</code></pre> <pre><code>size_t AByteBuffer::getAvailableToWrite()\n</code></pre> Returns delta between internal buffer size and payload size. <pre><code>size_t AByteBuffer::getReserved()\n</code></pre> Returns size of internal buffer. Must be greater that getSize() <pre><code>size_t AByteBuffer::getSize()\n</code></pre> Returns size of payload (valid data) <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        }\n        auto drawGrid = [&amp;] {\n            ASmallVector&lt;std::pair&lt;glm::vec2, glm::vec2&gt;, 128 * 2&gt; points;\n            for (int i = 1; i &lt; mCells-&gt;size().x; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(i * SCALE, 0.f), glm::vec2(i * SCALE, getSize().y));\n            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n</code></pre> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n</code></pre> <pre><code>void AByteBuffer::grow(size_t size)\n</code></pre> <p>If <code>getReserved() - getSize()</code> is less than <code>size</code> increases internal buffer size        enough to store <code>size</code> bytes.</p> <pre><code>void AByteBuffer::increaseInternalBuffer(size_t size)\n</code></pre> <p>Increases internal buffer.</p> <pre><code>void AByteBuffer::increaseSize(size_t s)\n</code></pre> Arguments <code>s</code>  new size of the payload <p>Forces new size of the buffer.</p> Sneaky assert:       Assert fails when new size is greater that reserved buffer size. Use <code>AByteBuffer::resize</code> to      avoid this.   <pre><code>void AByteBuffer::reallocate(size_t s)\n</code></pre> Arguments <code>s</code>  new size of the payload <p>Resizes the buffer WITHOUT keeping it's contents. When reserved buffer size is differs from the new size, buffer is reallocated with new size.</p> <pre><code>void AByteBuffer::reserve(size_t size)\n</code></pre> <p>Resizes internal buffer.</p> <p>Examples:</p> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>{\n    setFixedSize({ 5_dp * POINT_COUNT, 100_dp }); // set fixed size\n\n\n    mPoints.reserve(POINT_COUNT);\n    for (std::size_t i = 0; i &lt; POINT_COUNT; ++i) {\n        // map a sinusoid to view\n        mPoints &lt;&lt; glm::vec2{ 5_dp * float(i), 100_dp * ((glm::sin(i / 10.f) + 1.f) / 2.f) };\n    }\n}\n</code></pre> <pre><code>void AByteBuffer::resize(size_t s)\n</code></pre> Arguments <code>s</code>  new size of the payload <p>Resizes the buffer keeping it's contents. When reserved buffer size is less than the new size, buffer is reallocated with new size.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>public:\n    Cells(glm::ivec2 size) {\n        mSize = size;\n        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    mReveal = false;\n    mBombsPlanted = false;\n    mGrid-&gt;setLayout(std::make_unique&lt;AGridLayout&gt;(columns, rows));\n    mField.clear();\n    mField.resize(columns * rows);\n\n    for (int i = 0; i &lt; columns * rows; ++i) {\n        int x = i % columns;\n        int y = i / columns;\n        auto cell = _new&lt;CellView&gt;(fieldAt(x, y));\n</code></pre> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>class Spreadsheet {\npublic:\n    explicit Spreadsheet(glm::uvec2 size) : mSize(size) {\n        mCells.resize(size.x * size.y);\n        for (auto&amp; v : mCells) {\n            v = std::make_unique&lt;Cell&gt;();\n            v-&gt;spreadsheet = this;\n        }\n    }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            AGridSplitter::Builder()\n                    .noDefaultSpacers()\n                    .withItems([&amp;] {\n                        AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt; views;\n                        views.resize(mState-&gt;spreadsheet.size().y + 1);\n                        for (auto&amp; c : views) {\n                            c.resize(mState-&gt;spreadsheet.size().x + 1);\n                        }\n\n                        views[0][0] = _new&lt;AView&gt;();   // blank\n</code></pre> <pre><code>void AByteBuffer::setSize(size_t s)\n</code></pre> Arguments <code>s</code>  new size of the payload <p>Forces new size of the buffer.</p> Sneaky assert:       Assert fails when new size is greater that reserved buffer size. Use <code>AByteBuffer::resize</code> to      avoid this.   <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n    mShader.set(UNIFORM_RATIO, mAspectRatio = float(size.x) / float(size.y));\n}\n</code></pre> examples/app/fractal/src/FractalView.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    void onKeyRepeat(AInput::Key key) override;\n\n    void onScroll(const AScrollEvent&amp; event) override;\n\n    void setSize(glm::ivec2 size) override;\n\n    gl::Program&amp; getShader() { return mShader; }\n\n    const _&lt;gl::Texture2D&gt;&amp; getTexture() const { return mTexture; }\n</code></pre> <pre><code>size_t AByteBuffer::size()\n</code></pre> Returns size of payload (valid data) <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>using CellsImage = AFormattedImage&lt;APixelFormat::RGBA_BYTE&gt;;\n\nclass Cells : public AObject {\npublic:\n    Cells(glm::ivec2 size) {\n        mSize = size;\n        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n</code></pre> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n    mShader.set(UNIFORM_RATIO, mAspectRatio = float(size.x) / float(size.y));\n}\n</code></pre> examples/7guis/cells/src/Functions.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>              return double(accumulator);\n            } },\n        { \"IF\",\n            [](Ctx ctx) {\n              if (ctx.args.size() != 3) {\n                  throw AException(\"ARG\");\n              }\n              auto condition = std::get_if&lt;double&gt;(&amp;ctx.args[0]);\n              if (condition == nullptr) {\n                  throw AException(\"ARG0\");\n</code></pre> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>#include \"AUI/Common/AException.h\"\n\nclass Spreadsheet {\npublic:\n    explicit Spreadsheet(glm::uvec2 size) : mSize(size) {\n        mCells.resize(size.x * size.y);\n        for (auto&amp; v : mCells) {\n            v = std::make_unique&lt;Cell&gt;();\n            v-&gt;spreadsheet = this;\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            AGridSplitter::Builder()\n                    .noDefaultSpacers()\n                    .withItems([&amp;] {\n                        AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt; views;\n                        views.resize(mState-&gt;spreadsheet.size().y + 1);\n                        for (auto&amp; c : views) {\n                            c.resize(mState-&gt;spreadsheet.size().x + 1);\n                        }\n\n                        views[0][0] = _new&lt;AView&gt;();   // blank\n</code></pre> <pre><code>void AByteBuffer::write(IInputStream&amp; stream, size_t size)\n</code></pre> Arguments <code>stream</code> <code>size</code> <p>Reads exact <code>size</code> bytes from <code>stream</code>.</p>"},{"location":"abytebuffer/#AByteBuffer::at","title":"at","text":""},{"location":"abytebuffer/#AByteBuffer::capacity","title":"capacity","text":""},{"location":"abytebuffer/#AByteBuffer::data","title":"data","text":""},{"location":"abytebuffer/#AByteBuffer::empty","title":"empty","text":""},{"location":"abytebuffer/#AByteBuffer::getAvailableToWrite","title":"getAvailableToWrite","text":""},{"location":"abytebuffer/#AByteBuffer::getReserved","title":"getReserved","text":""},{"location":"abytebuffer/#AByteBuffer::getSize","title":"getSize","text":""},{"location":"abytebuffer/#AByteBuffer::grow","title":"grow","text":""},{"location":"abytebuffer/#AByteBuffer::increaseInternalBuffer","title":"increaseInternalBuffer","text":""},{"location":"abytebuffer/#AByteBuffer::increaseSize","title":"increaseSize","text":""},{"location":"abytebuffer/#AByteBuffer::reallocate","title":"reallocate","text":""},{"location":"abytebuffer/#AByteBuffer::reserve","title":"reserve","text":""},{"location":"abytebuffer/#AByteBuffer::resize","title":"resize","text":""},{"location":"abytebuffer/#AByteBuffer::setSize","title":"setSize","text":""},{"location":"abytebuffer/#AByteBuffer::size","title":"size","text":""},{"location":"abytebuffer/#AByteBuffer::write","title":"write","text":""},{"location":"abytebufferinputstream/","title":"AByteBufferInputStream","text":"<p>Converts a AByteBuffer to an IInputStream.</p> Header:<code>#include &lt;AUI/IO/AByteBufferInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"abytebufferview/","title":"AByteBufferView","text":"<p>Acts like std::string_view but for AByteBuffer.</p> Header:<code>#include &lt;AUI/Common/AByteBufferView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"abytebufferview/#detailed-description","title":"Detailed Description","text":"<p>Note</p> <p>don't use const reference of AByteBufferView. Passing by const reference forces compiler to use memory instead of registers.</p> <p>Note</p> <p>AByteBufferView is intended for const access to memory data. As a function argument, consider to use <code>std::span&lt;std::byte&gt;</code> instead for non-const access.</p>"},{"location":"abytebufferview/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;typename T &gt;\nconst T&amp; AByteBufferView::at(size_t byteIndex)\n</code></pre> <p>Gets value of specified type by byte index relative to the beginning of internal buffer.</p> Arguments <code>byteIndex</code>  byte offset realtive to the beginning of internal buffer Returns data <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                });\n            }\n        };\n        auto out = std::make_unique&lt;FunctionCall&gt;();\n        out-&gt;function = functions::predefined().at(expect&lt;token::Identifier&gt;().name.uppercase());\n        mIterator++;\n        expect&lt;token::LPar&gt;();\n        mIterator++;\n\n        for (;;) {\n</code></pre>"},{"location":"abytebufferview/#AByteBufferView::at","title":"at","text":""},{"location":"achannelformat/","title":"AChannelFormat","text":"<p>Supported channels formats  (mono, stereo etc.)</p> Header:<code>#include &lt;AUI/Audio/AAudioFormat.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"achannelformat/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"achar/","title":"AChar","text":"<p>Represents a single 32-bit char.</p> Header:<code>#include &lt;AUI/Common/AChar.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"acheckbox/","title":"ACheckBox","text":"<p>Checkboxes let users select one or more items from a list, or turn an item on or off.</p> <p></p> Header:<code>#include &lt;AUI/View/ACheckBox.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"acheckbox/#detailed-description","title":"Detailed Description","text":"<p>A check box is an input control that allows the user to select or deselect an option. Unlike ARadioButton buttons\u2014which are mutually exclusive within a group, multiple check boxes may be checked independently.</p> <p></p> <p>Use check boxes to enable or disable features, options, or actions in your UI.</p>"},{"location":"acheckbox/#create-a-basic-check-box","title":"Create a basic check box","text":"<p>The following code snippet shows a minimal check box implementation:</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/ACheckBox.h&gt;\n\nusing namespace ass;\nusing namespace declarative;\n\nstruct State {\n    AProperty&lt;bool&gt; checked = false;\n};\n\n_&lt;AView&gt; minimalCheckBox(_&lt;AProperty&lt;bool&gt;&gt; state) {\n    return CheckBox {\n        .checked = AUI_REACT(*state),\n        .onCheckedChange = [state](bool checked) { *state = checked; },\n        .content = Label { \"Minimal checkbox\" },\n    };\n}\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Checkbox\", 300_dp, 100_dp);\n    auto state = _new&lt;State&gt;();\n    window-&gt;setContents(\n        Vertical {\n            minimalCheckBox(AUI_PTR_ALIAS(state, checked)),\n            Label { AUI_REACT(state-&gt;checked ? \"Checkbox is checked\" : \"Checkbox is not checked\") },\n        }\n    );\n    window-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"acheckbox/#key-points-about-this-code","title":"Key points about this code","text":"<ul> <li><code>struct State</code> holds a reactive property <code>checked</code> representing the check box's state. When <code>checked</code> changes, the    UI updates reactively.</li> <li>The <code>CheckBox</code> view binds <code>.checked</code> to the state's property, so the check mark is kept in sync with the data.</li> <li><code>.onCheckedChange</code> toggles the state when the check box is clicked.</li> <li>Content (label or any view) can be provided using <code>.content</code>.</li> <li>The UI updates automatically based on the state because of AUI's reactive system.</li> </ul>"},{"location":"acheckbox/#result","title":"Result","text":"<p>This example produces the following component when unchecked:</p> <p></p> <p>And this is how the same checkbox appears when checked:</p> <p></p>"},{"location":"acheckbox/#advanced-example","title":"Advanced example","text":"<p>The following is a more complex example of how you can implement checkboxes in your app. In this snippet, there is a parent checkbox and a series of child checkboxes. When the user activates the parent checkbox, the app checks all child checkboxes.</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/ACheckBox.h&gt;\n\nusing namespace ass;\nusing namespace declarative;\n\nstruct State {\n    AProperty&lt;bool&gt; option1 = false;\n    AProperty&lt;bool&gt; option2 = false;\n    AProperty&lt;bool&gt; option3 = false;\n\n    bool isAllOptionsSelected() const {\n        return option1 &amp;&amp; option2 &amp;&amp; option3;\n    }\n};\n\n_&lt;AView&gt; parentCheckBox(_&lt;State&gt; state) {\n    return Vertical {\n        CheckBox {\n            .checked = AUI_REACT(state-&gt;isAllOptionsSelected()),\n            .onCheckedChange = [state](bool checked) {\n              state-&gt;option1 = checked;\n              state-&gt;option2 = checked;\n              state-&gt;option3 = checked;\n            },\n            .content = Label { \"Select all\" },\n        },\n        CheckBox {\n            .checked = AUI_REACT(state-&gt;option1),\n            .onCheckedChange = [state](bool checked) { state-&gt;option1 = checked; },\n            .content = Label { \"Option 1\" },\n        },\n        CheckBox {\n            .checked = AUI_REACT(state-&gt;option2),\n            .onCheckedChange = [state](bool checked) { state-&gt;option2 = checked; },\n            .content = Label { \"Option 2\" },\n        },\n        CheckBox {\n            .checked = AUI_REACT(state-&gt;option3),\n            .onCheckedChange = [state](bool checked) { state-&gt;option3 = checked; },\n            .content = Label { \"Option 3\" },\n        },\n    };\n}\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Checkbox\", 300_dp, 100_dp);\n    auto state = _new&lt;State&gt;();\n    window-&gt;setContents(\n        Vertical {\n            parentCheckBox(state),\n            Label { AUI_REACT(state-&gt;isAllOptionsSelected() ? \"All options selected\" : \"Please select all options\") },\n        }\n    );\n    window-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"acheckbox/#key-points-about-this-code_1","title":"Key points about this code","text":"<ul> <li>State Management:<ul> <li>A <code>State</code> structure keeps three Boolean properties (<code>option1</code>, <code>option2</code>, <code>option3</code>), each wrapped with   <code>AProperty</code> for reactive (observable) updates.</li> <li>The utility method <code>isAllOptionsSelected()</code> quickly checks if all options are selected.</li> </ul> </li> <li>\"Select All\" Parent Checkbox:<ul> <li>The first <code>CheckBox</code> (labeled \"Select all\") is linked to <code>isAllOptionsSelected()</code> using a reactive binding   (<code>AUI_REACT</code>).</li> <li>When toggled, it sets all three state options to the new value, effectively selecting or deselecting all   options at once.</li> </ul> </li> <li>Individual Option Checkboxes:<ul> <li>Each subsequent <code>CheckBox</code> is bound to its individual option (<code>option1</code>, <code>option2</code>, <code>option3</code>) via <code>AUI_REACT</code>.</li> <li>Changing any option updates its respective state property.</li> </ul> </li> <li>Synchronized Selection:<ul> <li>If all individual checkboxes are checked, the \"Select all\" parent checkbox is also checked automatically (and   vice versa).</li> </ul> </li> <li>Dynamic Status Label:<ul> <li>A <code>Label</code> below the checkbox group reflects the selection status in real-time (shows \"All options selected\" or   \"Please select all options\") using a reactive binding.</li> </ul> </li> </ul>"},{"location":"acheckbox/#result_1","title":"Result","text":"<p>This example produces the following component when all checkboxes are unchecked.</p> <p></p> <p>Likewise, this is how the component appears when all options are checked, as when the user taps select all:</p> <p></p> <p>When only one option is checked the parent checkbox appears unchecked:</p> <p></p>"},{"location":"acheckbox/#styling","title":"Styling","text":"<p>Both <code>ACheckBox</code> and <code>ACheckBox::Box</code> are exposed only for styling purposes.</p> <pre><code>{\n    t&lt;ACheckBox&gt;(), // styles the checkbox + contents container\n    LayoutSpacing { 4_dp }, // specifies space between ACheckBox::Box and contents\n},\n{\n    t&lt;ACheckBox::Box&gt;(), // styling box itself\n    BackgroundSolid { 0xffffff_rgb },\n    Border { 1_dp, 0x333333_rgb },\n    FixedSize { 14_dp, 14_dp },\n    BackgroundImage { {}, 0x333333_rgb },\n    BorderRadius { 3_dp },\n},\n{\n    t&lt;ACheckBox&gt;::active() &gt;&gt; t&lt;ACheckBox::Box&gt;(),\n    BackgroundSolid { AColor::GRAY.transparentize(0.8f) },\n},\n{\n    Selected(t&lt;ACheckBox::Box&gt;()),\n    BackgroundImage { \":uni/svg/checkbox.svg\", getOsThemeColor().readableBlackOrWhite() },\n    Border { nullptr },\n    BackgroundGradient { getOsThemeColorLighter(), getOsThemeColor(), 180_deg },\n},\n{\n    t&lt;ACheckBox&gt;::active() &gt; Selected(t&lt;ACheckBox::Box&gt;()),\n    BackgroundSolid { AColor::GRAY.transparentize(0.8f) },\n    BackgroundGradient { getOsThemeColorLighter().lighter(0.3f), getOsThemeColor(), 180_deg },\n},\n{\n    t&lt;ACheckBox::Box&gt;::disabled(),\n    BackgroundSolid { 0xe5e5e5_rgb },\n    Border { 1_px, 0xa0a0a0_rgb },\n},\n{\n    Selected(t&lt;ACheckBox::Box&gt;::disabled()),\n    BackgroundGradient { AColor::GRAY.lighter(0.1f), AColor::GRAY.darker(0.1f), 0_deg },\n},\n</code></pre>"},{"location":"acheckbox/#public-types","title":"Public Types","text":"<p><code>class ACheckBox::Box</code></p> <p>Represents the box/drawing part of the checkbox itself; without labels or other decorations.</p> <p>Exposed for styling purposes.</p> <code>AProperty&lt;bool&gt; checked</code> <code>emits&lt;bool&gt; userCheckedChange</code>"},{"location":"acheckbox/#ACheckBox::Box","title":"Box","text":""},{"location":"achildprocess/","title":"AChildProcess","text":"Header:<code>#include &lt;AUI/Platform/AProcess.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"achildprocess/#public-methods","title":"Public Methods","text":"<pre><code>void AChildProcess::run(ASubProcessExecutionFlags flags = ASubProcessExecutionFlags::DEFAULT)\n</code></pre> <p>Launches process.</p> <pre><code>int AChildProcess::waitForExitCode()\n</code></pre> <p>Wait for process to be finished.</p> Returns exit code"},{"location":"achildprocess/#AChildProcess::run","title":"run","text":""},{"location":"achildprocess/#AChildProcess::waitForExitCode","title":"waitForExitCode","text":""},{"location":"acircleprogressbar/","title":"ACircleProgressBar","text":"<p>A circle-shaped progress bar.</p> <p></p> Header:<code>#include &lt;AUI/View/ACircleProgressBar.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"acircleprogressbar/#detailed-description","title":"Detailed Description","text":"<p>A progress bar is used to express a long operation (i.e. file copy) with known progress and reassure the user that application is still running.</p> <p>Unlike AProgressBar, this one is circle shaped; thus occupies less space.</p>"},{"location":"acircleprogressbar/#public-types","title":"Public Types","text":"<p><code>class ACircleProgressBar::Inner</code></p> <p>Empty structure.</p>"},{"location":"acircleprogressbar/#ACircleProgressBar::Inner","title":"Inner","text":""},{"location":"acircleprogressbar/#public-methods","title":"Public Methods","text":"<pre><code>void ACircleProgressBar::setValue(aui::float_within_0_1 value)\n</code></pre> Arguments <code>value</code>  progress value, where `0.0f` = 0%, `1.0f` = 100% <p>Set progress bar value.</p> <p>Examples:</p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    mWidth-&gt;setValue(gWidth);\n    mHeight-&gt;setValue(gHeight);\n\n    updateMinesMax();\n\n    mMines-&gt;setValue(gMines);\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n                it-&gt;setMax(1000);\n                it-&gt;setValue(350);\n            },\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    fractal-&gt;focus();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n                                connect(\n                                    it-&gt;valueChanging, [this, circle](aui::float_within_0_1 s) {\n                                        circle-&gt;radius = s * MAX_RADIUS;\n                                        mState-&gt;circles.notify();\n                                    });\n</code></pre>"},{"location":"acircleprogressbar/#ACircleProgressBar::setValue","title":"setValue","text":""},{"location":"aclass/","title":"AClass","text":"<p>Compile-time class introspection.</p> Header:<code>#include &lt;AUI/Reflect/AClass.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aclass/#examples","title":"Examples","text":"examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>const T&amp; expect(const Variant&amp; variant) {\n    if (std::holds_alternative&lt;T&gt;(variant)) {\n        return std::get&lt;T&gt;(variant);\n    }\n    throw AException(\"VALUE {}\"_format(AClass&lt;T&gt;::name()).uppercase());\n}\n\nstruct BinaryOperatorNode : public INode {\n    _unique&lt;INode&gt; left;\n    _unique&lt;INode&gt; right;\n</code></pre></p>"},{"location":"acleanup/","title":"ACleanup","text":"<p>Cleanup helper.</p> Header:<code>#include &lt;AUI/Util/ACleanup.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"acleanup/#public-methods","title":"Public Methods","text":"<pre><code>static void ACleanup::afterEntry(Callback callback)\n</code></pre> Arguments <code>callback</code>  callback that called after AUI_ENTRY but before native entry point exit."},{"location":"acleanup/#ACleanup::afterEntry","title":"afterEntry","text":""},{"location":"acolor/","title":"AColor","text":"<p>Represents a 4-component floating point color (RGBA).</p> Header:<code>#include &lt;AUI/Common/AColor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"acolor/#detailed-description","title":"Detailed Description","text":"<p><code>AColor</code> is a color class that inherits from <code>glm::vec4</code>, representing colors in RGBA format where each component (Red, Green, Blue, Alpha) is a floating-point value between 0.0 and 1.0.</p>"},{"location":"acolor/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n</code></pre></p> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        if (count) {\n            AFontStyle fs;\n            fs.size = getHeight() * 6 / 7;\n            fs.align = ATextAlign::CENTER;\n            auto color = AColor::BLACK;\n\n            switch (count) {\n                case 1:\n                    color = 0x0000ffffu;\n                    break;\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n}\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; viewer(AProperty&lt;T&gt;&amp; property) {\n</code></pre></p> examples/ui/contacts/src/view/common.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>using namespace ass;\nusing namespace declarative;\n\n_&lt;AView&gt; common_views::divider() {\n    return _new&lt;AView&gt;() AUI_WITH_STYLE { FixedSize { {}, 1_px }, BackgroundSolid { AColor::GRAY } };\n}\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.7f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n                  },\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>public:\n    FlightBookerWindow() : AWindow(\"AUI - 7GUIs - Book Flight\", 150_dp, 50_dp) {\n        setExtraStylesheet(AStylesheet { {\n          ass::c(\".red\"),\n          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>public:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                        for (unsigned row = 0; row &lt; mState-&gt;spreadsheet.size().y; ++row) {\n                            views[row + 1][0] = labelTitle(\"{}\"_format(Cell::rowName(row)));\n                            for (unsigned column = 0; column &lt; mState-&gt;spreadsheet.size().x; ++column) {\n                                views[row + 1][column + 1] = _new&lt;CellView&gt;(mState, mState-&gt;spreadsheet[{ column, row }]) AUI_WITH_STYLE {\n                                    BackgroundSolid { AColor::WHITE },\n                                    MinSize { {}, 20_dp },\n                                };\n                            }\n                        }\n                        return views;\n</code></pre></p>"},{"location":"acolor/#public-methods","title":"Public Methods","text":"<pre><code>constexpr AColor::AColor(unsigned int color)\n</code></pre> <p>Construct with hex integer</p> Arguments <code>color</code>  integer representing color in 0xRRGGBBAA <p><code>AColor(0xff0000ff)</code> will represent opaque bright red</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        if (count) {\n            AFontStyle fs;\n            fs.size = getHeight() * 6 / 7;\n            fs.align = ATextAlign::CENTER;\n            auto color = AColor::BLACK;\n\n            switch (count) {\n                case 1:\n                    color = 0x0000ffffu;\n                    break;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n}\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; viewer(AProperty&lt;T&gt;&amp; property) {\n</code></pre> examples/ui/contacts/src/view/common.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>using namespace ass;\nusing namespace declarative;\n\n_&lt;AView&gt; common_views::divider() {\n    return _new&lt;AView&gt;() AUI_WITH_STYLE { FixedSize { {}, 1_px }, BackgroundSolid { AColor::GRAY } };\n}\n</code></pre> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo.</p> <pre><code>                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.7f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n                  },\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>public:\n    FlightBookerWindow() : AWindow(\"AUI - 7GUIs - Book Flight\", 150_dp, 50_dp) {\n        setExtraStylesheet(AStylesheet { {\n          ass::c(\".red\"),\n          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>public:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                        for (unsigned row = 0; row &lt; mState-&gt;spreadsheet.size().y; ++row) {\n                            views[row + 1][0] = labelTitle(\"{}\"_format(Cell::rowName(row)));\n                            for (unsigned column = 0; column &lt; mState-&gt;spreadsheet.size().x; ++column) {\n                                views[row + 1][column + 1] = _new&lt;CellView&gt;(mState, mState-&gt;spreadsheet[{ column, row }]) AUI_WITH_STYLE {\n                                    BackgroundSolid { AColor::WHITE },\n                                    MinSize { {}, 20_dp },\n                                };\n                            }\n                        }\n                        return views;\n</code></pre> <pre><code>static constexpr AColor AColor::fromAARRGGBB(unsigned int color)\n</code></pre> <p>Construct with hex integer</p> Arguments <code>color</code>  integer representing color in 0xAARRGGBB <p><code>AColor(0xff0000ff)</code> will represent opaque bright blue</p> <pre><code>static constexpr AColor AColor::fromRRGGBB(unsigned int color)\n</code></pre> <p>Construct with hex integer</p> Arguments <code>color</code>  integer representing color in 0xRRGGBB <p><code>AColor(0x00ff00)</code> will represent opaque bright green</p> <pre><code>inline constexpr AColor AColor::mul(float d)\n</code></pre> <p>Multiply all color components except alpha channel (rgb * d, a)</p> Arguments <code>d</code>  multiplier Returns multiplied color <pre><code>AColor AColor::opacify(float alpha)\n</code></pre> <p>Increases the alpha channel by the given value.</p> <pre><code>AColor AColor::transparentize(float alpha)\n</code></pre> <p>Decreases the alpha channel by the given value.</p> <p>Examples:</p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo.</p> <pre><code>                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.7f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n                  },\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n</code></pre>"},{"location":"acolor/#AColor::AColor","title":"constructor","text":""},{"location":"acolor/#AColor::fromAARRGGBB","title":"fromAARRGGBB","text":""},{"location":"acolor/#AColor::fromRRGGBB","title":"fromRRGGBB","text":""},{"location":"acolor/#AColor::mul","title":"mul","text":""},{"location":"acolor/#AColor::opacify","title":"opacify","text":""},{"location":"acolor/#AColor::transparentize","title":"transparentize","text":""},{"location":"acolorhsv/","title":"AColorHSV","text":"<p>Represents a 3-component floating point color (HSV).</p> Header:<code>#include &lt;AUI/Common/AColor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"acombase/","title":"AComBase","text":"<p>Helper class implementing COM AddRef Release, and QueryInterface.</p> Header:<code>#include &lt;AUI/Platform/win32/AComBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"acommandlineargs/","title":"ACommandLineArgs","text":"<p>Simple command line arguments parser.</p> Header:<code>#include &lt;AUI/Util/ACommandLineArgs.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"acommandlineargs/#public-methods","title":"Public Methods","text":"<pre><code>AOptional&lt;AString&gt; ACommandLineArgs::value(const AString&amp; flagName)\n</code></pre> <p>Finds --key=value style argument.</p> Arguments <code>flagName</code>  key name (without 2 dashes) Returns value, if presented <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>                  return sys_days(ymd);\n              },\n            }),\n            it-&gt;text());\n        it &amp; state.parsed &gt; [](AView&amp; textField, const AOptional&lt;system_clock::time_point&gt;&amp; value) {\n            textField.setAssName(\".red\", !value.hasValue());\n        };\n    };\n}\n</code></pre> examples/7guis/cells/tests/FormulaTests.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>TEST_F(Cells_Formula, ChangePropagation) {\n    mSpreadsheet[{1, 0}].expression = \"=A0+1\";\n\n    mSpreadsheet[{0, 0}].expression = \"228\";\n    EXPECT_EQ(std::get&lt;double&gt;(mSpreadsheet[{1, 0}].value.value()), 229);\n\n    mSpreadsheet[{0, 0}].expression = \"0\";\n    EXPECT_EQ(std::get&lt;double&gt;(mSpreadsheet[{1, 0}].value.value()), 1);\n}\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n</code></pre>"},{"location":"acommandlineargs/#ACommandLineArgs::value","title":"value","text":""},{"location":"acomplexfutureoperation/","title":"AComplexFutureOperation","text":"<p>Helper class to construct AFuture values.</p> Header:<code>#include &lt;AUI/Thread/AComplexFutureOperation.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"acomplexfutureoperation/#detailed-description","title":"Detailed Description","text":"<p>AComplexFutureOperation is used to handle results and errors of multiple sequential futures.</p> <p>AComplexFutureOperation is intended to construct a future with makeFuture(). makeFuture() must be called.</p> <p>If AComplexFutureOperation get destroyed, it reports error to it's future if it does not have a result. AComplexFutureOperation should be carried with AFuture::onSuccess callbacks of other futures or any other callback-based structure, hence the destruction without result is treated as an error.</p>"},{"location":"acomplexfutureoperation/#public-types","title":"Public Types","text":"<p><code>class AComplexFutureOperation::NoValueException</code></p> <p>Empty structure.</p>"},{"location":"acomplexfutureoperation/#AComplexFutureOperation::NoValueException","title":"NoValueException","text":""},{"location":"acomplexfutureoperation/#public-methods","title":"Public Methods","text":"<pre><code>AFuture&lt;T&gt; AComplexFutureOperation::makeFuture()\n</code></pre> <p>Creates AFuture object for this operation. <p>AFuture can be created only once. <pre><code>void AComplexFutureOperation::supplyException()\n</code></pre> <p>Pushes the result of operation to it's AFuture. <pre><code>void AComplexFutureOperation::supplyValue(T value)\n</code></pre> <p>Pushes the result of operation to it's AFuture. Arguments <code>value</code>  operation"},{"location":"acomplexfutureoperation/#AComplexFutureOperation::makeFuture","title":"makeFuture","text":""},{"location":"acomplexfutureoperation/#AComplexFutureOperation::supplyException","title":"supplyException","text":""},{"location":"acomplexfutureoperation/#AComplexFutureOperation::supplyValue","title":"supplyValue","text":""},{"location":"acomptr/","title":"AComPtr","text":"<p>Takes care of AddRef and Release() reference counting mechanism of COM objects.</p> Header:<code>#include &lt;AUI/Platform/win32/AComPtr.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aconcatinputstream/","title":"AConcatInputStream","text":"<p>Concatenates multiple sequential input streams into one.</p> Header:<code>#include &lt;AUI/IO/AConcatInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aconditionvariable/","title":"AConditionVariable","text":"<p>Represents a condition variable.</p> Header:<code>#include &lt;AUI/Thread/AConditionVariable.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aconditionvariable/#detailed-description","title":"Detailed Description","text":"<p>AConditionVariable extends std::condition_variable with thread interruption functionality.</p>"},{"location":"aconditionvariable/#public-methods","title":"Public Methods","text":"<pre><code>void AConditionVariable::notify_all()\n</code></pre> <p>Notifies all observing threads.</p> Performance note This function is faster than notify_one. <pre><code>void AConditionVariable::notify_one()\n</code></pre> <p>Notifies one observing thread.</p> Performance note This function is slower than notify_all. <pre><code>template&lt;typename Lock, typename Predicate &gt;\nvoid AConditionVariable::wait(Lock&amp; lock, Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>lock</code>  lock. <code>predicate</code>  which returns false if the waiting should be continued. <p>Waits for the notification.</p> <pre><code>template&lt;typename Lock, typename Duration &gt;\nvoid AConditionVariable::wait_for(Lock&amp; lock, Duration duration)\n</code></pre> Arguments <code>lock</code>  lock. <code>duration</code>  duration to waitForExitCode for. <p>Waits for the notification.</p> <pre><code>template&lt;typename Lock, typename Duration, typename Predicate &gt;\nvoid AConditionVariable::wait_for(Lock&amp; lock, Duration duration, Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>lock</code>  lock. <code>duration</code>  duration to waitForExitCode for. <code>predicate</code>  which returns false if the waiting should be continued. <p>Waits for the notification.</p> <pre><code>template&lt;typename Lock, typename Timepoint &gt;\nvoid AConditionVariable::wait_until(Lock&amp; lock, Timepoint timepoint)\n</code></pre> Arguments <code>lock</code>  lock. <code>timepoint</code>  timepoint to waitForExitCode until. <p>Waits until the notification.</p> <pre><code>template&lt;typename Lock, typename Duration, typename Predicate &gt;\nvoid AConditionVariable::wait_until(Lock&amp; lock, Duration duration, Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>lock</code>  lock. <code>duration</code>  duration to waitForExitCode until. <code>predicate</code>  which returns false if the waiting should be continued. <p>Waits until the notification.</p>"},{"location":"aconditionvariable/#AConditionVariable::notify_all","title":"notify_all","text":""},{"location":"aconditionvariable/#AConditionVariable::notify_one","title":"notify_one","text":""},{"location":"aconditionvariable/#AConditionVariable::wait","title":"wait","text":""},{"location":"aconditionvariable/#AConditionVariable::wait_for","title":"wait_for","text":""},{"location":"aconditionvariable/#AConditionVariable::wait_until","title":"wait_until","text":""},{"location":"acurl/","title":"ACurl","text":"<p>Easy curl instance.</p> Header:<code>#include &lt;AUI/Curl/ACurl.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::curl)</code>"},{"location":"acurl/#detailed-description","title":"Detailed Description","text":"<p>ACurl::Builder is used to construct ACurl.</p> <p>Analogous to Qt's QNetworkRequest.</p>"},{"location":"acurl/#public-types","title":"Public Types","text":"<p><code>enum class ACurl::Http</code></p> Constant Description <code>Http::VERSION_NONE</code> <code>Http::VERSION_1_0</code> <code>Http::VERSION_1_1</code> <code>Http::VERSION_2_0</code> <code>Http::VERSION_2TLS</code> <code>Http::VERSION_2_PRIOR_KNOWLEDGE</code> <code>Http::VERSION_3</code> <code>Http::VERSION_LAST</code> <p><code>enum class ACurl::ResponseCode</code></p> Constant Description <code>ResponseCode::HTTP_100_CONTINUE</code> <code>ResponseCode::HTTP_101_SWITCHING_PROTOCOL</code> <code>ResponseCode::HTTP_102_PROCESSING</code> <code>ResponseCode::HTTP_103_EARLY_HINTS</code> <code>ResponseCode::HTTP_200_OK</code> <code>ResponseCode::HTTP_201_CREATED</code> <code>ResponseCode::HTTP_202_ACCEPTED</code> <code>ResponseCode::HTTP_203_NON_AUTHORITATIVE_INFORMATION</code> <code>ResponseCode::HTTP_204_NO_CONTENT</code> <code>ResponseCode::HTTP_205_RESET_CONTENT</code> <code>ResponseCode::HTTP_206_PARTIAL_CONTENT</code> <code>ResponseCode::HTTP_300_MULTIPLE_CHOICE</code> <code>ResponseCode::HTTP_301_MOVED_PERMANENTLY</code> <code>ResponseCode::HTTP_302_FOUND</code> <code>ResponseCode::HTTP_303_SEE_OTHER</code> <code>ResponseCode::HTTP_304_NOT_MODIFIED</code> <code>ResponseCode::HTTP_305_USE_PROXY</code> <code>ResponseCode::HTTP_306_SWITCH_PROXY</code> <code>ResponseCode::HTTP_307_TEMPORARY_REDIRECT</code> <code>ResponseCode::HTTP_308_PERMANENT_REDIRECT</code> <code>ResponseCode::HTTP_400_BAD_REQUEST</code> <code>ResponseCode::HTTP_401_UNAUTHORIZED</code> <code>ResponseCode::HTTP_402_PAYMENT_REQUIRED</code> <code>ResponseCode::HTTP_403_FORBIDDEN</code> <code>ResponseCode::HTTP_404_NOT_FOUND</code> <code>ResponseCode::HTTP_405_METHOD_NOT_ALLOWED</code> <code>ResponseCode::HTTP_406_NOT_ACCEPTABLE</code> <code>ResponseCode::HTTP_407_PROXY_AUTHENTICATION_REQUIRED</code> <code>ResponseCode::HTTP_408_REQUEST_TIMEOUT</code> <code>ResponseCode::HTTP_409_CONFLICT</code> <code>ResponseCode::HTTP_410_GONE</code> <code>ResponseCode::HTTP_411_LENGTH_REQUIRED</code> <code>ResponseCode::HTTP_412_PRECONDITION_FAILED</code> <code>ResponseCode::HTTP_413_REQUEST_ENTITY_TOO_LARGE</code> <code>ResponseCode::HTTP_414_REQUEST_URI_TOO_LONG</code> <code>ResponseCode::HTTP_415_UNSUPPORTED_MEDIA_TYPE</code> <code>ResponseCode::HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE</code> <code>ResponseCode::HTTP_417_EXPECTATION_FAILED</code> <code>ResponseCode::HTTP_500_INTERNAL_SERVER_ERROR</code> <code>ResponseCode::HTTP_501_NOT_IMPLEMENTED</code> <code>ResponseCode::HTTP_502_BAD_GATEWAY</code> <code>ResponseCode::HTTP_503_SERVICE_UNAVAILABLE</code> <code>ResponseCode::HTTP_504_GATEWAY_TIMEOUT</code> <code>ResponseCode::HTTP_505_HTTP_VERSION_NOT_SUPPORTED</code> <p><code>enum class ACurl::Method</code></p> Constant Description <code>Method::HTTP_GET</code> <code>Method::HTTP_POST</code> <code>Method::HTTP_PUT</code> <code>Method::HTTP_DELETE</code> <p><code>struct ACurl::Response</code></p> <p>Response struct for Builder::runBlocking() and Builder::runAsync()</p> <code>ResponseCode code</code> <code>AString contentType</code> <code>AByteBuffer body</code> <p><code>struct ACurl::ErrorDescription</code></p> <p>Empty structure.</p> <p><code>class ACurl::Exception</code></p> <p>Empty structure.</p> <p><code>class ACurl::Builder</code></p> <p>Empty structure.</p>"},{"location":"acurl/#ACurl::Http","title":"Http","text":""},{"location":"acurl/#ACurl::ResponseCode","title":"ResponseCode","text":""},{"location":"acurl/#ACurl::Method","title":"Method","text":""},{"location":"acurl/#ACurl::Response","title":"Response","text":""},{"location":"acurl/#ACurl::ErrorDescription","title":"ErrorDescription","text":""},{"location":"acurl/#ACurl::Exception","title":"Exception","text":""},{"location":"acurl/#ACurl::Builder","title":"Builder","text":""},{"location":"acurl/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>using ReadCallback</code></p> <p>A read callback.</p> <p>dst destination buffer you should write to. maxLen destination buffer size aka max length. bytes written to the destination buffer. Zero means data unavailability (but the stream may be continued         in the future). Unlike regular streams, blocking is not allowed. To indicate the data unavailability, return zero. To indicate end of file, throw an AEOFException.</p> <p><code>using WriteCallback</code></p> <p>A read callback.</p> <p>data received data bytes written to the destination buffer. Zero means buffer does not have enough space to store supplied         data (but the stream may be continued in the future), the supplied data is not discarded and being kept         in the curl buffers. Unlike regular streams, blocking is not allowed. To indicate buffer overflow, return zero. To indicate end of file, throw an AEOFException.</p> <p><code>using WriteCallbackV2</code></p> <p>A read callback.</p> <p>curl curl instance data received data bytes written to the destination buffer. Zero means buffer does not have enough space to store supplied         data (but the stream may be continued in the future), the supplied data is not discarded and being kept         in the curl buffers. Unlike regular streams, blocking is not allowed. To indicate buffer overflow, return zero. To indicate end of file, throw an AEOFException.</p> <p><code>emits&lt;ErrorDescription&gt; fail</code></p> <p>Emitted on network error.</p> <p>A protocol-level error (like HTTP(S) 404) is not treated as a fail. Check for response code via the <code>getResponseCode()</code> function.</p> <p><code>emits&lt;&gt; success</code></p> <p>Emitted on success.</p> <p>A protocol-level error (like HTTP(S) 404) is not treated as a fail. Check for response code via the <code>getResponseCode()</code> function.</p>"},{"location":"acurl/#ACurl::ReadCallback","title":"ReadCallback","text":""},{"location":"acurl/#ACurl::WriteCallback","title":"WriteCallback","text":""},{"location":"acurl/#ACurl::WriteCallbackV2","title":"WriteCallbackV2","text":""},{"location":"acurl/#ACurl::fail","title":"fail","text":""},{"location":"acurl/#ACurl::success","title":"success","text":""},{"location":"acurl/#public-methods","title":"Public Methods","text":"<pre><code>virtual void ACurl::close()\n</code></pre> <p>Breaks curl loop in the run() method, closing underlying curl connection.</p> <p>curl does not have a function which immediately stops the transfer (see https://curl.se/docs/faq.html#How_do_I_stop_an_ongoing_transfe). The stop functionality is handled in ACurl by returning error code on all callbacks. close() function is non-blocking, and some time would be taken until the run() method finally returns.</p> <p>After calling close() method, none of the result signals (like fail, success) will be called.</p> <p>close() is non-blocking function.</p> <p>close() is thread-safe.</p> <p>Examples:</p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n                    auto dScale = std::stod((*re-&gt;text()).toStdString());\n                    fractalView-&gt;setPlotPositionAndScale(glm::dvec2 { dRe, dIm }, dScale);\n                    close();\n                } catch (...) {\n                    AMessageBox::show(this, \"Error\", \"Please check your values are valid numbers.\");\n                }\n            }) AUI_LET { it-&gt;setDefault(); },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n</code></pre>"},{"location":"acurl/#ACurl::close","title":"close","text":""},{"location":"acurlmulti/","title":"ACurlMulti","text":"<p>Multi curl instance.</p> Header:<code>#include &lt;AUI/Curl/ACurlMulti.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::curl)</code>"},{"location":"acurlmulti/#detailed-description","title":"Detailed Description","text":"<p>Provides support to multiple simultaneous curl requests in a one thread.</p> <p>Analogous to Qt's QNetworkAccessManager.</p> <p>All calls are processed by enqueueing them on ACurlMulti's thread, so the underlying curl handle is used by the single thread. This means that the following code will fail:</p> <p><code> auto m = _new(); m &lt;&lt; _new(...); AUI_ASSERT(!m-&gt;empty()); // assertion failure here  <p>Use AThread::processMessages() function to avoid this limitation:</p> <p><code> auto m = _new(); m &lt;&lt; _new(...); AThread::processMessages() // + AUI_ASSERT(!m-&gt;empty());       // ok!"},{"location":"acurlmulti/#public-methods","title":"Public Methods","text":"<pre><code>static ACurlMulti&amp; ACurlMulti::global()\n</code></pre> <p>Global instance of ACurlMulti, running in a separate thread.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n                for (int x = 0; x &lt; mSize.x; ++x) {\n                    glm::ivec2 i { x, y };\n                    get(mNextPopulation, i) = [&amp;] {\n                        auto around = cellsAround(i);\n</code></pre> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>struct GlobalStyle {\n    GlobalStyle() {\n        AStylesheet::global().addRules({\n          {\n            t&lt;CellView&gt;(),\n            FixedSize { 26_dp },\n            BackgroundSolid { 0xdedede_rgb },\n            Border { 1_px, 0xeaeaea_rgb },\n</code></pre>"},{"location":"acurlmulti/#ACurlMulti::global","title":"global","text":""},{"location":"acursor/","title":"ACursor","text":"<p>Represents cursor type.</p> Header:<code>#include &lt;AUI/Platform/ACursor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"acursor/#public-types","title":"Public Types","text":"<p><code>enum ACursor::System</code></p> Constant Description <code>System::DEFAULT</code>  Default arrow.  <code>System::POINTER</code>  Pointing finger.  <code>System::TEXT</code>  'I' beam.  <code>System::MOVE</code>  Something to be moved. Crosshair-like cursor.  <code>System::EW_RESIZE</code>  Bidirectional resize cursor east-west. &lt;-&gt;  <code>System::NS_RESIZE</code>  Bidirectional resize cursor north-south.  <p><code>struct ACursor::Custom</code></p> <p>Empty structure.</p>"},{"location":"acursor/#ACursor::System","title":"System","text":""},{"location":"acursor/#ACursor::Custom","title":"Custom","text":""},{"location":"acustomcaptionwindow/","title":"ACustomCaptionWindow","text":"<p>Represents a window with customizable caption bar.</p> Header:<code>#include &lt;AUI/Platform/ACustomCaptionWindow.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"acustomcaptionwindow/#detailed-description","title":"Detailed Description","text":"<p>ACustomCaptionWindow implements a fully custom window with customizable caption (title) bar. The way it's done is platform dependent. The goal is to implement a customizable caption bar yet preserve native system caption bar look and feel.</p> <p>Use getCaptionContainer to fill up window caption.</p> <p>Use getContentContainer to fill up the window contents.</p> <p>Do not use setContents/setLayout.</p> <p>Depending on the platform, AUI provides following ASS classes to customize: - \".window-title\" for whole window caption container. It has BackgroundSolid by default. - \".title\" for window title label - \".window-title-content\" for your contents - \".minimize\" for minimize button - \".close\" for close button - \".middle\" for maximize button</p>"},{"location":"acustomcaptionwindow/#public-methods","title":"Public Methods","text":"<pre><code>const _&lt;AViewContainer&gt;&amp; ACustomCaptionWindow::getCaptionContainer()\n</code></pre> Returns customizable container inside caption. <pre><code>const _&lt;AViewContainer&gt;&amp; ACustomCaptionWindow::getContentContainer()\n</code></pre> Returns actual window contents."},{"location":"acustomcaptionwindow/#ACustomCaptionWindow::getCaptionContainer","title":"getCaptionContainer","text":""},{"location":"acustomcaptionwindow/#ACustomCaptionWindow::getContentContainer","title":"getContentContainer","text":""},{"location":"acustomshaderbrush/","title":"ACustomShaderBrush","text":"Header:<code>#include &lt;AUI/Render/ABrush.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"acustomshaderbrush/#examples","title":"Examples","text":"examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n</code></pre></p>"},{"location":"acustomwindow/","title":"ACustomWindow","text":"<p>Represents a window without native caption but still draggable by top side.</p> Header:<code>#include &lt;AUI/Platform/ACustomWindow.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"acutoffsignal/","title":"ACutoffSignal","text":"<p>One-shot event communication.</p> Header:<code>#include &lt;AUI/Thread/ACutoffSignal.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"acutoffsignal/#detailed-description","title":"Detailed Description","text":"<p>Used for guaranteed signal from slave thread to master thread (i.e. wait till slave thread starts).</p>"},{"location":"acutoffsignal/#public-methods","title":"Public Methods","text":"<pre><code>void ACutoffSignal::makeSignal()\n</code></pre> <p>Flags a signal, causing the waitForSignal() to never block.</p> <pre><code>void ACutoffSignal::resetSignal()\n</code></pre> <p>Resets the cut off state so the waitForSignal() function would block again.</p> <pre><code>void ACutoffSignal::waitForSignal()\n</code></pre> <p>Wait for makeSignal().</p> <p>waitForSignal() blocks the thread until makeSignal() is not called by other thread.</p> <p>Unlike condition variable, the second call to makeSignal() will not block. To override this behaviour, use the resetSignal() function.</p>"},{"location":"acutoffsignal/#ACutoffSignal::makeSignal","title":"makeSignal","text":""},{"location":"acutoffsignal/#ACutoffSignal::resetSignal","title":"resetSignal","text":""},{"location":"acutoffsignal/#ACutoffSignal::waitForSignal","title":"waitForSignal","text":""},{"location":"adatabinding/","title":"ADataBinding","text":"<p>Data binding implementation.</p> Header:<code>#include &lt;AUI/Util/ADataBinding.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adatabinding/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p> If const reference of your model passed, ADataBinding will create and manage its own copy of your model. </p> <p> If pointer of your model passed, ADataBinding will reference to your model and write directly to your model. When ADataBinding is destructed the pointer will not be deleted. </p> <p>Example:</p> <pre><code>_new&lt;ATextField&gt;() &amp;&amp; dataBinding(&amp;User::username)\n</code></pre> <p>This code will bind ATextField with username field in the User model.</p> <p>Another example:</p> <p> <pre><code>class MyWindow: public AWindow {\npublic:\n    MyWindow(): AWindow(\"Test\") {\n\n        struct Model {\n            int value = 0;\n        };\n\n        auto data = _new&lt;ADataBinding&lt;Model&gt;&gt;(Model{});\n\n        data-&gt;addObserver(&amp;Model::value, [](int v) {\n            ALogger::info(\"Debug\") &lt;&lt; \"New value: \" &lt;&lt; v;\n        });\n\n        setContents(Centered {\n            Vertical {\n                Label { } AUI_LET {\n                    data-&gt;addObserver(&amp;Model::value, [it](int v) {\n                        it-&gt;setText(\"{}\"_format(v));\n                    });\n                },\n                Horizontal{\n                    Button{\"+\"}.clicked(this, [data] {\n                        data-&gt;getEditableModel().value += 1;\n                        data-&gt;notifyUpdate();\n                    }),\n                    Button{\"-\"}.clicked(this, [data] {\n                        data-&gt;getEditableModel().value -= 1;\n                        data-&gt;notifyUpdate();\n                    }),\n                },\n            }\n        });\n    }\n};\n</code></pre></p> <p>Here, we use getEditableModel() in order to change data in our model and notifyUpdate() to notify.</p> <p>Also, we use [AUI_LET](aui_let.md) construction to define custom format for label.</p>"},{"location":"adatabinding/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;&gt; modelChanged</code></p> <p>Data in the model has changed.</p>"},{"location":"adatabinding/#ADataBinding::modelChanged","title":"modelChanged","text":""},{"location":"adatabinding/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;typename View, typename ModelField, typename SetterArg &gt;\nauto ADataBinding::operator()\n</code></pre> <p>Create a connection to setter only.</p> Arguments <code>field</code>  pointer-to-member-field of model. <code>setterFunc</code>  pointer-to-member-function setter. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                    break;\n                }\n\n                case got&lt;token::Plus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::plus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n                    break;\n                }\n\n                case got&lt;token::Minus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::minus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n</code></pre> <pre><code>template&lt;typename ModelField, typename SetterLambda &gt;\nauto ADataBinding::operator()\n</code></pre> <p>Create a connection to specified lambda setter only.</p> Arguments <code>field</code>  pointer-to-member-field of model. <code>setterLambda</code>  lambda which accepts reference to your view type and const reference to data (see examples). <p>View type is deduces from the first argument of your lambda. <pre><code>struct Model {\n  AString text;\n};\nauto model = _new&lt;ADataBinding&lt;Model&gt;&gt;(Model{});\n_new&lt;ALabel&gt;() &amp;&amp; model(&amp;Model::text, [](ALabel&amp; view, const AString&amp; data) {\n   view.setText(data);\n});\n</code></pre></p> <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                    break;\n                }\n\n                case got&lt;token::Plus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::plus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n                    break;\n                }\n\n                case got&lt;token::Minus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::minus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n</code></pre> <pre><code>template&lt;typename View, typename ModelField, typename GetterRV, aui::invocable&lt;View *, const ModelField &amp;&gt; Setter &gt;\nauto ADataBinding::operator()\n</code></pre> <p>Create a connection to specified pointer-to-member-field signal and pointer-to-member-function setter.</p> Arguments <code>field</code>  pointer-to-member-field of model. <code>getter</code>  pointer-to-member-field of view's signal <code>setter</code>  pointer-to-member-field of view's setter <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                    break;\n                }\n\n                case got&lt;token::Plus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::plus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n                    break;\n                }\n\n                case got&lt;token::Minus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::minus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n</code></pre> <pre><code>template&lt;typename Data &gt;\nauto ADataBinding::operator()\n</code></pre> <p>Create a connection via ADataBindingDefault.</p> Arguments <code>field</code>  pointer-to-member-field of model. <p>ADataBindingDefault must be defined for model type and your view.</p> <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                    break;\n                }\n\n                case got&lt;token::Plus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::plus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n                    break;\n                }\n\n                case got&lt;token::Minus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::minus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n</code></pre> <pre><code>template&lt;typename Data, aui::invocable&lt;Data&gt; Projection &gt;\nADataBindingLinker2&lt;Model,Data,Projection&gt; ADataBinding::operator()\n</code></pre> <p>Create a connection via ADataBindingDefault and projection (setter only).</p> <p>ADataBindingDefault must be defined for model type and your view.</p> <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                    break;\n                }\n\n                case got&lt;token::Plus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::plus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n                    break;\n                }\n\n                case got&lt;token::Minus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::minus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n</code></pre>"},{"location":"adatabinding/#ADataBinding::operator","title":"operator","text":""},{"location":"adatabindingdefault/","title":"ADataBindingDefault","text":"<p>Defines how View handles properties of FieldType type.</p> Header:<code>#include &lt;AUI/Util/ADataBinding.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adatabindingdefault/#detailed-description","title":"Detailed Description","text":"<p>Example specialization: <pre><code>template&lt;&gt;\nstruct ADataBindingDefault&lt;ALabel, AString&gt; {\npublic:\n    static auto property(const _&lt;ALabel&gt;&amp; view) { return view-&gt;text(); }\n};\n</code></pre></p>"},{"location":"adatabindingdefault/#public-methods","title":"Public Methods","text":""},{"location":"adatabindingdefault/#ADataBindingDefault::ASignal<FieldType>","title":"ASignal   <pre><code>static ADataBindingDefault::ASignal&lt;FieldType&gt;(View::* getGetter())\n</code></pre> <p>Returns getter for ADataBinding (deprecated)</p>      <pre><code>static auto ADataBindingDefault::property(const _&lt;View&gt;&amp; view)\n</code></pre> <p>Returns property definition for FieldType</p>  Arguments   <code>view</code>  view to return property of       <pre><code>static void ADataBindingDefault::setup(const _&lt;View&gt;&amp; view)\n</code></pre> <p>Called then view linked with field.</p>  Arguments   <code>view</code>  view to link with       <pre><code>static ADataBindingDefault::void(View::* getSetter())\n</code></pre> <p>Returns setter for ADataBinding (deprecated)</p>","text":""},{"location":"adatabindingdefault/#ADataBindingDefault::property","title":"property","text":""},{"location":"adatabindingdefault/#ADataBindingDefault::setup","title":"setup","text":""},{"location":"adatabindingdefault/#ADataBindingDefault::void","title":"void","text":""},{"location":"adbus/","title":"ADBus","text":"<p>IPC on freedesktop linux</p> Header:<code>#include &lt;AUI/Platform/linux/ADBus.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adbus/#public-types","title":"Public Types","text":"<p><code>class ADBus::Exception</code></p> <p>Exception thrown on dbus errors.</p> <p>Empty structure.</p> <p><code>struct ADBus::MessageFilter</code></p> <p>Empty structure.</p>"},{"location":"adbus/#ADBus::Exception","title":"Exception","text":""},{"location":"adbus/#ADBus::MessageFilter","title":"MessageFilter","text":""},{"location":"adeque/","title":"ADeque","text":"<p>A std::deque with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/ADeque.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"adeque/#public-methods","title":"Public Methods","text":"<pre><code>bool ADeque::contains(const StoredType&amp; value)\n</code></pre> Returns true if container contains an element, false otherwise. <pre><code>StoredType&amp; ADeque::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>const StoredType&amp; ADeque::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>AOptional&lt;size_t&gt; ADeque::indexOf(const StoredType&amp; value)\n</code></pre> Arguments <code>value</code>  element to find. Returns index of the specified element. If element is not found, std::nullopt is returned. <pre><code>template&lt;typename OtherContainer &gt;\niterator ADeque::insertAll(const OtherContainer&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator ADeque::insertAll(iterator at, const OtherContainer&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\nbool ADeque::isSubsetOf(const OtherContainer&amp; c)\n</code></pre> Returns true if <code>c</code> container is a subset of this container, false otherwise. <pre><code>StoredType&amp; ADeque::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>const StoredType&amp; ADeque::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>void ADeque::removeAll(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes all occurrences of <code>item</code>.</p> <pre><code>void ADeque::removeAt(size_t index)\n</code></pre> Arguments <code>index</code> index of the element. <p>Removes element at the specified index.</p> Sneaky assertions <code>index</code> points to the existing element. <pre><code>void ADeque::removeFirst(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes first occurrence of <code>item</code>.</p> <pre><code>template&lt;typename Predicate &gt;\nvoid ADeque::removeIf(Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>predicate</code>  predicate <p>Removes element if <code>predicate(container[i]) == true</code>.</p>"},{"location":"adeque/#ADeque::contains","title":"contains","text":""},{"location":"adeque/#ADeque::first","title":"first","text":""},{"location":"adeque/#ADeque::indexOf","title":"indexOf","text":""},{"location":"adeque/#ADeque::insertAll","title":"insertAll","text":""},{"location":"adeque/#ADeque::isSubsetOf","title":"isSubsetOf","text":""},{"location":"adeque/#ADeque::last","title":"last","text":""},{"location":"adeque/#ADeque::removeAll","title":"removeAll","text":""},{"location":"adeque/#ADeque::removeAt","title":"removeAt","text":""},{"location":"adeque/#ADeque::removeFirst","title":"removeFirst","text":""},{"location":"adeque/#ADeque::removeIf","title":"removeIf","text":""},{"location":"adesktop_fileextension/","title":"ADesktop::FileExtension","text":"<p>Desktop-specific functions.</p> Header:<code>#include &lt;AUI/Platform/ADesktop.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adesktop_fileextension/#detailed-description","title":"Detailed Description","text":"<p>These functions are intended to work only on desktop platforms; on mobile platforms functions filled with stubs.</p>"},{"location":"adirchooserview/","title":"ADirChooserView","text":"<p>A text field with \"...\" button prompting path to a dir.</p> <p></p> Header:<code>#include &lt;AUI/View/APathChooserView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adividerview/","title":"ADividerView","text":"<p>Base class for AHDividerView and AVDivierView.</p> Header:<code>#include &lt;AUI/View/ADividerView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adoublenumberpicker/","title":"ADoubleNumberPicker","text":"<p>A text field for numbers with increase/decrease buttons.</p> <p></p> Header:<code>#include &lt;AUI/View/ADoubleNumberPicker.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adoublenumberpicker/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;double&gt; valueChanged</code></p> <p>Number changed.</p> <p><code>emits&lt;double&gt; valueChanging</code></p> <p>Number is changing.</p>"},{"location":"adoublenumberpicker/#ADoubleNumberPicker::valueChanged","title":"valueChanged","text":""},{"location":"adoublenumberpicker/#ADoubleNumberPicker::valueChanging","title":"valueChanging","text":""},{"location":"adragarea/","title":"ADragArea","text":"<p>Wrapping container to drag views inside of it.</p> <p></p> Header:<code>#include &lt;AUI/View/ADragArea.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adragarea/#detailed-description","title":"Detailed Description","text":"<p>Contained views must be either wrapped by convertToDraggable or have an ADragArea::ADraggableHandle inside.</p>"},{"location":"adragarea/#public-types","title":"Public Types","text":"<p><code>class ADragArea::ADraggableHandle</code></p> <p>Empty structure.</p>"},{"location":"adragarea/#ADragArea::ADraggableHandle","title":"ADraggableHandle","text":""},{"location":"adragndrop/","title":"ADragNDrop","text":"<p>Utility class for creating and processing drag-n-drop events.</p> Header:<code>#include &lt;AUI/Platform/ADragNDrop.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adragndrop/#detailed-description","title":"Detailed Description","text":"<p>Platform table</p> Windows Supported Linux - macOS - Android n/a iOS n/a"},{"location":"adragndrop/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.h <p>Views Example - All-in-one views building example. <pre><code>class ExampleWindow: public AWindow {\npublic:\n    ExampleWindow();\n\n    void onDragDrop(const ADragNDrop::DropEvent&amp; event) override;\n\n    bool onDragEnter(const ADragNDrop::EnterEvent&amp; event) override;\n\nprivate:\n    ADeque&lt;_&lt;AWindow&gt;&gt; mWindows;\n</code></pre></p>"},{"location":"adragndrop/#public-types","title":"Public Types","text":"<p><code>struct ADragNDrop::EnterEvent</code></p> <p>Examples:</p> <p>Empty structure.</p> <p><code>struct ADragNDrop::DropEvent</code></p> <p>Examples:</p> <p>Empty structure.</p>"},{"location":"adragndrop/#ADragNDrop::EnterEvent","title":"EnterEvent","text":""},{"location":"adragndrop/#ADragNDrop::DropEvent","title":"DropEvent","text":""},{"location":"adragndrop/#public-methods","title":"Public Methods","text":"<pre><code>void ADragNDrop::perform(AWindowBase* sourceWindow)\n</code></pre> <p>Pushes out a drag-n-drop operation to the OS.</p>"},{"location":"adragndrop/#ADragNDrop::perform","title":"perform","text":""},{"location":"adrawableview/","title":"ADrawableView","text":"<p>Simple view to draw images.</p> <p></p> Header:<code>#include &lt;AUI/View/ADrawableView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adrawableview/#detailed-description","title":"Detailed Description","text":"<p>ADrawableView brings you more control over the drawable. This is useful for drawables with extended interface (i.e., AAnimatedImage).</p> <p>The sizing and positioning acts like ass::BackgroundImage. Moreover, these rules are taken from ass::BackgroundImage applied to ADrawableView: <pre><code>auto drawable = IDrawable::fromUrl(\":animation.webp\");\n_new&lt;ADrawableView&gt;(drawable) AUI_WITH_STYLE {\n  BackgroundImage({}, {}, {}, Sizing::COVER), // &lt;- drawable is sized and positioned as with COVER.\n};\n</code></pre></p> <p>When applying ass::BackgroundImage, do not pass url to it, it's redundant for ADrawableView and would cause a debug error.</p>"},{"location":"adrawableview/#api-surface","title":"API surface","text":"<p><code>struct declarative::Icon</code></p> <p>Empty structure.</p>"},{"location":"adrawableview/#examples","title":"Examples","text":"examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>    window-&gt;setContents(headerWithContents(\n        Centered {\n          Vertical::Expanding {\n            Centered {\n              Icon { \":logo.svg\" } AUI_WITH_STYLE { FixedSize { 128_dp } },\n            } AUI_WITH_STYLE { FixedSize { 500_dp, {} } },\n            AText::fromString(\n                \"    \u2014 Eh bien, mon prince. G\u00eanes et Lucques ne sont plus que des apanages, des \"\n                \"\u043f\u043e\u043c\u0435\u0441\u0442\u044c\u044f, de la famille Buonaparte. Non, je vous pr\u00e9viens que si vous ne me dites pas \"\n                \"que nous avons la guerre, si vous vous permettez encore de pallier toutes les infamies, \"\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre></p>"},{"location":"adrawableview/#public-methods","title":"Public Methods","text":"<pre><code>explicit ADrawableView::ADrawableView(const AUrl&amp; url)\n</code></pre> <p>Create an instance with the URL of a image resource.</p> Arguments <code>url</code>  URL to the image resource. <pre><code>explicit ADrawableView::ADrawableView(_&lt;IDrawable&gt; drawable)\n</code></pre> <p>Create an instance from the given drawable.</p> Arguments <code>drawable</code>  The IDrawable to be rendered. <pre><code>auto ADrawableView::drawable()\n</code></pre> <p>Drawable property.</p>"},{"location":"adrawableview/#ADrawableView::ADrawableView","title":"constructor","text":""},{"location":"adrawableview/#ADrawableView::drawable","title":"drawable","text":""},{"location":"adropdownlist/","title":"ADropdownList","text":"<p>A button with dropdown list.</p> <p></p> Header:<code>#include &lt;AUI/View/ADropdownList.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"adropdownlist/#examples","title":"Examples","text":"examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n</code></pre></p>"},{"location":"adropdownlist/#public-methods","title":"Public Methods","text":"<pre><code>auto ADropdownList::selectionId()\n</code></pre> <p>Selected id property.</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre>"},{"location":"adropdownlist/#ADropdownList::selectionId","title":"selectionId","text":""},{"location":"adynamicpipe/","title":"ADynamicPipe","text":"<p>An asynchronous buffer that converts an IInputStream to IOutputStream (and otherwise).</p> Header:<code>#include &lt;AUI/IO/ADynamicPipe.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"adynamicpipe/#detailed-description","title":"Detailed Description","text":"<p>ADynamicPipe is similar to the unix pipes. It's slower than APipe but it's capable to store any byte count.</p> <p>Unlike APipe, ADynamicPipe never blocks the thread which can be useful in an asynchronous system.</p>"},{"location":"adynamicvector/","title":"ADynamicVector","text":"<p>Vector implementation for ASmallVector.</p> Header:<code>#include &lt;AUI/Common/ADynamicVector.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"adynamicvector/#detailed-description","title":"Detailed Description","text":"<p>Note</p> <p>This vector implementation is indented to use only by ASmallVector. If it's not your case, consider using AVector instead.</p>"},{"location":"adynamicvector/#public-methods","title":"Public Methods","text":"<pre><code>bool ADynamicVector::contains(const StoredType&amp; value)\n</code></pre> Returns true if container contains an element, false otherwise. <pre><code>StoredType&amp; ADynamicVector::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>const StoredType&amp; ADynamicVector::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>template&lt;aui::incrementable Iterator, aui::invocable&lt;decltype(* std::declval&lt;Iterator&gt;())&gt; UnaryOperation &gt;\nstatic auto ADynamicVector::fromRange(aui::range&lt;Iterator&gt; range, UnaryOperation&amp;&amp; transformer)\n</code></pre> <p>Constructs a new vector of transformed items of the range.</p> Arguments <code>range</code>  items to transform from. <code>transformer</code>  transformer function. Returns A new vector. <pre><code>AOptional&lt;size_t&gt; ADynamicVector::indexOf(const StoredType&amp; value)\n</code></pre> Arguments <code>value</code>  element to find. Returns index of the specified element. If element is not found, std::nullopt is returned. <pre><code>template&lt;typename OtherContainer &gt;\niterator ADynamicVector::insertAll(const OtherContainer&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator ADynamicVector::insertAll(OtherContainer&amp;&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator ADynamicVector::insertAll(iterator at, const OtherContainer&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator ADynamicVector::insertAll(iterator at, OtherContainer&amp;&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\nbool ADynamicVector::isSubsetOf(const OtherContainer&amp; c)\n</code></pre> Returns true if <code>c</code> container is a subset of this container, false otherwise. <pre><code>StoredType&amp; ADynamicVector::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>const StoredType&amp; ADynamicVector::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>void ADynamicVector::removeAll(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes all occurrences of <code>item</code>.</p> <pre><code>void ADynamicVector::removeAt(size_t index)\n</code></pre> Arguments <code>index</code> index of the element. <p>Removes element at the specified index.</p> Sneaky assertions <code>index</code> points to the existing element. <pre><code>void ADynamicVector::removeFirst(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes first occurrence of <code>item</code>.</p> <pre><code>template&lt;typename Predicate &gt;\nvoid ADynamicVector::removeIf(Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>predicate</code>  predicate <p>Removes element if <code>predicate(container[i])</code> == true.</p>"},{"location":"adynamicvector/#ADynamicVector::contains","title":"contains","text":""},{"location":"adynamicvector/#ADynamicVector::first","title":"first","text":""},{"location":"adynamicvector/#ADynamicVector::fromRange","title":"fromRange","text":""},{"location":"adynamicvector/#ADynamicVector::indexOf","title":"indexOf","text":""},{"location":"adynamicvector/#ADynamicVector::insertAll","title":"insertAll","text":""},{"location":"adynamicvector/#ADynamicVector::isSubsetOf","title":"isSubsetOf","text":""},{"location":"adynamicvector/#ADynamicVector::last","title":"last","text":""},{"location":"adynamicvector/#ADynamicVector::removeAll","title":"removeAll","text":""},{"location":"adynamicvector/#ADynamicVector::removeAt","title":"removeAt","text":""},{"location":"adynamicvector/#ADynamicVector::removeFirst","title":"removeFirst","text":""},{"location":"adynamicvector/#ADynamicVector::removeIf","title":"removeIf","text":""},{"location":"aembedauiwrap/","title":"AEmbedAuiWrap","text":"<p>Helper for applications with custom window initialization.</p> Header:<code>#include &lt;AUI/Platform/AEmbedAuiWrap.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aembedauiwrap/#detailed-description","title":"Detailed Description","text":"<p>This class is abstract; use AGLEmbedAuiWrap or ASoftwareEmbedAuiWrap instead.</p>"},{"location":"aembedauiwrap/#public-types","title":"Public Types","text":"<p><code>class AEmbedAuiWrap::EmbedWindow</code></p> <p>Empty structure.</p>"},{"location":"aembedauiwrap/#AEmbedAuiWrap::EmbedWindow","title":"EmbedWindow","text":""},{"location":"aembedauiwrap/#public-methods","title":"Public Methods","text":"<pre><code>bool AEmbedAuiWrap::isUIConsumesMouseAt(int x, int y)\n</code></pre> Returns true if UI is opaque for mouse at specified position <pre><code>void AEmbedAuiWrap::onCharEntered(wchar_t c)\n</code></pre> <p>Handle char entered in UI.</p> <pre><code>void AEmbedAuiWrap::onPointerMove(int x, int y)\n</code></pre> <p>Handle mouse move in UI.</p> Arguments <code>x</code>  x position <code>y</code>  y position <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>                circle.radius, 1);\n        }\n    }\n\n    void onPointerMove(glm::vec2 pos, const APointerMoveEvent&amp; event) override {\n        AView::onPointerMove(pos, event);\n        mHoveredCircle = [&amp;] {\n            Circle* result = nullptr;\n            float nearestDistanceToCursor = std::numeric_limits&lt;float&gt;::max();\n            for (auto&amp; circle : mState-&gt;circles.raw) {\n</code></pre> <pre><code>void AEmbedAuiWrap::onPointerPressed(int x, int y, APointerIndex pointerIndex)\n</code></pre> <p>Handle mouse pressed in UI.</p> Arguments <code>x</code>  x position <code>y</code>  y position <code>pointerIndex</code>  mouse button or finger index <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n        AView::onPointerPressed(event);\n        glm::ivec2 position = glm::ivec2(event.position / float(SCALE));\n        (*mCells)[position] = !(*mCells)[position];\n        updateTexture();\n    }\n</code></pre> <pre><code>void AEmbedAuiWrap::onPointerReleased(int x, int y, APointerIndex pointerIndex)\n</code></pre> <p>Handle mouse released in UI.</p> Arguments <code>x</code>  x position <code>y</code>  y position <code>pointerIndex</code>  mouse button or finger index <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        };\n    }\n\npublic:\n    void onPointerReleased(const APointerReleasedEvent&amp; event) override {\n        AView::onPointerReleased(event);\n        if (event.asButton != AInput::LBUTTON) {\n            return;\n        }\n        class ActionAddCircle : public IAction {\n</code></pre> <pre><code>void AEmbedAuiWrap::onScroll(int mouseX, int mouseY, int scrollX, int scrollY)\n</code></pre> <p>Handle onScroll in UI.</p> <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mShader.use();\n    mShader.set(UNIFORM_ITERATIONS, int(it));\n}\n\nvoid FractalView::onScroll(const AScrollEvent&amp; event) {\n    AView::onScroll(event);\n    auto projectedPos = (glm::dvec2(event.origin) / glm::dvec2(getSize()) - glm::dvec2(0.5)) * 2.0;\n    projectedPos.x *= mAspectRatio;\n    mTransform = glm::translate(mTransform, glm::vec3 { projectedPos, 0.0 });\n    mTransform = glm::scale(mTransform, glm::vec3(1.0 - event.delta.y / 1000.0));\n</code></pre> examples/app/fractal/src/FractalView.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    void onKeyDown(AInput::Key key) override;\n\n    void onKeyRepeat(AInput::Key key) override;\n\n    void onScroll(const AScrollEvent&amp; event) override;\n\n    void setSize(glm::ivec2 size) override;\n\n    gl::Program&amp; getShader() { return mShader; }\n</code></pre>"},{"location":"aembedauiwrap/#AEmbedAuiWrap::isUIConsumesMouseAt","title":"isUIConsumesMouseAt","text":""},{"location":"aembedauiwrap/#AEmbedAuiWrap::onCharEntered","title":"onCharEntered","text":""},{"location":"aembedauiwrap/#AEmbedAuiWrap::onPointerMove","title":"onPointerMove","text":""},{"location":"aembedauiwrap/#AEmbedAuiWrap::onPointerPressed","title":"onPointerPressed","text":""},{"location":"aembedauiwrap/#AEmbedAuiWrap::onPointerReleased","title":"onPointerReleased","text":""},{"location":"aembedauiwrap/#AEmbedAuiWrap::onScroll","title":"onScroll","text":""},{"location":"aenumerate/","title":"AEnumerate","text":"<p>Enum trait to transform enum to name, name to enum, list all enums and vise versa.</p> Header:<code>#include &lt;AUI/Reflect/AEnumerate.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aenumerate/#public-types","title":"Public Types","text":"<p><code>struct AEnumerate::Values</code></p> <p>Empty structure.</p>"},{"location":"aenumerate/#AEnumerate::Values","title":"Values","text":""},{"location":"aenumerate/#public-methods","title":"Public Methods","text":"<pre><code>static enum_t AEnumerate::byName(const AString&amp; name)\n</code></pre> <p>Map runtime name to enum value. Transforms name to uppercase as a fallback. Throws an exception if no such value.</p> <pre><code>static const AMap&lt;AString,enum_t&gt;&amp; AEnumerate::nameToValueMap()\n</code></pre> <p>Get runtime name to enum value mapping.</p> <pre><code>static const AString&amp; AEnumerate::toName(enum_t value)\n</code></pre> <p>Map runtime enum value to name. Throws an exception if no such value.</p> <pre><code>template&lt;enum_t value &gt;\nstatic AString AEnumerate::valueName()\n</code></pre> <p>Maps compile-time specified enum value to name.</p> <p>Use <code>names()[enumValue]</code> for mapping runtime values.</p> <p>This function's behaviour can be reimplemented by aui::enumerate::ValueToName trait.</p> <pre><code>static const AMap&lt;enum_t,AString,enum_less&gt;&amp; AEnumerate::valueToNameMap()\n</code></pre> <p>Map runtime enum value to name.</p>"},{"location":"aenumerate/#AEnumerate::byName","title":"byName","text":""},{"location":"aenumerate/#AEnumerate::nameToValueMap","title":"nameToValueMap","text":""},{"location":"aenumerate/#AEnumerate::toName","title":"toName","text":""},{"location":"aenumerate/#AEnumerate::valueName","title":"valueName","text":""},{"location":"aenumerate/#AEnumerate::valueToNameMap","title":"valueToNameMap","text":""},{"location":"aeofexception/","title":"AEOFException","text":"<p>Thrown when stream has reached end (end of file).</p> Header:<code>#include &lt;AUI/IO/AEOFException.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aevaluationloopexception/","title":"AEvaluationLoopException","text":"<p>Indicates an evaluation loop.</p> Header:<code>#include &lt;AUI/Util/AEvaluationLoopException.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aevaluationloopexception/#detailed-description","title":"Detailed Description","text":"<p>AEvaluationLoopException is thrown by aui::lazy and therefore by APropertyPrecomputed.</p> <p>The condition under which AEvaluationLoopException is thrown is when there's an attempt to read from or access a property during its own value evaluation. This creates an infinite evaluation loop, leading the system to throw this exception to prevent potential stack overflow and unresponsiveness due to continuous evaluations.</p>"},{"location":"aeventloop/","title":"AEventLoop","text":"<p>Default event loop implementation.</p> Header:<code>#include &lt;AUI/Thread/AEventLoop.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aeventloop/#public-methods","title":"Public Methods","text":"<pre><code>void AEventLoop::loop()\n</code></pre> <p>Default loop.</p> <p>Until mRunning = true, calls iteraton() infinitely. The loop can be broken via stop() method.</p>"},{"location":"aeventloop/#AEventLoop::loop","title":"loop","text":""},{"location":"aexception/","title":"AException","text":"<p>Abstract AUI exception.</p> Header:<code>#include &lt;AUI/Common/AException.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aexception/#detailed-description","title":"Detailed Description","text":"<p>Unlike std::exception, AException is capable to capture stack traces and efficiently output them to std::ostream. Also exception nesting is possible (via causedBy()).</p>"},{"location":"aexception/#examples","title":"Examples","text":"examples/7guis/cells/src/Functions.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>            } },\n        { \"IF\",\n            [](Ctx ctx) {\n              if (ctx.args.size() != 3) {\n                  throw AException(\"ARG\");\n              }\n              auto condition = std::get_if&lt;double&gt;(&amp;ctx.args[0]);\n              if (condition == nullptr) {\n                  throw AException(\"ARG0\");\n              }\n</code></pre></p> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    Cell&amp; operator[](glm::uvec2 pos) { return *mCells[pos.y * mSize.x + pos.x]; }\n\n    const Cell&amp; operator[](glm::uvec2 pos) const {\n        if (glm::any(glm::greaterThanEqual(pos, mSize))) {\n            throw AException(\"OUTOFBOUNDS\");\n        }\n        return *mCells[pos.y * mSize.x + pos.x];\n    }\n\n    auto operator[](formula::Range range) const {\n</code></pre></p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>const T&amp; expect(const Variant&amp; variant) {\n    if (std::holds_alternative&lt;T&gt;(variant)) {\n        return std::get&lt;T&gt;(variant);\n    }\n    throw AException(\"VALUE {}\"_format(AClass&lt;T&gt;::name()).uppercase());\n}\n\nstruct BinaryOperatorNode : public INode {\n    _unique&lt;INode&gt; left;\n    _unique&lt;INode&gt; right;\n</code></pre></p> examples/7guis/cells/src/Tokens.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                        t-&gt;reverseByte();\n                        out &lt;&lt; token::Identifier { t-&gt;readStringWhile([](char c) -&gt; bool { return std::isalnum(c); }) };\n                        continue;\n                    }\n                    throw AException(\"UNEXPECTED {}\"_format(c));\n            }\n        }\n    } catch (const AEOFException&amp;) {}\n    return out;\n}\n</code></pre></p>"},{"location":"afakemutex/","title":"AFakeMutex","text":"<p>Implements mutex interface but does nothing, useful for mocking a mutex.</p> Header:<code>#include &lt;AUI/Thread/AMutex.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afakewindowinitializer/","title":"AFakeWindowInitializer","text":"Header:<code>#include &lt;AUI/Platform/AFakeWindowInitializer.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"afatalexception/","title":"AFatalException","text":"<p>An exception that thrown when non-c++ unhandled error occurs (i.e. access violation).</p> Header:<code>#include &lt;AUI/Common/AFatalException.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afatalexception/#detailed-description","title":"Detailed Description","text":"<p>Note</p> <p>AFatalException::setGlobalHandler is supported on all platforms, but translation to AFatalError is not as it uses compiler-specific flags and hacks. See Platform support for further info.</p> <p>Translation to throwing AFatalException recovers the application from crashed state, providing you ability to handle such errors and continue normal application execution. However, still recommended to handle such errors with setGlobalHandler() to at least save user data.</p>"},{"location":"afatalexception/#AFatalException_Platform_support","title":"Platform support","text":"Platform Translation to throwing AFatalException setGlobalHandler() Windows MSVC + Linux GCC + macOS - + Android GCC + iOS - +"},{"location":"afatalexception/#public-methods","title":"Public Methods","text":"<pre><code>void* AFatalException::address()\n</code></pre> Returns Address where does the fatal exception occurred. <pre><code>int AFatalException::nativeSignalId()\n</code></pre> Returns Native signal id. <pre><code>static void AFatalException::setGlobalHandler(Handler globalHandler)\n</code></pre> <p>Sets handler for fatal exceptions.</p> Arguments <code>globalHandler</code>  handler <p>The handler is called inside OS's signal callback, thus, it's not recommended to use the following operations during callback execution:</p> <ul> <li>I/O (printf, logging, fopen, fread, fwrite, etc...)</li> <li>Heap routines (malloc, free, new, delete), including heap-based containers (std::vector, std::list,   std::queue, etc...)</li> <li>System calls (time, getcwd, etc...)</li> </ul> <p>Basically, you may want to define global AOptional&lt;AFatalException&gt; and store the copy of exception in order to process it outside of the callback.</p> <p>The callback may be used for handling and sending telemetry data (however, be aware of using unrecommended operations).</p> <pre><code>std::string_view AFatalException::signalName()\n</code></pre> Returns Signal name."},{"location":"afatalexception/#AFatalException::address","title":"address","text":""},{"location":"afatalexception/#AFatalException::nativeSignalId","title":"nativeSignalId","text":""},{"location":"afatalexception/#AFatalException::setGlobalHandler","title":"setGlobalHandler","text":""},{"location":"afatalexception/#AFatalException::signalName","title":"signalName","text":""},{"location":"afieldobservable/","title":"AFieldObservable","text":"<p>Stores a value and observes it's changes, notifying observers.</p> Header:<code>#include &lt;AUI/Util/AFieldObservable.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afieldobservable/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;typename Observer_t &gt;\nObserverHandle AFieldObservable::addObserver(Observer_t&amp;&amp; observer)\n</code></pre> <p>Adds an observer, immediately feeding the observer with the current value.</p> Arguments <code>observer</code>  observer. Optionally can accept the AFieldObservable's stored type as the first argument. <pre><code>void AFieldObservable::removeObserver(ObserverHandle h)\n</code></pre> <p>Removes an observer.</p>"},{"location":"afieldobservable/#AFieldObservable::addObserver","title":"addObserver","text":""},{"location":"afieldobservable/#AFieldObservable::removeObserver","title":"removeObserver","text":""},{"location":"afieldsignalemitter/","title":"AFieldSignalEmitter","text":"<p>Stores a value and observes it's changes, emitting a signal.</p> Header:<code>#include &lt;AUI/Util/AFieldSignalEmitter.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afilechooserview/","title":"AFileChooserView","text":"<p>A text field with \"...\" button prompting path to a file.</p> <p></p> Header:<code>#include &lt;AUI/View/APathChooserView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"afileinputstream/","title":"AFileInputStream","text":"<p>Opens a file for a binary read.</p> Header:<code>#include &lt;AUI/IO/AFileInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afileoutputstream/","title":"AFileOutputStream","text":"<p>Opens a file for a binary write.</p> Header:<code>#include &lt;AUI/IO/AFileOutputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afileoutputstream/#public-types","title":"Public Types","text":"<p><code>class AFileOutputStream::WriteException</code></p> <p>Probably thrown when target storage went out of space</p> <p>Empty structure.</p>"},{"location":"afileoutputstream/#AFileOutputStream::WriteException","title":"WriteException","text":""},{"location":"aflatvector/","title":"AFlatVector","text":"<p>Stack-only vector implementation.</p> Header:<code>#include &lt;AUI/Common/AFlatVector.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afloat/","title":"AFloat","text":"<p>Specifies text floating in text wrapping views, i.e, ATextArea, AText.</p> Header:<code>#include &lt;AUI/Enum/AFloat.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"afloat/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aforeachui/","title":"AForEachUI","text":"<p>Customizable lists display.</p> <p></p> Header:<code>#include &lt;AUI/View/AForEachUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aforeachui/#detailed-description","title":"Detailed Description","text":"<p>Many apps need to display collections of items. This document explains how you can efficiently do this in AUI.</p> <p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>Used to lazily present possibly large or infinite linear non-hierarchical sequences of data.</p> <p>If you are familiar with RecyclerView/LazyColumn/LazyRow/LazyVStack/LazyHStack, AForEachUI follows the same set of principles; with an exception: AForEachUI does not provide a scrollable area on its own.</p>"},{"location":"aforeachui/#api-surface","title":"API surface","text":"<p>AForEachUI is created by using AUI_DECLARATIVE_FOR macro.</p> <p>AUI_DECLARATIVE_FOR mimics ranged for loop semantically.</p> <p><pre><code>static const std::array users = { \"Foo\", \"Bar\", \"Lol\" };\nfor (const auto&amp; user : users) {\n  fmt::println(\"{}\", user);\n}\n</code></pre> <pre><code>static const std::array users = { \"Foo\", \"Bar\", \"Lol\" };\n...\nsetContents(Centered {\n  AScrollArea::Builder().withContents(\n    AUI_DECLARATIVE_FOR(user, users, AVerticalLayout) {\n      return Label { fmt::format(\"{}\", user) };\n    }\n  ).build() AUI_WITH_STYLE { FixedSize { 150_dp, 200_dp } },\n});\n</code></pre></p> <p></p> <p>AUI_DECLARATIVE_FOR consists of single entry variable name, a potentially reactive expression evaluating to range, layout name (acceptable are <code>AVerticalLayout</code> and <code>AHorizontalLayout</code>) and a lambda that creates a new view based on data entry. In terms of C++ syntax, the lambda is partially defined by AUI_DECLARATIVE_FOR macro; the lambda's body (including curly braces) is left up to developer. The final declaration of AUI_DECLARATIVE_FOR returns an instance of AForEachUI.</p> <p>range models one-dimensional list.</p> <p>AForEachUI works on iterator level by design. In fact, any kind of range (C++20 ranges/range-v3) can be used, starting from bidirectional containers such as <code>std::vector</code> and <code>std::list</code>, lazy non-owning dummies like <code>ranges::views::ints</code> and even fancy range views from <code>std::ranges::views</code> or <code>ranges::views</code> are acceptable. One-directional containers like <code>std::queue</code> or <code>std::stack</code> can't be used because they don't implement <code>begin()</code> and <code>end()</code>. As such, requirements to a range are dictated by <code>ranges::range</code> concept.</p> <ul> <li>range has <code>.begin()</code> method or <code>ranges::begin()</code> overload defined <code>auto it = ranges::begin(rng)</code></li> <li>range has <code>.end()</code> method or <code>ranges::end()</code> overload defined <code>auto it = ranges::end(rng)</code></li> <li>both <code>begin()</code> and <code>end()</code> return an iterator</li> <li>iterator has dereference operator <code>auto&amp; value = *it</code></li> <li>iterator has increment operator <code>++it</code></li> </ul> <p>Alternatively, these requirements can be described by a ranged for loop: <code>for (const auto&amp; value : rng) { ... }</code>.</p> <p>The range's type is erased with runtime-based range layer <code>aui::any_view</code>.</p> <p>AUI_DECLARATIVE_FOR can be nested with no restrictions in both directions.</p>"},{"location":"aforeachui/#examples","title":"Examples","text":"<p>See examples of AUI_DECLARATIVE_FOR.</p>"},{"location":"aforeachui/#lazy-semantics","title":"Lazy Semantics","text":"<p>AForEachUI presents all data available. If placed somewhere inside AScrollArea (implies AScrollAreaViewport), lazy semantics take place. This means that AForEachUI knows scroll position and sliding window size in pixels, making it possible to present a limited set of data that is actually visible, and present data further as soon as the user scrolls down the scroll area.</p> <p>Under the hood, AForEachUI stores a pair of iterators of the passed range of presented entries, forming a sliding window subrange. When the user scrolls down the list, both iterators are incremented; when the user scrolls upwards, both iterators are decremented.</p> <p>In this scenario, AForEachUI adds an extra requirement to range's iterator:</p> <ul> <li>iterator has decrement operator <code>--it</code></li> </ul> <p>If this requirement is not satisfied (case of some <code>ranges::views</code>), AForEachUI would not unload old items, unless a data update event occurred.</p> <p>The amount of displayed data is governed by range size, Render to texture tile size, AScrollArea's viewport size and individual entry size. Optimal frequency of sliding during scroll and window size are determined by AForEachUI. In particular, the sliding is performed once per Render to texture tile is passed.</p> <p>Note</p> <p>During rendering inside AScrollArea, the renderer clips visible views more precisely; the goal of lazy semantics of AForEachUI is to optimize view instantiation and layout processing overhead, as well as range views' lazy semantics, thanks to iterators.</p>"},{"location":"aforeachui/#scrollbars","title":"Scrollbars","text":"<p>From perspective of layout, lazy semantics is implemented by careful layout updates driven by scroll area events. If possible, the items that appear far from sliding window are unloaded (views are removed). The new items are loaded (new views are instantiated). To avoid content jittering, scroll position is synced with layout updates within AForEachUI. As such, these hijacking operations may confuse scroll bar.</p> <p>In modern software, especially when it comes to infinite lists in web/mobile applications (i.e., news feed), scrollbar might be completely hidden or significantly transparentized.</p> <p>This optimization gives a severe performance benefit. Despite the fact that there's a complete mess \"under the hood\" (scrollbar is the only visual confirmation), the scrolled contents appear normal and natural.</p> <p> A lie is going on behind the scenes</p> <p>clang-format off A static range like in the example above will not blow up the machine because AForEachUI is wrapped with a AScrollArea, thus it is not required to evaluate the whole range, which is infinite in our case.</p> <p>An attempt to update AForEachUI with a large range still can lead to high resource consumption, due to need of recomposition.</p>"},{"location":"aforeachui/#AFOREACHUI_UPDATE","title":"Initialization","text":"<p>This section explains how to initialize AUI_DECLARATIVE_FOR, manage lifetime of containers and how to make them reactive.</p> <p>In AUI_DECLARATIVE_FOR, a potentially reactive expression evaluating to range and the lambda that creates a new views are both lambdas with capture default by value <code>[=]</code>. This means that:</p> <ol> <li>All mentioned local variables are captured by copying.</li> <li>All mentioned class member variables (fields) are captured by reference.</li> </ol> <p>Both lambdas can be evaluated at any point during lifetime of a AForEachUI, so the by-value capture makes it's hard to introduce dangling references, by either copying locals or referencing class members.</p> <p>Most modern compilers are capable to optimize out copying and initialize *copied* locals just in place.</p> <p>An attempt to go out of the scenarios listed below will likely lead to a <code>static_assert</code> with a link to this section.</p>"},{"location":"aforeachui/#UIDeclarativeForTest_Constant_global_data","title":"Constant global data","text":"<p>The most straightforward way is using constant global data: <pre><code>static constexpr auto COLORS = { \"Red\", \"Green\", \"Blue\", \"Black\", \"White\" };\n\nclass MyWindow: public AWindow {\npublic:\n    MyWindow() {\n        setContents(Vertical {\n            AUI_DECLARATIVE_FOR(i, COLORS, AVerticalLayout) {\n              return Label { \"{}\"_format(i) };\n            }\n        });\n    }\n};\nAUI_ENTRY {\n  auto w = _new&lt;MyWindow&gt;();\n  w-&gt;show();\n  return 0;\n}\n</code></pre> It's a good idea to wrap AForEachUI with an AScrollArea. <pre><code>setContents(Vertical {\n    AScrollArea::Builder()\n        .withContents(\n            AUI_DECLARATIVE_FOR(i, COLORS, AVerticalLayout) {\n              return Label { \"{}\"_format(i) };\n            })\n        .build() AUI_WITH_STYLE { FixedSize { 150_dp, 200_dp } },\n});\n</code></pre></p>"},{"location":"aforeachui/#UIDeclarativeForTest_Infinite_ranges_and_views","title":"Infinite ranges and views","text":"<p>Most generators, ranges and views are expected to work. <pre><code>setContents(Vertical {\n    AScrollArea::Builder().withContents(\n        AUI_DECLARATIVE_FOR(i, ranges::views::ints, AVerticalLayout) {\n            return Label { \"{}\"_format(i) };\n        }\n    ).build() AUI_WITH_STYLE { FixedSize { 150_dp, 200_dp } },\n});\n</code></pre></p>"},{"location":"aforeachui/#UIDeclarativeForTest_Transferring_ownership_by_copying","title":"Transferring ownership by copying","text":"<p>When using locals, their immediate values are copied during initialization of AUI_DECLARATIVE_FOR. <pre><code>auto items = AVector&lt;AString&gt; { \"Hello\", \"World\", \"Test\" };\nsetContents(Vertical {\n    AScrollArea::Builder().withContents(\n        AUI_DECLARATIVE_FOR(i, items, AVerticalLayout) {\n           return Label { i };\n        }\n    ).build() AUI_WITH_STYLE { FixedSize { 150_dp, 200_dp } },\n});\n</code></pre> As such, an attempt to modify <code>items</code> will not reflect on presentation, because it has own copy of <code>items</code>. <pre><code>items.push_back(\"Bruh\");\n</code></pre></p>"},{"location":"aforeachui/#UIDeclarativeForTest_Borrowing_constant_containers","title":"Borrowing constant containers","text":"<p>If your container lives inside your class, its value is not copied but referenced. To avoid unobserved iterator invalidation and content changes, AUI_DECLARATIVE_FOR requires borrowed containers to be constant. There's a compile-time check to verify this requirement that does work in most cases, like this one.</p> <pre><code>class MyWindow: public AWindow {\npublic:\n    MyWindow(AVector&lt;AString&gt; colors): mColors(std::move(colors)) {\n        setContents(Vertical {\n            AUI_DECLARATIVE_FOR(i, mColors, AVerticalLayout) {\n              return Label { \"{}\"_format(i) };\n            }\n        });\n    }\nprivate:\n    const AVector&lt;AString&gt; mColors;\n};\nAUI_ENTRY {\n     auto w = _new&lt;MyWindow&gt;(AVector&lt;AString&gt;{ \"Red\", \"Green\", \"Blue\", \"Black\", \"White\" });\n     w-&gt;show();\n     return 0;\n}\n</code></pre> <p>Marking the borrowed container as const effectively saves you from unintended borrowed data changes. If you'd like to change the container or view options and AUI_DECLARATIVE_FOR to respond to the changes, read the section below.</p>"},{"location":"aforeachui/#UIDeclarativeForTest_Reactive_lists","title":"Reactive lists","text":"<p>The reason why AUI_DECLARATIVE_FOR is so restrictive about using borrowed non-const data is because it stores range's iterators under the hood. Various containers have different rules on iterator invalidation, but, since it accepts any type of range, we consider using its iterators after a modifying access to the container or a view as unsafe:</p> <ul> <li>visual presentation by AUI_DECLARATIVE_FOR might seem unresponsive to borrowed data changes,</li> <li>may lead to program crash.</li> </ul> <p>To address this issue, we provide a convenient way to make iterator invalidation observable:</p> <ul> <li>wrap the container with <code>AProperty</code>,</li> <li>dereference <code>mColors</code> in AUI_DECLARATIVE_FOR clause.</li> </ul> <pre><code>class MyWindow: public AWindow {\npublic:\n    MyWindow(AVector&lt;AString&gt; colors): mColors(std::move(colors)) {\n        setContents(Vertical {\n            _new&lt;AButton&gt;(\"Add A new color\").connect(&amp;AView::clicked, me::addColor),\n            AScrollArea::Builder().withContents(\n              AUI_DECLARATIVE_FOR(i, *mColors, AVerticalLayout) {\n                return Label { \"{}\"_format(i) };\n              }\n            ).build() AUI_WITH_STYLE { FixedSize { 150_dp, 200_dp } },\n        });\n    }\nprivate:\n    AProperty&lt;AVector&lt;AString&gt;&gt; mColors;\n\n    void addColor() {\n        mColors.writeScope()-&gt;push_back(\"A new color\");\n    }\n};\nAUI_ENTRY {\n    auto w = _new&lt;MyWindow&gt;(AVector&lt;AString&gt;{ \"Red\", \"Green\", \"Blue\", \"Black\", \"White\" });\n    w-&gt;show();\n    return 0;\n}\n</code></pre> <p>Upon clicking \"Add A new color\" button, the \"A new color\" label will appear in the list.</p>"},{"location":"aforeachui/#examples_1","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aforeachui/#public-methods","title":"Public Methods","text":"<pre><code>void AForEachUI::invalidate()\n</code></pre> <p>Notifies that range was changed or iterators might have invalidated.</p> <p>You do not need to call this manually, AUI_DECLARATIVE_FOR makes all essential connection automatically.</p>"},{"location":"aforeachui/#AForEachUI::invalidate","title":"invalidate","text":""},{"location":"aformattedcolorconverter/","title":"AFormattedColorConverter","text":"<p>Unlike AColor, this type is not universal and has a format and thus may be used in performance critical code.</p> Header:<code>#include &lt;AUI/Image/APixelFormat.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"aformattedcolorconverter/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n                image.set(\n                    { x, y },\n                    AFormattedColorConverter(\n                        (*mCells)[glm::ivec2(x, y)] == CellState::ALIVE\n                            ? AColor::WHITE\n                            : AColor::TRANSPARENT_BLACK));\n            }\n        }\n</code></pre></p>"},{"location":"aformattedimage/","title":"AFormattedImage","text":"<p>Same as AImage but all universal AColor methods replaced with concrete specific AFormattedColor type thus can be used by performance critical code.</p> Header:<code>#include &lt;AUI/Image/AImage.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"aformattedimageview/","title":"AFormattedImageView","text":"<p>Same as AImageView but all universal AColor methods replaced with concrete specific AFormattedColor type thus can be used by performance critical code.</p> Header:<code>#include &lt;AUI/Image/AImageView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"aformmultipart/","title":"AFormMultipart","text":"<p>Web multipart/form-data representation.</p> Header:<code>#include &lt;AUI/Curl/AFormMultipart.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::curl)</code>"},{"location":"afraction/","title":"AFraction","text":"Header:<code>#include &lt;AUI/Util/AFraction.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afunctionqueue/","title":"AFunctionQueue","text":"<p>Thread-safe implementation of function queue.</p> Header:<code>#include &lt;AUI/Util/AFunctionQueue.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afuture/","title":"AFuture","text":"<p>Represents a value that will be available at some point in the future.</p> Header:<code>#include &lt;AUI/Thread/AFuture.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afuture/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>AFuture is used as a result for asynchronous functions.</p> <p>AFuture is returned by AUI_THREADPOOL keyword, which is used to perform heavy operations in a background thread.</p> <pre><code>AFuture&lt;int&gt; theFuture = AUI_THREADPOOL {\n  AThread::sleep(1000); // long operation\n  return 123;\n};\n...\ncout &lt;&lt; *theFuture; // waits for the task, outputs 123\n</code></pre> <p>If your operation consists of complex future sequences, you have multiple options:</p> <ol> <li> <p>Use stackful coroutines. That is, you can use <code>operator*</code> and <code>get()</code> methods (blocking value acquiring) within a     threadpool thread (including the one that runs AUI_THREADPOOL 's body). If value is not currently available,     these methods temporarily return the thread to threadpool, effeciently allowing it to execute other tasks.</p> <p>Be aware fot <code>std::unique_lock</code> and similar RAII-based lock functions when performing blocking value acquiring operation.</p> </li> <li> <p>Use stackless coroutines. C++20 introduced coroutines language feature. That is, you can use co_await operator to     AFuture value:     <pre><code>AFuture&lt;int&gt; longOperation();\nAFuture&lt;int&gt; myFunction() {\n  int resultOfLongOperation = co_await longOperation();\n  return resultOfLongOperation + 1;\n}\n</code></pre></p> </li> <li> <p>Use AComplexFutureOperation. This class creates AFuture (root AFuture) and forwards all exceptions to the root     AFuture. This method is not recommended for trivial usecases, as it requires you to extensivly youse onSuccess     method in order to get and process AFuture result, leading your code to hardly maintainable spaghetti.</p> </li> </ol> <p>For rare cases, you can default-construct AFuture and the result can be supplied manually with the supplyValue() method:</p> <pre><code>AFuture&lt;int&gt; theFuture;\nAThread t([=] {\n  AThread::sleep(1000); // long operation\n  theFuture.supplyValue(123);\n});\nt.start();\ncout &lt;&lt; *theFuture; // 123\n</code></pre> <p>Be aware of exceptions or control flow keywords! If you don't pass the result, AFuture will always stay unavailable, thus all waiting code will wait indefinitely long, leading to resource leaks (CPU and memory). Consider using one of suggested methods of usage instead.</p> <p>AFuture provides a set of functions for both \"value emitting\" side: supplyValue(), supplyException(), and \"value receiving\" side: operator-&gt;(), operator*(), get().</p> <p>When AFuture's operation is completed it calls either onSuccess() or onError(). These callbacks are excepted to be called in any case. Use onFinally() to handle both.</p> <p>AFuture is a shared_ptr-based wrapper so it can be easily copied, pointing to the same task.</p> <p>If all AFutures of the task are destroyed, the task is cancelled. If the task is executing when cancel() is called, AFuture waits for the task, however, task's thread is still requested for interrupt. It guarantees that your task cannot be executed or be executing when AFuture destroyed and allows to efficiently utilize c++'s RAII feature.</p> <p>To manage multiple AFutures, use AAsyncHolder or AFutureSet classes.</p> <p>AFuture implements work-stealing algorithm to prevent deadlocks and optimizaze thread usage: when waiting for result, AFuture may execute the task (if not default-constructed) on the caller thread instead of waiting. See AFuture::wait for details.</p>"},{"location":"afuture/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n\n    CellState&amp; get(AVector&lt;CellState&gt;&amp; storage, glm::ivec2 position) {\n</code></pre></p>"},{"location":"afuture/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;aui::invocable&lt;const T &amp;&gt; Callback &gt;\nauto AFuture::map(Callback&amp;&amp; callback)\n</code></pre> <p>Maps this AFuture to another type of AFuture.</p> <pre><code>template&lt;aui::invocable&lt;const AException &amp;&gt; Callback &gt;\nconst AFuture&amp; AFuture::onError(Callback&amp;&amp; callback)\n</code></pre> <p>Add onError callback to the future.</p> <p>The callback will be called on the worker's thread when the async task is returned a result.</p> <p>onError does not expand AFuture's lifespan, so when AFuture becomes invalid, onSuccess would not be called.</p> <p>To expand lifespan, create an AAsyncHolder inside your window or object; then put the instance of AFuture there. Example: <pre><code>...\nprivate:\n  AAsyncHolder mAsync;\n...\n\nmAsync &lt;&lt; functionReturningFuture().onSuccess(...); // or onError\n</code></pre></p> <pre><code>template&lt;aui::invocable Callback &gt;\nconst AFuture&amp; AFuture::onFinally(Callback&amp;&amp; callback)\n</code></pre> <p>Adds the callback to both onSuccess and onResult.</p> <pre><code>void AFuture::supplyException(std::exception_ptr causedBy = std::current_exception())\n</code></pre> <p>Stores an exception from std::current_exception to the future.</p> <pre><code>void AFuture::supplyValue(T v)\n</code></pre> <p>Pushes the result to AFuture.</p> Arguments <code>v</code>  value <p>After AFuture grabbed the value, supplyValue calls onSuccess listeners with the new value.</p>"},{"location":"afuture/#AFuture::map","title":"map","text":""},{"location":"afuture/#AFuture::onError","title":"onError","text":""},{"location":"afuture/#AFuture::onFinally","title":"onFinally","text":""},{"location":"afuture/#AFuture::supplyException","title":"supplyException","text":""},{"location":"afuture/#AFuture::supplyValue","title":"supplyValue","text":""},{"location":"afutureset/","title":"AFutureSet","text":"<p>Manages multiple futures.</p> Header:<code>#include &lt;AUI/Thread/AThreadPool.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"afutureset/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>AFutureSet involves functions to efficiently manage multiple AFutures.</p> <p>Guarantees that held futures will never be executed or be during execution after AAsyncHolder is destroyed.</p>"},{"location":"afutureset/#public-methods","title":"Public Methods","text":"<pre><code>void AFutureSet::checkForExceptions()\n</code></pre> <p>Find AFutures that encountered an exception. If such AFuture is found, AInvocationTargetException is thrown.</p> <pre><code>template&lt;aui::invocable OnComplete &gt;\nvoid AFutureSet::onAllComplete(OnComplete&amp;&amp; onComplete)\n</code></pre> <p>Specifies a callback which will be called when all futures in future set would have the result.</p> <p>Even if all tasks are already completed, it's guaranteed that your callback will be called.</p> <p>The thread on which your callback will be called is undefined.</p> <p>AFutureSet is not required to be alive when AFutures would potentially call onSuccess callback since a temporary object is created to keep track of the task completeness.</p> <pre><code>void AFutureSet::waitForAll()\n</code></pre> <p>Wait for the result of every AFuture.</p>"},{"location":"afutureset/#AFutureSet::checkForExceptions","title":"checkForExceptions","text":""},{"location":"afutureset/#AFutureSet::onAllComplete","title":"onAllComplete","text":""},{"location":"afutureset/#AFutureSet::waitForAll","title":"waitForAll","text":""},{"location":"againfilter/","title":"AGainFilter","text":"<p>Implements audio gain filtering.</p> Header:<code>#include &lt;AUI/Audio/AGainFilter.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"aglembedauiwrap/","title":"AGLEmbedAuiWrap","text":"<p>Embed AUI into OpenGL rendering context</p> Header:<code>#include &lt;AUI/Platform/AGLEmbedAuiWrap.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aglibptr/","title":"AGlibPtr","text":"<p>Takes care of g_object_ref and g_object_unref() reference counting mechanism of Glib objects.</p> Header:<code>#include &lt;AUI/Platform/linux/AGlibPtr.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"agridlayout/","title":"AGridLayout","text":"<p>Grid layout with fixed-size cells.</p> Header:<code>#include &lt;AUI/Layout/AGridLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"agridlayout/#examples","title":"Examples","text":"examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    mFieldColumns = columns;\n    mFieldRows = rows;\n    mReveal = false;\n    mBombsPlanted = false;\n    mGrid-&gt;setLayout(std::make_unique&lt;AGridLayout&gt;(columns, rows));\n    mField.clear();\n    mField.resize(columns * rows);\n\n    for (int i = 0; i &lt; columns * rows; ++i) {\n        int x = i % columns;\n</code></pre></p>"},{"location":"agridsplitter/","title":"AGridSplitter","text":"<p>A resizable grid layout.</p> <p></p> Header:<code>#include &lt;AUI/View/AGridSplitter.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"agridsplitter/#detailed-description","title":"Detailed Description","text":"<p>AGridSplitter represents a grid layout which can be resized by user. Unlike ASplitter, works in both directions. AGridSplitter can be constructed with AGridSplitter::Builder.</p>"},{"location":"agridsplitter/#examples","title":"Examples","text":"examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>public:\n    CellsView(_&lt;State&gt; state) : mState(std::move(state)) {\n        ALayoutInflater::inflate(\n            this,\n            AGridSplitter::Builder()\n                    .noDefaultSpacers()\n                    .withItems([&amp;] {\n                        AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt; views;\n                        views.resize(mState-&gt;spreadsheet.size().y + 1);\n                        for (auto&amp; c : views) {\n</code></pre></p>"},{"location":"agridsplitter/#public-types","title":"Public Types","text":"<p><code>class AGridSplitter::Builder</code></p> <p>Examples:</p> <p>Empty structure.</p>"},{"location":"agridsplitter/#AGridSplitter::Builder","title":"Builder","text":""},{"location":"agroupbox/","title":"AGroupBox","text":"<p>A titled frame</p> <p></p> Header:<code>#include &lt;AUI/View/AGroupBox.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"agroupbox/#detailed-description","title":"Detailed Description","text":"<p>Group box provides a frame and a customizable title on top.</p> <p>If the title is a checkbox then it's checked state used to enable/disable the elements of this group box.</p> <p>Frame of the groupbox can be customized by <code>\".agroupbox-inner\"</code> class as like the title is customized by <code>\".agroupbox-title\"</code> class.</p> <p>Frame of the groupbox is not drawn under the title; this behaviour can be overridden by the Overflow::VISIBLE style rule applied for <code>\".agroupbox-inner\"</code>.</p> <p>Title is done by hacking the vertical layout and forcing the frame top side to the center of the title view.</p>"},{"location":"ahdividerview/","title":"AHDividerView","text":"<p>A horizontal line.</p> <p></p> Header:<code>#include &lt;AUI/View/AHDividerView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ahorizontallayout/","title":"AHorizontalLayout","text":"<p>Places views in a row.</p> Header:<code>#include &lt;AUI/Layout/AHorizontalLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ahorizontallayout/#detailed-description","title":"Detailed Description","text":"Declarative notation <code>Horizontal { }</code> <p>Horizontal layout manager places views in a row, fitting their height to the container's height. Has a <code>Horizontal</code> shortcut that allows easy usage in UI building: <pre><code>setContents(\n  Horizontal {\n    _new&lt;AButton&gt;(\"1\"),\n    _new&lt;AButton&gt;(\"2\"),\n    _new&lt;AButton&gt;(\"3\"),\n  }\n);\n</code></pre></p> <p> </p>"},{"location":"ahorizontallayout/#examples","title":"Examples","text":"examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>using namespace ass;\nusing namespace declarative;\n\nFractalWindow::FractalWindow() : AWindow(\"Mandelbrot set\") {\n    setLayout(std::make_unique&lt;AHorizontalLayout&gt;());\n\n    auto centerPosDisplay = _new&lt;ALabel&gt;(\"-\");\n    {\n        centerPosDisplay-&gt;setCustomStyle({\n          BackgroundSolid { 0x80000000_argb },\n</code></pre></p>"},{"location":"ahotcodereload/","title":"AHotCodeReload","text":"<p>Hot code reload and rapid development</p> Header:<code>#include &lt;AUI/Remote/AHotCodeReload.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::remote_tools)</code>"},{"location":"ahotcodereload/#detailed-description","title":"Detailed Description","text":"<p>The development workflow for UI applications can be repetitive and slow, commonly requiring you to:</p> <ol> <li>Write or modify code.</li> <li>Compile.</li> <li>Run the application.</li> <li>Navigate to the affected UI or feature.</li> <li>Check for expected results.</li> <li>Repeat as needed.</li> </ol> <p>Steps <code>2-5</code> are very slow and exhausting. This page briefly describes ways to reduce turnaround time during development of your application.</p>"},{"location":"ahotcodereload/#precompiled-headers","title":"Precompiled Headers","text":"<p>Precompiled headers (PCH) can significantly speed up C++ compilation by parsing common headers only once. They are especially beneficial for large projects with many dependencies.</p> <p>How to use precompiled headers with CMake:</p> <ul> <li>Create a header file (e.g. <code>pch.h</code>) containing your frequently used includes:</li> </ul> pch.h<pre><code>#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n// Add other common headers here\n</code></pre> <ul> <li>In your <code>CMakeLists.txt</code>:</li> </ul> CMakeLists.txt<pre><code># CMake 3.16 or newer recommended for target_precompile_headers\nadd_library(my_target ...)\ntarget_precompile_headers(my_target PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/pch.h\")\n</code></pre> <p>Make sure all source files include <code>pch.h</code> (either directly or via your main header). For more complex setups, review CMake\u2019s documentation on precompiled headers.</p>"},{"location":"ahotcodereload/#the-ahotcodereload-class","title":"The AHotCodeReload Class","text":"<p><code>AHotCodeReload</code> enables runtime reloading of object files, injecting new function code into a live application. This gives rapid feedback and reduces iteration time during development.</p> Figure 1. Hot reload with state preservation. Platform Supported Windows No Linux Yes macOS No Android No iOS No <p>It works by observing changes on object files, which are generated by compiler and picked up by linker. AHotCodeReload implements its own linker designed specifically to load these intermediate build files and link them against a program which is already running. Then, it scans for newly loaded functions and places hooks on old versions of these functions, so the newer version is called.</p> <p>Unlike classic way of implementing hot code reload with dynamic libraries, approach implemented in AUI does not interfere with build process nor require special project structure with complicated state management. It does not replace older symbols with newer ones, it keeps them both in memory, so referencing both is safe.</p>"},{"location":"ahotcodereload/#setup","title":"Setup","text":"<p>Link to remote_tools module: <code>aui_link(my_target PUBLIC aui::remote_tools)</code></p> <p>Add object files to track:</p>  CMake Manually <pre><code>aui_executable(aui.example.hot_code_reload)\naui_link(aui.example.hot_code_reload PRIVATE aui::core aui::views)\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    # recommended: restrict remote_tools to debug builds only\n    aui_link(aui.example.hot_code_reload PRIVATE aui::remote_tools)\n    aui_enable_hotswap(aui.example.hot_code_reload)\nendif()\n</code></pre> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#if __has_include(&lt;AUI/Remote/AHotCodeReload.h&gt;)\n#include &lt;AUI/Remote/AHotCodeReload.h&gt;\n#endif\n#include \"MyWindow.h\"\n\nAUI_ENTRY {\n#if __has_include(&lt;AUI/Remote/AHotCodeReload.h&gt;)\n    // hardcoded path\n    AHotCodeReload::inst().addFile(\"/home/projects/aui/cmake-build-debug/CMakeFiles/aui.example.hot_code_reload.dir/src/MyWindow.cpp.o\");\n#endif\n\n    _new&lt;MyWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> <p>Observe <code>AHotCodeReload::inst().patchEnd</code> to re-call patched functions to see the effect. For UI, extract <code>setContents</code> call to a member function and call it in constructor. Also, connect to <code>AHotCodeReload::inst().patchEnd</code> to re-initialize UI components after the patch. Use <code>__has_include</code> to check if <code>aui::remote_tools</code> was added in your <code>CMakeLists.txt</code>.</p> <pre><code>#if __has_include(&lt;AUI/Remote/AHotCodeReload.h&gt;)\n#include &lt;AUI/Remote/AHotCodeReload.h&gt;\n#endif\n\n\nMyWindow::MyWindow() : AWindow(\"Hot code reload\", 600_dp, 300_dp) {\n    inflate();\n#if __has_include(&lt;AUI/Remote/AHotCodeReload.h&gt;)\n    AObject::connect(AHotCodeReload::inst().patchEnd, me::inflate);\n#endif\n}\n\nvoid MyWindow::inflate() {\n    // you can update any things here because inflate is connected to AHotCodeReload::inst().patchEnd.\n    setContents(\n        Vertical {\n          _new&lt;TestRender&gt;(),\n          Label { \"Hello, world\" },\n          _new&lt;AButton&gt;(\"Click me\") AUI_LET {\n                  AObject::connect(it-&gt;clicked, AObject::GENERIC_OBSERVER, [] {\n                      AMessageBox::show(nullptr, \"Hello\", \"Hello, world!\");\n                  });\n              },\n          CheckBox {\n            .checked = AUI_REACT(mChecked),\n            .onCheckedChange = [this](bool v) { mChecked = v; },\n            .content = Label { \"Try check me\" },\n          },\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n}\n</code></pre>"},{"location":"ahotcodereload/#usage","title":"Usage","text":"<ol> <li>Launch your application.</li> <li>Edit your source code.</li> <li>Compile. (You may skip the linking step.). In IDEs, it can be accomplished by shortcuts.  CLion:    Ctrl+9.</li> <li>Wait for patching to complete.</li> <li>Repeat steps 2\u20134 as needed.</li> </ol>"},{"location":"ahotcodereload/#limitations","title":"Limitations","text":"<ol> <li><code>AHotCodeReload</code> performs some safety checks, but a patch could still break your application.</li> <li>Only functions are hooked. New function versions will reflect changes to certain variables (see below)</li> <li>For changes to become effective, the patched functions need to be called (e.g. by re-triggering relevant UI    actions or re-calling UI inflate routines <code>setContents</code>). See setup.</li> <li>Do not modify struct or class layouts, function signatures; the system cannot reliably detect or adjust for such    changes.</li> </ol> <p>What will change (in the new version of function)</p> <ul> <li>function logic</li> <li><code>static</code>/<code>thread_local</code>/global constants, literals (<code>\"string literals\"</code>, <code>123</code>, <code>true</code>, <code>nullptr</code>)</li> <li><code>static</code>/<code>thread_local</code>/global non-constant variables initialized with zeroes, which will be reinitialized with   zeroes at the time of patch, i.e., <code>static int counter = 0;</code> will reset to zero. (because those are stored in   <code>.bss</code> which linker has to create a new instance of)</li> </ul> <p>Think of it this way: when you update the source code of a function, these changes will be reflected in the new version of the function and take effect the next time that function is called. The modification is as direct as changing the text of the function itself.</p> <p>What will not change</p> <ul> <li><code>static</code>/<code>thread_local</code>/global non-constant variables initialized with non-zero values, which will use the   values prior patch. <code>static int counter = 1;</code> will not be reset to <code>1</code></li> <li>any values that were allocated on the heap or stack, including class fields. Exploit this to preserve state of   your application</li> </ul>"},{"location":"ahotcodereload/#best-practices","title":"Best Practices","text":"<ul> <li>Use hot code reloading for iterative development on function logic and UI changes.</li> <li>Do not rely on this system for data or memory layout changes.</li> <li>Consider combining hot reload with precompiled headers to further minimize turnaround time.</li> </ul>"},{"location":"ahotcodereload/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;&gt; patchBegin</code></p> <p>Signal emitted when a binary patch operation begins.</p> <p>This signal is emitted before the hot code reload system starts patching the application with new code. Can be used to prepare the application state for the upcoming changes.</p> <p><code>emits&lt;&gt; patchEnd</code></p> <p>Signal emitted when a binary patch operation completes.</p> <p>This signal is emitted after the hot code reload system has finished patching the application. Can be used to refresh UI or reinitialize components after the changes have been applied.</p>"},{"location":"ahotcodereload/#AHotCodeReload::patchBegin","title":"patchBegin","text":""},{"location":"ahotcodereload/#AHotCodeReload::patchEnd","title":"patchEnd","text":""},{"location":"ahotcodereload/#public-methods","title":"Public Methods","text":"<pre><code>void AHotCodeReload::addFile(AString path)\n</code></pre> <p>Add a single object file to be observed.</p> Arguments <code>path</code>  Path to the object file to watch for changes. <p>Adds a single object file to the hot code reload system's watch list. When changes are detected in this file, it will be automatically reloaded.</p> <p>This method will log errors if file watching fails rather than throwing exceptions.</p> <pre><code>void AHotCodeReload::addFiles(AStringView paths)\n</code></pre> <p>Add object files to be observed.</p> Arguments <code>paths</code>  paths to object files. Multiple paths can be specified by separating them with a semicolon. <p>Object files are generated by the compiler and picked up by the linker.</p> <p>Example:</p> <pre><code>AHotCodeReload::inst().addFiles(\"C:/path/to/object1.obj;C:/path/to/object2.obj\");\n</code></pre> <p>Normally, you do not need to call this method directly. It is called automatically by <code>aui_enable_hotswap</code> CMake command.</p> <pre><code>static AHotCodeReload&amp; AHotCodeReload::inst()\n</code></pre> <p>Gets the singleton instance of AHotCodeReload.</p> Returns Reference to the singleton instance. <p>This method implements the singleton pattern, ensuring only one instance of AHotCodeReload exists. The instance is created on first access and persists throughout the application lifetime.</p> <p>Example: <pre><code>AHotCodeReload::inst().addFiles(\"path/to/object.o\");\n</code></pre></p> <pre><code>void AHotCodeReload::loadBinary(const APath&amp; path)\n</code></pre> <p>Load and patch a binary object file at runtime.</p> Arguments <code>path</code>  Path to the object file to load. <p>This method loads a binary object file and patches the running application with the new code. It's typically used internally by the hot code reload system but can be called manually if needed.</p> <p>The method is thread-safe and will schedule the reload on the main thread.</p>"},{"location":"ahotcodereload/#AHotCodeReload::addFile","title":"addFile","text":""},{"location":"ahotcodereload/#AHotCodeReload::addFiles","title":"addFiles","text":""},{"location":"ahotcodereload/#AHotCodeReload::inst","title":"inst","text":""},{"location":"ahotcodereload/#AHotCodeReload::loadBinary","title":"loadBinary","text":""},{"location":"ai18n/","title":"AI18n","text":"<p>Provides i18n (internationalization) support.</p> Header:<code>#include &lt;AUI/i18n/AI18n.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aimage/","title":"AImage","text":"<p>Owning image representation.</p> Header:<code>#include &lt;AUI/Image/AImage.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"aimage/#examples","title":"Examples","text":"examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    mShader.set(UNIFORM_TR, mTransform);\n    mShader.set(UNIFORM_SQ, 1.f);\n\n    mTexture = _new&lt;gl::Texture2D&gt;();\n    mTexture-&gt;tex2D(*AImage::fromUrl(\":img/color_scheme_wikipedia.png\"));\n}\n\nvoid FractalView::render(ARenderContext context) {\n    AView::render(context);\n</code></pre></p>"},{"location":"aimageloaderregistry/","title":"AImageLoaderRegistry","text":"<p>Image loader used for IDrawable::fromUrl and AImage::fromUrl.</p> Header:<code>#include &lt;AUI/Image/AImageLoaderRegistry.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"aimageview/","title":"AImageView","text":"<p>Non-owning read-only image representation of some format.</p> Header:<code>#include &lt;AUI/Image/AImageView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"aimageview/#public-methods","title":"Public Methods","text":"<pre><code>AByteBufferView AImageView::buffer()\n</code></pre> Returns Raw image pixel data. <pre><code>std::uint8_t AImageView::bytesPerPixel()\n</code></pre> Returns Bytes per pixel. <pre><code>AImage AImageView::cropped(glm::uvec2 position, glm::uvec2 size)\n</code></pre> <p>Crops the image, creating new image with the same format.</p> Arguments <code>position</code>  offset <code>size</code>  size of new image <pre><code>const char* AImageView::data()\n</code></pre> <p>Shortcut to buffer().data().</p> <pre><code>APixelFormat AImageView::format()\n</code></pre> Returns Image pixel format. <pre><code>Color AImageView::get(glm::uvec2 position)\n</code></pre> <p>Retrieves pixel color data.</p> Arguments <code>position</code>  position Returns color of specified pixel <p>This is a universal function that basically allows you to don't care about underlying image format representation. For performance critical code you may want to use visit method.</p> <p>Specifying position out of image range causes assertion fail in debug or undefined behaviour.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n                for (int x = 0; x &lt; mSize.x; ++x) {\n                    glm::ivec2 i { x, y };\n                    get(mNextPopulation, i) = [&amp;] {\n                        auto around = cellsAround(i);\n                        switch (around) {\n                            default:\n                                return CellState::DEAD;\n                            case 2:\n</code></pre> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    }\n\n    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> <pre><code>unsigned AImageView::height()\n</code></pre> Returns Image height. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n                image.set(\n                    { x, y },\n                    AFormattedColorConverter(\n                        (*mCells)[glm::ivec2(x, y)] == CellState::ALIVE\n</code></pre> <pre><code>const char&amp; AImageView::rawDataAt(glm::uvec2 position)\n</code></pre> <p>Retrieves reference to raw data at specified position.</p> Arguments <code>position</code>  position Returns reference to raw pixel data <p>Specifying position out of image range causes assertion fail in debug or undefined behaviour.</p> <pre><code>glm::uvec2 AImageView::size()\n</code></pre> Returns Image size. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>using CellsImage = AFormattedImage&lt;APixelFormat::RGBA_BYTE&gt;;\n\nclass Cells : public AObject {\npublic:\n    Cells(glm::ivec2 size) {\n        mSize = size;\n        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n</code></pre> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n    mShader.set(UNIFORM_RATIO, mAspectRatio = float(size.x) / float(size.y));\n}\n</code></pre> examples/7guis/cells/src/Functions.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>              return double(accumulator);\n            } },\n        { \"IF\",\n            [](Ctx ctx) {\n              if (ctx.args.size() != 3) {\n                  throw AException(\"ARG\");\n              }\n              auto condition = std::get_if&lt;double&gt;(&amp;ctx.args[0]);\n              if (condition == nullptr) {\n                  throw AException(\"ARG0\");\n</code></pre> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>#include \"AUI/Common/AException.h\"\n\nclass Spreadsheet {\npublic:\n    explicit Spreadsheet(glm::uvec2 size) : mSize(size) {\n        mCells.resize(size.x * size.y);\n        for (auto&amp; v : mCells) {\n            v = std::make_unique&lt;Cell&gt;();\n            v-&gt;spreadsheet = this;\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            AGridSplitter::Builder()\n                    .noDefaultSpacers()\n                    .withItems([&amp;] {\n                        AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt; views;\n                        views.resize(mState-&gt;spreadsheet.size().y + 1);\n                        for (auto&amp; c : views) {\n                            c.resize(mState-&gt;spreadsheet.size().x + 1);\n                        }\n\n                        views[0][0] = _new&lt;AView&gt;();   // blank\n</code></pre> <pre><code>unsigned AImageView::width()\n</code></pre> Returns Image width. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n                image.set(\n                    { x, y },\n                    AFormattedColorConverter(\n                        (*mCells)[glm::ivec2(x, y)] == CellState::ALIVE\n                            ? AColor::WHITE\n</code></pre>"},{"location":"aimageview/#AImageView::buffer","title":"buffer","text":""},{"location":"aimageview/#AImageView::bytesPerPixel","title":"bytesPerPixel","text":""},{"location":"aimageview/#AImageView::cropped","title":"cropped","text":""},{"location":"aimageview/#AImageView::data","title":"data","text":""},{"location":"aimageview/#AImageView::format","title":"format","text":""},{"location":"aimageview/#AImageView::get","title":"get","text":""},{"location":"aimageview/#AImageView::height","title":"height","text":""},{"location":"aimageview/#AImageView::rawDataAt","title":"rawDataAt","text":""},{"location":"aimageview/#AImageView::size","title":"size","text":""},{"location":"aimageview/#AImageView::width","title":"width","text":""},{"location":"aimplementationmanager/","title":"AImplementationManager","text":"<p>Helps with picking implementation specified in template arguments which does not throw an exception in tryAllUntilSuccess.</p> Header:<code>#include &lt;AUI/Util/AImplementationManager.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"ainet4address/","title":"AInet4Address","text":"<p>Represents an ipv4 address with port.</p> Header:<code>#include &lt;AUI/Network/AInet4Address.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::network)</code>"},{"location":"aioexception/","title":"AIOException","text":"<p>Exception caused by input/output stream.</p> Header:<code>#include &lt;AUI/IO/AIOException.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"ajson/","title":"AJson","text":"<p>Json atom.</p> Header:<code>#include &lt;AUI/Json/AJson.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::json)</code>"},{"location":"ajson_fields/","title":"AJSON_FIELDS","text":"<p>Json fields definition.</p> Header:<code>#include &lt;AUI/Json/Conversion.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::json)</code>"},{"location":"ajson_fields/#definition","title":"Definition","text":"<pre><code>#define AJSON_FIELDS(N, ...) \\\ntemplate&lt;&gt; struct AJsonConvFieldDescriptor&lt;N&gt;: N { \\\n    auto operator()() { \\\n        return aui::impl::json::empty_tuple() \\\n                __VA_ARGS__ \\\n                ; \\\n    } \\\n};\n</code></pre>"},{"location":"ajson_fields/#detailed-description","title":"Detailed Description","text":"<pre><code>struct SomeModel {\n    type1 field1;\n    type2 field2;\n    ...\n};\n\nAJSON_FIELDS(SomeModel,\n    (field1, \"name1\")\n    (field2, \"name2\")\n    ...\n)\n</code></pre> <p>Also, flags can be set:</p> <pre><code>AJSON_FIELDS(SomeModel,\n    (field1, \"name1\")\n    (field2, \"name2\", AJsonFieldFlags::OPTIONAL)\n    ...\n)\n</code></pre> <p>See also AJsonFieldFlags.</p> <pre><code>struct SomeModel {\n    int value1;\n    AString value2;\n};\n\nAJSON_FIELDS(SomeModel,\n    (value1, \"value1\")\n    (value2, \"value2\")\n)\n\n// or\n\nAJSON_FIELDS(SomeModel,\n    AJSON_FIELDS_ENTRY(value1)\n    AJSON_FIELDS_ENTRY(value2)\n)\n</code></pre>"},{"location":"ajson_fields/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p>"},{"location":"ajson_fields_entry/","title":"AJSON_FIELDS_ENTRY","text":"<p>Json entry of the same C++ and JSON field name.</p> Header:<code>#include &lt;AUI/Json/Conversion.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::json)</code>"},{"location":"ajson_fields_entry/#definition","title":"Definition","text":"<pre><code>#define AJSON_FIELDS_ENTRY(name) (name, AUI_PP_STRINGIZE(name))\n</code></pre>"},{"location":"ajson_fields_entry/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p>"},{"location":"ajsonconv/","title":"AJsonConv","text":"<p>Simplified conversion for class fields.</p> Header:<code>#include &lt;AUI/Json/Conversion.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::json)</code>"},{"location":"ajsonconv/#detailed-description","title":"Detailed Description","text":"<p>Use AJSON_FIELDS macro.</p>"},{"location":"ajsonexception/","title":"AJsonException","text":"Header:<code>#include &lt;AUI/Json/Exception.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::json)</code>"},{"location":"ajsonparseexception/","title":"AJsonParseException","text":"Header:<code>#include &lt;AUI/Json/Exception.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::json)</code>"},{"location":"ajsontypemismatchexception/","title":"AJsonTypeMismatchException","text":"Header:<code>#include &lt;AUI/Json/Exception.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::json)</code>"},{"location":"alabel/","title":"ALabel","text":"<p>Represents a simple single-line text display view.</p> <p></p> Header:<code>#include &lt;AUI/View/ALabel.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"alabel/#detailed-description","title":"Detailed Description","text":"<p>Label is a basic UI component designed primarily for displaying text in a single line. While you can add line breaks using <code>\\n</code> to create multi-line text, it's better to use AText instead, which has proper line-breaking capabilities.</p> <pre><code>class TemperatureConverterWindow : public AWindow {\npublic:\n    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n};\n</code></pre> <p>Labels can be used to populate AButton (which is a bare container):</p> <pre><code>Button {\n  .content =\n      Horizontal {\n        Icon { \":img/save.svg\" },\n        SpacerFixed { 2_dp },\n        Label { \"Button with icon\" },\n      },\n  .onClick = { me::onClick },\n},\n</code></pre>"},{"location":"alabel/#api-surface","title":"API surface","text":"<p><code>struct declarative::Label</code></p> <code>AOptional&lt;contract::In&lt;AString&gt;&gt; text</code>  Text to display."},{"location":"alabel/#coloring-a-label","title":"Coloring a label","text":"<pre><code>static _&lt;AView&gt; link(const AString&amp; url) {\n    return Label { url } AUI_WITH_STYLE {\n               TextColor { AColor::BLUE },\n               BorderBottom { 1_px, AColor::BLUE },\n               ACursor::POINTER,\n           } AUI_LET { AObject::connect(it-&gt;clicked, AObject::GENERIC_OBSERVER, [url] { APlatform::openUrl(url); }); };\n}\n</code></pre>"},{"location":"alabel/#dynamic-text-in-a-label","title":"Dynamic text in a label","text":"<p>You can use property-system to bind a label to a variable:</p> <pre><code>class CounterWindow : public AWindow {\npublic:\n    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCounter;\n};\n</code></pre> <p>Full example</p> <p></p>"},{"location":"alabel/#examples","title":"Examples","text":"examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>                     ); },\n        Vertical::Expanding {\n          Centered {\n            Horizontal {\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n                      ATextAlign::CENTER,\n                      Backdrop {\n</code></pre></p> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake. <pre><code>MainWindow::MainWindow(): AWindow(\"Project template app\", 300_dp, 200_dp) {\n    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter. <pre><code>public:\n    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>    TimerWindow() : AWindow(\"AUI - 7GUIs - Timer\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Vertical::Expanding {\n            Horizontal {\n              Label { \"Elapsed Time:\" },\n              Centered::Expanding {\n                _new&lt;AProgressBar&gt;() AUI_LET {\n                        it &amp; mElapsedTimeRatio;\n                        it-&gt;setCustomStyle({ Expanding { 1, 0 } });\n                    },\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>                      auto radiusPopup = _new&lt;AWindow&gt;(\n                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n                                connect(\n                                    it-&gt;valueChanging, [this, circle](aui::float_within_0_1 s) {\n                                        circle-&gt;radius = s * MAX_RADIUS;\n</code></pre></p> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa. <pre><code>            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n</code></pre></p>"},{"location":"alanguagecode/","title":"ALanguageCode","text":"<p>Represents a language code in ISO 639-1, for example, en-US or ru-RU</p> Header:<code>#include &lt;AUI/i18n/ALanguageCode.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"alayout/","title":"ALayout","text":"<p>Base class for all layout managers.</p> Header:<code>#include &lt;AUI/Layout/ALayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"alayout/#public-methods","title":"Public Methods","text":"<pre><code>virtual void ALayout::addView(const _&lt;AView&gt;&amp; view, AOptional&lt;size_t&gt; index = std::nullopt)\n</code></pre> <p>Attaches view to the layout.</p> Arguments <code>view</code>  view to attach. <code>index</code> index to insert at. If not specified, when the view is inserted at the end. <p>See ABasicLayout for basic implementation of this method.</p> <p>Examples:</p> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        int y = i / columns;\n        auto cell = _new&lt;CellView&gt;(fieldAt(x, y));\n\n        setupEventHandlers(x, y, cell);\n        mGrid-&gt;addView(cell);\n    }\n\n    pack();\n}\n/// [beginGame]\n</code></pre> <pre><code>virtual AVector&lt;_&lt;AView&gt;&gt; ALayout::getAllViews()\n</code></pre> <p>Visits all views in the layout.</p> <pre><code>virtual void ALayout::onResize(int x, int y, int width, int height)\n</code></pre> <p>Applies geometry to children.</p> Arguments <code>x</code>  x coordinate in container's coordinate space, add padding if necessary. <code>y</code>  y coordinate in container's coordinate space, add padding if necessary. <code>width</code>  width of the container, add padding if necessary. <code>height</code>  height of the container, add padding if necessary. <p>See layout-managers for more info.</p> <pre><code>virtual void ALayout::removeView(aui::no_escape&lt;AView&gt; view, size_t index)\n</code></pre> <p>Detaches view from the layout.</p> Arguments <code>view</code>  view to detach. <code>index</code> index of the view in the container. This value is indented for optimization purposes in most cases;        the value may be ignored safely. <p>See ABasicLayout for basic implementation of this method.</p> <pre><code>virtual void ALayout::setSpacing(int spacing)\n</code></pre> <p>Layout spacing.</p> Arguments <code>spacing</code>  spacing in px."},{"location":"alayout/#ALayout::addView","title":"addView","text":""},{"location":"alayout/#ALayout::getAllViews","title":"getAllViews","text":""},{"location":"alayout/#ALayout::onResize","title":"onResize","text":""},{"location":"alayout/#ALayout::removeView","title":"removeView","text":""},{"location":"alayout/#ALayout::setSpacing","title":"setSpacing","text":""},{"location":"alimitedinputstream/","title":"ALimitedInputStream","text":"<p>Input stream that will pass through a maximum of a certain number of bytes - then it will return eof        (end of stream)</p> Header:<code>#include &lt;AUI/IO/ALimitedInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"alineargradientbrush/","title":"ALinearGradientBrush","text":"Header:<code>#include &lt;AUI/Render/ABrush.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"alineargradientbrush/#public-types","title":"Public Types","text":"<p><code>struct ALinearGradientBrush::ColorEntry</code></p> <p>Empty structure.</p>"},{"location":"alineargradientbrush/#ALinearGradientBrush::ColorEntry","title":"ColorEntry","text":""},{"location":"alineargradientbrush/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>AAngleRadians rotation</code></p> <p>Clockwise gradient angle.</p> <p>When using an angle, 0_deg creates a vertical gradient running bottom to top, 90_deg creates a horizontal gradient running left to right, and so on in a clockwise direction. Negative angles run in the counterclockwise direction.</p>"},{"location":"alineargradientbrush/#ALinearGradientBrush::rotation","title":"rotation","text":""},{"location":"alinearlayout/","title":"ALinearLayout","text":"<p>Implements addView/removeView/getAllViews and protected mViews field for Vertical, Horizontal and Stacked layouts.</p> Header:<code>#include &lt;AUI/Layout/ALinearLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"alinearlayout/#detailed-description","title":"Detailed Description","text":"<p>The Storage type is <code>_&lt;AView&gt;</code> by default. If you specify your own type, you would have to implement addView to fill your custom type with data, you may use addViewBasicImpl then.</p>"},{"location":"alinesegment/","title":"ALineSegment","text":"<p>2D line segment.</p> Header:<code>#include &lt;AUI/Geometry2D/ALineSegment.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"alistview/","title":"AListView","text":"<p>Displays a list model of strings.</p> <p></p> Header:<code>#include &lt;AUI/View/AListView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"alistview/#public-types","title":"Public Types","text":"<p><code>enum class AListView::SelectAction</code></p> <p>Selection action for updateSelectionOnItem.</p> Constant Description <code>SelectAction::CLEAR_SELECTION_AND_SET</code>  Clears old selection and selects the specified index. Used by selectItem.  <code>SelectAction::SET</code>  Selects the specified index. In single selection mode, acts like CLEAR_SELECTION_AND_SET.  <code>SelectAction::UNSET</code>  Deselects the specified index.  <code>SelectAction::TOGGLE</code>  Selects or deselects the specified index depending on it's current state."},{"location":"alistview/#AListView::SelectAction","title":"SelectAction","text":""},{"location":"alistview/#public-methods","title":"Public Methods","text":"<pre><code>void AListView::selectItem(size_t i)\n</code></pre> <p>Acts on the item at index i as if the user were left-clicked without keyboard modifiers on it.</p>"},{"location":"alistview/#AListView::selectItem","title":"selectItem","text":""},{"location":"alogger/","title":"ALogger","text":"<p>A logger class.</p> Header:<code>#include &lt;AUI/Logging/ALogger.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"alogger/#detailed-description","title":"Detailed Description","text":"<p>Logger is used for journaling application events like errors or some user actions.</p> <p>It provides some extra functions like logging to file and output formatting.</p> <p>It provides <code>std::cout</code>-like API.</p> <p>Example: <pre><code>ALogger::info(\"MyApp\") &lt;&lt; \"Hello world!\";\n</code></pre> Possible output: <pre><code>[00:47:02][UI Thread][Logger][INFO]: Hello world!\n</code></pre></p> <p>It's convenient to define <code>LOG_TAG</code> variable for your class: <pre><code>static constexpr auto LOG_TAG = \"MyDownloader\";\nclass MyDownloader {\npublic:\n  void someAction() {\n    ALogger::info(LOG_TAG) &lt;&lt; \"someAction() called\";\n  }\n  void downloadFile(const AString&amp; name) {\n    ALogger::info(LOG_TAG) &lt;&lt; \"Downloading file: \" &lt;&lt; name;\n  }\n}\n</code></pre></p>"},{"location":"alogger/#examples","title":"Examples","text":"examples/basic/hello_world/src/main.cpp <p>Console Hello World Example - Basic CLI Hello World application. <pre><code>static constexpr auto LOG_TAG = \"MyApp\";\n\nAUI_ENTRY {\n    ALogger::info(LOG_TAG) &lt;&lt; \"Hello world!\";\n    return 0;\n}\n</code></pre></p> examples/7guis/cells/src/Formula.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                return \"#{}!\"_format(e.getMessage());\n            }\n        };\n    } catch (const AException&amp; e) {\n        ALogger::err(\"Formula\") &lt;&lt; \"Can't parse expression \" &lt;&lt; expression &lt;&lt; \"\\n\" &lt;&lt; e;\n        return [msg = e.getMessage()](const Spreadsheet&amp;) { return \"#{}!\"_format(msg); };\n    }\n}\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p>"},{"location":"alogger/#public-types","title":"Public Types","text":"<p><code>enum ALogger::Level</code></p> <p>Examples:</p> Constant Description <code>Level::INFO</code> <code>Level::WARN</code> <code>Level::ERR</code> <code>Level::DEBUG</code> <code>Level::TRACE</code> <p><code>struct ALogger::LogWriter</code></p> <p>Examples:</p> <p>Empty structure.</p>"},{"location":"alogger/#ALogger::Level","title":"Level","text":""},{"location":"alogger/#ALogger::LogWriter","title":"LogWriter","text":""},{"location":"alogger/#public-methods","title":"Public Methods","text":"<pre><code>ALogger::ALogger(AString filename)\n</code></pre> <p>Constructor for an extra log file.</p> Arguments <code>filename</code>  file name <p>For the global logger, use ALogger::info, ALogger::warn, etc...</p> <p>Examples:</p> examples/basic/hello_world/src/main.cpp <p>Console Hello World Example - Basic CLI Hello World application.</p> <pre><code>static constexpr auto LOG_TAG = \"MyApp\";\n\nAUI_ENTRY {\n    ALogger::info(LOG_TAG) &lt;&lt; \"Hello world!\";\n    return 0;\n}\n</code></pre> examples/7guis/cells/src/Formula.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                return \"#{}!\"_format(e.getMessage());\n            }\n        };\n    } catch (const AException&amp; e) {\n        ALogger::err(\"Formula\") &lt;&lt; \"Can't parse expression \" &lt;&lt; expression &lt;&lt; \"\\n\" &lt;&lt; e;\n        return [msg = e.getMessage()](const Spreadsheet&amp;) { return \"#{}!\"_format(msg); };\n    }\n}\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> <pre><code>template&lt;aui::invocable Callable &gt;\nvoid ALogger::doLogFileAccessSafe(Callable action)\n</code></pre> <p>Allows to perform some action (access safely) on log file (which is opened all over the execution process)</p> <p>Useful when sending log file to remote server.</p> <p>On Windows, for instance, doesn't allow to read the file when it's already opened.</p> <p>Examples:</p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> <pre><code>LogWriter ALogger::log(Level level, AStringView prefix)\n</code></pre> <p>Writer a log entry with LogWriter helper.</p> Arguments <code>level</code>  level <code>prefix</code>  prefix <p>Examples:</p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> <pre><code>void ALogger::setLogFile(APath path)\n</code></pre> <p>Sets log file.</p> Arguments <code>path</code>  path to the log file. <p>Log file is opened immediately in setLogFile.</p> <p>If you want to change the log file of ALogger::global(), consider using ALogger::setLogFileForGlobal instead. <code>ALogger::global().setLogFile(...)</code> expression would cause the default log file location to open and to close immediately, when opening a log file in the specified location, causing empty file and two <code>Log file:</code> entries.</p> <p>Examples:</p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> <pre><code>static void ALogger::setLogFileForGlobal(APath path)\n</code></pre> <p>Sets log file for <code>ALogger::global()</code>.</p> Arguments <code>path</code>  path to the log file. <p>Examples:</p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre>"},{"location":"alogger/#ALogger::ALogger","title":"constructor","text":""},{"location":"alogger/#ALogger::doLogFileAccessSafe","title":"doLogFileAccessSafe","text":""},{"location":"alogger/#ALogger::log","title":"log","text":""},{"location":"alogger/#ALogger::setLogFile","title":"setLogFile","text":""},{"location":"alogger/#ALogger::setLogFileForGlobal","title":"setLogFileForGlobal","text":""},{"location":"alongpressevent/","title":"ALongPressEvent","text":"<p>Long press event.</p> Header:<code>#include &lt;AUI/Event/AGestureEvent.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"alongpressevent/#detailed-description","title":"Detailed Description","text":"<p>When handled, causes haptic feedback on some systems.</p>"},{"location":"amap/","title":"AMap","text":"<p>A std::map with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/AMap.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"amessagebox_button/","title":"AMessageBox::Button","text":"<p>Specifies button(s) to be displayed.</p> Header:<code>#include &lt;AUI/Platform/AMessageBox.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"amessagebox_button/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter. <pre><code>    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>    CircleDrawerWindow() : AWindow(\"AUI - 7GUIs - Circle Drawer\", 300_dp, 250_dp) {\n        setContents(Vertical {\n          Centered {\n            Horizontal {\n              Button { Label { \"Undo\" }, {me::undo} } AUI_LET {\n                  it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.begin(); }) &gt; &amp;AView::setEnabled;\n              },\n              Button { Label { \"Redo\" }, {me::redo} } AUI_LET {\n                it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.end(); }) &gt; &amp;AView::setEnabled;\n              },\n</code></pre></p>"},{"location":"amessagebox_button/#examples_1","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre></p>"},{"location":"amessagebox_icon/","title":"AMessageBox::Icon","text":"<p>Specifies icon to be displayed.</p> Header:<code>#include &lt;AUI/Platform/AMessageBox.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"amessagebox_icon/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>    window-&gt;setContents(headerWithContents(\n        Centered {\n          Vertical::Expanding {\n            Centered {\n              Icon { \":logo.svg\" } AUI_WITH_STYLE { FixedSize { 128_dp } },\n            } AUI_WITH_STYLE { FixedSize { 500_dp, {} } },\n            AText::fromString(\n                \"    \u2014 Eh bien, mon prince. G\u00eanes et Lucques ne sont plus que des apanages, des \"\n                \"\u043f\u043e\u043c\u0435\u0441\u0442\u044c\u044f, de la famille Buonaparte. Non, je vous pr\u00e9viens que si vous ne me dites pas \"\n                \"que nous avons la guerre, si vous vous permettez encore de pallier toutes les infamies, \"\n</code></pre></p>"},{"location":"amessagebox_icon/#examples_1","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre></p>"},{"location":"amessagebox_resultbutton/","title":"AMessageBox::ResultButton","text":"<p>Button that the user has clicked.</p> Header:<code>#include &lt;AUI/Platform/AMessageBox.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"amessagebox_resultbutton/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p>"},{"location":"amessagebox_resultbutton/#examples_1","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre></p>"},{"location":"amessagequeue/","title":"AMessageQueue","text":"<p>Universal thread-safe message (callback) queue implementation.</p> Header:<code>#include &lt;AUI/Util/AMessageQueue.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"amessagequeue/#detailed-description","title":"Detailed Description","text":"<p>Thread-safe message queue. The implementation supports enqueueing new messages inside the callbacks.</p>"},{"location":"amessagequeue/#public-methods","title":"Public Methods","text":"<pre><code>void AMessageQueue::enqueue(Message message)\n</code></pre> <p>Add message to the queue to process in processMessages().</p> <pre><code>void AMessageQueue::processMessages(Args . . . args)\n</code></pre> <p>Process messages submitted by enqueue method.</p>"},{"location":"amessagequeue/#AMessageQueue::enqueue","title":"enqueue","text":""},{"location":"amessagequeue/#AMessageQueue::processMessages","title":"processMessages","text":""},{"location":"ametric/","title":"AMetric","text":"<p>Stores dimensions in scalable units (dp, pt, etc...).</p> Header:<code>#include &lt;AUI/Util/AMetric.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ametric/#detailed-description","title":"Detailed Description","text":"<p>It's highly recommended to use only Density-independent Pixel unit (<code>_dp</code>) to make your application correctly handle systems with high DPI. In AUI, all units are density independent except <code>_px</code>. The only purpose of the <code>_px</code> unit is to define lines of exact one or two pixels wide.</p> <p>To handle high-density displays in AUI properly, business logic operates on <code>AMetric</code> (logical pixels) level only. <code>AMetric</code> values are translated to physical pixels on layout-managers and AView level.</p>"},{"location":"ametric/#initialization","title":"Initialization","text":"<p>Recommended way is to use operator literal format: <pre><code>AMetric a = 5_dp // -&gt; a = 5 dimension-independent units (= pixels on 100% scaling)\n</code></pre></p> <p>Common usage: <pre><code>AMetric a = 5_dp;\na.getValuePx() // 5 on 100% scale, 6 on 125% scale, etc\n</code></pre></p> <p>AMetric can be also initialized via value and unit:</p> <pre><code>AMetric a(5, T_DP);\n</code></pre> <p>AMetric can be also initialized with zero without unit specified (in this case, AMetric::getUnit will return T_PX):</p> <pre><code>AMetric zero1 = 0; // zero pixels\nAMetric zero2 = {}; // also zero pixels\n</code></pre> <p>However, if you try to specify nonzero integer without unit, it will produce a runtime error:</p> <pre><code>AMetric a = 5; // runtime error\n</code></pre>"},{"location":"ametric/#supported-units","title":"Supported units","text":"<p>Currently supported units:</p> Unit Enum Literal Value Density-independent Pixels T_DP _dp px * <code>scale_factor</code> Typography point T_PT _pt px * <code>scale_factor</code> * 4 / 3 Pixels T_PX _px px <p>It's highly recommended to use only Density-independent Pixel unit (_dp). DP guarantees that your application will correctly handle systems with hidpi screens.</p>"},{"location":"ametric/#public-types","title":"Public Types","text":"<p><code>enum AMetric::Unit</code></p> Constant Description <code>Unit::T_UNKNOWN</code> <code>Unit::T_PX</code> <code>Unit::T_DP</code> <code>Unit::T_PT</code>"},{"location":"ametric/#AMetric::Unit","title":"Unit","text":""},{"location":"ametric/#public-methods","title":"Public Methods","text":"<pre><code>constexpr AMetric::AMetric(T value)\n</code></pre> <p>Constructor for AMetric a; a = 0 without unit specifier. Can be used only for zero initialization (see        example) <pre><code>AMetric a = 0; // ok&lt;br /&gt;\nAMetric b = 5_dp; // ok&lt;br /&gt;\nAMetric c = 5; // produces error&lt;br /&gt;\n</code></pre></p> Arguments <code>value</code>  should be zero"},{"location":"ametric/#AMetric::AMetric","title":"constructor","text":""},{"location":"amimeddata/","title":"AMimedData","text":"<p>Mime-type data associated storage.</p> Header:<code>#include &lt;AUI/Util/AMimedData.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"amimeddata/#public-methods","title":"Public Methods","text":"<pre><code>void AMimedData::setText(const AString&amp; text)\n</code></pre> <p>Sets \"text/plain\".</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>                      connect(it-&gt;clicked, AUI_SLOT(mCells)::randomize);\n                  },\n              _new&lt;AButton&gt;() AUI_LET {\n                      it &amp; mCells.isRunning &gt; [](AButton&amp; b, bool isRunning) {\n                          b.setText(isRunning ? \"Pause\" : \"Run\");\n                      };\n                      connect(it-&gt;clicked, [&amp;] { mCells.isRunning = !mCells.isRunning; });\n                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n          },\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        case 8:\n            text += \"low\";\n            break;\n    }\n    mDifficultyLabel-&gt;setText(text);\n}\n\nNewGameWindow::NewGameWindow(MinesweeperWindow* minesweeper)\n  : AWindow(\"New game\", 100, 100, minesweeper), mMinesweeper(minesweeper) {\n    setWindowStyle(WindowStyle::MODAL);\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n        fractal,\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n\n    auto pos = fractalView-&gt;getPlotPosition();\n    re-&gt;setText(AString::number(pos.x));\n    im-&gt;setText(AString::number(pos.y));\n    scale-&gt;setText(AString::number(fractalView-&gt;getPlotScale()));\n\n    setContents(Vertical {\n      _form({\n</code></pre>"},{"location":"amimeddata/#AMimedData::setText","title":"setText","text":""},{"location":"amodelmeta/","title":"AModelMeta","text":"<p>Defines model metadata (list of fields, name of appropriate sql table, etc...)</p> Header:<code>#include &lt;AUI/Data/AModelMeta.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::data)</code>"},{"location":"amutex/","title":"AMutex","text":"<p>Basic syscall-based synchronization primitive.</p> Header:<code>#include &lt;AUI/Thread/AMutex.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"amutexwrapper/","title":"AMutexWrapper","text":"<p>Wraps the object with a Lockable, providing exclusive access layer, i.e., for thread-safety.</p> Header:<code>#include &lt;AUI/Thread/AMutexWrapper.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"amutexwrapper/#detailed-description","title":"Detailed Description","text":"<p>On debug builds, provides a runtime check for better diagnostics.</p> <p>Aka <code>boost::synchronized_value</code>.</p>"},{"location":"amutexwrapper/#implementing-thread-safety","title":"Implementing thread safety","text":"<pre><code>struct SharedResource {\n  AString data;\n};\nAMutexWrapper&lt;SharedResource, AMutex&gt; sharedResource;\nsharedResource-&gt;data = \"test\"; // bad, will crash\n\n...\n// thread 1\nstd::unique_lock lock(sharedResource); //\nsharedResource-&gt;data = \"hello\";        // ok\n...\n\n// thread 2\nstd::unique_lock lock(sharedResource); //\nsharedResource-&gt;data = \"world\";        // ok, will be done before or after \"hello\", but not simultaneously\n...\n</code></pre>"},{"location":"android/","title":"Android (operating system)","text":"<p>Android is a mobile operating system primarily developed by Google. It's the most widely used operating system in the world with over three billion monthly active users.</p> <p>Early Access Feature</p> <p>At the moment, support of Android in AUI Framework is in early stage and lacks a lot of features.</p> <p>The core operating system, known as AOSP, is free and open-source, but most devices run Google's proprietary version of Android.</p> <p>Its ecosystem includes apps like Google Chrome and Google Play Store, which are pre-installed on many devices. Modified distributions exist, such as Amazon Fire OS and LineageOS, and it has been used to develop operating systems for various electronics like TVs and wearables.</p> <p>Android shares its kernel with Linux (-based desktop OSes), but is not treated by AUI exactly as Linux.</p>"},{"location":"android/#key-considerations","title":"Key considerations","text":"<ul> <li>Like Linux (-based desktop OSes), Android is customizable - core services and components tend to vary depending on device manufacturer.   It's mostly AUI's responsibility and AUI-based applications are mostly immune to such specifics unless they use native   Java/Kotlin APIs</li> <li>Android apps can't be customized by the end user, with an exception to fonts, launcher icons and virtual keyboard</li> <li>Android app workflows use \"back button\" to close or navigate to previous page. Newer devices tend to lack such button   in hardware, so they use software button/gesture instead</li> <li>smartphones come with high density displays, so you need to use density-independent dimension units such as _dp</li> </ul>"},{"location":"android/#aui-implementation-specifics","title":"AUI implementation specifics","text":""},{"location":"anumberpicker/","title":"ANumberPicker","text":"<p>A text field for numbers with increase/decrease buttons.</p> <p></p> Header:<code>#include &lt;AUI/View/ANumberPicker.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"anumberpicker/#examples","title":"Examples","text":"examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    setContents(Vertical {\n      _form({\n        {\n          \"Cells by width:\"_as,\n          mWidth = _new&lt;ANumberPicker&gt;() AUI_LET {\n                       it-&gt;setMin(8);\n                       it-&gt;setMax(25);\n                   },\n        },\n        {\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>        _new&lt;AButton&gt;(\"Identity\").connect(&amp;AButton::clicked, AUI_SLOT(fractal)::reset),\n        _new&lt;AButton&gt;(\"Jump to coords...\")\n            .connect(&amp;AButton::clicked, this, [&amp;, fractal]() { _new&lt;JumpToCoordsWindow&gt;(fractal, this)-&gt;show(); }),\n        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n                it-&gt;setMax(1000);\n                it-&gt;setValue(350);\n            },\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n</code></pre></p> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa. <pre><code>using namespace declarative;\n\nauto myPicker() {\n    return _new&lt;ANumberPicker&gt;() AUI_LET {\n        it-&gt;setMin(-999);\n        it-&gt;setMax(999);\n    };\n}\n</code></pre></p> examples/app/minesweeper/src/NewGameWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    NewGameWindow(MinesweeperWindow* minesweeper);\n\nprivate:\n    MinesweeperWindow* mMinesweeper;\n    _&lt;ANumberPicker&gt; mWidth;\n    _&lt;ANumberPicker&gt; mHeight;\n    _&lt;ANumberPicker&gt; mMines;\n    _&lt;ALabel&gt; mDifficultyLabel;\n\n    void updateMinesMax();\n</code></pre></p>"},{"location":"anumberpicker/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;int64_t&gt; valueChanged</code></p> <p>Number changed.</p>"},{"location":"anumberpicker/#ANumberPicker::valueChanged","title":"valueChanged","text":""},{"location":"anumberpicker/#examples_1","title":"Examples","text":"<p><code>emits&lt;int64_t&gt; valueChanging</code></p> <p>Number is changing.</p>"},{"location":"anumberpicker/#ANumberPicker::valueChanging","title":"valueChanging","text":""},{"location":"anumberpicker/#public-methods","title":"Public Methods","text":"<pre><code>auto ANumberPicker::value()\n</code></pre> <p>Value property.</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>                  return sys_days(ymd);\n              },\n            }),\n            it-&gt;text());\n        it &amp; state.parsed &gt; [](AView&amp; textField, const AOptional&lt;system_clock::time_point&gt;&amp; value) {\n            textField.setAssName(\".red\", !value.hasValue());\n        };\n    };\n}\n</code></pre> examples/7guis/cells/tests/FormulaTests.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>TEST_F(Cells_Formula, ChangePropagation) {\n    mSpreadsheet[{1, 0}].expression = \"=A0+1\";\n\n    mSpreadsheet[{0, 0}].expression = \"228\";\n    EXPECT_EQ(std::get&lt;double&gt;(mSpreadsheet[{1, 0}].value.value()), 229);\n\n    mSpreadsheet[{0, 0}].expression = \"0\";\n    EXPECT_EQ(std::get&lt;double&gt;(mSpreadsheet[{1, 0}].value.value()), 1);\n}\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n</code></pre>"},{"location":"anumberpicker/#ANumberPicker::value","title":"value","text":""},{"location":"aobject/","title":"AObject","text":"<p>A base object class.</p> Header:<code>#include &lt;AUI/Common/AObject.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aobject/#detailed-description","title":"Detailed Description","text":"<p>AObject is required to use signal-slot system.</p> <p>AObject keeps reference to itself via std::enable_shared_from_this. It can be accessed with aui::ptr::shared_from_this().</p>"},{"location":"aobject/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>auto formatDate(system_clock::time_point date) { return \"{0:%d}.{0:%m}.{0:%G}\"_format(date); }\n\nauto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n</code></pre></p>"},{"location":"aobject/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>AObjectBase* GENERIC_OBSERVER</code></p> <p>Indicates that a connection should not be explicitly linked to receiver's lifetime.</p> <p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>Normally, a connection is broken when either sender or receiver die. You can indicate that you actually don't need the connection to be broken if receiver dies, or you don't have a receiver AObject either. In such case, the connection is breaks only when the sender (signal) dies.</p> <p>This can be useful in situations when you don't want to introduce some receiver AObject and when slot just to observe property or signal, i.e., you just want to make a generic observer.</p> <p>Use this in combination with lambda.</p> <pre><code>struct State {\n    bool called = false;\n};\nauto state = _new&lt;State&gt;();\nAObject::connect(master-&gt;message, AObject::GENERIC_OBSERVER, [state] {\n    state-&gt;called = true;\n});\nmaster-&gt;broadcastMessage(\"hello\");\nEXPECT_TRUE(state-&gt;called);\n</code></pre>"},{"location":"aobject/#AObject::GENERIC_OBSERVER","title":"GENERIC_OBSERVER","text":""},{"location":"aobject/#examples_1","title":"Examples","text":""},{"location":"aobject/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;APropertyWritable PropertySource, APropertyWritable PropertyDestination &gt;\nstatic void AObject::biConnect(PropertySource&amp;&amp; propertySource, PropertyDestination&amp;&amp; propertyDestination)\n</code></pre> <p>Connects source property to the destination property and opposite (bidirectionally).</p> Arguments <code>propertySource</code>  source property, whose value is preserved on connection creation. <code>propertyDestination</code>  destination property, whose value is overwritten on connection creation. <p>Connects <code>propertySource.changed</code> to the setter of <code>propertyDestination</code> . Additionally, sets the <code>propertyDestination</code> with the current value of the <code>propertySource</code> (pre-fire). Hence, initial dataflow is from left argument to the right argument.</p> <p>After pre-fire, connects <code>propertyDestination.changed</code> to the setter of <code>propertySource</code> . This way, when <code>propertyDestination</code> changes (i.e, <code>propertyDestination</code> belongs to some view and it's value is changed due to user action) it immediately reflects on <code>propertySource</code> . So, <code>propertySource</code> is typically a property of some view model with prefilled interesting data, and propertyDestination is a property of some view whose value is unimportant at the moment of connection creation.</p> <p>biConnect pulls AObject from <code>propertySource</code> and <code>propertyDestination</code> to maintain the connection.</p> <p>See signal-slot system for more info.</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>auto formatDate(system_clock::time_point date) { return \"{0:%d}.{0:%m}.{0:%G}\"_format(date); }\n\nauto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n</code></pre> <pre><code>template&lt;AAnySignal Signal, aui::derived_from&lt;AObjectBase&gt; Object, ACompatibleSlotFor&lt;Signal&gt; Function &gt;\nstatic decltype(auto) AObject::connect(const Signal&amp; signal, Object* object, Function&amp;&amp; function)\n</code></pre> <p>Connects signal to the slot of the specified object.</p> Arguments <code>signal</code>  signal <code>object</code>  instance of <code>AObject</code> <code>function</code>  slot. Can be lambda Returns Connection instance <p>See signal-slot system for more info. <pre><code>connect(view-&gt;clicked, AUI_DO_ONCE(otherObjectRawPtr)::handleButtonClicked);\n</code></pre></p> <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n</code></pre> <pre><code>template&lt;AAnyProperty Property, aui::derived_from&lt;AObjectBase&gt; Object, typename Function &gt;\nstatic decltype(auto) AObject::connect(const Property&amp; property, Object* object, Function&amp;&amp; function)\n</code></pre> <p>Connects property to the slot of the specified object.</p> Arguments <code>property</code>  property <code>object</code>  instance of <code>AObject</code> <code>function</code>  slot. Can be lambda <p>Connects to \"changed\" signal of the property. Additionally, calls specified function with the current value of the property (pre-fire).</p> <p>See signal-slot system for more info. <pre><code>connect(textField-&gt;text(), AUI_DO_ONCE(otherObjectRawPtr)::handleText);\n</code></pre></p> <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n</code></pre> <pre><code>template&lt;APropertyReadable PropertySource, APropertyWritable PropertyDestination &gt;\nstatic void AObject::connect(PropertySource&amp;&amp; propertySource, PropertyDestination&amp;&amp; propertyDestination)\n</code></pre> <p>Connects source property to the destination property.</p> Arguments <code>propertySource</code>  source property, whose value is preserved on connection creation. <code>propertyDestination</code>  destination property, whose value is overwritten on connection creation. <p>Connects <code>propertySource.changed</code> to the setter of <code>propertyDestination</code> . Additionally, sets the <code>propertyDestination</code> with the current value of the <code>propertySource</code> (pre-fire). Hence, dataflow is from left argument to the right argument.</p> <p>connect pulls AObject from <code>propertyDestination</code> to maintain the connection.</p> <p>See signal-slot system for more info.</p> <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n</code></pre> <pre><code>template&lt;AAnySignalOrProperty Connectable, aui::derived_from&lt;AObjectBase&gt; Object, ACompatibleSlotFor&lt;Connectable&gt; Function &gt;\nstatic decltype(auto) AObject::connect(const Connectable&amp; connectable, Object&amp; object, Function&amp;&amp; function)\n</code></pre> <p>Connects signal or property to the slot of the specified object.</p> Arguments <code>connectable</code>  signal or property <code>object</code>  instance of <code>AObject</code> <code>function</code>  slot. Can be lambda Returns Connection instance <p>signal-slot system for more info. <pre><code>connect(view-&gt;clicked, AUI_DO_ONCE(otherObjectRef)::handleButtonClicked);\n</code></pre></p> <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n</code></pre> <pre><code>template&lt;typename Connectable, ACompatibleSlotFor&lt;Connectable&gt; Function &gt;\ndecltype(auto) AObject::connect(const Connectable&amp; connectable, Function&amp;&amp; function)\n</code></pre> <p>Connects signal or property to slot of <code>\"this\"</code> object.</p> Arguments <code>connectable</code>  signal or property <code>function</code>  slot. Can be lambda Returns Connection instance <p>signal-slot system for more info. <pre><code>connect(view-&gt;clicked, [] { printf(\"Button clicked!\\\\n\"); });\nconnect(textField-&gt;text(), [](const AString&amp; s) { ALogger::info(LOG_TAG) &lt;&lt; \"Text: \" &lt;&lt; s; });\n</code></pre></p> <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n</code></pre> <pre><code>template&lt;AAnySignalOrProperty Connectable, aui::derived_from&lt;AObjectBase&gt; Object, ACompatibleSlotFor&lt;Connectable&gt; Function &gt;\nstatic decltype(auto) AObject::connect(const Connectable&amp; connectable, _&lt;Object&gt; object, Function&amp;&amp; function)\n</code></pre> <p>Connects signal or property to the slot of the specified object.</p> Arguments <code>connectable</code>  signal or property <code>object</code>  instance of <code>AObject</code> <code>function</code>  slot. Can be lambda Returns Connection instance <p>See signal-slot system for more info. <pre><code>connect(view-&gt;clicked, AUI_DO_ONCE(otherObjectSharedPtr)::handleButtonClicked);\nconnect(textField-&gt;text(), AUI_DO_ONCE(otherObjectSharedPtr)::handleText);\n</code></pre></p> <p>Note</p> <p><code>object</code> arg is accepted by value intentionally -- this way we ensure that it would not be destroyed during  connection creation.</p> <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n</code></pre> <pre><code>template&lt;AAnySignalOrProperty Connectable, aui::derived_from&lt;AObjectBase&gt; Object, typename Function &gt;\nstatic decltype(auto) AObject::connect(const Connectable&amp; connectable, ASlotDef&lt;Object *, Function&gt; slotDef)\n</code></pre> <p>Connects signal to the slot of the specified object. Slot is packed to single argument.</p> Arguments <code>connectable</code>  signal or property <code>slotDef</code>  instance of <code>AObject</code> + slot Returns Connection instance <p>See signal-slot system for more info.</p> <pre><code>connect(view-&gt;clicked, ASlotDef { AUI_DO_ONCE(otherObject)::handleButtonClicked });\nconnect(textField-&gt;text(), ASlotDef { AUI_DO_ONCE(otherObject)::handleText });\n</code></pre> <p>Note</p> <p>This overload is applicable for cases when you NEED to pass object and its AUI_SLOT via single argument. If possible, consider using shorter overload:</p> <pre><code>connect(view-&gt;clicked, AUI_DO_ONCE(otherObject)::handleButtonClicked);\n</code></pre> <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n</code></pre> <pre><code>template&lt;AAnyProperty Property, typename Object, ACompatibleSlotFor&lt;Property&gt; Function &gt;\nstatic void AObject::connect(const Property&amp; property, _&lt;Object&gt; object, Function&amp;&amp; function)\n</code></pre> <p>Connects signal or property to the slot of the specified non-AObject type.</p> Arguments <code>property</code>  source property. <code>object</code>  instance of `AObject`. <code>function</code>  slot. Can be lambda. <p>See signal-slot system for more info.</p> <pre><code>struct User { AProperty&lt;AString&gt; name }; // user.name here is non-AObject type\nconnect(textField-&gt;text(), user-&gt;name.assignment());\n</code></pre> <p>Note</p> <p><code>object</code> arg is accepted by value intentionally -- this way we ensure that it would not be destroyed during    connection creation.</p> <p>Examples:</p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n\n    void inflateLabel() {\n        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n</code></pre> <pre><code>void AObject::setThread(_&lt;AAbstractThread&gt; thread)\n</code></pre> <p>Set thread of the object.</p> <p>Examples:</p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre>"},{"location":"aobject/#AObject::biConnect","title":"biConnect","text":""},{"location":"aobject/#AObject::connect","title":"connect","text":""},{"location":"aobject/#AObject::setThread","title":"setThread","text":""},{"location":"aoggsoundstream/","title":"AOggSoundStream","text":"<p>Sound stream for OGG format</p> Header:<code>#include &lt;AUI/Audio/Formats/ogg/AOggSoundStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"aoptional/","title":"AOptional","text":"<p>Utility wrapper implementing the stack-allocated (fast) optional idiom.</p> Header:<code>#include &lt;AUI/Common/AOptional.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aoptional/#examples","title":"Examples","text":"examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>constexpr auto REGEX_DATE = ctre::match&lt;\"([0-9]+)\\\\.([0-9]+)\\\\.([0-9]{4})\"&gt;;\n\nstruct DateTextFieldState {\n    AProperty&lt;AOptional&lt;system_clock::time_point&gt;&gt; parsed;\n};\n\nauto formatDate(system_clock::time_point date) { return \"{0:%d}.{0:%m}.{0:%G}\"_format(date); }\n\nauto dateTextField(DateTextFieldState&amp; state) {\n</code></pre></p>"},{"location":"aoptional/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;typename F &gt;\nT AOptional::valueOr(F&amp;&amp; alternative)\n</code></pre> <p>value or alternative (either value or callback)</p> Arguments <code>alternative</code> <pre><code>T&amp; AOptional::valueOrException(const char* message = \"empty optional\")\n</code></pre> <p>value or exception</p> <pre><code>const T&amp; AOptional::valueOrException(const char* message = \"empty optional\")\n</code></pre> <p>value or exception</p>"},{"location":"aoptional/#AOptional::valueOr","title":"valueOr","text":""},{"location":"aoptional/#AOptional::valueOrException","title":"valueOrException","text":""},{"location":"aopussoundpipe/","title":"AOpusSoundPipe","text":"<p>Sound pipe for OPUS format, decodes OPUS packets</p> Header:<code>#include &lt;AUI/Audio/Formats/opus/AOpusSoundPipe.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"aopussoundpipe/#detailed-description","title":"Detailed Description","text":"<p>Note</p> <p>Ready packets should be passed with write() method for proper work, header must precede the packets.</p>"},{"location":"aoverflow/","title":"AOverflow","text":"<p>Controls visibility of the overflowed contents of AView with AView::drawStencilMask.</p> Header:<code>#include &lt;AUI/Enum/AOverflow.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aoverflow/#examples","title":"Examples","text":"examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n                             t&lt;AScrollAreaViewport&gt;(),\n                             AOverflow::VISIBLE,\n                         },\n                     }\n                     ); },\n        Vertical::Expanding {\n          Centered {\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n</code></pre></p>"},{"location":"aoverflow/#examples_1","title":"Examples","text":""},{"location":"aoverflowmask/","title":"AOverflowMask","text":"<p>Controls the behaviour of the default AView::drawStencilMask() implementation.</p> Header:<code>#include &lt;AUI/Enum/AOverflow.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aoverflowmask/#detailed-description","title":"Detailed Description","text":"<p>Controls how does the overflow mask is produced.</p> <p>Analogous to the -webkit-background-clip CSS rule.</p>"},{"location":"aoverflowmask/#examples","title":"Examples","text":"examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n                      ATextAlign::CENTER,\n                      AOverflow::HIDDEN_FROM_THIS,\n                      AOverflowMask::ROUNDED_RECT,\n                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                          Backdrop::GaussianBlur { 5_dp },\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.6f) },\n</code></pre></p>"},{"location":"aoverflowmask/#examples_1","title":"Examples","text":""},{"location":"apageview/","title":"APageView","text":"<p>Like ATabView but without tabs line.</p> Header:<code>#include &lt;AUI/View/APageView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"apath/","title":"APath","text":"<p>An add-on to AString with functions for working with the path.</p> Header:<code>#include &lt;AUI/IO/APath.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"apath/#detailed-description","title":"Detailed Description","text":"<p>Note</p> <p>In most file systems, both a regular file and a folder with the same name can exist on the same path.</p> <p>Example usage:</p> <pre><code>APath someDir = \"someDir\";\nAPath filePath = someDir / \"myfile.txt\"; // \"/\" replaced with a system file separator\n</code></pre> <p>Note</p> <p>Sometimes the word \"file\" refers to both a regular file (txt, png, jpeg, etc.) and a folder (directory, a file that contains other regular files and folders), i.e. a unit of the file system, which is often a confusion in terminology. Here and further: <ul> <li>file - a unit of the file system.</li> <li>regular file - a file that can be read or written to. You can think of as a sequence of bytes                              or a stream of bytes.</li> <li>folder (directory) - a file that may have child files (both regular files and folders)</li> </ul></p>"},{"location":"apath/#public-types","title":"Public Types","text":"<p><code>enum APath::DefaultPath</code></p> Constant Description <code>DefaultPath::APPDATA</code>  Folder for application data. {windows} Maps to <code>C:/Users/ %user% /.appdata/Roaming/</code>. {linux} Maps to <code>$HOME/.local/share/</code>. {android} Maps to <code>\\&lt;internal_storage_path\\&gt;/__aui_appdata</code>. {ios} Maps to <code>\\&lt;internal_storage_path\\&gt;/__aui_appdata</code>.  <code>DefaultPath::TEMP</code>  Folder for temporary data. {windows} Maps to user's temp folder <code>%temp%</code>. {linux} Maps to system temp directory <code>/tmp</code>. {macos} Maps to system temp directory <code>/tmp</code>. {android} Maps to AUI-managed temporary directory: <code>\\&lt;internal_storage_path\\&gt;/__aui_tmp</code>. {ios} Maps to AUI-managed temporary directory: <code>\\&lt;internal_storage_path\\&gt;/__aui_tmp</code>.  <code>DefaultPath::HOME</code>  User home directory. {windows} Maps to user's home folder <code>C:\\\\Users\\\\ %user%</code>. {linux} Maps to user's home folder <code>/home/$USER</code>."},{"location":"apath/#APath::DefaultPath","title":"DefaultPath","text":""},{"location":"apath/#public-methods","title":"Public Methods","text":"<pre><code>APath APath::absolute()\n</code></pre> <p>Get the absolute (full) path to the file.</p> Returns the absolute (full) path to the file <pre><code>const APath&amp; APath::chmod(int newMode)\n</code></pre> <p>Changes mode (permissions) on file</p> Arguments <code>newMode</code>  new mode. <p>It's convenient to use octet literal on <code>newMode</code>: <pre><code>APath p(\"file.txt\");\np.chmod(0755); // -rwxr-xr-x\n</code></pre></p> <pre><code>static void APath::copy(const APath&amp; source, const APath&amp; destination)\n</code></pre> <p>Copy regular file.</p> Arguments <code>source</code>  source file <code>destination</code>  destination file <pre><code>bool APath::exists()\n</code></pre> Returns true if whether regular file or a folder exists on this path <p>A file can exist as a regular file or(and) as a folder. This function will return false only if neither the folder nor the file does not exists on this path.</p> <p>Checkout the <code>isRegularFileExists</code> or <code>isDirectoryExists</code> function to check which type of the file exists on this path.</p> <pre><code>AString APath::extension()\n</code></pre> <p>File extension.</p> Returns file extension <p>`/home/user/file.cpp -&gt; cpp</p> <pre><code>APath APath::extensionChanged(const AString&amp; newExtension)\n</code></pre> <p>Returns same path but with extension changed.</p> <pre><code>APath APath::file(const AString&amp; fileName)\n</code></pre> <p>Path of the child element. Relevant only for folders.</p> Arguments <code>fileName</code>  name of child file Returns path to child file relatively to this folder <p>with <code>fileName = work</code>: <code>/home/user -&gt; /home/user/work</code></p> <p>It's convient to use <code>/</code> syntax instead:</p> <pre><code>APath(\"/home/user\") / \"work\"\n</code></pre> <p>Examples:</p> examples/basic/hello_world/CMakeLists.txt <p>Console Hello World Example - Basic CLI Hello World application.</p> <pre><code>cmake_minimum_required(VERSION 3.16)\nproject(project_template)\n\n# Use AUI.Boot\nfile(\n    DOWNLOAD \n    https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake \n    ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n</code></pre> examples/app/game_of_life/CMakeLists.txt <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as [ITexture], [AImage] to be GPU friendly. The computation is performed in [AThreadPool].</p> <pre><code>endif ()\n\n# Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n</code></pre> examples/app/notes/CMakeLists.txt <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>cmake_minimum_required(VERSION 3.16)\n\n# Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n</code></pre> examples/ui/views/CMakeLists.txt <p>Views Example - All-in-one views building example.</p> <pre><code>cmake_minimum_required(VERSION 3.16)\n\n# Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n</code></pre> <pre><code>APath APath::filename()\n</code></pre> <p>File name.</p> Returns file name <p><code>/home/user/file.cpp -&gt; file.cpp</code></p> <pre><code>APath APath::filenameWithoutExtension()\n</code></pre> <p>File name without extension.</p> Returns file name without extension <p>`/home/user/file.cpp -&gt; file</p> <pre><code>static AVector&lt;APath&gt; APath::find(const AString&amp; filename, const AVector&lt;APath&gt;&amp; locations, APathFinder flags = APathFinder::NONE)\n</code></pre> Arguments <code>filename</code>  Name of the file searching for <code>locations</code>  paths to directories to search for the file in <code>flags</code>  lookup flags (see APathFinder) Returns full path to the found file; if file not found, an empty string is returned. <p>Searches for file in specified dirs.</p> <pre><code>static APath APath::getDefaultPath(DefaultPath path)\n</code></pre> <p>Get system's default folder.</p> Returns absolute path to default folder. <p>See <code>APath::DefaultPath</code> definition.</p> <pre><code>bool APath::isAbsolute()\n</code></pre> <p>Checks whether path absolute or not.</p> Returns true if path is absolute <pre><code>bool APath::isDirectoryExists()\n</code></pre> Returns true if folder exists on this path <p>A file can exist as a regular file or(and) as a folder. This function will return false only if folder does not exists on this path.</p> <pre><code>bool APath::isEffectivelyAccessible(AFileAccess flags)\n</code></pre> <p>Return true if the current process has specified access flags to path.</p> <p>Checks permissions and existence of the file identified by this APath using the real user and group identifiers of the process, like if the file were opened by open().</p> <p>Using this function to check a process's permissions on a file before performing some operation based on that information leads to race conditions: the file permissions may change between the two steps. Generally, it is safer just to attempt the desired operation and handle any permission error that occurs.</p> <pre><code>bool APath::isRegularFileExists()\n</code></pre> Returns true if regular file exists on this path <p>A file can exist as a regular file or(and) as a folder. This function will return false only if regular file does not exists on this path.</p> <pre><code>bool APath::isRelative()\n</code></pre> <p>Checks whether path absolute or not.</p> Returns true if path is relative <pre><code>ADeque&lt;APath&gt; APath::listDir(AFileListFlags f = AFileListFlags::DEFAULT_FLAGS)\n</code></pre> <p>Get list of (by default) direct children of this folder. This function outputs paths including the path        listDir was called on.</p> Returns list of children of this folder. <p>Use AFileListFlags enum flags to customize behaviour of this function.</p> <pre><code>const APath&amp; APath::makeDir()\n</code></pre> <p>Create folder.</p> Returns this <pre><code>const APath&amp; APath::makeDirs()\n</code></pre> <p>Create all nonexistent folders on the path.</p> Returns this <pre><code>static void APath::move(const APath&amp; source, const APath&amp; destination)\n</code></pre> <p>Move regular file.</p> Arguments <code>source</code>  source file <code>destination</code>  destination file <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>class CellsView : public AView {\npublic:\n    static constexpr auto SCALE = 8_dp;\n\n    CellsView(_&lt;Cells&gt; cells) : mCells(std::move(cells)) { connect(mCells-&gt;frameComplete, me::updateTexture); }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n        if (mTexture) {\n            ctx.render.rectangle(ATexturedBrush { mTexture }, { 0, 0 }, float(SCALE) * glm::vec2(mCells-&gt;size()));\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>    }\n    return viewer(property) &lt;&lt; \".row-value\";\n}\n\nContactDetailsView::ContactDetailsView(_&lt;Contact&gt; contact) : mContact(std::move(contact)) {\n    mOriginalContact = mContact;\n    setExtraStylesheet(AStylesheet {\n      {\n        c(\".row-value\"),\n        Expanding(1, 0),\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>    }\n\n    void add(_unique&lt;IAction&gt; action) {\n        action-&gt;redo();\n        nextAction = std::next(mStack.insert(mStack.erase(*nextAction, mStack.end()), std::move(action)));\n        nextAction.notify();\n    }\n\n    Iterator begin() const {\n        return mStack.begin();\n</code></pre> examples/7guis/cells/src/Formula.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    try {\n        auto tokens = token::parse(ATokenizer(expression));\n        auto p = ast::parseExpression(tokens);\n\n        return [p = std::shared_ptr(std::move(p))](const Spreadsheet&amp; ctx) -&gt; formula::Value {\n            try {\n                return p-&gt;evaluate(ctx);\n            } catch (const AEvaluationLoopException&amp; e) {\n                return \"#LOOP!\";\n            } catch (const AException&amp; e) {\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>};\n\nstruct StringLiteralNode : INode {\n    AString value;\n    explicit StringLiteralNode(AString value) : value(std::move(value)) {}\n    ~StringLiteralNode() override = default;\n\n    formula::Value evaluate(const Spreadsheet&amp; ctx) override { return value; }\n};\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    AProperty&lt;AString&gt; currentExpression;\n};\n\nstatic _&lt;AView&gt; labelTitle(AString s) {\n    return _new&lt;ALabel&gt;(std::move(s)) AUI_WITH_STYLE {\n        Opacity { 0.5f },\n        ATextAlign::CENTER,\n    };\n}\n</code></pre> <pre><code>static APath APath::nextRandomTemporary()\n</code></pre> <p>Creates a path to non-existent random file in system temp directory.</p> <p>The file is guaranteed to be non-existent, however, its parent directory does. The such path can be used for general purposes. The application might create any kind of file on this location (including dirs) or don't create any file either.</p> <pre><code>APath APath::operator(const AString&amp; filename)\n</code></pre> <p>Path of the child element. Relevant only for folders.</p> Arguments <code>filename</code>  child to produce path to <pre><code>AString filename = \"file.txt\";\nAPath path = \"path\" / \"to\" / \"your\" / filename;\n</code></pre> Which would supplyValue into \"path/to/your/file.txt\" Returns path to child file relatively to this folder <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                    break;\n                }\n\n                case got&lt;token::Plus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::plus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n                    break;\n                }\n\n                case got&lt;token::Minus&gt;: {\n                    handleBinaryOperator.operator()&lt;BinaryOperatorNodeImpl&lt;std::minus&lt;&gt;&gt;&gt;(Priority::PLUS_MINUS);\n</code></pre> <pre><code>APath APath::parent()\n</code></pre> Returns path to parent folder <p><code>/home/user -&gt; /home</code></p> <p>Examples:</p> examples/ui/views/tests/LayoutManagerTest.cpp <p>Views Example - All-in-one views building example.</p> <pre><code> */\nTEST_F(UILayoutManager, ButtonsAlignment) {\n    // buttons column should be perfectly aligned\n    By::name(\"Common button\")\n        .parent()\n        .allChildren()\n        .check(leftRightAligned(), \"elements should be perfectly aligned\");\n}\n</code></pre> <pre><code>static const APath&amp; APath::processTemporaryDir()\n</code></pre> <p>Generates a unique, process-agnostic temporary directory in the system's temp directory.</p> Returns Path to a process-agnostic empty pre-created directory in system temp directory. <p>Creates a safe and islocated workspace for each application instance. By generating a new directory for each process, it prevents, potential conflicts between concurrent processes.</p> <p>When the application closes, a directory cleanup attempt will be performed.</p> <pre><code>AString APath::relativelyTo(const APath&amp; dir)\n</code></pre> <p>Returns same path but without <code>dir</code></p> Arguments <code>dir</code>  some parent, grandparent, grandgrandparent... dir Returns same path but without <code>dir</code> <p>APath(\"C:/work/mon/test.txt\").relativelyTo(\"C:/work\") -&gt; mon/test.txt</p> <pre><code>const APath&amp; APath::removeDirContentsRecursive()\n</code></pre> <p>Delete directory contents (recursively).</p> Returns this <p>If this APath points to a regular file, the function has no effect. If this APath points to a directory, it removes all contained files (recursively) within that directory but does not remove the directory itself.</p> <p>If the target does not exist, this function has no effect.</p> <pre><code>const APath&amp; APath::removeFile()\n</code></pre> <p>Delete file. Relevant for empty folders and regular files.</p> Returns this <p>Unlike remove*Recursive functions, this function has no checks before proceeding, thus, it might throw AIOException (including if the target does not exist).</p> <pre><code>const APath&amp; APath::removeFileRecursive()\n</code></pre> <p>Delete files recursively, including itself.</p> Returns this <p>If this APath points to a regular file, it deletes the file directly. If this APath points to a directory, it first removes all its contents (recursively) before potentially deleting the directory itself.</p> <p>If the target does not exist, this function has no effect.</p> <pre><code>AString APath::systemSlashDirection()\n</code></pre> <p>Transforms this path to string with platform's native slashes.</p> <pre><code>const APath&amp; APath::touch()\n</code></pre> Returns this. <p>Creates a file.</p> <pre><code>APath APath::withoutUppermostFolder()\n</code></pre> <p>Remove the uppermost folder from this path</p> Returns The same path except uppermost folder <p>v1.0.0/client/azaza.zip -&gt; client/azaza.zip</p> <pre><code>static APath APath::workingDir()\n</code></pre> Returns working dir of application"},{"location":"apath/#APath::absolute","title":"absolute","text":""},{"location":"apath/#APath::chmod","title":"chmod","text":""},{"location":"apath/#APath::copy","title":"copy","text":""},{"location":"apath/#APath::exists","title":"exists","text":""},{"location":"apath/#APath::extension","title":"extension","text":""},{"location":"apath/#APath::extensionChanged","title":"extensionChanged","text":""},{"location":"apath/#APath::file","title":"file","text":""},{"location":"apath/#APath::filename","title":"filename","text":""},{"location":"apath/#APath::filenameWithoutExtension","title":"filenameWithoutExtension","text":""},{"location":"apath/#APath::find","title":"find","text":""},{"location":"apath/#APath::getDefaultPath","title":"getDefaultPath","text":""},{"location":"apath/#APath::isAbsolute","title":"isAbsolute","text":""},{"location":"apath/#APath::isDirectoryExists","title":"isDirectoryExists","text":""},{"location":"apath/#APath::isEffectivelyAccessible","title":"isEffectivelyAccessible","text":""},{"location":"apath/#APath::isRegularFileExists","title":"isRegularFileExists","text":""},{"location":"apath/#APath::isRelative","title":"isRelative","text":""},{"location":"apath/#APath::listDir","title":"listDir","text":""},{"location":"apath/#APath::makeDir","title":"makeDir","text":""},{"location":"apath/#APath::makeDirs","title":"makeDirs","text":""},{"location":"apath/#APath::move","title":"move","text":""},{"location":"apath/#APath::nextRandomTemporary","title":"nextRandomTemporary","text":""},{"location":"apath/#APath::operator","title":"operator","text":""},{"location":"apath/#APath::parent","title":"parent","text":""},{"location":"apath/#APath::processTemporaryDir","title":"processTemporaryDir","text":""},{"location":"apath/#APath::relativelyTo","title":"relativelyTo","text":""},{"location":"apath/#APath::removeDirContentsRecursive","title":"removeDirContentsRecursive","text":""},{"location":"apath/#APath::removeFile","title":"removeFile","text":""},{"location":"apath/#APath::removeFileRecursive","title":"removeFileRecursive","text":""},{"location":"apath/#APath::systemSlashDirection","title":"systemSlashDirection","text":""},{"location":"apath/#APath::touch","title":"touch","text":""},{"location":"apath/#APath::withoutUppermostFolder","title":"withoutUppermostFolder","text":""},{"location":"apath/#APath::workingDir","title":"workingDir","text":""},{"location":"apathowner/","title":"APathOwner","text":"<p>RAII-style file owner for storing temporary data on disk.</p> Header:<code>#include &lt;AUI/IO/APath.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"apathowner/#detailed-description","title":"Detailed Description","text":"<p>This class represents a type that transparently converts to underlying APath. When APathOwner is destructed, the pointed file is cleaned up, too, regardless of it's type.</p> <p>APathOwner is designed to simplify management of (temporary) files on disk, ensuring cleanup of the pointed file in RAII (Resource Acquisition Is Initialization) style.</p> <pre><code>APathOwner tempFilePath(APath::nextRandomTemporary());\n{\n    AFileOutputStream tempFileOs(tempFilePath);\n    size_t downloadedBytes = 0;\n    *ACurl::Builder(std::move(downloadUrl))\n         .withWriteCallback([&amp;](ACurl&amp; c, AByteBufferView toWrite) {\n             tempFileOs &lt;&lt; toWrite;\n             downloadedBytes += toWrite.size();\n             static constexpr auto PRECISION = 100;\n             // NOLINTNEXTLINE(*-integer-division)\n             reportDownloadedPercentage(float(PRECISION * downloadedBytes / c.getContentLength()) / float(PRECISION));\n             return toWrite.size();\n         })\n         .runAsync();\n}\naui::archive::zip::read(\n    AFileInputStream(tempFilePath), aui::archive::ExtractTo {\n      .prefix = unpackedUpdateDir,\n      .pathProjection = &amp;APath::withoutUppermostFolder,\n    });\n</code></pre>"},{"location":"aperformanceframe/","title":"APerformanceFrame","text":"<p>Defines beginning and ending of window frame by RAII.</p> Header:<code>#include &lt;AUI/Performance/APerformanceFrame.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aperformancesection/","title":"APerformanceSection","text":"<p>Defines performance profiling named (and colored) span within RAII range.</p> Header:<code>#include &lt;AUI/Performance/APerformanceSection.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aperformancesection/#public-types","title":"Public Types","text":"<p><code>struct APerformanceSection::Data</code></p> <p>Empty structure.</p>"},{"location":"aperformancesection/#APerformanceSection::Data","title":"Data","text":""},{"location":"aperformancesection/#public-methods","title":"Public Methods","text":"<pre><code>APerformanceSection::APerformanceSection(const char* name, AOptional&lt;AColor&gt; color = std::nullopt, std::string verboseInfo = { })\n</code></pre> <p>Defines performance profiling named (and colored) span within RAII range.</p> Arguments <code>name</code>  name of the section. Since it is a C-style string, it must be alive during the whole lifetime of the             program. Typically, you would want to use string literals. C-style string is used to avoid             performance overhead. <code>color</code>  color of the section. If nullopt, it would be generated from name. <code>verboseInfo</code>  extra usefull information that displayed in tree view in paused mode. <pre><code>APerformanceSection::APerformanceSection(const char* name, AOptional&lt;AColor&gt; color = std::nullopt, std::string verboseInfo = { })\n</code></pre> <p>Defines performance profiling named (and colored) span within RAII range.</p> Arguments <code>name</code>  name of the section. Since it is a C-style string, it must be alive during the whole lifetime of the             program. Typically, you would want to use string literals. C-style string is used to avoid             performance overhead. <code>color</code>  color of the section. If nullopt, it would be generated from name. <code>verboseInfo</code>  extra usefull information that displayed in tree view in paused mode."},{"location":"aperformancesection/#APerformanceSection::APerformanceSection","title":"constructor","text":""},{"location":"apipe/","title":"APipe","text":"<p>A thread safe buffer that converts an IInputStream to IOutputStream (and otherwise).</p> Header:<code>#include &lt;AUI/IO/APipe.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"apipe/#detailed-description","title":"Detailed Description","text":"<p>APipe is similar to the unix pipes. It's capable to store up to 65,536 bytes. It's implemented like a ring buffer. If this limit is reached, a write() method blocks thread until buffer is read from.</p> <p>If capacity may be not enough, consider to use ADynamicPipe instead.</p>"},{"location":"apixelformat/","title":"APixelFormat","text":"<p>Pixel in-memory format descriptor (type, count and order of subpixel components).</p> Header:<code>#include &lt;AUI/Image/APixelFormat.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"apixelformat/#public-types","title":"Public Types","text":"<p><code>enum APixelFormat::Value</code></p> Constant Description <code>Value::UNKNOWN</code> <code>Value::BYTE</code> <code>Value::FLOAT</code> <code>Value::R</code> <code>Value::RG</code> <code>Value::RGB</code> <code>Value::RGBA</code> <code>Value::ARGB</code> <code>Value::BGRA</code> <code>Value::RGB_BYTE</code> <code>Value::RGBA_BYTE</code> <code>Value::RGBA_FLOAT</code> <code>Value::DEFAULT</code>"},{"location":"apixelformat/#APixelFormat::Value","title":"Value","text":""},{"location":"aplatformabstractionoptions/","title":"APlatformAbstractionOptions","text":"<p>Defines core platform API priority and options for your application.</p> Header:<code>#include &lt;AUI/Platform/linux/APlatformAbstractionOptions.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aplatformabstractionoptions/#public-types","title":"Public Types","text":"<p><code>struct APlatformAbstractionOptions::X11</code></p> <p>Corresponds to X11 (legacy) mode. While being deprecated, this is still a useful fallback option. If user uses Wayland (which is likely on a modern Linux (-based desktop OSes) system), X11 application still work good enough, thanks to Xwayland compatibility layer.</p> <p>Empty structure.</p> <p><code>struct APlatformAbstractionOptions::Gtk4</code></p> <p>Uses gtk4 as core platform API. Default option on non-GNOME desktop environments.</p> <p>Empty structure.</p> <p><code>struct APlatformAbstractionOptions::Adwaita1</code></p> <p>Uses libadwaita as core platform API, which is based on Gtk4. Default option on GNOME desktop environments.</p> <p>Empty structure.</p>"},{"location":"aplatformabstractionoptions/#APlatformAbstractionOptions::X11","title":"X11","text":""},{"location":"aplatformabstractionoptions/#APlatformAbstractionOptions::Gtk4","title":"Gtk4","text":""},{"location":"aplatformabstractionoptions/#APlatformAbstractionOptions::Adwaita1","title":"Adwaita1","text":""},{"location":"aplatformabstractionoptions/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>AVector&lt;InitializationVariant&gt; initializationOrder</code></p> <p>Defines APIs to try to use (first is prioritized).</p> <p>Defines a list of APIs to use. If the first API fails to initialize, the next one is probed, and so on, until a successful API initialization is found.</p> <p>By default, this field is initialized as such:</p> <pre><code>if (auto auiPa = std::getenv(\"AUI_PA\")) {\n    if (auiPa == \"adw1\"sv) {\n        return { Adwaita1 {} };\n    }\n    if (auiPa == \"gtk4\"sv) {\n        return { Gtk4 {} };\n    }\n    if (auiPa == \"x11\"sv) {\n        return { X11 {} };\n    }\n    ALogger::err(\"APlatformAbstractionOptions\") &lt;&lt; \"Unknown AUI_PA \\\"\" &lt;&lt; auiPa &lt;&lt; \"\\\", ignoring\";\n}\n// TODO at the moment, lets deploy gtk/libadwaita support as an experimental feature, which can be enabled with AUI_PA.\nreturn { X11{} };\n/*\nFuture order:\nAVector&lt;APlatformAbstractionOptions::InitializationVariant&gt; defaultOrder = {\n    Gtk4{},\n    X11{},\n};\n\nif (auto xdgCurrentDesktop = std::getenv(\"XDG_CURRENT_DESKTOP\")) {\n    if (xdgCurrentDesktop == \"GNOME\"sv) {\n        defaultOrder.insert(defaultOrder.begin(), Adwaita1{});\n    }\n}\n\nreturn defaultOrder;\n */\n</code></pre>"},{"location":"aplatformabstractionoptions/#APlatformAbstractionOptions::initializationOrder","title":"initializationOrder","text":""},{"location":"apointerindex/","title":"APointerIndex","text":"<p>Wrapper class that stores either mouse button index or finger index.</p> Header:<code>#include &lt;AUI/Event/APointerIndex.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"apointerindex/#public-methods","title":"Public Methods","text":"<pre><code>AOptional&lt;AInput::Key&gt; APointerIndex::button()\n</code></pre> Returns (mouse) button, if it is. <pre><code>AOptional&lt;int&gt; APointerIndex::finger()\n</code></pre> Returns finger index, if it is. <pre><code>bool APointerIndex::isButton()\n</code></pre> Returns true if (mouse) button. <pre><code>bool APointerIndex::isFinger()\n</code></pre> Returns true if finger index."},{"location":"apointerindex/#APointerIndex::button","title":"button","text":""},{"location":"apointerindex/#APointerIndex::finger","title":"finger","text":""},{"location":"apointerindex/#APointerIndex::isButton","title":"isButton","text":""},{"location":"apointerindex/#APointerIndex::isFinger","title":"isFinger","text":""},{"location":"apointermoveevent/","title":"APointerMoveEvent","text":"<p>Pointing method move event.</p> Header:<code>#include &lt;AUI/Event/APointerMoveEvent.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"apointermoveevent/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>APointerIndex pointerIndex</code></p> <p>Pointer index for touchscreen; LBUTTON for mouse cursor.</p>"},{"location":"apointermoveevent/#APointerMoveEvent::pointerIndex","title":"pointerIndex","text":""},{"location":"apointerpressedevent/","title":"APointerPressedEvent","text":"<p>Pointing method press event.</p> Header:<code>#include &lt;AUI/Event/APointerPressedEvent.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"apointerpressedevent/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>AInput::Key asButton</code></p> <p>pointerIndex treated as mouse button.</p> <p>= LBUTTON if finger event, pointerIndex.button() otherwise.</p> <p><code>APointerIndex pointerIndex</code></p> <p>Which button of the pointing device is triggered the event (AInput::LBUTTON if not present) or finger.</p> <p><code>glm::vec2 position</code></p> <p>Where does the event occurred.</p>"},{"location":"apointerpressedevent/#APointerPressedEvent::asButton","title":"asButton","text":""},{"location":"apointerpressedevent/#APointerPressedEvent::pointerIndex","title":"pointerIndex","text":""},{"location":"apointerpressedevent/#APointerPressedEvent::position","title":"position","text":""},{"location":"apointerreleasedevent/","title":"APointerReleasedEvent","text":"<p>Pointing method press event.</p> Header:<code>#include &lt;AUI/Event/APointerReleasedEvent.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"apointerreleasedevent/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>AInput::Key asButton</code></p> <p>pointerIndex treated as mouse button.</p> <p>= LBUTTON if finger event, pointerIndex.button() otherwise.</p> <p><code>APointerIndex pointerIndex</code></p> <p>Which button of the pointing device is triggered the event (AInput::LBUTTON if not present) or finger.</p> <p><code>glm::vec2 position</code></p> <p>Where does the event occurred.</p> <p><code>bool triggerClick</code></p> <p>Whether the pointer release event triggers click event or not.</p>"},{"location":"apointerreleasedevent/#APointerReleasedEvent::asButton","title":"asButton","text":""},{"location":"apointerreleasedevent/#APointerReleasedEvent::pointerIndex","title":"pointerIndex","text":""},{"location":"apointerreleasedevent/#APointerReleasedEvent::position","title":"position","text":""},{"location":"apointerreleasedevent/#APointerReleasedEvent::triggerClick","title":"triggerClick","text":""},{"location":"app-build-overview/","title":"App Build Overview","text":"<p>This page describes how an AUI application is built.</p>"},{"location":"app-build-overview/#trivia","title":"Trivia","text":"<p>On this page, libraries and executables are represented with Windows (operating system) file name extensions with shared linking. Other platforms and configurations follow the same principles but with different file types.</p> <ul> <li>LIBRARY.dll refers to a binary (compiled) representation of LIBRARY</li> <li>PROGRAM.exe refers to a binary (compiled) representation of PROGRAM (executable)</li> </ul> <p>Also, on this page, the build system is demonstrated on Minimal UI Template with Assets.</p>"},{"location":"app-build-overview/#BUILD_SCENARIO_GENERIC","title":"Generic scenario","text":"<p>The most common and straightforward scenario. CMake handles everything.</p> <p>This is applicable for most desktop platforms.</p> <pre><code>flowchart BT\n    subgraph ide[\"User's IDE (optional)\"]\n        CLion\n        VSCode\n    end\n\n    subgraph cmake_cli[CMake CLI]\n        cmake_configure[\"mkdir build &amp;&amp; cd build &amp;&amp; cmake ..\"]\n        cmake_build[\"cmake --build . -t app\"]\n    end\n\n    cmake_cli --&gt; ide\n\n    auib[\"aui.boot.cmake\"] --&gt;|download aui.boot| cmake_configure\n    auib_import[\"auib_import(aui aui-framework/aui)\"] --&gt;|import aui| cmake_configure\n    auib ---&gt; auib_import\n\n    subgraph AUI\n        aui.core.dll\n        aui.views.dll\n        aui_other[\"...\"]\n        aui.toolbox.exe\n    end\n\n    subgraph sys[\"System Libraries\"]\n        direction LR\n        c++[\"C++ STD Lib\"]\n        sys_other[...]\n    end\n\n    subgraph aui_deps[\"AUI Dependencies\"]\n        direction LR\n        ZLIB\n        OpenSSL\n        deps[...]\n    end\n    sys --&gt;|find_package| AUI\n    aui_deps --&gt;|aui.boot.cmake| AUI\n\n    AUI ---&gt; auib_import\n    AUI ---&gt; app.exe\n    app.exe --&gt; cmake_build\n    main.cpp --&gt;|C++ compiler| app.exe\n    icon.svg.cpp --&gt;|C++ compiler| app.exe\n    ass_conv[convert icon.svg to icon.svg.cpp] --&gt; icon.svg.cpp\n    aui.toolbox.exe ---&gt; ass_conv\n    assets/icon.svg --&gt; ass_conv</code></pre> <p>Things to note:</p> <ul> <li>aui.boot is downloaded in your <code>CMakeLists.txt</code>, which downloads AUI itself and all its dependencies.</li> <li>Among with AUI libraries, there's <code>aui.toolbox</code>, which participates in the build process. In particular, it converts   AUI Assets to cpp files, compressing them, making them available in the application, effectively embedding them to   the application binary.</li> </ul>"},{"location":"app-build-overview/#mobile-scenario","title":"Mobile scenario","text":"<p>On mobile platforms, the build process is overcomplicated by:</p> <ul> <li>Need to support multiple architectures (ARM, x86, etc)</li> <li>Platform specific packaging requirements (APK, IPA)</li> <li>Integrating with platform-specific build systems (Gradle, Xcode)</li> <li>Interfacing to Kotlin/Swift (Java/Objective-C) from/to C++</li> <li>Deliver Kotlin/Swift (Java/Objective-C) platform-specific code through CMake</li> </ul> <p>In this section, we'll consider Android (armv7 + arm64) as the target platform and Windows as the build host platform. On combinations of the other host/target platforms, the build process remains similar.</p> <pre><code>flowchart BT\n  gradle_gen --&gt; gradle_build\n  app.apk --&gt; gradle_build\n\n  gradle_build --&gt; as[\"Android Studio\"]\n\n%% app.apk\n  app.apk\n\n  AUI ---&gt;|Template| gradle_gen\n\n  arm64/libapp.so --&gt;|CMake| app.apk\n  armv7/libapp.so --&gt;|CMake| app.apk\n\n  AUI_arm64 ---------&gt;|aui.boot.cmake| arm64/libapp.so\n  AUI_armv7 ---------&gt;|aui.boot.cmake| armv7/libapp.so\n\n%% HOST\n  AUI ---&gt; auib_import\n  subgraph cmake_cli[CMake CLI]\n    cmake_configure[\"mkdir build &amp;&amp; cd build &amp;&amp; cmake .. -DAUI_BUILD_FOR=android\"]\n    cmake_build[\"cmake --build . -t apps\"]\n  end\n\n  auib[\"aui.boot.cmake\"] --&gt;|download aui.boot| cmake_configure\n  auib_import[\"auib_import(aui aui-framework/aui)\"] --&gt;|import aui| cmake_configure\n  auib --&gt; auib_import\n\n  subgraph AUI[\"AUI (Host)\"]\n    direction LR\n    aui.core.dll\n    aui.views.dll\n    aui.toolbox.exe\n    gradle_project_template[\"Android project template\"]\n  end\n\n  subgraph sys[\"System Libraries (Host)\"]\n    direction LR\n    c++[\"C++ STD Lib\"]\n    sys_other[...]\n  end\n\n  subgraph aui_deps[\"AUI Dependencies (Host)\"]\n    direction LR\n    ZLIB\n    OpenSSL\n    deps[...]\n  end\n  sys --&gt;|find_package| AUI\n  aui_deps ---&gt;|aui.boot.cmake| AUI\n\n%% arm64\n  subgraph AUI_arm64[\"AUI (arm64)\"]\n    direction LR\n    libaui.core.a_arm64[\"libaui.core.a\"]\n    libaui.views.a_arm64[\"libaui.views.a\"]\n    libaui_other_arm64[\"...\"]\n  end\n\n  subgraph sys_arm64[\"System Libraries (arm64)\"]\n    direction LR\n    c++_arm64[\"C++ STD Lib\"]\n    sys_other_arm64[...]\n  end\n\n  subgraph aui_deps_arm64[\"AUI Dependencies (arm64)\"]\n    direction LR\n    ZLIB_arm64[ZLIB]\n    OpenSSL_arm64[OpenSSL]\n    deps_arm64[...]\n  end\n  sys_arm64 --&gt;|find_package| AUI_arm64\n  aui_deps_arm64 ---&gt;|aui.boot.cmake| AUI_arm64\n  icon.svg.cpp --&gt;|\"C++ compiler (arm64)\"| arm64/libapp.so\n  main.cpp --&gt;|\"C++ compiler (arm64)\"| arm64/libapp.so\n\n%% armv7\n  subgraph AUI_armv7[\"AUI (armv7)\"]\n    direction LR\n    libaui.core.a_armv7[\"libaui.core.a\"]\n    libaui.views.a_armv7[\"libaui.views.a\"]\n    libaui_other_armv7[\"...\"]\n  end\n\n  subgraph sys_armv7[\"System Libraries (armv7)\"]\n    direction LR\n    c++_armv7[\"C++ STD Lib\"]\n    sys_other_armv7[...]\n  end\n\n  subgraph aui_deps_armv7[\"AUI Dependencies (armv7)\"]\n    direction LR\n    ZLIB_armv7[ZLIB]\n    OpenSSL_armv7[OpenSSL]\n    deps_armv7[...]\n  end\n  sys_armv7 --&gt;|find_package| AUI_armv7\n  aui_deps_armv7 ---&gt;|aui.boot.cmake| AUI_armv7\n  main.cpp --&gt;|\"C++ compiler (armv7)\"| armv7/libapp.so\n  icon.svg.cpp ----&gt;|\"C++ compiler (armv7)\"| armv7/libapp.so\n\n  ass_conv[convert icon.svg to icon.svg.cpp] --&gt; icon.svg.cpp\n  assets/icon.svg --&gt; ass_conv\n  AUI -----&gt;|aui.toolbox.exe | ass_conv\n\n  gradle_gen[\"Generate Gradle Project\"] --&gt; cmake_build\n  gradle_build[\"./gradle build\"] --&gt; cmake_build</code></pre> <p>Things to note:</p> <ul> <li>Mobile scenario slightly resembles Generic scenario.</li> <li>There are multiple CMake processes: one of the host, which defines <code>apps</code> meta target, which invokes Gradle, which   invokes another CMakes per architecture, supplying <code>CMAKE_TOOLCHAIN</code>.</li> <li>There are several AUI instances: for the host platform, arm64 (for the target) and armv7 (for the target).</li> <li>The host version of AUI supplies <code>aui.toolbox</code>, which is used to compile assets; and a copy of Gradle/Xcode project   to generate from. Also, this template delivers Kotlin/Swift platform code of AUI.</li> <li>Libraries (the components defined with aui_module) are built statically. This is needed to avoid code signing   hell on iOS.</li> <li>On Android, the application executable (the one defined with aui_executable) is compiled as a shared library,   because JVM is the executable of an Android application, which is then loads a shared library containing native code.</li> </ul>"},{"location":"app-icon/","title":"App Icon","text":"<p>The app icon is an important part of any software product, representing your brand identity and conveying the purpose of your project. It's often one of the first things users see when they discover a new application, setting a tone for overall user experience. Approach to app icon briefly resembles the overall quality of the product.</p> <p>While making distinct visuals for every platform can be challenging, AUI is here to help you to produce professional-grade app icons while preserving targeted platform's specifics.</p> <p>aui_app is a CMake command provided by AUI that defines platform-specific technical information about your application, including ICON.</p> <pre><code>aui_app(TARGET app_target\n        NAME \"My App\"\n        ICON \"icon.svg\")\n</code></pre> <p><code>aui.toolbox</code> is used by <code>aui_app</code> to convert icon to platform-specific formats.</p> <p>AUI forces you to use SVG to ensure your icon renders correctly on all platforms. In addition, the usage of SVG avoids image pixelization on HiDPI (High Dots Per Inch) displays.</p> <p>If you only have images in raster formats (such as PNG, ICO, etc.) you need to vectorize by tracing the image. Modern vector image editors (such as Adobe Illustrator or Inkscape) have built-in tools to perform this procedure. If you wish, you can also use various online vectorizers.</p>"},{"location":"app-icon/#vectorization-using-inkscape","title":"Vectorization using Inkscape","text":"<p>For instance, let's see how to vectorize your image using Inkscape editor. Just follow the next instruction: * First, import a suitable bitmap image by using the menu File \u2192 Import. * Select the image with the Selector tool. * In the menu, go to Path \u2192 Trace Bitmap. * A dialog will open where you can set different options. Play with them a little to get a better result. * When the result of the preview looks right, click Ok. The vectorized image will be available right on the canvas. * Remove your old raster bitmap and export got image in SVG format.</p>"},{"location":"app-icon/#known-issues","title":"Known issues","text":"<ul> <li>AUI's SVG renderer does not show up SVG paths. The easiest solution is convert paths to polygons (shapes) in modern vector editor.</li> </ul>"},{"location":"app-icon/#shaping","title":"Shaping","text":"<p>Modern operating systems tend to enforce icon shape to unify their launchers. For example, iOS is known for its distinctive \"squircle\" shape, a unique combination of square and circle with subtle curvature that deviates from the more traditional rounded rectangle. In Android the user is allowed to choose between rectangle, rounded rectangle, circle and squircle shapes. Moreover, it features a clear distinction between background and foreground layers so the icon can be animated.</p> <p>For that being said, a typical shape-agnostic app icon consists of:</p> <ul> <li>a background layer which is a neutral solid color, such as black or white, or featuring an accent color.   Occasionally, it may incorporate gradients or abstract shapes to add visual interest. As the background layer often   gets masked, its simplicity is key - it doesn't clutter the icon with important visual information, instead using   colors playfully.</li> <li>a foreground layer(s) that typically holds a logo or other critical graphics. To ensure clean look it should be   padded to fit naturally within icon's boundary which as was mentioned may differ.</li> </ul> <p>On the other hand, Windows and Linux applications tend to have non-uniform shapes.</p> Platform Sample Visuals Guidelines  - forced shape trend -  Android Google iOS Apple Developer Apple Design Resources macOS(with some exceptions)  - freeform trend -  Windows Microsoft Linux Flathub GNOME KDE"},{"location":"app-template/","title":"App Template \u26a1","text":"<p>Example's page</p> <p>This page describes an example listed in app category.</p> <p>GitHub-hosted app project with CI/CD building, testing, releasing, auto updating, code quality checking and more.</p> <p></p>"},{"location":"app-template/#source-code","title":"Source Code","text":"<p>This example is located outside AUI's source tree. Checkout its repository.</p>"},{"location":"aprocess/","title":"AProcess","text":"<p>Retrieves information about processes.</p> Header:<code>#include &lt;AUI/Platform/AProcess.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aprocess/#detailed-description","title":"Detailed Description","text":"<p>Process model that facilitates process creation, management, and interaction with other processes.</p> <p>In a sandboxed environment (especially in iOS and Android) this functionality is mostly irrelevant (except <code>AProcess::self()</code>).</p> <p>The AProcess class is typically used for creating, controlling, and monitoring subprocesses (including self) in a platform-independent manner. It provides a way to run external applications from within the application itself, which can be useful for tasks like running scripts, launching other programs, or automating system operations through commands.</p> <p>compilation breaks on older msvc</p>"},{"location":"aprocess/#ProcessTest_Launching_executable","title":"Launching executable","text":"<p>To start a process, pass the name of application you want to run and optionally provide arguments and working dir for that application. In this code snippet, we are starting another instance of the current executable with specific arguments and capturing its standard output (stdOut). <pre><code>auto self = AProcess::self()-&gt;getPathToExecutable();\nAProcess::ArgStringList args;\nargs.list &lt;&lt; \"--help\";\nargs.list &lt;&lt; \"-a\";\nauto p = AProcess::create({\n  .executable = self,\n  .args = std::move(args),\n  .workDir = self.parent(),\n});\n\nAString accumulator;\nAObject::connect(p-&gt;stdOut, p, [&amp;](const AByteBuffer&amp; buffer) { accumulator += AString::fromUtf8(buffer); });\n\np-&gt;run();\n\nEXPECT_EQ(p-&gt;waitForExitCode(), 0);\nEXPECT_TRUE(accumulator.contains(\"This program contains tests written using Google Test.\")) &lt;&lt; accumulator;\n</code></pre></p> <p>We define an empty string accumulator to collect the output from the process. Then, we connect a lambda function to the <code>stdOut</code> signal of the process. This lambda function converts the received buffer (a byte array) to a UTF-8 string and appends it to <code>accumulator</code>.</p> <p>We start the new process by calling its <code>AProcess::run()</code> method, which will execute the specified application with the provided arguments in the given working directory.</p> <p>We wait for the process to finish by calling <code>waitForExitCode()</code>, which blocks until the process exits and returns its exit code. If the exit code is 0, it means the process completed successfully.</p>"},{"location":"aprocess/#public-types","title":"Public Types","text":"<p><code>struct AProcess::ArgSingleString</code></p> <p>Process arguments represented as a single string. In general, prefer using AProcess::Args.</p> <code>AString arg</code> <p><code>struct AProcess::ArgStringList</code></p> <p>Process arguments represented as array of strings.</p> <code>AStringVector list</code>  Argument list.  <code>bool win32WrapWhitespaceArgumentsWithQuots</code>  {windows} Takes action only on Windows platform.  If true, during conversion to a single command line string on Windows platforms elements of list containing whitespaces are wrapped with quots escaping existing quots. As it's the only way on Windows platforms to supply paths with whitespaces, executables generally handle these quots properly.  If it does not work for your particular case, you may try setting this to false or use AProcess::ArgSingleString to take full control of command line during process creation.  Defaults to true.  <p><code>struct AProcess::ProcessCreationInfo</code></p> <p>Process creation info.</p> <code>APath executable</code>  Target executable file. Mandatory.  <code>std::variant&lt;ArgSingleString,ArgStringList&gt; args</code>  Child process arguments.  In common, prefer Args variant.  Unix native APIs use arguments as array of strings. If ArgSingleString variant is chosen, AUI splits it with whitespaces. {windows} Windows native APIs use arguments as a single string. If ArgStringList variant is chosen, AUI converts array of strings to a single command line string value. See ArgStringList for details of this conversion.  <code>APath workDir</code>  Process working directory. Defaults to working directory of the calling process."},{"location":"aprocess/#AProcess::ArgSingleString","title":"ArgSingleString","text":""},{"location":"aprocess/#AProcess::ArgStringList","title":"ArgStringList","text":""},{"location":"aprocess/#AProcess::ProcessCreationInfo","title":"ProcessCreationInfo","text":""},{"location":"aprocess/#public-methods","title":"Public Methods","text":"<pre><code>static AVector&lt;_&lt;AProcess&gt;&gt; AProcess::all()\n</code></pre> Returns data about all other running processes. <pre><code>static _&lt;AChildProcess&gt; AProcess::create(ProcessCreationInfo args)\n</code></pre> <p>Launches an executable.</p> Arguments <code>args</code>  designated-initializer-style args. See ProcessCreationInfo Returns AChildProcess instance. Use AChildProcess::run to execute. <pre><code>static void AProcess::executeAsAdministrator(const AString&amp; applicationFile, const AString&amp; args = { }, const APath&amp; workingDirectory = { })\n</code></pre> <p>Launches executable with administrator rights. (Windows only)</p> Arguments <code>applicationFile</code>  executable file <code>args</code>  arguments <code>workingDirectory</code>  pro <p>This function could not determine exit code because of MS Windows restrictions</p> <pre><code>static int AProcess::executeWaitForExit(AString applicationFile, AString args = { }, APath workingDirectory = { }, ASubProcessExecutionFlags flags = ASubProcessExecutionFlags::DEFAULT)\n</code></pre> <p>Launches executable.</p> Arguments <code>applicationFile</code>  executable file. <code>args</code>  arguments. <code>workingDirectory</code>  working directory. <code>flags</code>  process execution flags. see ASubProcessExecutionFlags. Returns exit code <pre><code>static _&lt;AProcess&gt; AProcess::findAnotherSelfInstance(const AString&amp; yourProjectName)\n</code></pre> <p>tempFileName file name which will be used as lock</p> Returns another instance of this application; nullptr, if not found <pre><code>static _&lt;AProcess&gt; AProcess::fromPid(uint32_t pid)\n</code></pre> Returns process by id <p>This function might cause race condition if process is about to die. If process is not found, <code>nullptr</code> is returned so you must check for <code>nullptr</code> before proceeding. However, if non-<code>nullptr</code> is returned, the process handle is \"acquired\" and guaranteed to be valid during lifetime of <code>AProcess</code> instance.</p> <pre><code>virtual APath AProcess::getModuleName()\n</code></pre> Returns process' executable file name. <pre><code>virtual APath AProcess::getPathToExecutable()\n</code></pre> Returns path to the process' executable. <pre><code>virtual uint32_t AProcess::getPid()\n</code></pre> Returns process' ID. <pre><code>static _&lt;AChildProcess&gt; AProcess::make(AString applicationFile, AString args = { }, APath workingDirectory = { })\n</code></pre> <p>Launches an executable.</p> Arguments <code>applicationFile</code>  executable file <code>args</code>  arguments <code>workingDirectory</code>  working directory Returns AChildProcess instance. Use AChildProcess::run to execute. <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n</code></pre> <pre><code>virtual size_t AProcess::processMemory()\n</code></pre> <p>Obtain process memory usage.</p> <pre><code>static _&lt;AProcess&gt; AProcess::self()\n</code></pre> Returns data about this process. <pre><code>virtual int AProcess::waitForExitCode()\n</code></pre> <p>Wait for process to be finished and returns exit code.</p> Returns exit code"},{"location":"aprocess/#AProcess::all","title":"all","text":""},{"location":"aprocess/#AProcess::create","title":"create","text":""},{"location":"aprocess/#AProcess::executeAsAdministrator","title":"executeAsAdministrator","text":""},{"location":"aprocess/#AProcess::executeWaitForExit","title":"executeWaitForExit","text":""},{"location":"aprocess/#AProcess::findAnotherSelfInstance","title":"findAnotherSelfInstance","text":""},{"location":"aprocess/#AProcess::fromPid","title":"fromPid","text":""},{"location":"aprocess/#AProcess::getModuleName","title":"getModuleName","text":""},{"location":"aprocess/#AProcess::getPathToExecutable","title":"getPathToExecutable","text":""},{"location":"aprocess/#AProcess::getPid","title":"getPid","text":""},{"location":"aprocess/#AProcess::make","title":"make","text":""},{"location":"aprocess/#AProcess::processMemory","title":"processMemory","text":""},{"location":"aprocess/#AProcess::self","title":"self","text":""},{"location":"aprocess/#AProcess::waitForExitCode","title":"waitForExitCode","text":""},{"location":"aprocessexception/","title":"AProcessException","text":"<p>Flag enum for AChildProcess::run</p> Header:<code>#include &lt;AUI/Platform/AProcess.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aprogressbar/","title":"AProgressBar","text":"<p>Progress bars show the progress of an operation.</p> <p></p> Header:<code>#include &lt;AUI/View/AProgressBar.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aprogressbar/#detailed-description","title":"Detailed Description","text":"<p>Progress bars are visual indicators that show the completion progress of an operation, process, or task. Progress bars provide users with real-time feedback on progress of a defined operation.</p> <p>Consider these three use cases where you might use a progress indicator:</p> <ul> <li>Loading content: While fetching content from a network, such as loading an image or data for a user profile.</li> <li>File upload: Give the user feedback on how long the upload might take.</li> <li>Long processing: While an app is processing a large amount of data, convey to the user how much of the total is   complete.</li> </ul>"},{"location":"aprogressbar/#creating-a-basic-progress-bar","title":"Creating a basic progress bar","text":"<p>The following code snippet shows a minimal progress bar implementation:</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include \"AUI/View/AProgressBar.h\"\n\nusing namespace ass;\nusing namespace declarative;\n\nstruct State {\n    AProperty&lt;aui::float_within_0_1&gt; progress = 0.42f;\n};\n\n_&lt;AView&gt; minimalProgress(_&lt;State&gt; state) {\n    return Vertical {\n        ProgressBar {\n            .progress = AUI_REACT(state-&gt;progress),\n        },\n    };\n}\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Checkbox\", 300_dp, 100_dp);\n    auto state = _new&lt;State&gt;();\n    window-&gt;setContents(\n        Vertical {\n          minimalProgress(state),\n          Label { AUI_REACT(\"Progress: {}%\"_format(int(state-&gt;progress * 100))) },\n        }\n    );\n    window-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"aprogressbar/#key-points-about-this-code","title":"Key points about this code","text":"<ul> <li><code>struct State</code> holds a reactive property <code>progress</code> representing the progress bar's value. When <code>progress</code> changes,    the UI updates reactively.</li> <li>The <code>ProgressBar</code> view binds <code>.value</code> to the state's property, so the progress is kept in sync with the data.</li> <li>Value ranges from <code>0.0f</code> (0%) to <code>1.0f</code> (100%).</li> <li>The UI updates automatically based on the state because of AUI's reactive system.</li> </ul>"},{"location":"aprogressbar/#styling","title":"Styling","text":"<p>Both <code>AProgressBar</code> and <code>AProgressBar::Inner</code> are exposed for styling purposes.</p> <pre><code>{\n    t&lt;AProgressBar&gt;(),\n    BackgroundSolid { 0xd0d0d0_rgb },\n    BorderRadius { 4_dp },\n    MinSize { 40_dp, 8_dp },\n},\n{\n    t&lt;AProgressBar::Inner&gt;(),\n    BackgroundSolid { getOsThemeColor() },\n    BorderRadius { 4_dp },\n},\n</code></pre>"},{"location":"aprogressbar/#examples","title":"Examples","text":"examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>          Vertical::Expanding {\n            Horizontal {\n              Label { \"Elapsed Time:\" },\n              Centered::Expanding {\n                _new&lt;AProgressBar&gt;() AUI_LET {\n                        it &amp; mElapsedTimeRatio;\n                        it-&gt;setCustomStyle({ Expanding { 1, 0 } });\n                    },\n              },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n</code></pre></p>"},{"location":"aprogressbar/#public-types","title":"Public Types","text":"<p><code>class AProgressBar::Inner</code></p> <p>Empty structure.</p>"},{"location":"aprogressbar/#AProgressBar::Inner","title":"Inner","text":""},{"location":"aprogressbar/#public-methods","title":"Public Methods","text":"<pre><code>void AProgressBar::setValue(aui::float_within_0_1 value)\n</code></pre> Arguments <code>value</code>  progress value, where `0.0f` = 0%, `1.0f` = 100% <p>Set progress bar value.</p> <p>Examples:</p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    mWidth-&gt;setValue(gWidth);\n    mHeight-&gt;setValue(gHeight);\n\n    updateMinesMax();\n\n    mMines-&gt;setValue(gMines);\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n                it-&gt;setMax(1000);\n                it-&gt;setValue(350);\n            },\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    fractal-&gt;focus();\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n                                connect(\n                                    it-&gt;valueChanging, [this, circle](aui::float_within_0_1 s) {\n                                        circle-&gt;radius = s * MAX_RADIUS;\n                                        mState-&gt;circles.notify();\n                                    });\n</code></pre>"},{"location":"aprogressbar/#AProgressBar::setValue","title":"setValue","text":""},{"location":"aproperty/","title":"AProperty","text":"<p>Observable container of <code>T</code>.</p> Header:<code>#include &lt;AUI/Common/AProperty.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aproperty/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p><code>AProperty&lt;T&gt;</code> is a container holding an instance of <code>T</code>. You can assign a value to it with <code>operator=</code> and read value with <code>value()</code> method or implicit conversion <code>operator T()</code>.</p> <p>See property system for usage examples.</p>"},{"location":"aproperty/#declaration","title":"Declaration","text":"<p>To declare a property inside your data model, use AProperty template: <pre><code>struct User {\n    AProperty&lt;AString&gt; name;\n    AProperty&lt;AString&gt; surname;\n};\n</code></pre> LogObserver() {    ON_CALL(*this, log(testing::_)).WillByDefault( {    }); } <code>AProperty&lt;T&gt;</code> is a container holding an instance of <code>T</code>. You can assign a value to it with <code>operator=</code> and read value with <code>value()</code> method or implicit conversion <code>operator T()</code>.</p> <p>AProperty behaves like a class/struct data member: <pre><code>User u;\nu.name = \"Hello\";\nEXPECT_EQ(u.name, \"Hello\");\n</code></pre> Non-const operators have side effects; const operators don't, so you can perform seamlessly: <pre><code>User u;\nu.name = \"Hello\";\nAString helloWorld = u.name + \" world\";\nEXPECT_EQ(helloWorld, \"Hello world\");\n</code></pre> In most cases, property is implicitly convertible to its underlying type (const only): <pre><code>auto doSomethingWithName = [](const AString&amp; name) { EXPECT_EQ(name, \"Hello\"); };\nUser u;\nu.name = \"Hello\";\ndoSomethingWithName(u.name);\n</code></pre> If it doesn't, simply put an asterisk: <pre><code>doSomethingWithName(*u.name);\n//                 ^^^ HERE\n</code></pre></p>"},{"location":"aproperty/#PropertyTest_Observing_changes","title":"Observing changes","text":"<p>All property types offer <code>.changed</code> field which is a signal reporting value changes. Let's make little observer object for demonstration: <pre><code>class LogObserver : public AObject {\npublic:\n    void log(const AString&amp; msg) {\n        ALogger::info(\"LogObserver\") &lt;&lt; \"Received value: \" &lt;&lt; msg;\n    }\n};\n</code></pre></p> <p>Example usage: <pre><code>auto observer = _new&lt;LogObserver&gt;();\nauto u = aui::ptr::manage_shared(new User { .name = \"Chloe\" });\nAObject::connect(u-&gt;name.changed, AUI_SLOT(observer)::log);\n</code></pre></p> <p>At the moment, the program prints nothing. When we change the property: <pre><code>u-&gt;name = \"Marinette\";\n</code></pre> Code produces the following output: <pre><code>[07:58:59][][LogObserver][INFO]: Received value: Marinette\n</code></pre></p> <p>As you can see, observer received the update. But, for example, if we would like to display the value via label, the label wouldn't display the current value until the next update. We want the label to display current value without requiring an update. To do this, connect to the property directly, without explicitly asking for <code>changed</code>: <pre><code>auto observer = _new&lt;LogObserver&gt;();\nauto u = aui::ptr::manage_shared(new User { .name = \"Chloe\" });\n\nEXPECT_CALL(*observer, log(AString(\"Chloe\"))).Times(1);\nAObject::connect(u-&gt;name, AUI_SLOT(observer)::log);\n</code></pre> Code above produces the following output: <pre><code>[07:58:59][][LogObserver][INFO]: Received value: Chloe\n</code></pre> As you can see, observer receives the value without making updates to the value. The call of <code>LogObserver::log</code> is made by <code>AObject::connect</code> itself. In this document, we will call this behaviour as \"pre-fire\".</p> <p>Subsequent changes to field would send updates as well: <pre><code>EXPECT_CALL(*observer, log(AString(\"Marinette\"))).Times(1);\nu-&gt;name = \"Marinette\";\n</code></pre> Assignment operation above makes an additional line to output: <pre><code>[07:58:59][][LogObserver][INFO]: Received value: Marinette\n</code></pre></p> <p>Whole program output when connecting to property directly: <pre><code>[07:58:59][][LogObserver][INFO]: Received value: Chloe\n[07:58:59][][LogObserver][INFO]: Received value: Marinette\n</code></pre></p>"},{"location":"aproperty/#PropertyTest_Copy_constructing_AProperty","title":"Copy constructing AProperty","text":"<p>Copying <code>AProperty</code> is considered as a valid operation as it's a data holder. However, it's worth to note that <code>AProperty</code> copies it's underlying data field only, the signal-slot relations are not borrowed. <pre><code>auto observer = _new&lt;LogObserver&gt;();\nauto original = aui::ptr::manage_shared(new User { .name = \"Chloe\" });\n\nEXPECT_CALL(*observer, log(AString(\"Chloe\"))).Times(1);\nAObject::connect(original-&gt;name, AUI_SLOT(observer)::log);\n</code></pre> This part is similar to previous examples, nothing new. Let's introduce a copy: <pre><code>auto copy = _new&lt;User&gt;(*original);\nEXPECT_EQ(copy-&gt;name, \"Chloe\"); // copied name\n</code></pre> Now, let's change <code>origin-&gt;name</code> and check that observer received an update, but value in the <code>copy</code> remains: <pre><code>EXPECT_CALL(*observer, log(AString(\"Marinette\"))).Times(1);\noriginal-&gt;name = \"Marinette\";\nEXPECT_EQ(copy-&gt;name, \"Chloe\"); // still\n</code></pre> In this example, observer is aware of changes <code>\"Chloe\"</code> -&gt; <code>\"Marinette\"</code>. The copy is not aware because it is a copy. If we try to change the <code>copy</code>'s name: <pre><code>copy-&gt;name = \"Adrien\";\n</code></pre> The observer is not aware about changes in <code>copy</code>. In fact. <code>copy-&gt;name</code> has zero connections.</p>"},{"location":"aproperty/#PropertyTest_Copy_assigning_AProperty","title":"Copy assigning AProperty","text":"<p>The situation with copy assigning <code>auto copy = _new&lt;User&gt;(); *copy = *original;</code> is similar to copy construction <code>auto copy = _new&lt;User&gt;(*original);</code>, except that we are copying to some pre-existing data structure that potentially have signal-skit relations already. So, not only connections should be kept as is but a notification for copy destination's observers is needed.</p> <p>As with copy construction, copy operation of <code>AProperty</code> does not affect signal-slot relations. Moreover, it notifies the observers. <pre><code>auto observer = _new&lt;LogObserver&gt;();\nauto original = aui::ptr::manage_shared(new User { .name = \"Chloe\" });\n\nEXPECT_CALL(*observer, log(AString(\"Chloe\"))).Times(1);\nAObject::connect(original-&gt;name, AUI_SLOT(observer)::log);\n</code></pre> This part is similar to previous examples, nothing new. Let's perform copy-assignment: <pre><code>EXPECT_CALL(*observer, log(AString(\"Marinette\"))).Times(1);\nUser copy { .name = \"Marinette\" };\n*original = copy;\n</code></pre> See, not only the connection remains, but it also receives notification about the change.</p>"},{"location":"aproperty/#PropertyTest_Moving_AProperty","title":"Moving AProperty","text":"<p>Similary to copy, AProperty is both move assignable and constructible except that underlying value is moved instead of copying. Also, the observers of the source object receive notification that the value was emptied. The signal-slot relations are left unchanged. <pre><code>auto observer = _new&lt;LogObserver&gt;();\nauto original = aui::ptr::manage_shared(new User { .name = \"Chloe\" });\n\nEXPECT_CALL(*observer, log(AString(\"Chloe\"))).Times(1);\nAObject::connect(original-&gt;name, AUI_SLOT(observer)::log);\n</code></pre> This part is similar to previous examples, nothing new. Let's introduce a move: <pre><code>// by move operation, we've affected the source, hence the\n// empty string notification\nEXPECT_CALL(*observer, log(AString(\"\"))).Times(1);\nauto moved = _new&lt;User&gt;(std::move(*original));\n\nEXPECT_EQ(original-&gt;name, \"\"); // empty\nEXPECT_EQ(moved-&gt;name, \"Chloe\"); // moved name\n</code></pre> Now, let's change <code>origin-&gt;name</code> and check that observer received an update, but value in the <code>moved</code> remains: <pre><code>EXPECT_CALL(*observer, log(AString(\"Marinette\"))).Times(1);\noriginal-&gt;name = \"Marinette\";\nEXPECT_EQ(moved-&gt;name, \"Chloe\"); // still\n</code></pre> In this example, observer is aware of changes <code>\"Chloe\"</code> -&gt; <code>\"\"</code> -&gt; <code>\"Marinette\"</code>. The <code>moved</code> is not aware. If we try to change the <code>moved</code>'s name: <pre><code>moved-&gt;name = \"Adrien\";\n</code></pre> The observer is not aware about changes in <code>moved</code>. In fact. <code>moved-&gt;name</code> has zero connections. Move assignment work in a similar way to copy assignment: <pre><code>auto observer = _new&lt;LogObserver&gt;();\nauto original = aui::ptr::manage_shared(new User { .name = \"Chloe\" });\n\nEXPECT_CALL(*observer, log(AString(\"Chloe\"))).Times(1);\nAObject::connect(original-&gt;name, AUI_SLOT(observer)::log);\n</code></pre> This part is similar to previous examples, nothing new. Let's perform move-assignment: <pre><code>EXPECT_CALL(*observer, log(AString(\"Marinette\"))).Times(1);\nUser copy { .name = \"Marinette\" };\n*original = std::move(copy);\n</code></pre> See, not only the connection remains, but it also receives notification about the change.</p>"},{"location":"aproperty/#PropertyTest_Write_operators","title":"Non-const operators","text":"<p>Refer to <code>aui::PropertyModifier</code>.</p>"},{"location":"aproperty/#PropertyTest_AProperty_and_AVector","title":"AProperty and AVector","text":"<p>Assuming you have an AVector wrapped with AProperty: <pre><code>AProperty&lt;AVector&lt;int&gt;&gt; ints = AVector&lt;int&gt;{1, 2, 3};\n</code></pre> You can use square brackets to access items transparently: <pre><code>EXPECT_EQ(ints[0], 1);\nEXPECT_EQ(ints[1], 2);\nEXPECT_EQ(ints[2], 3);\n</code></pre> For ranged for loop, you need to dereference <code>ints</code>: <pre><code>for (int i : *ints) {\n    // i = 1, 2, 3...\n}\n</code></pre> To modify the vector, you need to use <code>writeScope()</code>: <pre><code>ints.writeScope()-&gt;push_back(2);\n// or\nints.writeScope() &lt;&lt; 2;\n// or\nints &lt;&lt; 2; // implies writeScope()\n</code></pre></p>"},{"location":"aproperty/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>        });\n        emit frameComplete;\n    }\n\n    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n</code></pre></p> examples/ui/contacts/src/model/Contact.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>#include &lt;AUI/Common/AObject.h&gt;\n#include \"AUI/Common/AProperty.h\"\n\nstruct Contact {\n    AProperty&lt;AString&gt; displayName;\n    AProperty&lt;AString&gt; phone;\n    AProperty&lt;AString&gt; address;\n    AProperty&lt;AString&gt; email;\n    AProperty&lt;AString&gt; homepage;\n    AProperty&lt;AString&gt; note;\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>constexpr auto REGEX_DATE = ctre::match&lt;\"([0-9]+)\\\\.([0-9]+)\\\\.([0-9]{4})\"&gt;;\n\nstruct DateTextFieldState {\n    AProperty&lt;AOptional&lt;system_clock::time_point&gt;&gt; parsed;\n};\n\nauto formatDate(system_clock::time_point date) { return \"{0:%d}.{0:%m}.{0:%G}\"_format(date); }\n\nauto dateTextField(DateTextFieldState&amp; state) {\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>private:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    high_resolution_clock::time_point mStartTime = high_resolution_clock::now();\n    AProperty&lt;high_resolution_clock::time_point&gt; mCurrentTime;\n    AProperty&lt;high_resolution_clock::duration&gt; mDuration = 30s;\n\n    APropertyPrecomputed&lt;high_resolution_clock::duration&gt; mElapsedTime = [&amp;] {\n        return std::min(mCurrentTime - mStartTime, *mDuration);\n    };\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>    Iterator end() const {\n        return mStack.end();\n    }\n\n    AProperty&lt;Iterator&gt; nextAction = mStack.end();\n};\n\nstruct State {\n    AProperty&lt;std::list&lt;Circle&gt;&gt; circles;\n    UndoStack history;\n</code></pre></p> examples/7guis/cells/src/Cell.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    formula::Value evaluate();\n\npublic:\n    Spreadsheet* spreadsheet = nullptr;\n    AProperty&lt;AString&gt; expression;\n    APropertyPrecomputed&lt;formula::Value&gt; value = [&amp;] { return (*expressionPrecompiled)(*spreadsheet); };\n\n    static AString columnName(unsigned index);\n    static AString rowName(unsigned index);\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>private:\n    _&lt;Contact&gt; mContact;\n    _&lt;Contact&gt; mOriginalContact;\n    AProperty&lt;bool&gt; mEditorMode = false;\n\n    template&lt;typename T&gt;\n    _&lt;AView&gt; presentation(AProperty&lt;T&gt;&amp; property);\n\n    template&lt;typename T&gt;\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>    };\n}\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; viewer(AProperty&lt;T&gt;&amp; property) {\n    return Label { AUI_REACT(\"{}\"_format(*property)) };\n}\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; editor(AProperty&lt;T&gt;&amp; property);\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>using namespace ass;\n\nstruct State {\n    Spreadsheet spreadsheet{glm::uvec2 { 'Z' - 'A' + 1, 100 }};\n    AProperty&lt;AString&gt; currentExpression;\n};\n\nstatic _&lt;AView&gt; labelTitle(AString s) {\n    return _new&lt;ALabel&gt;(std::move(s)) AUI_WITH_STYLE {\n        Opacity { 0.5f },\n</code></pre></p>"},{"location":"aproperty/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;T&gt; changed</code></p> <p>Signal that notifies data changes.</p> <p><code>T raw</code></p> <p>Stored value.</p> <p>This field stores AProperty's wrapped value. It is not recommended to use this in casual use; although there are might be an use case to modify the value without notifying. You can use <code>notify()</code> to send a change notification. Use at your own risk.</p>"},{"location":"aproperty/#AProperty::changed","title":"changed","text":""},{"location":"aproperty/#AProperty::raw","title":"raw","text":""},{"location":"aproperty/#examples_1","title":"Examples","text":"examples/basic/hello_world/CMakeLists.txt <p>Console Hello World Example - Basic CLI Hello World application.</p> <pre><code># Use AUI.Boot\nfile(\n    DOWNLOAD \n    https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake \n    ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n\n# link AUI\nauib_import(\n</code></pre> examples/app/game_of_life/CMakeLists.txt <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code># Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n# auib_import(aui https://github.com/aui-framework/aui\n#             COMPONENTS core views json)\n</code></pre> examples/app/notes/CMakeLists.txt <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code># Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n# auib_import(aui https://github.com/aui-framework/aui\n#             COMPONENTS core views json)\n</code></pre> examples/ui/views/CMakeLists.txt <p>Views Example - All-in-one views building example.</p> <pre><code># Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n# auib_import(aui https://github.com/aui-framework/aui\n#             COMPONENTS core views audio curl)\n</code></pre>"},{"location":"aproperty/#public-methods","title":"Public Methods","text":"<pre><code>auto AProperty::biProjected(ProjectionRead&amp;&amp; projectionRead, ProjectionWrite&amp;&amp; projectionWrite)\n</code></pre> <p>Makes a bidirectional projection of this property.</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>auto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n                  return formatDate(*v);\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n                            return float(d.count()) / float(MAX_DURATION.count());\n                        },\n                        [](aui::float_within_0_1 d) -&gt; high_resolution_clock::duration {\n                            return high_resolution_clock::duration(long(float(d) * float(MAX_DURATION.count())));\n</code></pre> <pre><code>auto AProperty::biProjected(Projection&amp;&amp; projectionBidirectional)\n</code></pre> <p>Makes a bidirectional projection of this property (by a single aui::lambda_overloaded).</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>auto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n                  return formatDate(*v);\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n                            return float(d.count()) / float(MAX_DURATION.count());\n                        },\n                        [](aui::float_within_0_1 d) -&gt; high_resolution_clock::duration {\n                            return high_resolution_clock::duration(long(float(d) * float(MAX_DURATION.count())));\n</code></pre> <pre><code>void AProperty::notify()\n</code></pre> <p>Notify observers that a change was occurred (no preconditions).</p> <p>In common, you won't need to use this function. AProperty is reevaluated automatically as soon as one updates the value within property.</p> <p>If your scenario goes beyond <code>AProperty::writeScope()</code> that explicitly defines modification scope within RAII scope, you can modify the underlying value by accessing <code>AProperty::raw</code> and then call <code>AProperty::notify()</code> to notify the observers value is changed.</p> <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>    void add(_unique&lt;IAction&gt; action) {\n        action-&gt;redo();\n        nextAction = std::next(mStack.insert(mStack.erase(*nextAction, mStack.end()), std::move(action)));\n        nextAction.notify();\n    }\n\n    Iterator begin() const {\n        return mStack.begin();\n    }\n</code></pre> <pre><code>auto AProperty::readProjected(Projection&amp;&amp; projection)\n</code></pre> <p>Makes a readonly projection of this property.</p> <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        setContents(Vertical {\n          Centered {\n            Horizontal {\n              Button { Label { \"Undo\" }, {me::undo} } AUI_LET {\n                  it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.begin(); }) &gt; &amp;AView::setEnabled;\n              },\n              Button { Label { \"Redo\" }, {me::redo} } AUI_LET {\n                it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.end(); }) &gt; &amp;AView::setEnabled;\n              },\n            },\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> <pre><code>aui::PropertyModifier&lt;AProperty&gt; AProperty::writeScope()\n</code></pre> Returns aui::PropertyModifier of this property. <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        public:\n            ActionAddCircle(_&lt;State&gt; state, Circle circle) : mState(std::move(state)), mCircle(std::move(circle)) {}\n            ~ActionAddCircle() override = default;\n            void undo() override {\n                mState-&gt;circles.writeScope()-&gt;pop_back();\n            }\n            void redo() override {\n                mState-&gt;circles.writeScope()-&gt;push_back(mCircle);\n            }\n</code></pre>"},{"location":"aproperty/#AProperty::biProjected","title":"biProjected","text":""},{"location":"aproperty/#AProperty::notify","title":"notify","text":""},{"location":"aproperty/#AProperty::readProjected","title":"readProjected","text":""},{"location":"aproperty/#AProperty::writeScope","title":"writeScope","text":""},{"location":"apropertydef/","title":"APropertyDef","text":"<p>Property implementation to use with custom getter/setter.</p> Header:<code>#include &lt;AUI/Common/APropertyDef.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"apropertydef/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>You can use this way if you are required to define custom behaviour on getter/setter. As a downside, you have to write extra boilerplate code: define property, data field, signal, getter and setter checking equality. Also, APropertyDef requires the class to derive <code>AObject</code>. Most of AView's properties are defined this way.</p> <p>See property system for usage examples.</p>"},{"location":"apropertydef/#performance-considerations","title":"Performance considerations","text":"<p>APropertyDef does not involve extra runtime overhead between assignment and getter/setter.</p>"},{"location":"apropertydef/#declaration","title":"Declaration","text":"<p>To declare a property with custom getter/setter, use APropertyDef template. APropertyDef-based property is defined by const member function as follows: <pre><code>class User : public AObject {\npublic:\n    auto name() const {\n        return APropertyDef {\n            this,\n            &amp;User::getName,   // this works too: &amp;User::mName\n            &amp;User::setName,\n            mNameChanged,\n        };\n    }\n\nprivate:\n    AString mName;\n    emits&lt;AString&gt; mNameChanged;\n\n    void setName(AString name) {\n        // APropertyDef requires us to emit\n        // changed signal if value is actually\n        // changed\n        if (mName == name) {\n            return;\n        }\n        mName = std::move(name);\n        emit mNameChanged(mName);\n    }\n\n    const AString&amp; getName() const { return mName; }\n};\n</code></pre> APropertyDef behaves like a class/struct function member: <pre><code>User u;\nu.name() = \"Hello\"; // calls setName implicitly\nEXPECT_EQ(u.name(), \"Hello\");\n</code></pre></p> <p>Note</p> <p>Properties defined with APropertyDef instead of AProperty impersonate themselves by trailing braces <code>()</code>. We can't get rid of them, as APropertyDef is defined thanks to member function. In comparison to <code>user-&gt;name</code>, think of <code>user-&gt;name()</code> as the same kind of property except defining custom behaviour via function, hence the braces <code>()</code>.</p> <p>For the rest, APropertyDef is identical to AProperty including seamless interaction: <pre><code>User u;\nu.name() = \"Hello\";\nu.name() += \" world!\";\nEXPECT_EQ(u.name(), \"Hello world!\");\nEXPECT_EQ(u.name()-&gt;length(), AString(\"Hello world!\").length());\n</code></pre></p> <p>Note</p> <p>In order to honor getters/setters, <code>APropertyDef</code> calls getter/setter instead of using <code>+=</code> on your property directly. Equivalent code will be: <pre><code>u.setName(u.getName() + \" world!\")\n</code></pre></p> <p>The implicit conversions work the same way as with AProperty: <pre><code>auto doSomethingWithName = [](const AString&amp; name) { EXPECT_EQ(name, \"Hello\"); };\nUser u;\nu.name() = \"Hello\";\ndoSomethingWithName(u.name());\n</code></pre> If it doesn't, simply put an asterisk: <pre><code>doSomethingWithName(*u.name());\n//                 ^^^ HERE\n</code></pre></p>"},{"location":"apropertydef/#PropertyDefTest_Observing_changes","title":"Observing changes","text":"<p>All property types offer <code>.changed</code> field which is a signal reporting value changes. Let's make little observer object for demonstration: <pre><code>class LogObserver : public AObject {\npublic:\n    void log(const AString&amp; msg) {\n        ALogger::info(\"LogObserver\") &lt;&lt; \"Received value: \" &lt;&lt; msg;\n    }\n};\n</code></pre> The usage is close to <code>AProperty</code>: <pre><code>auto observer = _new&lt;LogObserver&gt;();\nauto u = _new&lt;User&gt;();\nu-&gt;name() = \"Chloe\";\n// ...\nAObject::connect(u-&gt;name().changed, AUI_SLOT(observer)::log);\n</code></pre> <pre><code>u-&gt;name() = \"Marinette\";\n</code></pre> Code produces the following output: <pre><code>[07:58:59][][LogObserver][INFO]: Received value: Marinette\n</code></pre></p> <p>Making connection to property directly instead of <code>.changed</code>: <pre><code>auto observer = _new&lt;LogObserver&gt;();\nauto u = _new&lt;User&gt;();\nu-&gt;name() = \"Chloe\";\n// ...\nAObject::connect(u-&gt;name(), AUI_SLOT(observer)::log);\n</code></pre> Code above produces the following output: <pre><code>[07:58:59][][LogObserver][INFO]: Received value: Chloe\n</code></pre></p> <p>Subsequent changes to field would send updates as well: <pre><code>u-&gt;name() = \"Marinette\";\n</code></pre> Assignment operation above makes an additional line to output: <pre><code>[07:58:59][][LogObserver][INFO]: Received value: Marinette\n</code></pre></p> <p>Whole program output when connecting to property directly: <pre><code>[07:58:59][][LogObserver][INFO]: Received value: Chloe\n[07:58:59][][LogObserver][INFO]: Received value: Marinette\n</code></pre></p>"},{"location":"apropertydef/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>const M* base</code></p> <p>AObject which this property belongs to.</p> <p><code>const emits&lt;SignalArg&gt;&amp; changed</code></p> <p>Reference to underlying signal emitting on value changes.</p> <p><code>Getter get</code></p> <p>Getter. Can be pointer-to-member(function or field) or lambda.</p>"},{"location":"apropertydef/#APropertyDef::base","title":"base","text":""},{"location":"apropertydef/#APropertyDef::changed","title":"changed","text":""},{"location":"apropertydef/#APropertyDef::get","title":"get","text":""},{"location":"apropertydef/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n                for (int x = 0; x &lt; mSize.x; ++x) {\n                    glm::ivec2 i { x, y };\n                    get(mNextPopulation, i) = [&amp;] {\n                        auto around = cellsAround(i);\n                        switch (around) {\n                            default:\n                                return CellState::DEAD;\n                            case 2:\n</code></pre> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    }\n\n    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre> <p><code>Setter set</code></p> <p>Setter. Can be pointer-to-member(function or field) or lambda.</p> <p>The setter implementation typically emits <code>changed</code> signal. If it is, it must emit changes only if value is actually changed. <pre><code>void setValue(int value) {\n  if (mValue == value) {\n    return;\n  }\n  mValue = value;\n  emit mValueChanged(valueChanged);\n}\n</code></pre></p>"},{"location":"apropertydef/#APropertyDef::set","title":"set","text":""},{"location":"apropertydef/#examples_1","title":"Examples","text":"examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>}\n)\", { \"pos\", \"uv\" }, gl::GLSLOptions { .custom = true });\n    mShader.compile();\n    mShader.use();\n    mShader.set(UNIFORM_TR, mTransform);\n    mShader.set(UNIFORM_SQ, 1.f);\n\n    mTexture = _new&lt;gl::Texture2D&gt;();\n    mTexture-&gt;tex2D(*AImage::fromUrl(\":img/color_scheme_wikipedia.png\"));\n}\n</code></pre>"},{"location":"apropertydef/#public-methods","title":"Public Methods","text":"<pre><code>auto APropertyDef::biProjected(ProjectionRead&amp;&amp; projectionRead, ProjectionWrite&amp;&amp; projectionWrite)\n</code></pre> <p>Makes a bidirectional projection of this property.</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>auto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n                  return formatDate(*v);\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n                            return float(d.count()) / float(MAX_DURATION.count());\n                        },\n                        [](aui::float_within_0_1 d) -&gt; high_resolution_clock::duration {\n                            return high_resolution_clock::duration(long(float(d) * float(MAX_DURATION.count())));\n</code></pre> <pre><code>auto APropertyDef::biProjected(Projection&amp;&amp; projectionBidirectional)\n</code></pre> <p>Makes a bidirectional projection of this property (by a single aui::lambda_overloaded).</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>auto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n                  return formatDate(*v);\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n                            return float(d.count()) / float(MAX_DURATION.count());\n                        },\n                        [](aui::float_within_0_1 d) -&gt; high_resolution_clock::duration {\n                            return high_resolution_clock::duration(long(float(d) * float(MAX_DURATION.count())));\n</code></pre> <pre><code>void APropertyDef::notify()\n</code></pre> <p>Notify observers that a change was occurred (no preconditions).</p> <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>    void add(_unique&lt;IAction&gt; action) {\n        action-&gt;redo();\n        nextAction = std::next(mStack.insert(mStack.erase(*nextAction, mStack.end()), std::move(action)));\n        nextAction.notify();\n    }\n\n    Iterator begin() const {\n        return mStack.begin();\n    }\n</code></pre> <pre><code>auto APropertyDef::readProjected(Projection&amp;&amp; projection)\n</code></pre> <p>Makes a readonly projection of this property.</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        setContents(Vertical {\n          Centered {\n            Horizontal {\n              Button { Label { \"Undo\" }, {me::undo} } AUI_LET {\n                  it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.begin(); }) &gt; &amp;AView::setEnabled;\n              },\n              Button { Label { \"Redo\" }, {me::redo} } AUI_LET {\n                it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.end(); }) &gt; &amp;AView::setEnabled;\n              },\n            },\n</code></pre> <pre><code>aui::PropertyModifier&lt;APropertyDef&gt; APropertyDef::writeScope()\n</code></pre> Returns @copybrief aui::PropertyModifier See aui::PropertyModifier. <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        public:\n            ActionAddCircle(_&lt;State&gt; state, Circle circle) : mState(std::move(state)), mCircle(std::move(circle)) {}\n            ~ActionAddCircle() override = default;\n            void undo() override {\n                mState-&gt;circles.writeScope()-&gt;pop_back();\n            }\n            void redo() override {\n                mState-&gt;circles.writeScope()-&gt;push_back(mCircle);\n            }\n</code></pre>"},{"location":"apropertydef/#APropertyDef::biProjected","title":"biProjected","text":""},{"location":"apropertydef/#APropertyDef::notify","title":"notify","text":""},{"location":"apropertydef/#APropertyDef::readProjected","title":"readProjected","text":""},{"location":"apropertydef/#APropertyDef::writeScope","title":"writeScope","text":""},{"location":"apropertyprecomputed/","title":"APropertyPrecomputed","text":"<p>Readonly property that holds a value computed by an expression.</p> Header:<code>#include &lt;AUI/Common/APropertyPrecomputed.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"apropertyprecomputed/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p><code>APropertyPrecomputed&lt;T&gt;</code> is a readonly property similar to <code>AProperty&lt;T&gt;</code>. It holds an instance of <code>T</code> as well. Its value is determined by the C++ function specified in its constructor, typically a C++ lambda expression.</p> <p>See property system for usage info.</p> <p>Despite properties offer projection methods, you might want to track and process values of several properties.</p> <p><code>APropertyPrecomputed&lt;T&gt;</code> is a readonly property similar to <code>AProperty&lt;T&gt;</code>. It holds an instance of <code>T</code> as well. Its value is determined by a reactive expression specified in <code>APropertyPrecomputed&lt;T&gt;</code>'s constructor, typically a C++ lambda.</p> <p>It's convenient to access values from another properties inside the expression. The properties accessed during invocation of the expression are tracked behind the scenes so they become dependencies of <code>APropertyPrecomputed</code> automatically. If one of the tracked properties fires <code>changed</code> signal, <code>APropertyPrecomputed</code> invalidates its <code>T</code>. <code>APropertyPrecomputed</code> follows lazy semantics so the expression is re-evaluated and the new result is applied to <code>APropertyPrecomputed</code> as soon as the latter is accessed for the next time.</p> <p>In other words, it allows to specify relationships between different object properties and reactively update <code>APropertyPrecomputed</code> value whenever its dependencies change. <code>APropertyPrecomputed&lt;T&gt;</code> is somewhat similar to Qt Bindable Properties.</p> <p><code>APropertyPrecomputed</code> is a readonly property, hence you can't update its value with assignment. You can get its value with <code>value()</code> method or implicit conversion <code>operator T()</code> as with other properties.</p>"},{"location":"apropertyprecomputed/#declaration","title":"Declaration","text":"<p>Declare a property with custom expression determining it's value as follows: <pre><code>/// [APropertyPrecomputed User]\nstruct User {\n    AProperty&lt;AString&gt; name;\n    AProperty&lt;AString&gt; surname;\n    APropertyPrecomputed&lt;AString&gt; fullName = [&amp;] { return \"{} {}\"_format(name, surname); };\n};\n/// [APropertyPrecomputed User]\n</code></pre> Let's make little observer object for demonstration: <pre><code>class LogObserver : public AObject {\npublic:\n    void log(const AString&amp; msg) {\n        ALogger::info(\"LogObserver\") &lt;&lt; \"Received value: \" &lt;&lt; msg;\n    }\n};\n</code></pre> Usage: <pre><code>auto u = aui::ptr::manage_shared(new User {\n    .name = \"Emma\",\n    .surname = \"Watson\",\n});\n\nauto observer = _new&lt;LogObserver&gt;();\nEXPECT_CALL(*observer, log(AString(\"Emma Watson\"))).Times(1);\nAObject::connect(u-&gt;fullName, AUI_SLOT(observer)::log);\n</code></pre></p> <p>The example above prints \"Emma Watson\". If we try to update one of dependencies of <code>APropertyPrecomputed</code> (i.e., <code>name</code> or <code>surname</code>), <code>APropertyPrecomputed</code> responds immediately: <pre><code>EXPECT_CALL(*observer, log(AString(\"Emma Stone\"))).Times(1);\nu-&gt;surname = \"Stone\";\n</code></pre></p> <p>The example above prints \"Emma Stone\".</p>"},{"location":"apropertyprecomputed/#PropertyPrecomputedTest_Valid_Expressions","title":"Valid Expressions","text":"<p>Any C++ callable evaluating to <code>T</code> can be used as an expression for <code>APropertyPrecomputed&lt;T&gt;</code>. However, to formulate correct expression, some rules must be satisfied.</p> <p>Dependency tracking only works on other properties. It is the developer's responsibility to ensure all values referenced in the expression are properties, or, at least, non-property values that wouldn't change or whose changes are not interesting. You definitely can use branching inside the expression, but you must be confident about what are you doing. Generally speaking, use as trivial expressions as possible.</p> <pre><code>struct User {\n    AProperty&lt;AString&gt; name;\n    AProperty&lt;AString&gt; surname;\n    APropertyPrecomputed&lt;AString&gt; fullName = [&amp;]() -&gt; AString {\n        if (name-&gt;empty()) {\n            return \"-\";\n        }\n        if (surname-&gt;empty()) {\n            return \"-\";\n        }\n        return \"{} {}\"_format(name, surname);\n    };\n};\n</code></pre> <p>In this expression, we have a fast path return if <code>name</code> is empty. <pre><code>User u = {\n    .name = \"Emma\",\n    .surname = \"Watson\",\n};\n// trivial: we've accessed all referenced properties\nEXPECT_EQ(u.fullName, \"Emma Watson\");\n</code></pre> As soon as we set <code>name</code> to <code>\"\"</code>, we don't access <code>surname</code>. If we try to trigger the fast path return: <pre><code>u.name = \"\";\n</code></pre> <code>surname</code> can't trigger re-evaluation anyhow. Re-evaluation can be triggered by <code>name</code> only. So, at the moment, we are interested in <code>name</code> changes only.</p> <p><code>APropertyPrecomputed</code> might evaluate its expression several times during its lifetime. The developer must make sure that all objects referenced in the expression live longer than <code>APropertyPrecomputed</code>.</p> <p>The expression should not read from the property it's a binding for, including other referenced APropertyPrecomputes. Otherwise, there's an infinite evaluation loop, and AEvaluationLoopException is thrown.</p>"},{"location":"apropertyprecomputed/#copying-and-moving-apropertyprecomputed","title":"Copying and moving APropertyPrecomputed","text":"<p>Warning</p> <p>Despite the underlying value and factory callback are both copy constructible and movable, the copy and move constructor are explicitly deleted to avoid potential object lifetime errors created by the lambda capture and prevent non-intuitive behavior.</p> <p>User</p> <p>If copy construction of <code>APropertyPrecomputed</code> were possible, consider the following code: <pre><code>User user { .name = \"Hello\" };\nauto copy = user;             // WON'T COMPILE\nauto moved = std::move(user); // WON'T COMPILE\n</code></pre> <code>copy</code> has copied factory function of <code>user</code>, which refers to fields of <code>user</code>, not to <code>copy</code>'s fields. Copy construction of a class or struct discards default values of all fields - this is the way <code>APropertyPrecomputed</code>'s factory function is set to APropertyPrecomputed.</p>"},{"location":"apropertyprecomputed/#examples","title":"Examples","text":"examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>private:\n    DateTextFieldState mDepartureDate { system_clock::now() }, mReturnDate { system_clock::now() };\n    AProperty&lt;bool&gt; mIsReturnFlight;\n    APropertyPrecomputed&lt;bool&gt; mIsValid = [&amp;] {\n        if (!mDepartureDate.parsed-&gt;hasValue()) {\n            return false;\n        }\n        if (!mIsReturnFlight) {\n            return true;\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>    high_resolution_clock::time_point mStartTime = high_resolution_clock::now();\n    AProperty&lt;high_resolution_clock::time_point&gt; mCurrentTime;\n    AProperty&lt;high_resolution_clock::duration&gt; mDuration = 30s;\n\n    APropertyPrecomputed&lt;high_resolution_clock::duration&gt; mElapsedTime = [&amp;] {\n        return std::min(mCurrentTime - mStartTime, *mDuration);\n    };\n\n    APropertyPrecomputed&lt;aui::float_within_0_1&gt; mElapsedTimeRatio = [&amp;] {\n        return float(mElapsedTime-&gt;count()) / float(mDuration-&gt;count());\n</code></pre></p> examples/7guis/cells/src/Cell.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>struct Cell {\nprivate:\n    formula::Precompiled precompile();\n    APropertyPrecomputed&lt;formula::Precompiled&gt; expressionPrecompiled = [&amp;] { return precompile(); };\n    formula::Value evaluate();\n\npublic:\n    Spreadsheet* spreadsheet = nullptr;\n    AProperty&lt;AString&gt; expression;\n</code></pre></p>"},{"location":"apropertyprecomputed/#public-methods","title":"Public Methods","text":"<pre><code>void APropertyPrecomputed::invalidate()\n</code></pre> <p>Marks this precomputed property to be reevaluated.</p> <p>In common, you won't need to use this function. APropertyPrecomputed is reevaluated automatically as soon as one updates a property expression depends on.</p> <pre><code>auto APropertyPrecomputed::readProjected(Projection&amp;&amp; projection)\n</code></pre> <p>Makes a readonly projection of this property.</p> <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        setContents(Vertical {\n          Centered {\n            Horizontal {\n              Button { Label { \"Undo\" }, {me::undo} } AUI_LET {\n                  it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.begin(); }) &gt; &amp;AView::setEnabled;\n              },\n              Button { Label { \"Redo\" }, {me::redo} } AUI_LET {\n                it &amp; mState.history.nextAction.readProjected([&amp;](UndoStack::Iterator i) { return i != mState.history.end(); }) &gt; &amp;AView::setEnabled;\n              },\n            },\n</code></pre>"},{"location":"apropertyprecomputed/#APropertyPrecomputed::invalidate","title":"invalidate","text":""},{"location":"apropertyprecomputed/#APropertyPrecomputed::readProjected","title":"readProjected","text":""},{"location":"aqueue/","title":"AQueue","text":"<p>A std::queue with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/AQueue.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aqueue/#public-methods","title":"Public Methods","text":"<pre><code>bool AQueue::contains(const StoredType&amp; value)\n</code></pre> Returns true if container contains an element, false otherwise. <pre><code>template&lt;typename OtherContainer &gt;\nbool AQueue::isSubsetOf(const OtherContainer&amp; c)\n</code></pre> Returns true if <code>c</code> container is a subset of this container, false otherwise. <pre><code>StoredType AQueue::popOrGenerate(Factory factory)\n</code></pre> <p>Pops the element and returns it. If queue is empty, the result of <code>factory()</code> returned. The result of <code>factory()</code> is never added to the queue.</p> Returns result of <code>front()</code> if not empty; result of <code>factory()</code> otherwise <pre><code>void AQueue::removeAll(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes all occurrences of <code>item</code>.</p> <pre><code>void AQueue::removeFirst(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes first occurrence of <code>item</code>.</p>"},{"location":"aqueue/#AQueue::contains","title":"contains","text":""},{"location":"aqueue/#AQueue::isSubsetOf","title":"isSubsetOf","text":""},{"location":"aqueue/#AQueue::popOrGenerate","title":"popOrGenerate","text":""},{"location":"aqueue/#AQueue::removeAll","title":"removeAll","text":""},{"location":"aqueue/#AQueue::removeFirst","title":"removeFirst","text":""},{"location":"aradiobutton/","title":"ARadioButton","text":"<p>Radio buttons let people select one option from a set of options.</p> <p></p> Header:<code>#include &lt;AUI/View/ARadioButton.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aradiobutton/#detailed-description","title":"Detailed Description","text":"<p>A radio button is a checkable button (similar to ACheckBox) that typically used in groups. In a group of radio buttons, only one radio button at a time can be checked thus checking another radio button in a group causes to switch off the previous one.</p> <p><code>struct declarative::RadioButton</code></p> <code>contract::In&lt;bool&gt; checked</code>  Whether or not the radio button is checked.  <code>contract::Slot&lt;&gt; onClick</code>  Handler for button click event. Called when user activates the button.  <code>_&lt;AView&gt; content</code>  View associated with the radio button. Can be any view, i.e., <code>Label</code> to display text.  <code>content</code> view will be wrapped with ARadioButton.  Clicking or activating this view will cause the radio button to be checked."},{"location":"aradiobutton/#create-a-basic-radio-button","title":"Create a basic radio button","text":"<p>The following code snippet renders a list of radio buttons:</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AForEachUI.h&gt;\n#include \"AUI/View/ARadioButton.h\"\n\nusing namespace ass;\nusing namespace declarative;\n\nstruct State {\n    AProperty&lt;int&gt; selection = 0;\n};\n\n_&lt;AView&gt; radioButtons(_&lt;State&gt; state) {\n    static constexpr auto options = std::array {\n        std::make_tuple(0, \"Option 0\"),\n        std::make_tuple(1, \"Option 1\"),\n        std::make_tuple(2, \"Option 2\"),\n    };\n\n    return AUI_DECLARATIVE_FOR(i, options, AVerticalLayout) {\n        const auto&amp; [index, text] = i;\n        return RadioButton {\n            .checked = AUI_REACT(state-&gt;selection == index),\n            .onClick = [state, index] { state-&gt;selection = index; },\n            .content = Label { text },\n        };\n    };\n}\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Radiobutton\", 600_dp, 300_dp);\n    auto state = _new&lt;State&gt;();\n    window-&gt;setContents(\n      Vertical {\n        radioButtons(state),\n        Label { AUI_REACT(\"Selected option: {}\"_format(state-&gt;selection)) },\n      }\n    );\n    window-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"aradiobutton/#key-points-about-this-code","title":"Key points about this code","text":"<ul> <li><code>radioButtons</code> represents the labels of the radio buttons and their respective values. In our case, it's <code>int</code>s    with magic values, but we strongly encourage you to use <code>enum</code>s instead.</li> <li><code>struct State</code> holds a reactive property <code>selection</code> that tracks the currently selected radio button index. Changes    to <code>selection</code> automatically trigger UI updates because of the reactive system.</li> <li><code>RadioButton</code> creates a radio button view.<ul> <li>Each radio button's <code>.checked</code> state is bound to whether <code>state-&gt;selection == index</code> using the <code>AUI_REACT</code>   macro.</li> <li>Clicking a radio button updates the state via a lambda: . <code>state-&gt;selection = index;</code></li> <li>The selected option label updates automatically in response to changes.</li> </ul> </li> </ul>"},{"location":"aradiobutton/#result","title":"Result","text":""},{"location":"aradiobutton/#styling","title":"Styling","text":"<p>Both <code>ARadioButton</code> and <code>ARadioButton::Circle</code> are exposed only for styling purposes.</p> <pre><code>{\n    t&lt;ARadioButton&gt;(), // styles the radiobutton + contents container\n    LayoutSpacing { 4_dp }, // specifies space between ARadioButton::Circle and contents\n},\n{\n    t&lt;ARadioButton::Circle&gt;(), // styles the circle itself\n    BackgroundSolid { 0xffffff_rgb },\n    Border { 1_dp, 0x333333_rgb },\n    FixedSize { 14_dp, 14_dp },\n    BorderRadius { 7_dp },\n    BackgroundImage { {}, 0x333333_rgb },\n},\n{\n    t&lt;ARadioButton&gt;::active() &gt;&gt; t&lt;ARadioButton::Circle&gt;(),\n    BackgroundSolid { AColor::GRAY.transparentize(0.8f) },\n},\n{\n    Selected(t&lt;ARadioButton::Circle&gt;()),\n    BackgroundImage { \":uni/svg/radio.svg\", getOsThemeColor().readableBlackOrWhite() },\n    Border { nullptr },\n    BackgroundGradient { getOsThemeColorLighter(), getOsThemeColor(), 180_deg },\n},\n{\n    Selected(t&lt;ARadioButton::Circle&gt;::active()),\n    BackgroundSolid { AColor::GRAY.transparentize(0.8f) },\n    BackgroundGradient { getOsThemeColorLighter(), getOsThemeColor(), 180_deg },\n},\n{\n    t&lt;ARadioButton::Circle&gt;::disabled(),\n    BackgroundSolid { 0xe5e5e5_rgb },\n    Border { 1_px, 0xa0a0a0_rgb },\n},\n{\n    Selected(t&lt;ARadioButton&gt;::disabled()),\n    BackgroundGradient { AColor::GRAY.lighter(0.1f), AColor::GRAY.darker(0.1f), 0_deg },\n},\n</code></pre>"},{"location":"aradiobutton/#public-types","title":"Public Types","text":"<p><code>class ARadioButton::Group</code></p> <p>Empty structure.</p> <p><code>class ARadioButton::Circle</code></p> <p>Represents a circle of radiobutton itself; without labels, text or other things.</p> <code>AProperty&lt;bool&gt; checked</code>"},{"location":"aradiobutton/#ARadioButton::Group","title":"Group","text":""},{"location":"aradiobutton/#ARadioButton::Circle","title":"Circle","text":""},{"location":"arandominputstream/","title":"ARandomInputStream","text":"<p>An input stream that generates random bytes.</p> Header:<code>#include &lt;AUI/IO/ARandomInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"arawsoundstream/","title":"ARawSoundStream","text":"<p>Sound stream that outputs raw samples</p> Header:<code>#include &lt;AUI/Audio/Formats/raw/ARawSoundStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"arect/","title":"ARect","text":"<p>Axis aligned 2D rectangle.</p> Header:<code>#include &lt;AUI/Geometry2D/ARect.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"arect/#public-methods","title":"Public Methods","text":"<pre><code>bool ARect::isIntersects(ARect other)\n</code></pre> Returns true if other intersects with this (even if intersection area =0!)"},{"location":"arect/#ARect::isIntersects","title":"isIntersects","text":""},{"location":"arecursivemutex/","title":"ARecursiveMutex","text":"<p>Like AMutex but can handle multiple locks for one thread (recursive).</p> Header:<code>#include &lt;AUI/Thread/AMutex.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"arecursivemutex/#detailed-description","title":"Detailed Description","text":"<p>Please note that the usage of recursive mutex may indicate that your code may have architectural issues related to the concurrency (e.g., comodification of a container that is being foreach-looped). Use recursive mutex with care.</p>"},{"location":"arendercontext/","title":"ARenderContext","text":"<p>Render context passed to AView::render.</p> Header:<code>#include &lt;AUI/Render/ARenderContext.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"arendercontext/#detailed-description","title":"Detailed Description","text":"<p>View containers are responsible to modify (by withShiftedPosition) and passthrough clip optimization context in order to determine which views do not affect actual renderbuffer image and thus should not be rendered either. It's applicable for AScrollArea in the first place, or any other container with AOverflow::HIDDEN and a possibility to either direct or indirect children to run out (render outside) of that container.</p> <p>View containers are also responsible to skip rendering of views that are outside of the clipping.</p> <p>ARenderContext is useful only for container views.</p> <p>ARenderContext passed to the view (possibly AViewContainer) describes an axis aligned bounding box relative to it's coordinate space (position).</p> <p>Root (window) and AOverflow::HIDDEN containers should create ARenderContext with position = {0, 0} and size = it's size. Other containers should not affect ARenderContext and pass it to it's children as is, in exception to position, which should be subtracted by view's position.</p> <p>See UIRenderOptimizationTest for tests.</p>"},{"location":"arendercontext/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>    static constexpr auto SCALE = 8_dp;\n\n    CellsView(_&lt;Cells&gt; cells) : mCells(std::move(cells)) { connect(mCells-&gt;frameComplete, me::updateTexture); }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n        if (mTexture) {\n            ctx.render.rectangle(ATexturedBrush { mTexture }, { 0, 0 }, float(SCALE) * glm::vec2(mCells-&gt;size()));\n        }\n        auto drawGrid = [&amp;] {\n</code></pre></p> examples/app/minesweeper/src/CellView.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>class CellView : public AView {\npublic:\n    CellView(FieldCell&amp; cell);\n\n    void render(ARenderContext context) override;\n\n    [[nodiscard]]\n    FieldCell fieldCell() const { return mCell; }\n\nprivate:\n</code></pre></p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    mTexture = _new&lt;gl::Texture2D&gt;();\n    mTexture-&gt;tex2D(*AImage::fromUrl(\":img/color_scheme_wikipedia.png\"));\n}\n\nvoid FractalView::render(ARenderContext context) {\n    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n</code></pre></p> examples/ui/views/src/DemoGraphView.h <p>Views Example - All-in-one views building example. <pre><code>class DemoGraphView: public AView {\npublic:\n    DemoGraphView();\n\n    void render(ARenderContext ctx) override;\n\nprivate:\n    AVector&lt;glm::vec2&gt; mPoints;\n};\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n\n        for (const auto&amp; circle : *mState-&gt;circles) {\n            if (&amp;circle == mHoveredCircle) {\n                ctx.render.roundedRectangle(\n</code></pre></p> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n    if (mCell != mCellValueCopy) {\n        mCellValueCopy = mCell;\n    }\n    AView::render(context);\n</code></pre></p> examples/app/fractal/src/FractalView.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    void handleMatrixUpdated();\n\npublic:\n    FractalView();\n    void render(ARenderContext context) override;\n\n    void reset();\n\n    void setIterations(unsigned it);\n</code></pre></p> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example. <pre><code>        mPoints &lt;&lt; glm::vec2{ 5_dp * float(i), 100_dp * ((glm::sin(i / 10.f) + 1.f) / 2.f) };\n    }\n}\n\nvoid DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre></p>"},{"location":"arendercontext/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>Rectangles clippingRects</code></p> <p>Axis aligned bounding boxes where the rendering is performed in, used for optimization.</p>"},{"location":"arendercontext/#ARenderContext::clippingRects","title":"clippingRects","text":""},{"location":"arenderingcontextoptions/","title":"ARenderingContextOptions","text":"<p>Defines rendering API priority and options for your application.</p> Header:<code>#include &lt;AUI/Platform/ARenderingContextOptions.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"arenderingcontextoptions/#detailed-description","title":"Detailed Description","text":"<p>By default, AUI uses the following settings: <pre><code>ARenderingContextOptions::set({\n   OpenGL {},\n   Software {},\n});\n</code></pre> You may call this before initializating windows in order to define your own settings and priorities.</p> <p>The priority can be overridden by <code>--aui-renderer=GRAPHICS_API</code> argument passed to your application.</p>"},{"location":"arenderingcontextoptions/#public-types","title":"Public Types","text":"<p><code>struct ARenderingContextOptions::DirectX11</code></p> <p>Empty structure.</p> <p><code>struct ARenderingContextOptions::OpenGL</code></p> <p>Empty structure.</p> <p><code>struct ARenderingContextOptions::Software</code></p> <p>Empty structure.</p>"},{"location":"arenderingcontextoptions/#ARenderingContextOptions::DirectX11","title":"DirectX11","text":""},{"location":"arenderingcontextoptions/#ARenderingContextOptions::OpenGL","title":"OpenGL","text":""},{"location":"arenderingcontextoptions/#ARenderingContextOptions::Software","title":"Software","text":""},{"location":"arsa/","title":"ARsa","text":"<p>Stores public and/or private RSA key.</p> Header:<code>#include &lt;AUI/Crypt/ARsa.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::crypt)</code>"},{"location":"arulerarea/","title":"ARulerArea","text":"<p>Photoshop-like ruler area for measuring display units.</p> <p></p> Header:<code>#include &lt;AUI/View/ARulerArea.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"arulerarea/#detailed-description","title":"Detailed Description","text":"<p>Consists of vertical and horizontal rulers.</p>"},{"location":"arulerview/","title":"ARulerView","text":"<p>A Photoshop-like ruler for measuring display units.</p> <p></p> Header:<code>#include &lt;AUI/View/ARulerView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"asampleformat/","title":"ASampleFormat","text":"<p>Sample formats supported for mixing.</p> Header:<code>#include &lt;AUI/Audio/AAudioFormat.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"asampleformat/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"ascheduler/","title":"AScheduler","text":"<p>Basic scheduler used for timers.</p> Header:<code>#include &lt;AUI/Util/AScheduler.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"ascheduler/#public-methods","title":"Public Methods","text":"<pre><code>bool AScheduler::iteration(ABitField&lt;ASchedulerIteration&gt; flag = ASchedulerIteration::NONE)\n</code></pre> <p>Performs an iteration.</p> Arguments <code>flag</code>  flags for the iteration. See ASchedulerIteration for more info. Returns true, if some action taken, false otherwise <pre><code>template&lt;typename Duration &gt;\nTimerHandle AScheduler::timer(Duration timeout, std::function&lt;void()&gt; callback)\n</code></pre> <p>Creates a timer.</p> Arguments <code>timeout</code>  timeout (i.e. 500ms) <code>callback</code>  callback to be called Returns timer instance which can be used to remove the timer. <p>Creates a timer with the specified callback. The callback is not called immediately during timer creation.</p> <p>Examples:</p> examples/7guis/timer/CMakeLists.txt <p>7GUIs Timer - Timer example.</p> <pre><code>cmake_minimum_required(VERSION 3.10)\n\naui_executable(aui.example.timer)\naui_link(aui.example.timer PRIVATE aui::views)\n</code></pre>"},{"location":"ascheduler/#AScheduler::iteration","title":"iteration","text":""},{"location":"ascheduler/#AScheduler::timer","title":"timer","text":""},{"location":"ascreenorientation/","title":"AScreenOrientation","text":"<p>Controls screen orientation.</p> Header:<code>#include &lt;AUI/Enum/AScreenOrientation.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ascreenorientation/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"ascrollarea/","title":"AScrollArea","text":"<p>A scrollable container with vertical and horizontal scrollbars.</p> Header:<code>#include &lt;AUI/View/AScrollArea.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ascrollarea/#detailed-description","title":"Detailed Description","text":"<p>AScrollArea should have expanding, or fixed size, or max size to be set in order to define it's sizing rules, as it's size cannot be defined by it's contents for obvious reasons.</p> <p>FixedSize and Expanding stylesheet properties would work as expected. If neither of them is set, AScrollArea would occupy size by minimum size of it's contents, as a AViewContainer would do. In such case, you may restrict maximum size of AScrollArea with MaxSize property. AScrollArea will not exceed MaxSize, but also become actual scroll area, involving displaying scroll bars and handling scroll events. This behaviour is similar to Text.</p> <p>Expanding is enabled by default. It can be disabled with ass::Expanding(0) property.</p> <p>Behaviour of vertical and horizontal axes are independent from each other. This behaviour is similar to Text.</p>"},{"location":"ascrollarea/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n                Centered::Expanding {\n                  presentation(mContact-&gt;displayName) AUI_WITH_STYLE { FontSize { 12_pt } },\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>using namespace ass;\n\nstatic auto headerWithContents(_&lt;AView&gt; content) {\n    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>class CellsWindow : public AWindow {\npublic:\n    CellsWindow() : AWindow(\"AUI - 7GUIs - Cells\", 500_dp, 400_dp) {\n        setContents(Centered {\n          AScrollArea::Builder()\n                  .withContents(Horizontal { _new&lt;CellsView&gt;(_new&lt;State&gt;()) })\n                  .build() AUI_WITH_STYLE {\n                Expanding(),\n                ScrollbarAppearance(ScrollbarAppearance::ALWAYS, ScrollbarAppearance::ALWAYS),\n              },\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"ascrollarea/#public-types","title":"Public Types","text":"<p><code>class AScrollArea::Builder</code></p> <p>Examples:</p> <p>Empty structure.</p> <p><code>class AScrollArea::Builder</code></p> <p>Examples:</p> <p>Empty structure.</p>"},{"location":"ascrollarea/#AScrollArea::Builder","title":"Builder","text":""},{"location":"ascrollarea/#AScrollArea::Builder","title":"Builder","text":""},{"location":"ascrollarea/#public-methods","title":"Public Methods","text":"<pre><code>void AScrollArea::scrollTo(const _&lt;AView&gt;&amp; target, bool nearestBorder = true)\n</code></pre> <p>Scrolls to the specified target view.</p> Arguments <code>target</code>  target view to scroll to. Must be direct or indirect child. <code>nearestBorder</code>  if true, the scroll is performed up to the nearest border of scroll area, and if the target        is already fully visible, then scrollTo does not take effect. If false, the scroll is performed up to the        top border of the target view. <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <pre><code>void AScrollArea::scrollTo(ARect&lt;int&gt; target, bool nearestBorder = true)\n</code></pre> <p>Scrolls to the specified rectangle area.</p> Arguments <code>target</code>  target rectangle area in coordinate space of the window. <code>nearestBorder</code>  if true, the scroll is performed up to the nearest border of scroll area, and if the target        is already fully visible, then scrollTo does not take effect. If false, the scroll is performed up to the        top border of the target view. <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <pre><code>void AScrollArea::setStickToEnd(bool stickToEnd)\n</code></pre> <p>Set stick to end.</p> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <pre><code>void AScrollArea::setWheelScrollable(bool value)\n</code></pre> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre>"},{"location":"ascrollarea/#AScrollArea::scrollTo","title":"scrollTo","text":""},{"location":"ascrollarea/#AScrollArea::setStickToEnd","title":"setStickToEnd","text":""},{"location":"ascrollarea/#AScrollArea::setWheelScrollable","title":"setWheelScrollable","text":""},{"location":"ascrollareaviewport/","title":"AScrollAreaViewport","text":"<p>Inner component of AScrollArea that manages rendering and event handling with custom offset (scroll).</p> Header:<code>#include &lt;AUI/View/AScrollAreaViewport.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ascrollareaviewport/#detailed-description","title":"Detailed Description","text":"<p>This view is intended to store only one single view with setContents()/contents() methods.</p> <p>This view does not handle scroll events and touch events related to scroll. Use AScrollArea for such case.</p>"},{"location":"ascrollareaviewport/#examples","title":"Examples","text":"examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n                             t&lt;AScrollAreaViewport&gt;(),\n                             AOverflow::VISIBLE,\n                         },\n                     }\n                     ); },\n        Vertical::Expanding {\n</code></pre></p>"},{"location":"ascrollareaviewport/#public-types","title":"Public Types","text":"<p><code>class AScrollAreaViewport::Inner</code></p> <p>Empty structure.</p>"},{"location":"ascrollareaviewport/#AScrollAreaViewport::Inner","title":"Inner","text":""},{"location":"ascrollareaviewport/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;aui::invocable ApplyLayoutUpdate &gt;\nvoid AScrollAreaViewport::compensateLayoutUpdatesByScroll(_&lt;AView&gt; anchor, ApplyLayoutUpdate&amp;&amp; applyLayoutUpdate, glm::ivec2 diffMask = glm::ivec2(1, 1))\n</code></pre> <p>Compensates layout updates made in applyLayoutUpdate by scrolling by a diff of relative position of anchor.</p> Arguments <code>anchor</code>  direct or indirect child used as an anchor. <code>applyLayoutUpdate</code>  layout update procedure. <code>diffMask</code>  mask that is used to control axes of the compensation. Default is `{1, 1}`. <p>Helps preventing visual layout jittering by querying relative to AScrollAreaViewport position of anchor before and after applyLayoutUpdate. The diff of relative position is then used to scroll the viewport, maintaining consistent visual position of anchor.</p> <p>anchor must be direct or indirect child to this AScrollAreaViewport before and after applyLayoutUpdate.</p> <p>The scroll operation made within this method does not prevent scroll animation nor kinetic effects.</p>"},{"location":"ascrollareaviewport/#AScrollAreaViewport::compensateLayoutUpdatesByScroll","title":"compensateLayoutUpdatesByScroll","text":""},{"location":"ascrollbar/","title":"AScrollbar","text":"<p>A single scrollbar</p> <p></p> Header:<code>#include &lt;AUI/View/AScrollbar.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ascrollbar/#public-methods","title":"Public Methods","text":"<pre><code>std::size_t AScrollbar::getMaxScroll()\n</code></pre> Returns max scroll of this scrollbar. <p>If viewport size is larger than content size (in the case when contents are smaller than AScrollArea), 0 is returned.</p> <pre><code>void AScrollbar::setStickToEnd(bool stickToEnd)\n</code></pre> <p>Set stick to end.</p> Arguments <code>stickToEnd</code> <p>When scroll area dimensions is updated (an element added to scroll area) if the scrollbar was scrolled to the end (bottom) the scrollbar automatically scrolls to the ends, keeping the scroll position in place.</p>"},{"location":"ascrollbar/#AScrollbar::getMaxScroll","title":"getMaxScroll","text":""},{"location":"ascrollbar/#AScrollbar::setStickToEnd","title":"setStickToEnd","text":""},{"location":"ascrollevent/","title":"AScrollEvent","text":"<p>Pointing method scroll event.</p> Header:<code>#include &lt;AUI/Event/AScrollEvent.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ascrollevent/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>bool kinetic</code></p> <p>Whether the event simulated by kinetic scroll feature or not.</p> <p><code>glm::vec2 origin</code></p> <p>Where does the event occurred.</p> <p>For mouse, it's the position of the cursor.</p> <p>For touchscreen, it's the origin point where the scroll gesture started.</p> <p><code>APointerIndex pointerIndex</code></p> <p>Pointer index for touchscreen; LBUTTON for mouse cursor.</p>"},{"location":"ascrollevent/#AScrollEvent::kinetic","title":"kinetic","text":""},{"location":"ascrollevent/#AScrollEvent::origin","title":"origin","text":""},{"location":"ascrollevent/#AScrollEvent::pointerIndex","title":"pointerIndex","text":""},{"location":"aset/","title":"ASet","text":"<p>A std::set with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/ASet.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aset/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;typename OtherContainer &gt;\nvoid ASet::insertAll(const OtherContainer&amp; c)\n</code></pre> Arguments <code>c</code>  other container <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\nbool ASet::isSubsetOf(const OtherContainer&amp; c)\n</code></pre> Returns true if <code>c</code> container is a subset of this container, false otherwise."},{"location":"aset/#ASet::insertAll","title":"insertAll","text":""},{"location":"aset/#ASet::isSubsetOf","title":"isSubsetOf","text":""},{"location":"asharedmutex/","title":"ASharedMutex","text":"<p>Like AMutex but has shared lock type (in addition to basic lock which is unique locking) implementing RW synchronization.</p> Header:<code>#include &lt;AUI/Thread/AMutex.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"asharedraiihelper/","title":"ASharedRaiiHelper","text":"<p>Shared completion marker for multithreaded callback-based future handling.</p> Header:<code>#include &lt;AUI/Util/ASharedRaiiHelper.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"asharedraiihelper/#detailed-description","title":"Detailed Description","text":"<p>ASharedRaiiHelper is intended to track the completion of multiple futures, exploiting the destruction of AFuture::onSuccess or AFuture::onError callbacks when they called. This approach allows to easily integrate ASharedRaiiHelper to the existing code.</p> <p>Note that the callback will be called even if onSuccess is not.</p> <pre><code>auto marker = ASharedRaiiHelper::make([] {\n    // will be called when all futures called onSuccess or destroyed\n});\nauto future = AUI_THREADPOOL {\n    // hard work\n}\n//                      VVVVVV ASharedRaiiHelper should be captured!\nfuture.onSuccess([this, marker]() {\n    // handle the hard work\n});\n\n// keep the future alive in AUI_THREADPOOL holder\nmAsyncHolder &lt;&lt; future;\n</code></pre>"},{"location":"asignal/","title":"ASignal","text":"<p>Signal field which can be subscribed to.</p> Header:<code>#include &lt;AUI/Common/ASignal.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"asignal/#detailed-description","title":"Detailed Description","text":""},{"location":"asignal/#public-types","title":"Public Types","text":"<p><code>struct ASignal::call_wrapper</code></p> <p>Empty structure.</p>"},{"location":"asignal/#ASignal::call_wrapper","title":"call_wrapper","text":""},{"location":"asignal/#public-methods","title":"Public Methods","text":"<pre><code>operator ASignal::bool()\n</code></pre> <p>Check whether signal contains any connected slots or not.</p> Returns true, if slot contains any connected slots, false otherwise. <p>It's very useful then signal argument values calculation is expensive and you do not want to calculate them if no slots connected to the signal.</p> <p>Examples:</p> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        mCellValueCopy = mCell;\n    }\n    AView::render(context);\n\n    if (bool(mCell &amp; FieldCell::OPEN)) {\n        int count = field_cell::getBombCountAround(mCell);\n        if (count) {\n            AFontStyle fs;\n            fs.size = getHeight() * 6 / 7;\n            fs.align = ATextAlign::CENTER;\n</code></pre> examples/7guis/cells/src/Tokens.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                        continue;\n                    }\n                    if ('a' &lt;= c &amp;&amp; c &lt;= 'z' || 'A' &lt;= c &amp;&amp; c &lt;= 'Z') {\n                        t-&gt;reverseByte();\n                        out &lt;&lt; token::Identifier { t-&gt;readStringWhile([](char c) -&gt; bool { return std::isalnum(c); }) };\n                        continue;\n                    }\n                    throw AException(\"UNEXPECTED {}\"_format(c));\n            }\n        }\n</code></pre>"},{"location":"asignal/#ASignal::bool","title":"bool","text":""},{"location":"aslider/","title":"ASlider","text":"<p>Slider control.</p> <p></p> Header:<code>#include &lt;AUI/View/ASlider.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aslider/#examples","title":"Examples","text":"examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n                            return float(d.count()) / float(MAX_DURATION.count());\n                        },\n                        [](aui::float_within_0_1 d) -&gt; high_resolution_clock::duration {\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>                      auto radiusPopup = _new&lt;AWindow&gt;(\n                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n                                connect(\n                                    it-&gt;valueChanging, [this, circle](aui::float_within_0_1 s) {\n                                        circle-&gt;radius = s * MAX_RADIUS;\n                                        mState-&gt;circles.notify();\n</code></pre></p>"},{"location":"aslider/#public-types","title":"Public Types","text":"<p><code>class ASlider::Handle</code></p> <p>Empty structure.</p>"},{"location":"aslider/#ASlider::Handle","title":"Handle","text":""},{"location":"asmallvector/","title":"ASmallVector","text":"<p>Vector-like container consisting of few elements on stack and switches to dynamic allocation vector if needed.</p> Header:<code>#include &lt;AUI/Common/ASmallVector.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"asmallvector/#detailed-description","title":"Detailed Description","text":"<p>Vector-like container optimized for the case when it contains up to StaticVectorSize in place, avoiding dynamic allocation. In case when element count exceeds StaticVectorSize, ASmallVector seamlessly switches to traditional dynamic allocation vector.</p>"},{"location":"asmallvector/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>        if (mTexture) {\n            ctx.render.rectangle(ATexturedBrush { mTexture }, { 0, 0 }, float(SCALE) * glm::vec2(mCells-&gt;size()));\n        }\n        auto drawGrid = [&amp;] {\n            ASmallVector&lt;std::pair&lt;glm::vec2, glm::vec2&gt;, 128 * 2&gt; points;\n            for (int i = 1; i &lt; mCells-&gt;size().x; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(i * SCALE, 0.f), glm::vec2(i * SCALE, getSize().y));\n            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n</code></pre></p>"},{"location":"asmallvector/#public-methods","title":"Public Methods","text":"<pre><code>bool ASmallVector::contains(const StoredType&amp; value)\n</code></pre> Returns true if container contains an element, false otherwise. <pre><code>template&lt;aui::predicate&lt;StoredType&gt; Predicate &gt;\nStoredType* ASmallVector::findIf(Predicate&amp;&amp; predicate)\n</code></pre> <p>Finds element by predicate</p> Arguments <code>predicate</code>  predicate Returns Pointer to the value on which the predicate returned true, nullptr otherwise <pre><code>template&lt;typename T, aui::mapper&lt;const StoredType &amp;, const T &amp;&gt; Projection &gt;\nStoredType* ASmallVector::findIf(const T&amp; value, Projection&amp;&amp; projection)\n</code></pre> <p>Finds element by value</p> Arguments <code>value</code>  value <code>projection</code>  callable that transforms <code>const StoredType&amp;</code> to <code>const T&amp;</code>. Can be any        operator() cappable object, including lambda and pointer-to-member. Returns Pointer to the value on which the predicate returned true, nullptr otherwise <pre><code>StoredType&amp; ASmallVector::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>const StoredType&amp; ASmallVector::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>template&lt;aui::incrementable Iterator, aui::invocable&lt;decltype(* std::declval&lt;Iterator&gt;())&gt; UnaryOperation &gt;\nstatic auto ASmallVector::fromRange(aui::range&lt;Iterator&gt; range, UnaryOperation&amp;&amp; transformer)\n</code></pre> <p>Constructs a new vector of transformed items of the range.</p> Arguments <code>range</code>  items to transform from. <code>transformer</code>  transformer function. Returns A new vector. <pre><code>AOptional&lt;size_t&gt; ASmallVector::indexOf(const StoredType&amp; value)\n</code></pre> Arguments <code>value</code>  element to find. Returns index of the specified element. If element is not found, std::nullopt is returned. <pre><code>template&lt;typename OtherContainer &gt;\niterator ASmallVector::insertAll(const OtherContainer&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator ASmallVector::insertAll(OtherContainer&amp;&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator ASmallVector::insertAll(iterator at, const OtherContainer&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator ASmallVector::insertAll(iterator at, OtherContainer&amp;&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\nbool ASmallVector::isSubsetOf(const OtherContainer&amp; c)\n</code></pre> Returns true if <code>c</code> container is a subset of this container, false otherwise. <pre><code>StoredType&amp; ASmallVector::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>const StoredType&amp; ASmallVector::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>void ASmallVector::removeAll(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes all occurrences of <code>item</code>.</p> <pre><code>template&lt;typename T, aui::mapper&lt;const StoredType &amp;, const T &amp;&gt; Projection &gt;\nvoid ASmallVector::removeAll(const T&amp; item, Projection projection)\n</code></pre> Arguments <code>item</code>  element to remove. <code>projection</code>  callable that transforms <code>const StoredType&amp;</code> to <code>const T&amp;</code>. Can be any        operator() cappable object, including lambda and pointer-to-member. <p>Removes all occurrences of <code>item</code> with specified projection.</p> <pre><code>void ASmallVector::removeAt(size_t index)\n</code></pre> Arguments <code>index</code> index of the element. <p>Removes element at the specified index.</p> Sneaky assertions <code>index</code> points to the existing element. <pre><code>void ASmallVector::removeFirst(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes first occurrence of <code>item</code>.</p> <pre><code>template&lt;typename Predicate &gt;\nvoid ASmallVector::removeIf(Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>predicate</code>  predicate <p>Removes element if <code>predicate(container[i]) == true</code>.</p> <pre><code>std::size_t ASmallVector::size()\n</code></pre> Returns Size of the container. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>using CellsImage = AFormattedImage&lt;APixelFormat::RGBA_BYTE&gt;;\n\nclass Cells : public AObject {\npublic:\n    Cells(glm::ivec2 size) {\n        mSize = size;\n        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n</code></pre> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n    mShader.set(UNIFORM_RATIO, mAspectRatio = float(size.x) / float(size.y));\n}\n</code></pre> examples/7guis/cells/src/Functions.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>              return double(accumulator);\n            } },\n        { \"IF\",\n            [](Ctx ctx) {\n              if (ctx.args.size() != 3) {\n                  throw AException(\"ARG\");\n              }\n              auto condition = std::get_if&lt;double&gt;(&amp;ctx.args[0]);\n              if (condition == nullptr) {\n                  throw AException(\"ARG0\");\n</code></pre> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>#include \"AUI/Common/AException.h\"\n\nclass Spreadsheet {\npublic:\n    explicit Spreadsheet(glm::uvec2 size) : mSize(size) {\n        mCells.resize(size.x * size.y);\n        for (auto&amp; v : mCells) {\n            v = std::make_unique&lt;Cell&gt;();\n            v-&gt;spreadsheet = this;\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            AGridSplitter::Builder()\n                    .noDefaultSpacers()\n                    .withItems([&amp;] {\n                        AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt; views;\n                        views.resize(mState-&gt;spreadsheet.size().y + 1);\n                        for (auto&amp; c : views) {\n                            c.resize(mState-&gt;spreadsheet.size().x + 1);\n                        }\n\n                        views[0][0] = _new&lt;AView&gt;();   // blank\n</code></pre>"},{"location":"asmallvector/#ASmallVector::contains","title":"contains","text":""},{"location":"asmallvector/#ASmallVector::findIf","title":"findIf","text":""},{"location":"asmallvector/#ASmallVector::first","title":"first","text":""},{"location":"asmallvector/#ASmallVector::fromRange","title":"fromRange","text":""},{"location":"asmallvector/#ASmallVector::indexOf","title":"indexOf","text":""},{"location":"asmallvector/#ASmallVector::insertAll","title":"insertAll","text":""},{"location":"asmallvector/#ASmallVector::isSubsetOf","title":"isSubsetOf","text":""},{"location":"asmallvector/#ASmallVector::last","title":"last","text":""},{"location":"asmallvector/#ASmallVector::removeAll","title":"removeAll","text":""},{"location":"asmallvector/#ASmallVector::removeAt","title":"removeAt","text":""},{"location":"asmallvector/#ASmallVector::removeFirst","title":"removeFirst","text":""},{"location":"asmallvector/#ASmallVector::removeIf","title":"removeIf","text":""},{"location":"asmallvector/#ASmallVector::size","title":"size","text":""},{"location":"asoftwareembedauiwrap/","title":"ASoftwareEmbedAuiWrap","text":"<p>Embed AUI into OpenGL context</p> Header:<code>#include &lt;AUI/Platform/ASoftwareEmbedAuiWrap.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"asolidbrush/","title":"ASolidBrush","text":"Header:<code>#include &lt;AUI/Render/ABrush.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"asolidbrush/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n</code></pre></p> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example. <pre><code>void DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>        for (const auto&amp; circle : *mState-&gt;circles) {\n            if (&amp;circle == mHoveredCircle) {\n                ctx.render.roundedRectangle(\n                    ASolidBrush { AColor::GRAY }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n                    circle.radius);\n            }\n            ctx.render.roundedRectangleBorder(\n                ASolidBrush { AColor::BLACK }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n                circle.radius, 1);\n</code></pre></p>"},{"location":"aspacerexpanding/","title":"ASpacerExpanding","text":"<p>Expanding view which is useful in UI building.</p> Header:<code>#include &lt;AUI/View/ASpacerExpanding.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aspacerexpanding/#detailed-description","title":"Detailed Description","text":"<p>AExpandingSpacer is an expanding blank view which tries acquire space as much as possible.</p> <p>See expanding in layout managers for more info.</p>"},{"location":"aspacerexpanding/#examples","title":"Examples","text":"examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      mDifficultyLabel = _new&lt;ALabel&gt;(),\n      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p>"},{"location":"aspacerfixed/","title":"ASpacerFixed","text":"<p>Fixed-size view which is useful in UI building.</p> Header:<code>#include &lt;AUI/View/ASpacerFixed.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aspacerfixed/#detailed-description","title":"Detailed Description","text":"<p>ASpacerFixed is fixed size blank view which acquires specified space in <code>Horizontal</code> and <code>Vertical</code> layouts. For the rest of layout managers it does nothing.</p> <p>ASpacerFixed follows direction of its container layout. That is, for <code>Horizontal</code> layout it consumes horizontal space only and for <code>Vertical</code> layout it consumes vertical space only.</p> <p>Example usage: <pre><code>Horizontal {\n  Label { \"Hello\" },\n  SpacerFixed(100_dp),\n  Label { \"world\" },\n}\n</code></pre> In this case, SpacerFixed occupies <code>100_dp</code> in horizontal but nothing in vertical.</p>"},{"location":"aspinlockmutex/","title":"ASpinlockMutex","text":"<p>Synchronization primitive that is implemented with atomic values instead of doing syscalls.</p> Header:<code>#include &lt;AUI/Thread/AMutex.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aspinlockmutex/#detailed-description","title":"Detailed Description","text":"<p>In contrast to a regular mutex, threads will busy-wait (infinitely check for unlocked state) and waste CPU cycles instead of yielding the CPU to another thread with a syscall.</p> <p>ASpinlockMutex may be faster than a regular mutex in some cases. Use benchmarks to compare.</p>"},{"location":"aspinlockmutex/#public-methods","title":"Public Methods","text":"<pre><code>bool ASpinlockMutex::try_lock()\n</code></pre> <p>Tries to acquire the mutex without blocking.</p> Returns true if the mutex is successfully acquired, false otherwise."},{"location":"aspinlockmutex/#ASpinlockMutex::try_lock","title":"try_lock","text":""},{"location":"aspinner/","title":"ASpinner","text":"<p>Circular infinite progress indicator.</p> <p></p> Header:<code>#include &lt;AUI/View/ASpinner.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aspinner/#detailed-description","title":"Detailed Description","text":"<p>Rotates its contents as it renders.</p> <p>ASpinner constantly requests redraws to maintain its animation which might lead to high performance usage. See ASpinnerV2.</p>"},{"location":"aspinnerv2/","title":"ASpinnerV2","text":"<p>Circular infinite progress indicator.</p> <p></p> Header:<code>#include &lt;AUI/View/ASpinnerV2.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aspinnerv2/#detailed-description","title":"Detailed Description","text":"<p>Rotates its contents as it renders. Unlike ASpinner, ASpinnerV2 allows to take more control over the animation - ASpinnerV2 draws at lower framerate which is better from perspective of resource usage. Generally, use ASpinnerV2 instead of ASpinner.</p> <p>ASpinner's default style is a circular arc constantly and smoothly rotating around. ASpinnerV2's default style is a segmented circle which visually substains the \"stepness\" of the animation.</p> <p>ASpinnerV2 is configured through ass :</p> <pre><code>{\n    t&lt;ASpinnerV2&gt;(),\n    BackgroundImage { \":uni/svg/spinner_v2.svg\", 0x993c3c43_argb },\n    FixedSize { 16_dp },\n    ASpinnerV2::Configuration { .period = 1000ms, .steps = 8 },\n},\n</code></pre>"},{"location":"aspinnerv2/#examples","title":"Examples","text":"examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p>"},{"location":"aspinnerv2/#public-types","title":"Public Types","text":"<p><code>struct ASpinnerV2::Configuration</code></p> <p>Empty structure.</p>"},{"location":"aspinnerv2/#ASpinnerV2::Configuration","title":"Configuration","text":""},{"location":"asplitter/","title":"ASplitter","text":"<p>A resizeable horizontal or vertical layout.</p> <p></p> Header:<code>#include &lt;AUI/View/ASplitter.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"asplitter/#detailed-description","title":"Detailed Description","text":"<p>ASplitter lets the user control the size of child views by dragging the boundary between them. Any number of views may be controlled by a single splitter.</p> <p>Generally, ASplitter mimics behaviour of linear layouts (i.e., <code>Vertical</code> and <code>Horizontal</code>): 1. if there's no expanding view, both linear layouts and ASplitter leave blank space at the end 2. expanding views use all available space.</p> <p>ASplitter is applying geometry via min size-like logic by custom ALayout implementation.</p> <p>ASplitter tends to reclaim space from non-expanding views in favour to expanding views. As such, there should be at least 1 view with expanding. If there's no such view, ASplitter adds ASpacerFixed to the end.</p> <p>Valid expandings should be applied before constructing ASplitter. ASplitter does not support changing expanding on the fly.</p> <p>ASplitter is constructed by builder. Use <code>ASplitter::Horizontal()</code> and <code>ASplitter::Vertical()</code>.</p>"},{"location":"asplitter/#public-types","title":"Public Types","text":"<p><code>class ASplitter::Builder</code></p> <p>Empty structure.</p>"},{"location":"asplitter/#ASplitter::Builder","title":"Builder","text":""},{"location":"asqlmodel/","title":"ASqlModel","text":"<p>Defines a model that can be stored in an SQL database. Implements queries for this type to the database        (insert, update, select, delete)</p> Header:<code>#include &lt;AUI/Data/ASqlModel.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::data)</code>"},{"location":"asqlmodel/#detailed-description","title":"Detailed Description","text":"<p>Model should implement AModelMeta (see AUI/Data/AModelMeta.h)</p>"},{"location":"asqlmodel/#public-types","title":"Public Types","text":"<p><code>class ASqlModel::NoSuchRowException</code></p> <p>Thrown when a single row is expected to be received, but the database did not return any rows.</p> <p>Empty structure.</p> <p><code>class ASqlModel::TooManyRowsException</code></p> <p>Thrown when one row is expected to be received, but the database returned more than one row.</p> <p>Empty structure.</p> <p><code>class ASqlModel::IncompleteSelectRequest</code></p> <p>Empty structure.</p>"},{"location":"asqlmodel/#ASqlModel::NoSuchRowException","title":"NoSuchRowException","text":""},{"location":"asqlmodel/#ASqlModel::TooManyRowsException","title":"TooManyRowsException","text":""},{"location":"asqlmodel/#ASqlModel::IncompleteSelectRequest","title":"IncompleteSelectRequest","text":""},{"location":"asqlmodel/#public-methods","title":"Public Methods","text":"<pre><code>static Model ASqlModel::byId(id_t id)\n</code></pre> <p>Get a row from the table by ID.</p> Arguments <code>id</code>  ID of the required string Returns the string table for the specified ID \\throws NoSuchRowException if no string was found for the specified ID <pre><code>static AString ASqlModel::getIdColumnNameInOtherTables()\n</code></pre> Returns name of the relation column for other tables. <p>Example: <code>struct User -&gt; table users -&gt; column user_id is the result.</code></p> <pre><code>template&lt;typename Other &gt;\n_&lt;typenameOther::IncompleteSelectRequest&gt; ASqlModel::hasMany()\n</code></pre> <p>Implementation of one-to-many relation between ORM structures. Used with belongsTo.</p> <pre>\nUser::getPosts() -&gt; hasMany()\n\u00a0\u00a0|-- Post::getAuthor() -&gt; belongsTo()\n\u00a0\u00a0|-- Post::getAuthor() -&gt; belongsTo()\n\u00a0\u00a0|-- Post::getAuthor() -&gt; belongsTo()\n\u00a0\u00a0....\n \n\nReturns\nincomplete SQL request (see ASqlModel::IncompleteSelectRequest)\n\n\n\n\n<pre><code>template&lt;typename . . . Args &gt;\nstatic Model ASqlModel::make(Args&amp;&amp; . . . args)\n</code></pre>\n<p>Creates a model and saves it to the database.</p>\n\nArguments\n\n\n<code>args</code>\n the constructor arguments\n\n\nReturns\nthe ORM structure\n\n\n<p>Examples:</p>\n\nexamples/7guis/flight_booker/src/main.cpp\n<p>7GUIs Flight Booker - Flight Booker.</p>\n<pre><code>          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n</code></pre>\n\n\n\n\n<pre><code>void ASqlModel::remove()\n</code></pre>\n<p>Removes row from the table by ID.</p>\n\n\n\n\n\n<pre><code>void ASqlModel::save()\n</code></pre>\n<p>Saves this model in DB.\n       If id = 0 then a new row will be created in the table, and the id of the created row will be assigned in\n       the structure field.\n       If id != 0 then the existing row in the table will be updated.</p>"},{"location":"asqlmodel/#ASqlModel::byId","title":"byId","text":""},{"location":"asqlmodel/#ASqlModel::getIdColumnNameInOtherTables","title":"getIdColumnNameInOtherTables","text":""},{"location":"asqlmodel/#ASqlModel::hasMany","title":"hasMany","text":""},{"location":"asqlmodel/#ASqlModel::make","title":"make","text":""},{"location":"asqlmodel/#ASqlModel::remove","title":"remove","text":""},{"location":"asqlmodel/#ASqlModel::save","title":"save","text":""},{"location":"ass/","title":"Aui Style Sheets","text":"<p>CSS-like styling system</p>"},{"location":"ass/#detailed-description","title":"Detailed Description","text":"<p>AUI uses CSS-like stylesheet domain specific language, ASS (stands for Aui Style Sheets). Like CSS, ASS is a list of rules. A rule consists of a ass_selectors and a list of ass_properties . Selector is a basic matcher that determines whether apply a rule to the specific view or not. Selector is the first statement in a rule and further statements are style properties. Property controls the specific aspect of view's style (i.e. <code>FontSize { 18_pt }</code> equals \"call setFontSize(18_pt) for every matched view\").</p> CSS AUI ASS Meaning <pre><code>AButton {\n  background: red;\n  color: white;\n}\n</code></pre> <pre><code>{\n  t&lt;AButton&gt;(),\n  BackgroundColor { AColor::RED },\n  TextColor { AColor::WHITE },\n},\n</code></pre>        Set all buttons' background to red and text color to white      <pre><code>ATextField::hover {\n  border: 1px solid #00f;\n}\n</code></pre> <pre><code>{\n  t&lt;ATextField&gt;::hover(),\n  Border { 1_dp, 0x0000ff_rgb },\n},\n</code></pre>        Set all text fields' border to #00f (blue) on hover"},{"location":"ass/#using-global-style","title":"Using global style","text":"<p>Global stylesheet is applied to the whole program.</p> <p>Somewhere in your entry point, you may write: <pre><code>AStylesheet::global().addRules({\n  {\n    t&lt;ALabel&gt;(),\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n  {\n    t&lt;AButton&gt;(),\n    BackgroundSolid { 0x000000_rgb },\n    TextAlign::CENTER,\n  },\n});\n</code></pre></p>"},{"location":"ass/#using-container-stylesheet","title":"Using container stylesheet","text":"<p>Container stylesheet is applied only to children (both direct and indirect) of the container.</p> <pre><code>container-&gt;setExtraStylesheet({\n  {\n    t&lt;ALabel&gt;(),\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n  {\n    t&lt;AButton&gt;(),\n    BackgroundSolid { 0x000000_rgb },\n    TextAlign::CENTER,\n  },\n});\n</code></pre>"},{"location":"ass/#using-aui_with_style","title":"Using AUI_WITH_STYLE","text":"<p>The code below draws \"Hello\" label with red background and centered alignment, and \"World\" label with blue background, using AUI_WITH_STYLE:</p> <pre><code>using namespace ass;\nsetContents(Centered{\n  Label { \"Hello\" } AUI_WITH_STYLE {\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n  Label { \"World\" } AUI_WITH_STYLE {\n    BackgroundSolid { 0x0000ff_rgb },\n  },\n})\n</code></pre>"},{"location":"ass/#using-setcustomstyle","title":"Using setCustomStyle","text":"<p>In case AUI_WITH_STYLE is not applicable, you may use setCustomStyle instead.</p> <pre><code>using namespace ass;\n\nauto l = _new&lt;ALabel&gt;(\"Hello world\");\nl-&gt;setCustomStyle({\n  BackgroundSolid { AColor::RED },\n  TextAlign::CENTER,\n}),\nsetContents(Centered{ l });\n</code></pre>"},{"location":"ass/#selectors","title":"Selectors","text":"<p>As said earlier, first statement in a rule is selector. Here's some examples.</p>"},{"location":"ass/#select-all-alabels","title":"Select all ALabels","text":"<pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    t&lt;ALabel&gt;(),\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n});\n</code></pre>"},{"location":"ass/#select-all-ass-name","title":"Select all ASS name","text":"<pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    c(\".highlight\"),\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n});\n// ...\nauto v = _new&lt;AView&gt;();\nv-&gt;addAssName(\".highlight\");\nsetContents(Centered { v });\n// or\nsetContents(Centered {\n    _new&lt;AView&gt;() &lt;&lt; \".highlight\",\n});\n</code></pre>"},{"location":"ass/#select-all-alabels-or-abuttons","title":"Select all ALabel's or AButton's","text":"<pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    {t&lt;ALabel&gt;(), t&lt;AButton&gt;()},\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n});\n</code></pre>"},{"location":"ass/#select-all-labels-with-ass-name","title":"Select all labels with ASS name","text":"<pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    t&lt;ALabel&gt;() &amp;&amp; c(\".highlight\"),\n    BackgroundSolid { AColor::RED },\n  },\n});\n// ...\nsetContents(Centered {\n    Label { \"Highlighted\" } &lt;&lt; \".highlight\",\n    Label { \"Not highlighted\" },\n    Button { Label { \"Not highlighted either\" } },\n});\n</code></pre>"},{"location":"ass/#select-indirect-child","title":"Select indirect child","text":"<pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    c(\".highlight_container\") &gt;&gt; t&lt;ALabel&gt;(),\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n});\n// ...\nsetContents(Centered {\n    Vertical {\n        Label { \"Highlighted\" },\n        Centered { Label { \"Highlighted\" } },\n    } &lt;&lt; \".highlight_container\",\n    Vertical {\n        Label { \"Not highlighted\" },\n    },\n});\n</code></pre>"},{"location":"ass/#select-direct-child","title":"Select direct child","text":"<p>Works faster than selecting indirect child <pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    c(\".highlight_container\") &gt; t&lt;ALabel&gt;(),\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n});\n// ...\nsetContents(Centered {\n    Vertical {\n        Label { \"Highlighted\" },\n        Centered { Label { \"Not highlighted\" } },\n    } &lt;&lt; \".highlight_container\",\n    Vertical {\n        Label { \"Not highlighted\" },\n    },\n} &lt;&lt; \".highlight_container\");\n</code></pre></p>"},{"location":"ass/#sub-selectors","title":"Sub selectors","text":"<p>Sub selector is kind of a selector that depends on view's state (i.e, pressed or focused). Sub selectors, as well as other selectors don't replace previous rules entirely. Instead, they extend existing rules. However, same properties are replaced.</p>"},{"location":"ass/#hover-sub-selector","title":"Hover sub selector","text":"<p>Hovered view is a view below mouse cursor. <pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    t&lt;ALabel&gt;::hover(),\n    BackgroundSolid { AColor::RED },\n    TextAlign::CENTER,\n  },\n});\n</code></pre></p>"},{"location":"ass/#active-sub-selector","title":"Active sub selector","text":"<p>Active view is a pressed view. <pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    t&lt;ALabel&gt;::hover(),\n    BackgroundSolid { AColor::RED },\n  },\n});\n</code></pre></p>"},{"location":"ass/#focus-sub-selector","title":"Focus sub selector","text":"<p>Focused view is a view that was clicked and currently receiving keyboard input. <pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    t&lt;ALabel&gt;::focus(),\n    Border { 1_px, AColor::RED },\n    TextColor { AColor::RED },\n  },\n});\n</code></pre></p>"},{"location":"ass/#disabled-sub-selector","title":"Disabled sub selector","text":"<p>Disabled view is a view with AView::setEnabled(false) thus not able to change it's state. <pre><code>using namespace ass;\nAStylesheet::global().addRules({\n  {\n    t&lt;ALabel&gt;::disabled(),\n    Border { 1_px, AColor::RED },\n    TextColor { AColor::RED },\n  },\n});\n</code></pre></p>"},{"location":"ass/#box-model-padding-margin","title":"Box Model (Padding, Margin)","text":"<p>See AUI Box Model.</p>"},{"location":"ass/#ass-refenence","title":"ASS Refenence","text":"<p>See below for declarations and selectors.</p>"},{"location":"ass/#related-pages","title":"Related Pages","text":"<ul> <li> <p>ass::TextColor</p> <p>Controls the text color of AView.</p> </li> <li> <p>ass::TextShadow</p> <p>Controls the text shadow of AView.</p> </li> <li> <p>ass::BorderRight</p> <p>Represents right border.</p> </li> <li> <p>ass::ScrollbarAppearance</p> <p>Controls how do scrollbars and content appear in AScrollArea. This rule is applicable to AScrollArea only.</p> </li> <li> <p>ass::Font</p> <p>Controls the font of AView.</p> </li> <li> <p>ass::TransformOffset</p> <p>Controls the rendering offset transform of AView.</p> </li> <li> <p>ass::Opacity</p> <p>Controls the opacity of AView.</p> </li> <li> <p>ass::BorderLeft</p> <p>Represents left border.</p> </li> <li> <p>ass::BorderRadius</p> <p>Controls border radius.</p> </li> <li> <p>ass::FontFamily</p> <p>Controls the font family of AView.</p> </li> <li> <p>ass::FontSize</p> <p>Controls the font size of AView.</p> </li> <li> <p>ass::BoxShadowInner</p> <p>Represents box shadow.</p> </li> <li> <p>ass::FixedSize</p> <p>Controls the fixed size of AView.</p> </li> <li> <p>ass::CustomProperty</p> <p>Custom property with user-defined handlers.</p> </li> <li> <p>ass::LineHeight</p> <p>Controls line height multiplier of the font of the AView.</p> </li> <li> <p>ass::Border</p> <p>Represents border.</p> </li> <li> <p>ass::BoxShadow</p> <p>Represents box shadow.</p> </li> <li> <p>ass::Backdrop</p> <p>Represents backdrop filter effect which applied to the pixels behind the view (i.e., blur, grayscale, etc.)</p> </li> <li> <p>ass::BackgroundEffect</p> <p>Represents custom-rendered background effect.</p> </li> <li> <p>ass::BorderBottom</p> <p>Represents bottom border.</p> </li> <li> <p>ass::prop::IPropertyBase</p> <p>Base class for all properties.</p> </li> <li> <p>ass::inherit_t</p> <p>Indicates that the value for this property should be inherited from parent view.</p> </li> <li> <p>ass::Sizing</p> <p>Determines sizing rules of a background texture (BackgroundImage).</p> </li> <li> <p>ass::BackgroundImage</p> <p>Represents textured (image) background.</p> </li> <li> <p>ass::BackgroundSolid</p> <p>Represents solid (single color) background.</p> </li> <li> <p>ass::MaxSize</p> <p>Controls the max size of AView.</p> </li> <li> <p>ass::BorderTop</p> <p>Represents top border.</p> </li> <li> <p>ass::TextBorder</p> <p>Controls the text border of AView.</p> </li> <li> <p>ass::LayoutSpacing</p> <p>Controls the gap between elements of the container. Basically acts like a margin, but the gaps appear between views only, not around them.</p> </li> <li> <p>ass::Margin</p> <p>Controls view's margins.</p> </li> <li> <p>ass::BackgroundGradient</p> <p>Represents gradient background.</p> </li> <li> <p>ass::Expanding</p> <p>Controls the expanding of AView.</p> </li> <li> <p>ass::TransformScale</p> <p>Controls the rendering scale transform of AView.</p> </li> <li> <p>ass::Padding</p> <p>Controls the padding of AView.</p> </li> <li> <p>ass::MinSize</p> <p>Controls the min size of AView.</p> </li> <li> <p>ass::TransformRotate</p> <p>Controls the rendering offset transform of AView.</p> </li> <li> <p>ass::BackgroundCropping</p> <p>Controls background texture cropping by exact UV coordinates. Useful for texture atlases.</p> </li> <li> <p>ass::Selected</p> <p>Wraps another selector matching Selected views.</p> </li> <li> <p>ass::on_state::Hovered</p> <p>Hovered LESS-style subselector.</p> </li> <li> <p>ass::on_state::Activated</p> <p>Activated LESS-style subselector.</p> </li> <li> <p>ass::on_state::Focused</p> <p>Focused LESS-style subselector.</p> </li> <li> <p>ass::on_state::Disabled</p> <p>Disabled LESS-style subselector.</p> </li> <li> <p>ACursor</p> <p>Represents cursor type.</p> </li> <li> <p>FontRendering</p> <p>Controls how fonts are rendered in the view.</p> </li> <li> <p>VerticalAlign</p> <p>Controls the text vertical alignment of AView.</p> </li> <li> <p>AScreenOrientation</p> <p>Controls screen orientation.</p> </li> <li> <p>AFloat</p> <p>Specifies text floating in text wrapping views, i.e, ATextArea, AText.</p> </li> <li> <p>ImageRendering</p> <p>Controls the image rendering type.</p> </li> <li> <p>TextTransform</p> <p>Controls the text transform of AView.</p> </li> <li> <p>AOverflow</p> <p>Controls visibility of the overflowed contents of AView with AView::drawStencilMask.</p> </li> <li> <p>ATextOverflow</p> <p>Controls behavior of the overflowed text. Relevant to AAbstractLabel and its derivatives only.</p> </li> <li> <p>AOverflowMask</p> <p>Controls the behaviour of the default AView::drawStencilMask() implementation.</p> </li> <li> <p>ATextAlign</p> <p>Controls the text alignment inside AView.</p> </li> <li> <p>ass::Sound</p> <p>Produces sound effect when the style applied.</p> </li> </ul>"},{"location":"ass_backdrop/","title":"ass::Backdrop","text":"<p>Represents backdrop filter effect which applied to the pixels behind the view (i.e., blur, grayscale, etc.)</p> Header:<code>#include &lt;AUI/ASS/Property/Backdrop.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_backdrop/#detailed-description","title":"Detailed Description","text":"<p>Matches CSS property <code>backdrop-filter</code>.</p> <p>Because the effect is applied to everything behind the view, to see the effect the view's background needs to be transparent or partially transparent.</p>"},{"location":"ass_backdrop/#examples","title":"Examples","text":"examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n                      ATextAlign::CENTER,\n                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.7f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n                  },\n</code></pre></p>"},{"location":"ass_backdrop/#public-types","title":"Public Types","text":"<p><code>struct ass::Backdrop::GaussianBlurCustom</code></p> <p>Underlying type of GaussianBlur but with customizable downscale. Generally, use GaussianBlur.</p> <code>AMetric radius</code>  blur radius. Performance costs of radius is O^2. Please use downscale factor to approximate large blur radius.  <code>int downscale</code>  downscale factor. =1 equals don't affect. Must be positive. Effective blur radius is <code>radius * downscale</code>. However, the downscale part is done by cheap downscaling of the framebuffer texture. Thus, by raising downscale factor you can achieve larger blur radius with approximately same visual result.  Performance benefit of downscale factor { .radius = 6_dp, .downscale = x } in comparison to { .radius = 6_dp * x, .downscale = 1 } is x^2.  <pre><code>view AUI_WITH_STYLE {\n  Backdrop { Backdrop::GaussianBlur { .radius = 6_dp, .downscale = 4 } },\n}\n</code></pre> is visually approximately same as <pre><code>view AUI_WITH_STYLE {\n  Backdrop { Backdrop::GaussianBlur { .radius = 24_dp } },\n}\n</code></pre> but 16 times cheaper.  <code>bool operator</code> <code>const = default</code> <p><code>struct ass::Backdrop::GaussianBlur</code></p> <p>Fast gaussian blur. Strictly speaking, it's not an actual gaussian blur but a faster implementation of it.</p> <p>GaussianBlur calculates best downscale parameter applicable for passed radius.</p> <p>Downscale factor allows to produce approximately same visual result at drastically lower cost. You can use GaussianBlurCustom directly to specify your downscale factor.</p> <code>AMetric radius</code> <p><code>struct ass::Backdrop::LiquidFluid</code></p> <p>Empty structure.</p>"},{"location":"ass_backdrop/#ass::Backdrop::GaussianBlurCustom","title":"GaussianBlurCustom","text":""},{"location":"ass_backdrop/#ass::Backdrop::GaussianBlur","title":"GaussianBlur","text":""},{"location":"ass_backdrop/#ass::Backdrop::LiquidFluid","title":"LiquidFluid","text":""},{"location":"ass_backgroundcropping/","title":"ass::BackgroundCropping","text":"<p>Controls background texture cropping by exact UV coordinates. Useful for texture atlases.</p> Header:<code>#include &lt;AUI/ASS/Property/BackgroundCropping.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_backgroundeffect/","title":"ass::BackgroundEffect","text":"<p>Represents custom-rendered background effect.</p> Header:<code>#include &lt;AUI/ASS/Property/BackgroundEffect.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_backgroundgradient/","title":"ass::BackgroundGradient","text":"<p>Represents gradient background.</p> Header:<code>#include &lt;AUI/ASS/Property/BackgroundGradient.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_backgroundgradient/#examples","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n}\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; viewer(AProperty&lt;T&gt;&amp; property) {\n</code></pre></p>"},{"location":"ass_backgroundimage/","title":"ass::BackgroundImage","text":"<p>Represents textured (image) background.</p> Header:<code>#include &lt;AUI/ASS/Property/BackgroundImage.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_backgroundimage/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>            BackgroundSolid { 0xeeeeee_rgb },\n          },\n          {\n            CellSelector&lt;FieldCell::HAS_FLAG&gt;(),\n            BackgroundImage { \":minesweeper/flag.svg\" },\n          },\n          /// [open]\n\n          // display mines for dead\n</code></pre></p>"},{"location":"ass_backgroundimage/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>unset_wrap&lt;float&gt; dpiMargin</code></p> <p>DPI multiplier used to underscale or upperscale the icon.</p> <p>In example, you may use 64x64 png icons and set the dpiMargin to 2.0. They will be rendered as 32px icons on 100% scale (instead of 64px), and 64px on 200% scale, remaining crisp. On 300% scale, however, they will be rendered as 96px images, thus becoming blurry, hence usage of SVG icons is recommended.</p> <p><code>unset_wrap&lt;std::variant&lt;AString,_&lt;IDrawable&gt;&gt;&gt; image</code></p> <p>Url to the image.</p> <p>In example, \":icon.svg\" references to <code>icon.svg</code> file in your assets. See AUrl for more info.</p>"},{"location":"ass_backgroundimage/#ass::BackgroundImage::dpiMargin","title":"dpiMargin","text":""},{"location":"ass_backgroundimage/#ass::BackgroundImage::image","title":"image","text":""},{"location":"ass_backgroundimage/#examples_1","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        if (!mTexture) {\n            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n                image.set(\n                    { x, y },\n                    AFormattedColorConverter(\n</code></pre> <p><code>unset_wrap&lt;AColor&gt; overlayColor</code></p> <p>Multiply color filter to the image.</p> <p>It allows to replace the color of white icons to the specified overlayColor.</p> <p>Gray color multiplied by the specified one gives the darker color.</p> <p>Black color is not affected.</p> <p><code>unset_wrap&lt;Repeat&gt; rep</code></p> <p>Repeating. See Repeat</p> <p><code>unset_wrap&lt;glm::vec2&gt; scale</code></p> <p>Scale of the image by x and y axis. Default is <code>{ 1.0, 1.0 }</code>.</p>"},{"location":"ass_backgroundimage/#ass::BackgroundImage::overlayColor","title":"overlayColor","text":""},{"location":"ass_backgroundimage/#ass::BackgroundImage::rep","title":"rep","text":""},{"location":"ass_backgroundimage/#ass::BackgroundImage::scale","title":"scale","text":""},{"location":"ass_backgroundimage/#examples_2","title":"Examples","text":"examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    AView::onScroll(event);\n    auto projectedPos = (glm::dvec2(event.origin) / glm::dvec2(getSize()) - glm::dvec2(0.5)) * 2.0;\n    projectedPos.x *= mAspectRatio;\n    mTransform = glm::translate(mTransform, glm::vec3 { projectedPos, 0.0 });\n    mTransform = glm::scale(mTransform, glm::vec3(1.0 - event.delta.y / 1000.0));\n    mTransform = glm::translate(mTransform, -glm::vec3 { projectedPos, 0.0 });\n\n    handleMatrixUpdated();\n\n    redraw();\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>JumpToCoordsWindow::JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent)\n  : AWindow(\"Jump to coords\", 854_dp, 500_dp, parent, WindowStyle::NO_RESIZE) {\n    auto re = _new&lt;ATextField&gt;();\n    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n\n    auto pos = fractalView-&gt;getPlotPosition();\n    re-&gt;setText(AString::number(pos.x));\n    im-&gt;setText(AString::number(pos.y));\n    scale-&gt;setText(AString::number(fractalView-&gt;getPlotScale()));\n</code></pre> <p><code>unset_wrap&lt;Sizing&gt; sizing</code></p> <p>Sizing. See ass::Sizing</p>"},{"location":"ass_backgroundimage/#ass::BackgroundImage::sizing","title":"sizing","text":""},{"location":"ass_backgroundsolid/","title":"ass::BackgroundSolid","text":"<p>Represents solid (single color) background.</p> Header:<code>#include &lt;AUI/ASS/Property/BackgroundSolid.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_backgroundsolid/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>          },\n          Centered {\n            _new&lt;CellsView&gt;(aui::ptr::fake_shared(&amp;mCells)) AUI_WITH_STYLE {\n                  Expanding(),\n                  BackgroundSolid(AColor::BLACK),\n                },\n          },\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n    }\n</code></pre></p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        AStylesheet::global().addRules({\n          {\n            t&lt;CellView&gt;(),\n            FixedSize { 26_dp },\n            BackgroundSolid { 0xdedede_rgb },\n            Border { 1_px, 0xeaeaea_rgb },\n          },\n          {\n            !RevealSelector{} &gt;&gt; t&lt;CellView&gt;::hover(),\n            BackgroundSolid { 0xfdfdfd_rgb },\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    auto centerPosDisplay = _new&lt;ALabel&gt;(\"-\");\n    {\n        centerPosDisplay-&gt;setCustomStyle({\n          BackgroundSolid { 0x80000000_argb },\n          Padding { 4_dp },\n          TextColor { 0xffffff_rgb },\n          FontSize { 11_pt },\n        });\n    }\n</code></pre></p> examples/ui/contacts/src/view/common.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>using namespace ass;\nusing namespace declarative;\n\n_&lt;AView&gt; common_views::divider() {\n    return _new&lt;AView&gt;() AUI_WITH_STYLE { FixedSize { {}, 1_px }, BackgroundSolid { AColor::GRAY } };\n}\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>                          Backdrop::GaussianBlur { 5_dp },\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.6f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n                      BackgroundSolid { AColor::WHITE.transparentize(0.5f) },\n                  },\n              }\n          } AUI_WITH_STYLE { Padding { 50_dp } },\n        },\n    };\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>public:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                        for (unsigned row = 0; row &lt; mState-&gt;spreadsheet.size().y; ++row) {\n                            views[row + 1][0] = labelTitle(\"{}\"_format(Cell::rowName(row)));\n                            for (unsigned column = 0; column &lt; mState-&gt;spreadsheet.size().x; ++column) {\n                                views[row + 1][column + 1] = _new&lt;CellView&gt;(mState, mState-&gt;spreadsheet[{ column, row }]) AUI_WITH_STYLE {\n                                    BackgroundSolid { AColor::WHITE },\n                                    MinSize { {}, 20_dp },\n                                };\n                            }\n                        }\n                        return views;\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>public:\n    FlightBookerWindow() : AWindow(\"AUI - 7GUIs - Book Flight\", 150_dp, 50_dp) {\n        setExtraStylesheet(AStylesheet { {\n          ass::c(\".red\"),\n          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n            _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"one-way flight\", \"return flight\" })) AUI_LET {\n                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n</code></pre></p>"},{"location":"ass_border/","title":"ass::Border","text":"<p>Represents border.</p> Header:<code>#include &lt;AUI/ASS/Property/Border.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_border/#detailed-description","title":"Detailed Description","text":"<p>See AUI Box Model.</p>"},{"location":"ass_border/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>          {\n            t&lt;CellView&gt;(),\n            FixedSize { 26_dp },\n            BackgroundSolid { 0xdedede_rgb },\n            Border { 1_px, 0xeaeaea_rgb },\n          },\n          {\n            !RevealSelector{} &gt;&gt; t&lt;CellView&gt;::hover(),\n            BackgroundSolid { 0xfdfdfd_rgb },\n          },\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n</code></pre></p>"},{"location":"ass_border/#public-types","title":"Public Types","text":"<p><code>enum ass::Border::BorderType</code></p> Constant Description <code>BorderType::SOLID</code>"},{"location":"ass_border/#ass::Border::BorderType","title":"BorderType","text":""},{"location":"ass_borderbottom/","title":"ass::BorderBottom","text":"<p>Represents bottom border.</p> Header:<code>#include &lt;AUI/ASS/Property/BorderBottom.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_borderleft/","title":"ass::BorderLeft","text":"<p>Represents left border.</p> Header:<code>#include &lt;AUI/ASS/Property/BorderLeft.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_borderradius/","title":"ass::BorderRadius","text":"<p>Controls border radius.</p> Header:<code>#include &lt;AUI/ASS/Property/BorderRadius.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_borderradius/#examples","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n}\n\ntemplate &lt;typename T&gt;\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>          Centered {\n            Horizontal {\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n                      ATextAlign::CENTER,\n                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                      },\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>            this,\n            _new&lt;ATextField&gt;() AUI_WITH_STYLE {\n                  MinSize { 0 },\n                  Margin { 0 },\n                  BorderRadius { 0 },\n                } AUI_LET {\n                    it &amp;&amp; mState-&gt;currentExpression;\n                    it-&gt;focus();\n                    connect(it-&gt;focusLost, me::commitExpression);\n                });\n</code></pre></p>"},{"location":"ass_borderright/","title":"ass::BorderRight","text":"<p>Represents right border.</p> Header:<code>#include &lt;AUI/ASS/Property/BorderRight.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_bordertop/","title":"ass::BorderTop","text":"<p>Represents top border.</p> Header:<code>#include &lt;AUI/ASS/Property/BorderTop.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_boxshadow/","title":"ass::BoxShadow","text":"<p>Represents box shadow.</p> Header:<code>#include &lt;AUI/ASS/Property/BoxShadow.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_boxshadow/#detailed-description","title":"Detailed Description","text":"<p>Unlike CSS, box shadow is not affected by BorderRadius.</p>"},{"location":"ass_boxshadow/#examples","title":"Examples","text":"examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.7f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n                  },\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n</code></pre></p>"},{"location":"ass_boxshadowinner/","title":"ass::BoxShadowInner","text":"<p>Represents box shadow.</p> Header:<code>#include &lt;AUI/ASS/Property/BoxShadowInner.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_boxshadowinner/#detailed-description","title":"Detailed Description","text":"<p>Unlike CSS, box shadow is not affected by BorderRadius.</p>"},{"location":"ass_customproperty/","title":"ass::CustomProperty","text":"<p>Custom property with user-defined handlers.</p> Header:<code>#include &lt;AUI/ASS/Property/CustomProperty.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_expanding/","title":"ass::Expanding","text":"<p>Controls the expanding of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/Expanding.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_expanding/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n          },\n          Centered {\n            _new&lt;CellsView&gt;(aui::ptr::fake_shared(&amp;mCells)) AUI_WITH_STYLE {\n                  Expanding(),\n                  BackgroundSolid(AColor::BLACK),\n                },\n          },\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n    }\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>    mOriginalContact = mContact;\n    setExtraStylesheet(AStylesheet {\n      {\n        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>static auto headerWithContents(_&lt;AView&gt; content) {\n    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n                             t&lt;AScrollAreaViewport&gt;(),\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>class TimerWindow : public AWindow {\npublic:\n    TimerWindow() : AWindow(\"AUI - 7GUIs - Timer\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Vertical::Expanding {\n            Horizontal {\n              Label { \"Elapsed Time:\" },\n              Centered::Expanding {\n                _new&lt;AProgressBar&gt;() AUI_LET {\n                        it &amp; mElapsedTimeRatio;\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>class CircleDrawArea : public AView {\npublic:\n    CircleDrawArea(_&lt;State&gt; state) : mState(std::move(state)) {\n        setCustomStyle({\n          Expanding(),\n          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                        }\n\n                        views[0][0] = _new&lt;AView&gt;();   // blank\n                        for (unsigned i = 0; i &lt; mState-&gt;spreadsheet.size().x; ++i) {\n                            views[0][i + 1] = Centered{ labelTitle(Cell::columnName(i)) } AUI_WITH_STYLE { Expanding(1, 0) };\n                        }\n                        for (unsigned row = 0; row &lt; mState-&gt;spreadsheet.size().y; ++row) {\n                            views[row + 1][0] = labelTitle(\"{}\"_format(Cell::rowName(row)));\n                            for (unsigned column = 0; column &lt; mState-&gt;spreadsheet.size().x; ++column) {\n                                views[row + 1][column + 1] = _new&lt;CellView&gt;(mState, mState-&gt;spreadsheet[{ column, row }]) AUI_WITH_STYLE {\n</code></pre></p> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n        fractal,\n        Vertical::Expanding {\n          SpacerExpanding {},\n          Horizontal {\n            SpacerExpanding {},\n</code></pre></p>"},{"location":"ass_fixedsize/","title":"ass::FixedSize","text":"<p>Controls the fixed size of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/FixedSize.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_fixedsize/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    GlobalStyle() {\n        AStylesheet::global().addRules({\n          {\n            t&lt;CellView&gt;(),\n            FixedSize { 26_dp },\n            BackgroundSolid { 0xdedede_rgb },\n            Border { 1_px, 0xeaeaea_rgb },\n          },\n          {\n            !RevealSelector{} &gt;&gt; t&lt;CellView&gt;::hover(),\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n}\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>        Vertical::Expanding {\n          Centered {\n            Horizontal {\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n                      ATextAlign::CENTER,\n                      Backdrop {\n                          Backdrop::LiquidFluid {},\n</code></pre></p> examples/ui/contacts/src/view/common.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>using namespace ass;\nusing namespace declarative;\n\n_&lt;AView&gt; common_views::divider() {\n    return _new&lt;AView&gt;() AUI_WITH_STYLE { FixedSize { {}, 1_px }, BackgroundSolid { AColor::GRAY } };\n}\n</code></pre></p>"},{"location":"ass_font/","title":"ass::Font","text":"<p>Controls the font of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/Font.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_fontfamily/","title":"ass::FontFamily","text":"<p>Controls the font family of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/FontFamily.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_fontsize/","title":"ass::FontSize","text":"<p>Controls the font size of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/FontSize.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_fontsize/#examples","title":"Examples","text":"examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>        centerPosDisplay-&gt;setCustomStyle({\n          BackgroundSolid { 0x80000000_argb },\n          Padding { 4_dp },\n          TextColor { 0xffffff_rgb },\n          FontSize { 11_pt },\n        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n</code></pre></p>"},{"location":"ass_inherit_t/","title":"ass::inherit_t","text":"<p>Indicates that the value for this property should be inherited from parent view.</p> Header:<code>#include &lt;AUI/ASS/Property/IPropertyBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_iselectable/","title":"ass::ISelectable","text":"<p>Interface to work with ass::Selected selector.</p> Header:<code>#include &lt;AUI/ASS/Selector/Selected.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_layoutspacing/","title":"ass::LayoutSpacing","text":"<p>Controls the gap between elements of the container. Basically acts like a margin, but the gaps appear between views only, not around them.</p> Header:<code>#include &lt;AUI/ASS/Property/LayoutSpacing.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_layoutspacing/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>                          b.setText(isRunning ? \"Pause\" : \"Run\");\n                      };\n                      connect(it-&gt;clicked, [&amp;] { mCells.isRunning = !mCells.isRunning; });\n                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n          },\n          Centered {\n            _new&lt;CellsView&gt;(aui::ptr::fake_shared(&amp;mCells)) AUI_WITH_STYLE {\n                  Expanding(),\n                  BackgroundSolid(AColor::BLACK),\n</code></pre></p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        {\n          \"Mines count:\"_as,\n          mMines = _new&lt;ANumberPicker&gt;() AUI_LET { it-&gt;setMin(8); },\n        },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      mDifficultyLabel = _new&lt;ALabel&gt;(),\n      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n                it-&gt;setMax(1000);\n                it-&gt;setValue(350);\n            },\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    fractal-&gt;focus();\n}\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>                profilePhoto(mContact),\n                Centered::Expanding {\n                  presentation(mContact-&gt;displayName) AUI_WITH_STYLE { FontSize { 12_pt } },\n                },\n              } AUI_WITH_STYLE { Margin { 8_dp, {} }, LayoutSpacing { 4_dp } },\n              row(\"Phone\", mContact-&gt;phone),\n              row(\"Address\", mContact-&gt;address),\n              row(\"Email\", mContact-&gt;email),\n              row(\"Homepage\", mContact-&gt;homepage),\n              Horizontal::Expanding {\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter. <pre><code>        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCounter;\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n                    connect(it-&gt;clicked, me::book);\n                    connect(mIsValid, AUI_SLOT(it)::setEnabled);\n                },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    DateTextFieldState mDepartureDate { system_clock::now() }, mReturnDate { system_clock::now() };\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>                        it &amp; mElapsedTimeRatio;\n                        it-&gt;setCustomStyle({ Expanding { 1, 0 } });\n                    },\n              },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>              },\n            },\n          },\n          _new&lt;CircleDrawArea&gt;(aui::ptr::fake_shared(&amp;mState)),\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp }});\n    }\n\nprivate:\n    State mState;\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                            }\n                        }\n                        return views;\n                    }())\n                    .build() AUI_WITH_STYLE { Expanding(), LayoutSpacing { 1_dp }, MinSize { 80_dp * float(mState-&gt;spreadsheet.size().x), {} } });\n    }\n\nprivate:\n    _&lt;State&gt; mState;\n};\n</code></pre></p> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa. <pre><code>            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mFahrenheit.changed, [&amp;] { mCelsius = (*mFahrenheit - 32.f) * (5.f / 9.f); });\n        connect(mCelsius.changed, [&amp;] { mFahrenheit = *mCelsius * (9.f / 5.f) + 32.f; });\n    }\n</code></pre></p> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    beginGame(10, 10, 20);\n}\n\nvoid MinesweeperWindow::openCell(int x, int y, bool doGameLoseIfBomb) {\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>      _form({\n        { \"Re=\"_as, re },\n        { \"Im=\"_as, im },\n        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n</code></pre></p>"},{"location":"ass_lineheight/","title":"ass::LineHeight","text":"<p>Controls line height multiplier of the font of the AView.</p> Header:<code>#include &lt;AUI/ASS/Property/LineHeight.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_lineheight/#detailed-description","title":"Detailed Description","text":"<p>Matches CSS property line-height.</p>"},{"location":"ass_lineheight/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>LineHeight NORMAL</code></p> <p>LineHeight matching 'line-height: normal' on common browsers (= 1.2). Used by default.</p>"},{"location":"ass_lineheight/#ass::LineHeight::NORMAL","title":"NORMAL","text":""},{"location":"ass_margin/","title":"ass::Margin","text":"<p>Controls view's margins.</p> Header:<code>#include &lt;AUI/ASS/Property/Margin.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_margin/#detailed-description","title":"Detailed Description","text":"<p>See AUI Box Model.</p>"},{"location":"ass_margin/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>          {\n            class_of(\".frame\"),\n            Border { 1_dp, 0x444444_rgb },\n          },\n          { class_of(\".frame\") &gt; t&lt;AButton&gt;(), Margin { 4_dp } },\n          { t&lt;NewGameWindow&gt;(), Padding { 4_dp } },\n        });\n    }\n} s;\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>        ALayoutInflater::inflate(\n            this,\n            _new&lt;ATextField&gt;() AUI_WITH_STYLE {\n                  MinSize { 0 },\n                  Margin { 0 },\n                  BorderRadius { 0 },\n                } AUI_LET {\n                    it &amp;&amp; mState-&gt;currentExpression;\n                    it-&gt;focus();\n                    connect(it-&gt;focusLost, me::commitExpression);\n</code></pre></p> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa. <pre><code>                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>                profilePhoto(mContact),\n                Centered::Expanding {\n                  presentation(mContact-&gt;displayName) AUI_WITH_STYLE { FontSize { 12_pt } },\n                },\n              } AUI_WITH_STYLE { Margin { 8_dp, {} }, LayoutSpacing { 4_dp } },\n              row(\"Phone\", mContact-&gt;phone),\n              row(\"Address\", mContact-&gt;address),\n              row(\"Email\", mContact-&gt;email),\n              row(\"Homepage\", mContact-&gt;homepage),\n              Horizontal::Expanding {\n</code></pre></p>"},{"location":"ass_maxsize/","title":"ass::MaxSize","text":"<p>Controls the max size of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/MaxSize.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_maxsize/#examples","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>              } AUI_WITH_STYLE {\n                    MinSize { {}, 100_dp },\n                    LayoutSpacing { 4_dp },\n                  },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(8_dp), LayoutSpacing { 4_dp } },\n          }),\n          Centered {\n            Horizontal::Expanding {\n              SpacerExpanding(),\n              Button { Label { mEditorMode ? \"Discard\" : \"Delete\" }, {me::drop} },\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>                \"    \u041e\u043d \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u043d\u0430 \u0442\u043e\u043c \u0438\u0437\u044b\u0441\u043a\u0430\u043d\u043d\u043e\u043c \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b\u0438, \u043d\u043e \u0438 \"\n                \"\u0434\u0443\u043c\u0430\u043b\u0438 \u043d\u0430\u0448\u0438 \u0434\u0435\u0434\u044b, \u0438 \u0441 \u0442\u0435\u043c\u0438, \u0442\u0438\u0445\u0438\u043c\u0438, \u043f\u043e\u043a\u0440\u043e\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u043e\u043d\u0430\u0446\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \"\n                \"\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u044b \u0441\u043e\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u043c\u0443\u0441\u044f \u0432 \u0441\u0432\u0435\u0442\u0435 \u0438 \u043f\u0440\u0438 \u0434\u0432\u043e\u0440\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0443. \u041e\u043d \u043f\u043e\u0434\u043e\u0448\u0435\u043b \u043a \"\n                \"\u0410\u043d\u043d\u0435 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0435, \u043f\u043e\u0446\u0435\u043b\u043e\u0432\u0430\u043b \u0435\u0435 \u0440\u0443\u043a\u0443, \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0432 \u0435\u0439 \u0441\u0432\u043e\u044e \u043d\u0430\u0434\u0443\u0448\u0435\u043d\u043d\u0443\u044e \u0438 \u0441\u0438\u044f\u044e\u0449\u0443\u044e \u043b\u044b\u0441\u0438\u043d\u0443, \u0438 \"\n                \"\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u0443\u0441\u0435\u043b\u0441\u044f \u043d\u0430 \u0434\u0438\u0432\u0430\u043d\u0435.\") } AUI_WITH_STYLE { MaxSize { 550_dp, {} }, Padding { 16_dp } },\n        }));\n\n    window-&gt;show();\n\n    return 0;\n</code></pre></p>"},{"location":"ass_minsize/","title":"ass::MinSize","text":"<p>Controls the min size of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/MinSize.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_minsize/#examples","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>                  Label { \"Note\" } AUI_WITH_STYLE { FixedSize { 100_dp, {} }, Opacity { 0.5f }, ATextAlign::RIGHT },\n                },\n                _new&lt;ATextArea&gt;() &amp;&amp; mContact-&gt;note,\n              } AUI_WITH_STYLE {\n                    MinSize { {}, 100_dp },\n                    LayoutSpacing { 4_dp },\n                  },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(8_dp), LayoutSpacing { 4_dp } },\n          }),\n          Centered {\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>        mState-&gt;currentExpression = mCell.expression;\n        ALayoutInflater::inflate(\n            this,\n            _new&lt;ATextField&gt;() AUI_WITH_STYLE {\n                  MinSize { 0 },\n                  Margin { 0 },\n                  BorderRadius { 0 },\n                } AUI_LET {\n                    it &amp;&amp; mState-&gt;currentExpression;\n                    it-&gt;focus();\n</code></pre></p>"},{"location":"ass_on_state_activated/","title":"ass::on_state::Activated","text":"<p>Activated LESS-style subselector.</p> Header:<code>#include &lt;AUI/ASS/Selector/on_state.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_on_state_activated/#detailed-description","title":"Detailed Description","text":"<p>It's convenient to use it with AUI_WITH_STYLE: <pre><code>_new&lt;AView&gt;() AUI_WITH_STYLE {\n  MinSize { 16_dp },\n  BackgroundSolid { AColor::BLACK },\n  on_state::Activated {\n    BackgroundSolid { AColor::RED },\n  },\n},\n</code></pre></p>"},{"location":"ass_on_state_disabled/","title":"ass::on_state::Disabled","text":"<p>Disabled LESS-style subselector.</p> Header:<code>#include &lt;AUI/ASS/Selector/on_state.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_on_state_disabled/#detailed-description","title":"Detailed Description","text":"<p>It's convenient to use it with AUI_WITH_STYLE: <pre><code>_new&lt;AView&gt;() AUI_WITH_STYLE {\n  MinSize { 16_dp },\n  BackgroundSolid { AColor::BLACK },\n  on_state::Disabled {\n    BackgroundSolid { AColor::RED },\n  },\n},\n</code></pre></p>"},{"location":"ass_on_state_focused/","title":"ass::on_state::Focused","text":"<p>Focused LESS-style subselector.</p> Header:<code>#include &lt;AUI/ASS/Selector/on_state.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_on_state_focused/#detailed-description","title":"Detailed Description","text":"<p>It's convenient to use it with AUI_WITH_STYLE: <pre><code>_new&lt;AView&gt;() AUI_WITH_STYLE {\n  MinSize { 16_dp },\n  BackgroundSolid { AColor::BLACK },\n  on_state::Focused {\n    BackgroundSolid { AColor::RED },\n  },\n},\n</code></pre></p>"},{"location":"ass_on_state_hovered/","title":"ass::on_state::Hovered","text":"<p>Hovered LESS-style subselector.</p> Header:<code>#include &lt;AUI/ASS/Selector/on_state.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_on_state_hovered/#detailed-description","title":"Detailed Description","text":"<p>It's convenient to use it with AUI_WITH_STYLE: <pre><code>_new&lt;AView&gt;() AUI_WITH_STYLE {\n  MinSize { 16_dp },\n  BackgroundSolid { AColor::BLACK },\n  on_state::Hovered {\n    BackgroundSolid { AColor::RED },\n  },\n},\n</code></pre></p>"},{"location":"ass_opacity/","title":"ass::Opacity","text":"<p>Controls the opacity of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/Opacity.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_opacity/#examples","title":"Examples","text":"examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>};\n\nstatic _&lt;AView&gt; labelTitle(AString s) {\n    return _new&lt;ALabel&gt;(std::move(s)) AUI_WITH_STYLE {\n        Opacity { 0.5f },\n        ATextAlign::CENTER,\n    };\n}\n\nclass CellView : public AViewContainer {\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n</code></pre></p>"},{"location":"ass_padding/","title":"ass::Padding","text":"<p>Controls the padding of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/Padding.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_padding/#detailed-description","title":"Detailed Description","text":"<p>See AUI Box Model.</p>"},{"location":"ass_padding/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>            class_of(\".frame\"),\n            Border { 1_dp, 0x444444_rgb },\n          },\n          { class_of(\".frame\") &gt; t&lt;AButton&gt;(), Margin { 4_dp } },\n          { t&lt;NewGameWindow&gt;(), Padding { 4_dp } },\n        });\n    }\n} s;\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    auto centerPosDisplay = _new&lt;ALabel&gt;(\"-\");\n    {\n        centerPosDisplay-&gt;setCustomStyle({\n          BackgroundSolid { 0x80000000_argb },\n          Padding { 4_dp },\n          TextColor { 0xffffff_rgb },\n          FontSize { 11_pt },\n        });\n    }\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>static auto headerWithContents(_&lt;AView&gt; content) {\n    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n                             t&lt;AScrollAreaViewport&gt;(),\n                             AOverflow::VISIBLE,\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                  .build() AUI_WITH_STYLE {\n                Expanding(),\n                ScrollbarAppearance(ScrollbarAppearance::ALWAYS, ScrollbarAppearance::ALWAYS),\n              },\n        } AUI_WITH_STYLE { Padding(0) });\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;CellsWindow&gt;()-&gt;show();\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>              } AUI_WITH_STYLE {\n                    MinSize { {}, 100_dp },\n                    LayoutSpacing { 4_dp },\n                  },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(8_dp), LayoutSpacing { 4_dp } },\n          }),\n          Centered {\n            Horizontal::Expanding {\n              SpacerExpanding(),\n              Button { Label { mEditorMode ? \"Discard\" : \"Delete\" }, {me::drop} },\n</code></pre></p>"},{"location":"ass_prop_ipropertybase/","title":"ass::prop::IPropertyBase","text":"<p>Base class for all properties.</p> Header:<code>#include &lt;AUI/ASS/Property/IPropertyBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_prop_propertyslot/","title":"ass::prop::PropertySlot","text":"<p>Defines the types of renderable properties and order of their rendering.</p> Header:<code>#include &lt;AUI/ASS/Property/IPropertyBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_prop_propertyslot/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"ass_properties/","title":"ASS properties","text":""},{"location":"ass_properties/#detailed-description","title":"Detailed Description","text":"<p>AUI Style Sheets property customizes view's appearance and behavior.</p>"},{"location":"ass_properties/#related-pages","title":"Related Pages","text":"<ul> <li> <p>ass::TextColor</p> <p>Controls the text color of AView.</p> </li> <li> <p>ass::TextShadow</p> <p>Controls the text shadow of AView.</p> </li> <li> <p>ass::BorderRight</p> <p>Represents right border.</p> </li> <li> <p>ass::ScrollbarAppearance</p> <p>Controls how do scrollbars and content appear in AScrollArea. This rule is applicable to AScrollArea only.</p> </li> <li> <p>ass::Font</p> <p>Controls the font of AView.</p> </li> <li> <p>ass::TransformOffset</p> <p>Controls the rendering offset transform of AView.</p> </li> <li> <p>ass::Opacity</p> <p>Controls the opacity of AView.</p> </li> <li> <p>ass::BorderLeft</p> <p>Represents left border.</p> </li> <li> <p>ass::BorderRadius</p> <p>Controls border radius.</p> </li> <li> <p>ass::FontFamily</p> <p>Controls the font family of AView.</p> </li> <li> <p>ass::FontSize</p> <p>Controls the font size of AView.</p> </li> <li> <p>ass::BoxShadowInner</p> <p>Represents box shadow.</p> </li> <li> <p>ass::FixedSize</p> <p>Controls the fixed size of AView.</p> </li> <li> <p>ass::CustomProperty</p> <p>Custom property with user-defined handlers.</p> </li> <li> <p>ass::LineHeight</p> <p>Controls line height multiplier of the font of the AView.</p> </li> <li> <p>ass::Border</p> <p>Represents border.</p> </li> <li> <p>ass::BoxShadow</p> <p>Represents box shadow.</p> </li> <li> <p>ass::Backdrop</p> <p>Represents backdrop filter effect which applied to the pixels behind the view (i.e., blur, grayscale, etc.)</p> </li> <li> <p>ass::BackgroundEffect</p> <p>Represents custom-rendered background effect.</p> </li> <li> <p>ass::BorderBottom</p> <p>Represents bottom border.</p> </li> <li> <p>ass::Sizing</p> <p>Determines sizing rules of a background texture (BackgroundImage).</p> </li> <li> <p>ass::BackgroundImage</p> <p>Represents textured (image) background.</p> </li> <li> <p>ass::BackgroundSolid</p> <p>Represents solid (single color) background.</p> </li> <li> <p>ass::MaxSize</p> <p>Controls the max size of AView.</p> </li> <li> <p>ass::BorderTop</p> <p>Represents top border.</p> </li> <li> <p>ass::TextBorder</p> <p>Controls the text border of AView.</p> </li> <li> <p>ass::LayoutSpacing</p> <p>Controls the gap between elements of the container. Basically acts like a margin, but the gaps appear between views only, not around them.</p> </li> <li> <p>ass::Margin</p> <p>Controls view's margins.</p> </li> <li> <p>ass::BackgroundGradient</p> <p>Represents gradient background.</p> </li> <li> <p>ass::Expanding</p> <p>Controls the expanding of AView.</p> </li> <li> <p>ass::TransformScale</p> <p>Controls the rendering scale transform of AView.</p> </li> <li> <p>ass::Padding</p> <p>Controls the padding of AView.</p> </li> <li> <p>ass::MinSize</p> <p>Controls the min size of AView.</p> </li> <li> <p>ass::TransformRotate</p> <p>Controls the rendering offset transform of AView.</p> </li> <li> <p>ass::BackgroundCropping</p> <p>Controls background texture cropping by exact UV coordinates. Useful for texture atlases.</p> </li> <li> <p>ACursor</p> <p>Represents cursor type.</p> </li> <li> <p>FontRendering</p> <p>Controls how fonts are rendered in the view.</p> </li> <li> <p>VerticalAlign</p> <p>Controls the text vertical alignment of AView.</p> </li> <li> <p>AFloat</p> <p>Specifies text floating in text wrapping views, i.e, ATextArea, AText.</p> </li> <li> <p>ImageRendering</p> <p>Controls the image rendering type.</p> </li> <li> <p>TextTransform</p> <p>Controls the text transform of AView.</p> </li> <li> <p>AOverflow</p> <p>Controls visibility of the overflowed contents of AView with AView::drawStencilMask.</p> </li> <li> <p>ATextOverflow</p> <p>Controls behavior of the overflowed text. Relevant to AAbstractLabel and its derivatives only.</p> </li> <li> <p>AOverflowMask</p> <p>Controls the behaviour of the default AView::drawStencilMask() implementation.</p> </li> <li> <p>ATextAlign</p> <p>Controls the text alignment inside AView.</p> </li> </ul>"},{"location":"ass_scrollbarappearance/","title":"ass::ScrollbarAppearance","text":"<p>Controls how do scrollbars and content appear in AScrollArea. This rule is applicable to AScrollArea only.</p> Header:<code>#include &lt;AUI/ASS/Property/ScrollbarAppearance.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_scrollbarappearance/#examples","title":"Examples","text":"examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>          AScrollArea::Builder()\n                  .withContents(Horizontal { _new&lt;CellsView&gt;(_new&lt;State&gt;()) })\n                  .build() AUI_WITH_STYLE {\n                Expanding(),\n                ScrollbarAppearance(ScrollbarAppearance::ALWAYS, ScrollbarAppearance::ALWAYS),\n              },\n        } AUI_WITH_STYLE { Padding(0) });\n    }\n};\n</code></pre></p>"},{"location":"ass_scrollbarappearance/#public-types","title":"Public Types","text":"<p><code>enum ass::ScrollbarAppearance::AxisValue</code></p> <p>Per-axis behaviour enum.</p> Constant Description <code>AxisValue::ALWAYS</code>  Scrollbar is always visible, no matter whether or not any content is overflowing.  <code>AxisValue::ON_DEMAND</code>  Scrollbar appears only if content is overflowing.  <code>AxisValue::NEVER</code>  Scrollbar is always gone, no matter whether or not any content is overflowing."},{"location":"ass_scrollbarappearance/#ass::ScrollbarAppearance::AxisValue","title":"AxisValue","text":""},{"location":"ass_selected/","title":"ass::Selected","text":"<p>Wraps another selector matching Selected views.</p> Header:<code>#include &lt;AUI/ASS/Selector/Selected.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_selected/#detailed-description","title":"Detailed Description","text":"<pre><code>{\n  Selected(t&lt;ACheckBox&gt;()),\n  BackgroundImage {\":uni/svg/checkbox.svg\" },\n},\n</code></pre> <p>The view must implement ass::ISelectable.</p>"},{"location":"ass_selectors/","title":"ASS selectors","text":""},{"location":"ass_selectors/#detailed-description","title":"Detailed Description","text":"<p>AUI Style Sheets selector is a predicate whether view suit certain rules or not.</p>"},{"location":"ass_selectors/#related-pages","title":"Related Pages","text":"<ul> <li> <p>ass::Selected</p> <p>Wraps another selector matching Selected views.</p> </li> <li> <p>ass::on_state::Hovered</p> <p>Hovered LESS-style subselector.</p> </li> <li> <p>ass::on_state::Activated</p> <p>Activated LESS-style subselector.</p> </li> <li> <p>ass::on_state::Focused</p> <p>Focused LESS-style subselector.</p> </li> <li> <p>ass::on_state::Disabled</p> <p>Disabled LESS-style subselector.</p> </li> </ul>"},{"location":"ass_sizing/","title":"ass::Sizing","text":"<p>Determines sizing rules of a background texture (BackgroundImage).</p> Header:<code>#include &lt;AUI/ASS/Property/BackgroundImage.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_sizing/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p>"},{"location":"ass_sound/","title":"ass::Sound","text":"<p>Produces sound effect when the style applied.</p> Header:<code>#include &lt;AUI/Audio/ASS/Property/Sound.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"ass_sound/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>_&lt;IAudioPlayer&gt; sound</code></p> <p>Player of the sound effect.</p>"},{"location":"ass_sound/#ass::Sound::sound","title":"sound","text":""},{"location":"ass_textborder/","title":"ass::TextBorder","text":"<p>Controls the text border of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/TextBorder.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_textcolor/","title":"ass::TextColor","text":"<p>Controls the text color of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/TextColor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_textcolor/#examples","title":"Examples","text":"examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    {\n        centerPosDisplay-&gt;setCustomStyle({\n          BackgroundSolid { 0x80000000_argb },\n          Padding { 4_dp },\n          TextColor { 0xffffff_rgb },\n          FontSize { 11_pt },\n        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p>"},{"location":"ass_textshadow/","title":"ass::TextShadow","text":"<p>Controls the text shadow of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/TextShadow.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_transformoffset/","title":"ass::TransformOffset","text":"<p>Controls the rendering offset transform of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/TransformOffset.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_transformrotate/","title":"ass::TransformRotate","text":"<p>Controls the rendering offset transform of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/TransformRotate.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ass_transformscale/","title":"ass::TransformScale","text":"<p>Controls the rendering scale transform of AView.</p> Header:<code>#include &lt;AUI/ASS/Property/TransformScale.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"astackedlayout/","title":"AStackedLayout","text":"<p>Places views in a stack (along z axis).</p> Header:<code>#include &lt;AUI/Layout/AStackedLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"astackedlayout/#detailed-description","title":"Detailed Description","text":"Declarative notation <code>Stacked { }</code> <code>Centered { }</code> <p>Stacked layout manager places views stacking them onto each other. If the view is expanding, then it uses all space available. Otherwise, the view is centered.</p> <p>AStackedLayout has two declarative notations - <code>Stacked</code> and <code>Centered</code>. They are equivalent, so you can express your intentions more clearly by specifying <code>Stacked</code> to stack views and <code>Centered</code> to center them.</p> <p>First view appears below the second one, and so on. The last view is above all other views within this Stacked layout.</p> <p></p>"},{"location":"astackedlayout/#examples","title":"Examples","text":"examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    beginGame(10, 10, 20);\n</code></pre></p>"},{"location":"astacktrace/","title":"AStacktrace","text":"<p>Stacktrace consisting of a collection of stack function frames.</p> Header:<code>#include &lt;AUI/Platform/AStacktrace.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astacktrace/#detailed-description","title":"Detailed Description","text":"<p>The first element of the collection represents the top of the stack, which is the last function invocation. Typically, this is the point at which this stacktrace was created (unless skipFrames is zero). The last element of the collection represents the bottom of the stack (typically entrypoint).</p>"},{"location":"astacktrace/#public-types","title":"Public Types","text":"<p><code>class AStacktrace::Entry</code></p> <p>Stacktrace entry.</p> <p>Empty structure.</p>"},{"location":"astacktrace/#AStacktrace::Entry","title":"Entry","text":""},{"location":"astacktrace/#public-methods","title":"Public Methods","text":"<pre><code>static AStacktrace AStacktrace::capture(unsigned skipFrames = 0, unsigned maxFrames = 128)\n</code></pre> <p>Creates stacktrace of the current thread.</p> Arguments <code>skipFrames</code>  number of frames to skip. <code>maxFrames</code>  max number of frames. <p>A call to <code>AStacktrace::capture</code> is always skipped in the stacktrace.</p> <pre><code>void AStacktrace::resolveSymbolsIfNeeded()\n</code></pre> <p>Invokes function name resolution with function pointers.</p> <p>Must be called before using AStacktrace::Entry::functionName() and similar functions.</p> <pre><code>aui::range&lt;iterator&gt; AStacktrace::stripBeforeFunctionCall(void* pFunction, int maxAllowedOffsetInBytes = 50)\n</code></pre> <p>Tries to find the function pointer in stacktrace and strips stacktrace until function frame.</p> Arguments <code>pFunction</code>  pointer to function. <code>maxAllowedOffsetInBytes</code>  max offset error in bytes. Returns itself (modified) <p>If stripBeforeFunctionCall fails to find pFunction, it leaves AStacktrace unmodified and returns itself.</p> <p>stripBeforeFunctionCall strips the end of stacktrace, excluding the passed function.</p> <p>maxAllowedOffsetInBytes is intended to find stack frame, which is not in exact location of function pointer.</p>"},{"location":"astacktrace/#AStacktrace::capture","title":"capture","text":""},{"location":"astacktrace/#AStacktrace::resolveSymbolsIfNeeded","title":"resolveSymbolsIfNeeded","text":""},{"location":"astacktrace/#AStacktrace::stripBeforeFunctionCall","title":"stripBeforeFunctionCall","text":""},{"location":"astaticvector/","title":"AStaticVector","text":"<p>Vector-like container up to maxSize elements inplace.</p> Header:<code>#include &lt;AUI/Common/AStaticVector.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astaticvector/#detailed-description","title":"Detailed Description","text":"<p>Vector-like container optimized for the case when it contains up to maxSize in place, avoiding dynamic allocation. AStaticVector could not contain more than maxSize elements.</p>"},{"location":"astaticvector/#public-methods","title":"Public Methods","text":"<pre><code>bool AStaticVector::contains(const StoredType&amp; value)\n</code></pre> Returns true if container contains an element, false otherwise. <pre><code>StoredType&amp; AStaticVector::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>const StoredType&amp; AStaticVector::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>template&lt;aui::incrementable Iterator, aui::invocable&lt;decltype(* std::declval&lt;Iterator&gt;())&gt; UnaryOperation &gt;\nstatic auto AStaticVector::fromRange(aui::range&lt;Iterator&gt; range, UnaryOperation&amp;&amp; transformer)\n</code></pre> <p>Constructs a new vector of transformed items of the range.</p> Arguments <code>range</code>  items to transform from. <code>transformer</code>  transformer function. Returns A new vector. <pre><code>AOptional&lt;size_t&gt; AStaticVector::indexOf(const StoredType&amp; value)\n</code></pre> Arguments <code>value</code>  element to find. Returns index of the specified element. If element is not found, std::nullopt is returned. <pre><code>template&lt;typename OtherContainer &gt;\niterator AStaticVector::insertAll(const OtherContainer&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator AStaticVector::insertAll(OtherContainer&amp;&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator AStaticVector::insertAll(iterator at, const OtherContainer&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator AStaticVector::insertAll(iterator at, OtherContainer&amp;&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\nbool AStaticVector::isSubsetOf(const OtherContainer&amp; c)\n</code></pre> Returns true if <code>c</code> container is a subset of this container, false otherwise. <pre><code>StoredType&amp; AStaticVector::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>const StoredType&amp; AStaticVector::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>void AStaticVector::removeAll(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes all occurrences of <code>item</code>.</p> <pre><code>void AStaticVector::removeAt(size_t index)\n</code></pre> Arguments <code>index</code> index of the element. <p>Removes element at the specified index.</p> Sneaky assertions <code>index</code> points to the existing element. <pre><code>void AStaticVector::removeFirst(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes first occurrence of <code>item</code>.</p> <pre><code>template&lt;typename Predicate &gt;\nvoid AStaticVector::removeIf(Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>predicate</code>  predicate <p>Removes element if <code>predicate(container[i]) == true</code>.</p>"},{"location":"astaticvector/#AStaticVector::contains","title":"contains","text":""},{"location":"astaticvector/#AStaticVector::first","title":"first","text":""},{"location":"astaticvector/#AStaticVector::fromRange","title":"fromRange","text":""},{"location":"astaticvector/#AStaticVector::indexOf","title":"indexOf","text":""},{"location":"astaticvector/#AStaticVector::insertAll","title":"insertAll","text":""},{"location":"astaticvector/#AStaticVector::isSubsetOf","title":"isSubsetOf","text":""},{"location":"astaticvector/#AStaticVector::last","title":"last","text":""},{"location":"astaticvector/#AStaticVector::removeAll","title":"removeAll","text":""},{"location":"astaticvector/#AStaticVector::removeAt","title":"removeAt","text":""},{"location":"astaticvector/#AStaticVector::removeFirst","title":"removeFirst","text":""},{"location":"astaticvector/#AStaticVector::removeIf","title":"removeIf","text":""},{"location":"astdistream/","title":"AStdIStream","text":"<p>std::istream implementation wrapping AUI's IInputStream.</p> Header:<code>#include &lt;AUI/IO/AStdIStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astdistream/#public-types","title":"Public Types","text":"<p><code>class AStdIStream::StreamBuf</code></p> <p>Empty structure.</p>"},{"location":"astdistream/#AStdIStream::StreamBuf","title":"StreamBuf","text":""},{"location":"astring/","title":"AString","text":"<p>Concept shortcut to std::is_arithmetic_v</p> Header:<code>#include &lt;AUI/Traits/concepts.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astring/#examples","title":"Examples","text":"examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>void NewGameWindow::updateDifficultyLabel() {\n    mMines-&gt;setMax(mWidth-&gt;getValue() * mHeight-&gt;getValue() * 3 / 4);\n    int difficulty = mWidth-&gt;getValue() * mHeight-&gt;getValue() / glm::max(mMines-&gt;getValue(), int64_t(1));\n\n    AString text = \"Difficulty: \";\n    switch (difficulty) {\n        default:\n        case 0:\n        case 1:\n            text += \"very low\";\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/DemoListModel.h <p>Views Example - All-in-one views building example. <pre><code>#include &lt;AUI/Common/AString.h&gt;\n#include &lt;AUI/Model/IListModel.h&gt;\n\n\nclass DemoListModel: public IListModel&lt;AString&gt; {\nprivate:\n    size_t mListSize = 3;\n\npublic:\n    ~DemoListModel() override = default;\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>auto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n                  return formatDate(*v);\n              },\n</code></pre></p> examples/7guis/cells/tests/FormulaTests.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    EXPECT_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"0\")), 0.0);\n}\n\nTEST_F(Cells_Formula, String) {\n    EXPECT_EQ(std::get&lt;AString&gt;(formula::evaluate(mSpreadsheet, \"test\")), \"test\");\n}\n\nTEST_F(Cells_Formula, EConstant) {\n    EXPECT_DOUBLE_EQ(std::get&lt;double&gt;(formula::evaluate(mSpreadsheet, \"=1\")), 1.0);\n}\n</code></pre></p> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>                    break;\n            }\n\n            context.render.setColor(color);\n            context.render.string({getWidth() / 3, (getHeight() - fs.size) / 2 + fs.getAscenderHeight()}, AString::number(count), fs);\n        }\n    }\n}\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n\n    auto pos = fractalView-&gt;getPlotPosition();\n    re-&gt;setText(AString::number(pos.x));\n    im-&gt;setText(AString::number(pos.y));\n    scale-&gt;setText(AString::number(fractalView-&gt;getPlotScale()));\n\n    setContents(Vertical {\n      _form({\n</code></pre></p> examples/ui/contacts/src/model/Contact.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>#include &lt;AUI/Common/AObject.h&gt;\n#include \"AUI/Common/AProperty.h\"\n\nstruct Contact {\n    AProperty&lt;AString&gt; displayName;\n    AProperty&lt;AString&gt; phone;\n    AProperty&lt;AString&gt; address;\n    AProperty&lt;AString&gt; email;\n    AProperty&lt;AString&gt; homepage;\n    AProperty&lt;AString&gt; note;\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>    template&lt;typename T&gt;\n    _&lt;AView&gt; presentation(AProperty&lt;T&gt;&amp; property);\n\n    template&lt;typename T&gt;\n    _&lt;AView&gt; row(AString title, AProperty&lt;T&gt;&amp; property);\n\n    void drop();\n    void toggleEdit();\n};\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre></p> examples/ui/views/src/DemoListModel.cpp <p>Views Example - All-in-one views building example. <pre><code>size_t DemoListModel::listSize() {\n    return mListSize;\n}\n\nAString DemoListModel::listItemAt(const AListModelIndex&amp; index) {\n    return \"List item #{}\"_format(index.getRow() + 1);\n}\n\nvoid DemoListModel::addItem() {\n    mListSize += 1;\n</code></pre></p> examples/7guis/cells/src/Functions.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    AVector&lt;formula::Value&gt; args;\n};\nusing Invocable = std::function&lt;formula::Value(Ctx ctx)&gt;;\n\nconst AMap&lt;AString, Invocable&gt;&amp; predefined();\n}\n</code></pre></p> examples/7guis/cells/src/Functions.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    }\n}\n}\n\nconst AMap&lt;AString, functions::Invocable&gt;&amp; functions::predefined() {\n    static AMap&lt;AString, functions::Invocable&gt; out = {\n        { \"SUM\",\n          [](Ctx ctx) {\n              double accumulator = 0.0;\n              forEachArgAndRangeCell(ctx, [&amp;](const formula::Value&amp; v) {\n</code></pre></p> examples/7guis/cells/src/Tokens.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>#include \"AUI/Util/ATokenizer.h\"\n\nnamespace token {\nstruct Identifier {\n    AString name;\n};\nstruct Double {\n    double value;\n};\nstruct Semicolon {};   // ;\n</code></pre></p> examples/7guis/cells/src/Cell.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code> */\n\n#include \"Cell.h\"\n\nAString Cell::columnName(unsigned int index) {\n    return AString(U'A') + index;\n}\nAString Cell::rowName(unsigned int index) {\n    return AString::number(index);\n}\n</code></pre></p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    formula::Value evaluate(const Spreadsheet&amp; ctx) override { return value; }\n};\n\nstruct StringLiteralNode : INode {\n    AString value;\n    explicit StringLiteralNode(AString value) : value(std::move(value)) {}\n    ~StringLiteralNode() override = default;\n\n    formula::Value evaluate(const Spreadsheet&amp; ctx) override { return value; }\n};\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>using namespace ass;\n\nstruct State {\n    Spreadsheet spreadsheet{glm::uvec2 { 'Z' - 'A' + 1, 100 }};\n    AProperty&lt;AString&gt; currentExpression;\n};\n\nstatic _&lt;AView&gt; labelTitle(AString s) {\n    return _new&lt;ALabel&gt;(std::move(s)) AUI_WITH_STYLE {\n        Opacity { 0.5f },\n</code></pre></p>"},{"location":"astringformathelper/","title":"AStringFormatHelper","text":"<p>Formats string.</p> Header:<code>#include &lt;AUI/Traits/strings.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astringformathelper/#detailed-description","title":"Detailed Description","text":"<p>AUI uses fmt library. See documentation at https://fmt.dev/latest/index.html</p>"},{"location":"astringliteral/","title":"AStringLiteral","text":"<p>Compile-time string literal.</p> Header:<code>#include &lt;AUI/Util/AStringLiteral.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astringstream/","title":"AStringStream","text":"<p>A buffer input/output stream based on std::string.</p> Header:<code>#include &lt;AUI/IO/AStringStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astringvector/","title":"AStringVector","text":"<p>An AVector with string-related functions.</p> Header:<code>#include &lt;AUI/Common/AStringVector.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astringview/","title":"AStringView","text":"<p>Represents a UTF-8 string view.</p> Header:<code>#include &lt;AUI/Common/AStringView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astringview/#detailed-description","title":"Detailed Description","text":"<p>AStringView stores a pointer and size of constant 8-bit integer sequence representing UTF-8 code units. Each Unicode character (codepoint) is encoded using 1-4 consecutive code units, supporting the full Unicode standard.</p> <p>Unicode provides comprehensive support for international writing systems and symbols.</p> <p>AStringView points to constant data. For owning version of AStringView, see AString.</p> <p>To work with raw bytes, use AStringView::bytes() function.</p>"},{"location":"astringview/#public-methods","title":"Public Methods","text":"<pre><code>constexpr const char* AStringView::data()\n</code></pre> <p>Raw <code>const char*</code> pointer to the string.</p> Returns A pointer to the first character of the string. <p>The returned pointer is not guaranteed to be valid C-style string, because we can't insert a null character at the end.</p> <pre><code>AByteBuffer AStringView::encode(AStringEncoding encoding)\n</code></pre> <p>Encodes the string into a null-terminated byte buffer using the specified encoding.</p> <pre><code>size_type AStringView::length()\n</code></pre> <p>Returns the number of Unicode characters in the string</p> <pre><code>size_type AStringView::sizeBytes()\n</code></pre> <p>Returns the number of bytes in the UTF-8 encoded string</p> <pre><code>AStringView AStringView::substr(size_type pos = 0, size_type count = npos)\n</code></pre> <p>Returns a substring <code>[pos, pos + count)</code>.</p> Arguments <code>pos</code>  The starting position of the substring. <code>count</code>  The number of characters to include in the substring. If the requested substring extends past the end of the string, i.e. the count is greater than `size() - pos` (e.g. if `count == npos`), the returned substring is `[pos, size())`.  Since AString encapsulates a UTF-8 encoded string, the returned substring is always valid UTF-8, hence, it operates on top of UTF-8 code points. `pos` and `count` are interpreted as code points positions, not as byte. <pre><code>bool AStringView::toBool()\n</code></pre> <p>Converts the string to boolean value.</p> Returns If the string equals to \"true\", true returned, false otherwise. <pre><code>AOptional&lt;double&gt; AStringView::toDouble()\n</code></pre> <p>Converts the string to a double number.</p> Returns The string converted to a double number.  If conversion to int is not possible, nullopt is returned. <p>Examples:</p> examples/7guis/cells/src/Formula.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>formula::Precompiled formula::precompile(const AString&amp; expression) {\n    if (expression.empty()) {\n        return [](const Spreadsheet&amp;) { return std::nullopt; };\n    }\n    if (auto d = expression.toDouble()) {\n        return [d = *d](const Spreadsheet&amp;) { return d; };\n    }\n    if (!expression.startsWith('=')) {\n        return [stringConstant = expression](const Spreadsheet&amp;) { return stringConstant; };\n    }\n</code></pre> <pre><code>AOptional&lt;float&gt; AStringView::toFloat()\n</code></pre> <p>Converts the string to a float number.</p> Returns The string converted to a float number.  If conversion to int is not possible, nullopt is returned. <pre><code>AOptional&lt;int32_t&gt; AStringView::toInt()\n</code></pre> <p>Converts the string to int value.</p> Returns The string converted to an integer value using base 10. If the string starts with 0x or 0X, the base 16 used.  If conversion to int is not possible, nullopt is returned. <pre><code>AOptional&lt;int64_t&gt; AStringView::toLong()\n</code></pre> <p>Converts the string to long value.</p> Returns The string converted to an integer value using base 10. If the string starts with 0x or 0X, the base 16 used.  If conversion to long is not possible, nullopt is returned. <pre><code>AOptional&lt;int&gt; AStringView::toNumber(aui::ranged_number&lt;int, 2, 36&gt; base)\n</code></pre> <p>Returns the string converted to an int using base. Returns std::nullopt if the conversion fails.</p> <pre><code>AOptional&lt;uint32_t&gt; AStringView::toUInt()\n</code></pre> <p>Converts the string to unsigned int value.</p> Returns The string converted to an integer value using base 10. If the string starts with 0x or 0X, the base 16 used.  If conversion to unsigned int is not possible, exception is thrown. <pre><code>AOptional&lt;uint64_t&gt; AStringView::toULong()\n</code></pre> <p>Converts the string to unsigned long value.</p> Returns The string converted to an integer value using base 10. If the string starts with 0x or 0X, the base 16 used.  If conversion to unsigned long is not possible, exception is thrown. <pre><code>std::u16string AStringView::toUtf16()\n</code></pre> <p>Encodes the UTF-8 string into a UTF-16 string</p> <pre><code>std::u32string AStringView::toUtf32()\n</code></pre> <p>Encodes the UTF-8 string into a UTF-32 string</p>"},{"location":"astringview/#AStringView::data","title":"data","text":""},{"location":"astringview/#AStringView::encode","title":"encode","text":""},{"location":"astringview/#AStringView::length","title":"length","text":""},{"location":"astringview/#AStringView::sizeBytes","title":"sizeBytes","text":""},{"location":"astringview/#AStringView::substr","title":"substr","text":""},{"location":"astringview/#AStringView::toBool","title":"toBool","text":""},{"location":"astringview/#AStringView::toDouble","title":"toDouble","text":""},{"location":"astringview/#AStringView::toFloat","title":"toFloat","text":""},{"location":"astringview/#AStringView::toInt","title":"toInt","text":""},{"location":"astringview/#AStringView::toLong","title":"toLong","text":""},{"location":"astringview/#AStringView::toNumber","title":"toNumber","text":""},{"location":"astringview/#AStringView::toUInt","title":"toUInt","text":""},{"location":"astringview/#AStringView::toULong","title":"toULong","text":""},{"location":"astringview/#AStringView::toUtf16","title":"toUtf16","text":""},{"location":"astringview/#AStringView::toUtf32","title":"toUtf32","text":""},{"location":"astrongbytebufferinputstream/","title":"AStrongByteBufferInputStream","text":"<p>Input stream based on AByteBuffer with memory control, clears byte buffer on destruction</p> Header:<code>#include &lt;AUI/IO/AStrongByteBufferInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"astubwindowmanager/","title":"AStubWindowManager","text":"<p>Window manager used to stub the default window manager.</p> Header:<code>#include &lt;AUI/Util/AStubWindowManager.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"astubwindowmanager/#detailed-description","title":"Detailed Description","text":"<p>Useful for command-line only use-cases where the actual windows are not viable (i.e. tests). Rendering is switched to software when.</p> <pre><code>window = _new&lt;AWindow&gt;(\"\");\nwindow-&gt;show();\n...\nauto screenshot = AStubWindowManager::makeScreenshot(window);\n</code></pre>"},{"location":"atabview/","title":"ATabView","text":"<p>Tab host</p> <p></p> Header:<code>#include &lt;AUI/View/ATabView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atabview/#detailed-description","title":"Detailed Description","text":"<p>Used for screen space saving by grouping views.</p> <p>Unlike APageView, has a row with buttons to switch tabs (pages).</p>"},{"location":"atcpserversocket/","title":"ATcpServerSocket","text":"<p>TCP server socket.</p> Header:<code>#include &lt;AUI/Network/ATcpServerSocket.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::network)</code>"},{"location":"atcpserversocket/#public-methods","title":"Public Methods","text":"<pre><code>_&lt;ATcpSocket&gt; ATcpServerSocket::accept()\n</code></pre> Returns new connection <p>Blocks the thread until next connection.</p>"},{"location":"atcpserversocket/#ATcpServerSocket::accept","title":"accept","text":""},{"location":"atcpsocket/","title":"ATcpSocket","text":"<p>A bidirectional TCP connection (either a client connection or returned by ATcpServerSocket).</p> Header:<code>#include &lt;AUI/Network/ATcpSocket.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::network)</code>"},{"location":"atext/","title":"AText","text":"<p>HTML-capable text container.</p> <p></p> Header:<code>#include &lt;AUI/View/AText.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atext/#detailed-description","title":"Detailed Description","text":"<p>Used to display rich text or large texts.</p> <p>Unlike ALabel, AText is optimized to store, render, word break large texts.</p> <p>AText always prefers expanding in horizontal over vertical.</p> <p>To perform word breaking, AText requires it's width to be fully defined (either by FixedSize, Expanding or MaxSize), otherwise it would require large minimum width to fit all its children in a single row. By default AText's Expanding is (1, 0) (grow in width, keep minimum height). This behaviour is similar to AScrollArea.</p> <pre><code>AText::fromItems(\n    { \"These settings are applicable for render-to-texture optimizations.\",\n      makeLink(\"Learn more\", \"https://aui-framework.github.io/develop/md_docs_Render_to_texture.html\") }),\nCheckBox {\n  AUI_REACT(targetWindow-&gt;profiling()-&gt;highlightRedrawRequests),\n  [targetWindow](bool checked) {\n      targetWindow-&gt;profiling()-&gt;highlightRedrawRequests = checked;\n  },\n  Label { \"Highlight redraw requests\" },\n},\nAText::fromItems(\n    { \"Draws purple rect \", coloredRect(0xff00ff_rgb),\n      \" over view that requested redraw \"\n      \"(AView::redraw). This can help to find views that causes window to repaint which \"\n      \"affects application performance and device's battery life.\" }),\nCheckBox {\n  AUI_REACT(targetWindow-&gt;profiling()-&gt;renderToTextureDecay),\n  [targetWindow](bool checked) {\n      targetWindow-&gt;profiling()-&gt;renderToTextureDecay = checked;\n  },\n  Label { \"Render to texture decay\" },\n},\nAText::fromItems(\n    { \"Visually displays render to texture optimization by gradually transforming old pixel \",\n      \"data to gray \", coloredRect(AColor::GRAY),\n      \" color. When a view is redrawn it pixel \"\n      \"data would be represented as unaffected to gray color and seem bright and saturated \"\n      \"color. From perspective of performance it's good that whole screen transformed to gray \"\n      \"color and thus no redraw is performed.\" }),\nCheckBox {\n  AUI_REACT(targetWindow-&gt;profiling()-&gt;breakpointOnMarkMinContentSizeInvalid),\n  [targetWindow](bool checked) {\n      targetWindow-&gt;profiling()-&gt;breakpointOnMarkMinContentSizeInvalid = checked;\n  },\n  Label { \"Breakpoint on AWindow update layout flag\" },\n},\nAText::fromItems(\n    { \"Stops the attached debugger at the point when window's update layout flag is set. This \"\n      \"can be used to walk through stacktrace and find which view and why triggered layout \"\n      \"update. When breakpoint is triggered, checkbox is unset. Note: when debugger is not attached, \"\n      \"behaviour is undefined.\" }),\n</code></pre>"},{"location":"atext/#examples","title":"Examples","text":"examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>          Vertical::Expanding {\n            Centered {\n              Icon { \":logo.svg\" } AUI_WITH_STYLE { FixedSize { 128_dp } },\n            } AUI_WITH_STYLE { FixedSize { 500_dp, {} } },\n            AText::fromString(\n                \"    \u2014 Eh bien, mon prince. G\u00eanes et Lucques ne sont plus que des apanages, des \"\n                \"\u043f\u043e\u043c\u0435\u0441\u0442\u044c\u044f, de la famille Buonaparte. Non, je vous pr\u00e9viens que si vous ne me dites pas \"\n                \"que nous avons la guerre, si vous vous permettez encore de pallier toutes les infamies, \"\n                \"toutes les atrocit\u00e9s de cet Antichrist (ma parole, j'y crois) \u2014 je ne vous connais \"\n                \"plus, vous n'\u00eates plus mon ami, vous n'\u00eates plus \u043c\u043e\u0439 \u0432\u0435\u0440\u043d\u044b\u0439 \u0440\u0430\u0431, comme vous dites\u202f1. \"\n</code></pre></p>"},{"location":"atext/#public-types","title":"Public Types","text":"<p><code>struct AText::ParsedFlags</code></p> <p>Empty structure.</p>"},{"location":"atext/#AText::ParsedFlags","title":"ParsedFlags","text":""},{"location":"atextalign/","title":"ATextAlign","text":"<p>Controls the text alignment inside AView.</p> Header:<code>#include &lt;AUI/Enum/ATextAlign.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atextalign/#examples","title":"Examples","text":"examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n                      ATextAlign::CENTER,\n                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.7f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n</code></pre></p> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        int count = field_cell::getBombCountAround(mCell);\n        if (count) {\n            AFontStyle fs;\n            fs.size = getHeight() * 6 / 7;\n            fs.align = ATextAlign::CENTER;\n            auto color = AColor::BLACK;\n\n            switch (count) {\n                case 1:\n                    color = 0x0000ffffu;\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>static _&lt;AView&gt; labelTitle(AString s) {\n    return _new&lt;ALabel&gt;(std::move(s)) AUI_WITH_STYLE {\n        Opacity { 0.5f },\n        ATextAlign::CENTER,\n    };\n}\n\nclass CellView : public AViewContainer {\npublic:\n</code></pre></p>"},{"location":"atextalign/#examples_1","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>              row(\"Email\", mContact-&gt;email),\n              row(\"Homepage\", mContact-&gt;homepage),\n              Horizontal::Expanding {\n                Vertical {\n                  Label { \"Note\" } AUI_WITH_STYLE { FixedSize { 100_dp, {} }, Opacity { 0.5f }, ATextAlign::RIGHT },\n                },\n                _new&lt;ATextArea&gt;() &amp;&amp; mContact-&gt;note,\n              } AUI_WITH_STYLE {\n                    MinSize { {}, 100_dp },\n                    LayoutSpacing { 4_dp },\n</code></pre></p>"},{"location":"atextarea/","title":"ATextArea","text":"<p>Multiline text input area.</p> <p></p> Header:<code>#include &lt;AUI/View/ATextArea.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atextarea/#detailed-description","title":"Detailed Description","text":"<p>Word breaking text area.</p> <p></p> <p>In contrast to ATextField, ATextArea is not scrollable. It is often preferable to use a dedicated scroll area to make the entire application pages scrollable with other content rather than using nested scrolls just for text area.</p> <p>If you want to make AScrollArea scrollable, it can be placed inside a AScrollArea: <pre><code>AScrollArea::Builder().withContents(_new&lt;AScrollArea&gt;())\n</code></pre></p> <p>This is why it does not offer default styling - you would probably want to style AScrollArea as if it were text input.</p> <p>ATextArea offers integrations and optimizations for AScrollArea specifically.</p>"},{"location":"atextarea/#examples","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>              Horizontal::Expanding {\n                Vertical {\n                  Label { \"Note\" } AUI_WITH_STYLE { FixedSize { 100_dp, {} }, Opacity { 0.5f }, ATextAlign::RIGHT },\n                },\n                _new&lt;ATextArea&gt;() &amp;&amp; mContact-&gt;note,\n              } AUI_WITH_STYLE {\n                    MinSize { {}, 100_dp },\n                    LayoutSpacing { 4_dp },\n                  },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(8_dp), LayoutSpacing { 4_dp } },\n</code></pre></p>"},{"location":"atextbase/","title":"ATextBase","text":"<p>Base class for AText without public APIs.</p> Header:<code>#include &lt;AUI/View/ATextBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atextfield/","title":"ATextField","text":"<p>Editable field with text to receive a text input from the user.</p> <p></p> Header:<code>#include &lt;AUI/View/ATextField.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atextfield/#detailed-description","title":"Detailed Description","text":""},{"location":"atextfield/#examples","title":"Examples","text":"examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>using namespace declarative;\n\nJumpToCoordsWindow::JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent)\n  : AWindow(\"Jump to coords\", 854_dp, 500_dp, parent, WindowStyle::NO_RESIZE) {\n    auto re = _new&lt;ATextField&gt;();\n    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n\n    auto pos = fractalView-&gt;getPlotPosition();\n    re-&gt;setText(AString::number(pos.x));\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>_&lt;AView&gt; editor(AProperty&lt;T&gt;&amp; property);\n\ntemplate &lt;&gt;\n_&lt;AView&gt; editor(AProperty&lt;AString&gt;&amp; property) {\n    return _new&lt;ATextField&gt;() &amp;&amp; property;\n}\n}   // namespace\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; ContactDetailsView::presentation(AProperty&lt;T&gt;&amp; property) {\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>auto formatDate(system_clock::time_point date) { return \"{0:%d}.{0:%m}.{0:%G}\"_format(date); }\n\nauto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n        ALayoutInflater::inflate(\n            this,\n            _new&lt;ATextField&gt;() AUI_WITH_STYLE {\n                  MinSize { 0 },\n                  Margin { 0 },\n                  BorderRadius { 0 },\n                } AUI_LET {\n                    it &amp;&amp; mState-&gt;currentExpression;\n</code></pre></p>"},{"location":"atextinputactionicon/","title":"ATextInputActionIcon","text":"<p>Controls icons representing IME text input action the user is requested to perform.</p> Header:<code>#include &lt;AUI/Enum/ATextInputActionIcon.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atextinputactionicon/#detailed-description","title":"Detailed Description","text":"<p>Each action configures soft keyboard to display the certain kind of operation. The visual appearance of the action button might differ depending on the target platform, it's version, and the keyboard implementation (especially on Android).</p> <p>It's up to developer to handle the action accordingly.</p>"},{"location":"atextinputactionicon/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"atextinputtype/","title":"ATextInputType","text":"<p>Controls IME text input type of the text field.</p> Header:<code>#include &lt;AUI/Enum/ATextInputType.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atextinputtype/#detailed-description","title":"Detailed Description","text":"<p>The type of information for which to optimize the text input control.</p> <p>On Android, behavior may vary across device and keyboard provider.</p>"},{"location":"atextinputtype/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"atextlayouthelper/","title":"ATextLayoutHelper","text":"<p>Helps mapping prerendered string with positions.</p> Header:<code>#include &lt;AUI/Render/ATextLayoutHelper.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atextlayouthelper/#public-types","title":"Public Types","text":"<p><code>struct ATextLayoutHelper::Boundary</code></p> <p>Empty structure.</p>"},{"location":"atextlayouthelper/#ATextLayoutHelper::Boundary","title":"Boundary","text":""},{"location":"atextlayouthelper/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>using Line</code></p> <p>Single line of symbols</p> <p>Actual size of line is +1 larger than symbol count; to expose last character's right bondary</p>"},{"location":"atextlayouthelper/#ATextLayoutHelper::Line","title":"Line","text":""},{"location":"atextoverflow/","title":"ATextOverflow","text":"<p>Controls behavior of the overflowed text. Relevant to AAbstractLabel and its derivatives only.</p> Header:<code>#include &lt;AUI/Enum/AOverflow.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atextoverflow/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p>"},{"location":"atexturedbrush/","title":"ATexturedBrush","text":"Header:<code>#include &lt;AUI/Render/ABrush.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atexturedbrush/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n        if (mTexture) {\n            ctx.render.rectangle(ATexturedBrush { mTexture }, { 0, 0 }, float(SCALE) * glm::vec2(mCells-&gt;size()));\n        }\n        auto drawGrid = [&amp;] {\n            ASmallVector&lt;std::pair&lt;glm::vec2, glm::vec2&gt;, 128 * 2&gt; points;\n            for (int i = 1; i &lt; mCells-&gt;size().x; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(i * SCALE, 0.f), glm::vec2(i * SCALE, getSize().y));\n</code></pre></p>"},{"location":"atexturedbrush/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>ImageRendering imageRendering</code></p> <p>Optional. Controls how does the image is scaled.</p> Warning! When set to <code>ImageRendering::SMOOTH</code>, on software renderer it produces extra CPU costs. <p><code>Repeat repeat</code></p> <p>Optional. Controls how does the image behaves when it's size is not enough to cover the whole rect.</p> <p><code>AOptional&lt;glm::vec2&gt; uv1</code></p> <p>Optional. Top left UV coords of the texture.</p> Warning! When set, on software renderer it produces extra CPU costs. <p><code>AOptional&lt;glm::vec2&gt; uv2</code></p> <p>Optional. Bottom right UV coords of the texture.</p> Warning! When set, on software renderer it produces extra CPU costs."},{"location":"atexturedbrush/#ATexturedBrush::imageRendering","title":"imageRendering","text":""},{"location":"atexturedbrush/#ATexturedBrush::repeat","title":"repeat","text":""},{"location":"atexturedbrush/#ATexturedBrush::uv1","title":"uv1","text":""},{"location":"atexturedbrush/#ATexturedBrush::uv2","title":"uv2","text":""},{"location":"athread/","title":"AThread","text":"<p>Represents a user-defined thread.</p> Header:<code>#include &lt;AUI/Thread/AThread.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"athread/#public-types","title":"Public Types","text":"<p><code>class AThread::Interrupted</code></p> <p>Exception that is thrown by <code>AThread::interruptionPoint()</code>, if interruption is requested for        this thread. Handled by <code>AThread::start</code>.</p> <p>Empty structure.</p>"},{"location":"athread/#AThread::Interrupted","title":"Interrupted","text":""},{"location":"athread/#public-methods","title":"Public Methods","text":"<pre><code>static const _&lt;AAbstractThread&gt;&amp; AThread::current()\n</code></pre> Returns current thread. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    _&lt;ITexture&gt; mTexture;\n\n    void updateTexture() {\n        if (!mTexture) {\n            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>                  [this, circle] {\n\n\n                      auto radiusPopup = _new&lt;AWindow&gt;(\n                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n                                connect(\n</code></pre> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>        struct RangeIterator {\n            const Spreadsheet* spreadsheet;\n            formula::Range range;\n            glm::uvec2 current;\n\n            RangeIterator operator++() {\n                current.x += 1;\n                if (current.x &lt;= range.to.x) {\n                    return *this;\n</code></pre> <pre><code>static void AThread::interruptionPoint()\n</code></pre> <p>Interruption point</p> <p>If the interruption flag is raised for the caller thread then flag is reset and AThread::Interrupted exception is thrown, efficiently stopping the task execution and safely freeing resources with C++'s RAII feature.</p> <p>AUI_THREADPOOL, AUI_THREADPOOL_X, AThreadPool::enqueue, AUI_ENTRY handle AThread::Interrupted, so throwing AThread::Interrupted is safe.</p> <pre><code>void AThread::join()\n</code></pre> <p>Waits for thread to be finished.</p> <pre><code>static const _&lt;AAbstractThread&gt;&amp; AThread::main()\n</code></pre> <p>Returns main thread of the application.</p> <pre><code>static void AThread::processMessages()\n</code></pre> <p>Processes messages from other threads of current thread. Called by framework itself using IEventLoop.</p> <pre><code>static void AThread::setName(AString name)\n</code></pre> Arguments <code>name</code>  new name of the thread <p>Sets name of the current thread for debugger.</p> <pre><code>static void AThread::sleep(std::chrono::milliseconds duration)\n</code></pre> <p>Sleep for specified duration.        Most operation systems guarantee that elasped time will be greater than specified.        <code>AThread::interrupt()</code> is supported.</p> Arguments <code>duration</code>  sleep duration. <pre><code>void AThread::start()\n</code></pre> <p>Start thread execution.</p> <p>Examples:</p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n    }\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    high_resolution_clock::time_point mStartTime = high_resolution_clock::now();\n</code></pre>"},{"location":"athread/#AThread::current","title":"current","text":""},{"location":"athread/#AThread::interruptionPoint","title":"interruptionPoint","text":""},{"location":"athread/#AThread::join","title":"join","text":""},{"location":"athread/#AThread::main","title":"main","text":""},{"location":"athread/#AThread::processMessages","title":"processMessages","text":""},{"location":"athread/#AThread::setName","title":"setName","text":""},{"location":"athread/#AThread::sleep","title":"sleep","text":""},{"location":"athread/#AThread::start","title":"start","text":""},{"location":"athreadpool/","title":"AThreadPool","text":"<p>Thread pool implementation.</p> Header:<code>#include &lt;AUI/Thread/AThreadPool.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"athreadpool/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n                for (int x = 0; x &lt; mSize.x; ++x) {\n                    glm::ivec2 i { x, y };\n                    get(mNextPopulation, i) = [&amp;] {\n                        auto around = cellsAround(i);\n</code></pre></p>"},{"location":"athreadpool/#public-types","title":"Public Types","text":"<p><code>class AThreadPool::Worker</code></p> <p>Empty structure.</p> <p><code>enum AThreadPool::Priority</code></p> Constant Description <code>Priority::PRIORITY_HIGHEST</code> <code>Priority::PRIORITY_MEDIUM</code> <code>Priority::PRIORITY_LOWEST</code> <p><code>class AThreadPool::TryLaterException</code></p> <p>Empty structure.</p>"},{"location":"athreadpool/#AThreadPool::Worker","title":"Worker","text":""},{"location":"athreadpool/#AThreadPool::Priority","title":"Priority","text":""},{"location":"athreadpool/#AThreadPool::TryLaterException","title":"TryLaterException","text":""},{"location":"athreadpool/#public-methods","title":"Public Methods","text":"<pre><code>AThreadPool::AThreadPool(size_t size)\n</code></pre> <p>Initializes the thread pool with size of threads.</p> Arguments <code>size</code>  thread count to initialize. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n                for (int x = 0; x &lt; mSize.x; ++x) {\n                    glm::ivec2 i { x, y };\n                    get(mNextPopulation, i) = [&amp;] {\n                        auto around = cellsAround(i);\n</code></pre> <pre><code>AThreadPool::AThreadPool()\n</code></pre> <p>Initializes the thread pool with <code>max(std::hardware_concurrency() - 1, 2)</code> of threads or --aui-threadpool-size=SIZE passed to your application.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n                for (int x = 0; x &lt; mSize.x; ++x) {\n                    glm::ivec2 i { x, y };\n                    get(mNextPopulation, i) = [&amp;] {\n                        auto around = cellsAround(i);\n</code></pre> <pre><code>static AThreadPool&amp; AThreadPool::global()\n</code></pre> <p>Global thread pool created with the default constructor.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n                for (int x = 0; x &lt; mSize.x; ++x) {\n                    glm::ivec2 i { x, y };\n                    get(mNextPopulation, i) = [&amp;] {\n                        auto around = cellsAround(i);\n</code></pre> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>struct GlobalStyle {\n    GlobalStyle() {\n        AStylesheet::global().addRules({\n          {\n            t&lt;CellView&gt;(),\n            FixedSize { 26_dp },\n            BackgroundSolid { 0xdedede_rgb },\n            Border { 1_px, 0xeaeaea_rgb },\n</code></pre> <pre><code>template&lt;typename Iterator, typename Functor &gt;\nauto AThreadPool::parallel(Iterator begin, Iterator end, Functor&amp;&amp; functor)\n</code></pre> Arguments <code>begin</code>  range begin <code>end</code>  range end <code>functor</code>  a functor of the following signature: ```cpp Result(Iterator begin, Iterator end) ``` Returns future set per thread (i.e. for 8 items on a 4-core processor there will be 4 futures)   Performance note       When this function is used to write to the source data it would not be L1-cache friendly. Consider writing      results to another location.    <p>Parallels work of some range, grouping tasks per thread (i.e. for 8 items on a 4-core processor each core will process 2 items)</p>"},{"location":"athreadpool/#AThreadPool::AThreadPool","title":"constructor","text":""},{"location":"athreadpool/#AThreadPool::global","title":"global","text":""},{"location":"athreadpool/#AThreadPool::parallel","title":"parallel","text":""},{"location":"atimer/","title":"ATimer","text":"<p>Async timer.</p> Header:<code>#include &lt;AUI/Common/ATimer.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"atimer/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>        mTimer-&gt;start();\n    }\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    high_resolution_clock::time_point mStartTime = high_resolution_clock::now();\n    AProperty&lt;high_resolution_clock::time_point&gt; mCurrentTime;\n    AProperty&lt;high_resolution_clock::duration&gt; mDuration = 30s;\n\n    APropertyPrecomputed&lt;high_resolution_clock::duration&gt; mElapsedTime = [&amp;] {\n</code></pre></p>"},{"location":"atouchscreenkeyboardpolicy/","title":"ATouchscreenKeyboardPolicy","text":"<p>Determines how window handles showing/hiding touchscreen</p> Header:<code>#include &lt;AUI/Platform/ATouchscreenKeyboardPolicy.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atouchscreenkeyboardpolicy/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"atouchscroller/","title":"ATouchScroller","text":"<p>Utility object that helps with touchscreen scroll events.</p> Header:<code>#include &lt;AUI/Util/ATouchScroller.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atouchscroller/#detailed-description","title":"Detailed Description","text":"<p>To use this class, you have to pass APointerPressedEvent APointerReleasedEvent to handlePointerPressed and handlePointerReleased methods accordingly. To receive scroll value, use handlePointerMove method.</p>"},{"location":"atouchscroller/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>float INITIAL_ACCELERATION_COEFFICIENT</code></p> <p>Initial acceleration after pointer released is defined by direction of pointer moving and this coefficient</p> <p><code>AMetric THRESHOLD</code></p> <p>Distance that pointer have to pass in order to treat pointer move events as scroll events.</p>"},{"location":"atouchscroller/#ATouchScroller::INITIAL_ACCELERATION_COEFFICIENT","title":"INITIAL_ACCELERATION_COEFFICIENT","text":""},{"location":"atouchscroller/#ATouchScroller::THRESHOLD","title":"THRESHOLD","text":""},{"location":"atouchscroller/#public-methods","title":"Public Methods","text":"<pre><code>AOptional&lt;glm::ivec2&gt; ATouchScroller::gatherKineticScrollValue()\n</code></pre> Returns std::nullopt if ATouchScroller is not in kinetic scroll state; value for kinetic scroll otherwise. <p>This method should be called every render frame in order to make continuous kinetic scroll.</p> <pre><code>glm::ivec2 ATouchScroller::handlePointerMove(glm::vec2 pos)\n</code></pre> <p>Handles pointer move events.</p> Arguments <code>pos</code>  position of the event in relation to view that used ATouchScroller. Returns the amount of scroll in pixels. <pre><code>void ATouchScroller::handlePointerPressed(const APointerPressedEvent&amp; e)\n</code></pre> <p>Handles pointer pressed events.</p> <pre><code>void ATouchScroller::handlePointerReleased(const APointerReleasedEvent&amp; e)\n</code></pre> <p>Handles pointer released events.</p>"},{"location":"atouchscroller/#ATouchScroller::gatherKineticScrollValue","title":"gatherKineticScrollValue","text":""},{"location":"atouchscroller/#ATouchScroller::handlePointerMove","title":"handlePointerMove","text":""},{"location":"atouchscroller/#ATouchScroller::handlePointerPressed","title":"handlePointerPressed","text":""},{"location":"atouchscroller/#ATouchScroller::handlePointerReleased","title":"handlePointerReleased","text":""},{"location":"atreemodel/","title":"ATreeModel","text":"<p>Basic implementation of ITreeModel.</p> Header:<code>#include &lt;AUI/Model/ATreeModel.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"atreemodel/#public-types","title":"Public Types","text":"<p><code>struct ATreeModel::Item</code></p> <p>Empty structure.</p>"},{"location":"atreemodel/#ATreeModel::Item","title":"Item","text":""},{"location":"atreemodelindex/","title":"ATreeModelIndex","text":"<p>Valid index of ITreeModel.</p> Header:<code>#include &lt;AUI/Model/ATreeModelIndex.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"atreemodelindex/#public-types","title":"Public Types","text":"<p><code>class ATreeModelIndex::Exception</code></p> <p>Empty structure.</p>"},{"location":"atreemodelindex/#ATreeModelIndex::Exception","title":"Exception","text":""},{"location":"atreemodelindex/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>struct{} ROOT</code></p> <p>Tag type to define root vertex.</p> <p>Use ATreeModelIndex::ROOT to reference.</p>"},{"location":"atreemodelindex/#ATreeModelIndex::ROOT","title":"ROOT","text":""},{"location":"atreemodelindex/#public-methods","title":"Public Methods","text":"<pre><code>explicit ATreeModelIndex::ATreeModelIndex(std::size_t row, std::size_t column, std::any userdata)\n</code></pre> Arguments <code>row</code>  row of the vertex relative to it's parent. <code>column</code>  column of the vertex relative to it's parent. <code>userdata</code>  userdata stored in this vertex. <pre><code>T ATreeModelIndex::as()\n</code></pre> <p>any_cast the external user data stored in this vertex.</p> <pre><code>std::size_t ATreeModelIndex::column()\n</code></pre> <p>column of the vertex relative to it's parent.</p> <pre><code>std::size_t ATreeModelIndex::row()\n</code></pre> <p>row of the vertex relative to it's parent.</p> <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>    template&lt;typename T&gt;\n    _&lt;AView&gt; presentation(AProperty&lt;T&gt;&amp; property);\n\n    template&lt;typename T&gt;\n    _&lt;AView&gt; row(AString title, AProperty&lt;T&gt;&amp; property);\n\n    void drop();\n    void toggleEdit();\n};\n</code></pre>"},{"location":"atreemodelindex/#ATreeModelIndex::ATreeModelIndex","title":"constructor","text":""},{"location":"atreemodelindex/#ATreeModelIndex::as","title":"as","text":""},{"location":"atreemodelindex/#ATreeModelIndex::column","title":"column","text":""},{"location":"atreemodelindex/#ATreeModelIndex::row","title":"row","text":""},{"location":"atreeview/","title":"ATreeView","text":"<p>Displays a tree model of strings.</p> <p></p> Header:<code>#include &lt;AUI/View/ATreeView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"atreeview/#detailed-description","title":"Detailed Description","text":"<p>ATreeView provides view of string-capable ITreeModel objects.</p>"},{"location":"audpsocket/","title":"AUdpSocket","text":"<p>A bidirectional UDP socket.</p> Header:<code>#include &lt;AUI/Network/AUdpSocket.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::network)</code>"},{"location":"audpsocket/#public-methods","title":"Public Methods","text":"<pre><code>AUdpSocket::AUdpSocket(uint16_t port)\n</code></pre> <p>Creates socket</p> Arguments <code>port</code>  port <pre><code>AUdpSocket::AUdpSocket()\n</code></pre> <p>Creates socket with random port (used for \"client\" socket)</p> <pre><code>void AUdpSocket::read(AByteBuffer&amp; buf, AInet4Address&amp; dst)\n</code></pre> <p>Read data.</p> Arguments <code>buf</code>  (out) received data <code>dst</code>  (out) sender address <pre><code>void AUdpSocket::write(AByteBufferView buf, const AInet4Address&amp; dst)\n</code></pre> <p>Sends data by address.</p> Arguments <code>buf</code>  data buffer <code>dst</code>  destination delivery address"},{"location":"audpsocket/#AUdpSocket::AUdpSocket","title":"constructor","text":""},{"location":"audpsocket/#AUdpSocket::read","title":"read","text":""},{"location":"audpsocket/#AUdpSocket::write","title":"write","text":""},{"location":"aui-assets/","title":"AUI Assets","text":"<p>Assets (resource compiler) is a platform-agnostic feature provided by <code>aui.toolbox</code> that embeds external files to the application's or library's binary, making them available from C++ regardless of file environment. You may want to use this if you need resources such as images, sounds or any other types of files to avoid the complexity of platform-specific means to package and locate those files.</p> <p>This makes the application self-contained and reduces the surface of attack for your application and resources, as they can't be viewed or changed as easily as files lying around in user's filesystem.</p> <p>To refer to an asset file, prefix the path with colon character. See AUrl for more info.</p>"},{"location":"aui-assets/#aui_compile_assets","title":"aui_compile_assets","text":"<p>Assets can be enabled for your target with <code>aui_compile_assets</code> function in your <code>CMakeLists.txt</code>:</p> CMakeLists.txt<pre><code>project(aui.example.notes)\ncmake_minimum_required(VERSION 3.16)\n\n# Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n# auib_import(aui https://github.com/aui-framework/aui\n#             COMPONENTS core views json)\n\naui_executable(aui.example.notes)\naui_compile_assets(aui.example.notes)\n\naui_link(aui.example.notes PUBLIC aui::core aui::views aui::json)\n</code></pre> <p>Then, create <code>assets</code> directory alongside with <code>CMakeLists.txt</code>:</p> <pre><code>mkdir assets\n</code></pre> <p>Put your files to that dir:</p> <pre><code>cp test.txt assets/test.txt\n</code></pre> <p>Pitfall</p> <p>Please invoke CMake configure each time you add/remove files in <code>assets/</code>! Otherwise, these files will not appear in your program.</p> <pre><code>cd build\ncmake .. # no need to pass arguments in existing build dir\n</code></pre> <p>From now, you can use the file from C++.</p> <pre><code>\":background.png\"_url.open()\n</code></pre> <pre><code>_new&lt;AView&gt;() AUI_WITH_STYLE {\n  BackgroundImage { \":background.png\" },\n},\n</code></pre> <p>See also Minimal UI Template with Assets for a complete minimal example.</p>"},{"location":"aui-assets/#how-does-it-work","title":"How does it work","text":"<p><code>aui_compile_assets</code> adds a build time dependency to the specified target on <code>aui.toolbox</code> that generates C++ files per each file found in <code>assets/</code> directory. Those <code>*.cpp</code> files are compiled along with your target. C++ files contain a byte array that is being registered automatically to AUI's ABuiltinFiles filesystem.</p> <p><code>aui.toolbox</code> applies several transformations on a file before putting it into the <code>*.cpp</code>:</p> <ol> <li> <p>Compresses the data. Although it may be redundant for already compressed file formats such as <code>*.png</code>, it provides a     decent compression ratio for textual files, such as <code>*.svg</code>.</p> <p>Also, this makes it harder to reverse engineer asset files from your binary. This is not entirely impossible, but thanks to the compression, textual files that appear in AUI assets can't be extracted with Windows Notepad.</p> </li> <li> <p>Converts data to HEX string.</p> </li> </ol>"},{"location":"aui-assets/#examples","title":"Examples","text":"<ul> <li>App Template \u26a1</li> <li>Minimal UI Template with Assets</li> </ul>"},{"location":"aui-box-model/","title":"AUI Box Model","text":"<p>The AUI Box Model is layout structure for all types of AViews, which combines margin, padding, border, and background elements to create a visual container, defining the outer appearance of each AView as a rectangular block on-screen.</p>"},{"location":"aui-box-model/#box-key-components","title":"Box key components","text":"<ul> <li>View's content box: the area are whose size is defined by <code>AView::getContentMinimumSize()</code> and   <code>AView::getContentSize()</code>. The content area is the innermost area, wrapping view's specific contents only (i.e,   label's text); control it by implementing <code>AView::getContentMinimumWidth()</code> and   <code>AView::getContentMinimumHeight()</code>.</li> <li>View's box: the area whose size is defined by AView::size(). Use <code>ass::FixedSize</code>, <code>ass::MinSize</code> and   <code>ass::MaxSize</code> to define an acceptable size range. Use <code>ass::Padding</code> to add a blank space between view's box   and view's context box.</li> </ul> <p>A view is responsible to handle its padding properly. As an AUI user, you wouldn't need to bother about that unless   you are implementing custom <code>AView::render()</code>.</p> <p>BackgroundSolid and similar ass properties are fit into this box.</p> <p>Border property outlines this box from the inner side, and never affects the layout; it's just a   visual trait.</p> <ul> <li>View's margin: the margin is the outermost layer, wrapping the content, padding, and border as whitespace between   this box and other elements; control it using <code>ass::Margin</code>.</li> </ul> <p>Layout manager of view's parent is responsible to handling margin properly. All   layout managers tend to honor children margins; with an exception to AWindow (it's   margin has no effect) and AAbsoluteLayout (positioning and sizing is defined manually). As an AUI user, you   wouldn't need to bother about that unless you are implementing custom layout manager.</p> <p>In this example, the equally sized boxes are produced with <code>FixedSize</code>, <code>MinSize</code> and <code>MaxSize</code>, respectively. <code>FixedSize</code> will always acquire the specified size, <code>MinSize</code> specifies the minimum size that can potentially grow further, and <code>MaxSize</code> restricts Expanding by specified size. <pre><code>using namespace declarative;\nusing namespace ass;\n\nstatic auto testView = [] {\n    return Centered {\n        Label { \"all boxes should be equal\" } AUI_WITH_STYLE {\n              Border { 1_px, AColor::BLACK },\n              Margin { 0 },\n              Padding { 0 },\n              Expanding {},\n            },\n    } &lt;&lt; \".test\";\n};\n\nmTestWindow-&gt;setContents(Vertical {\n  Centered {\n    testView() AUI_WITH_STYLE { Padding { 10_dp }, Border { 1_px, AColor::BLACK }, FixedSize { 200_dp, {} } },\n  },\n  Centered {\n    testView() AUI_WITH_STYLE { Padding { 10_dp }, Border { 1_px, AColor::BLACK }, MinSize { 200_dp, {} } },\n  },\n  Centered {\n    testView() AUI_WITH_STYLE { Padding { 10_dp }, Border { 1_px, AColor::BLACK }, MaxSize { 200_dp, {} }, Expanding {} },\n  },\n});\n</code></pre> </p>"},{"location":"aui-box-model/#comparison-to-css","title":"Comparison to CSS","text":"<p>AUI shares principles with web technologies with some exceptions. In AUI:</p> <ul> <li>border never affects layout</li> <li>element's size includes padding, thus it differs from \"content area\"</li> </ul> <p>AUI's box model is equal to CSS's \"alternate box model\", with an exception to border.</p>"},{"location":"aui-command-line-arguments/","title":"AUI Command Line Arguments","text":""},{"location":"aui-command-line-arguments/#aui-renderer","title":"aui-renderer","text":"<p>Overrides render engine.</p> <pre><code>./your_app --aui-renderer=gl\n</code></pre> Renderer Command line argument Platform OpenGL <code>gl</code> WindowsLinuxmacOS Software <code>soft</code> WindowsLinuxmacOS DirectX11 <code>dx11</code>"},{"location":"aui-command-line-arguments/#aui-threadpool-size","title":"aui-threadpool-size","text":"<p>Overrides default thread pool size.</p> <pre><code>./your_app --aui-threadpool-size=8\n</code></pre>"},{"location":"aui-configure-flags/","title":"AUI Configure Flags","text":"<p>These configuration flags are set on CMake configure flag before building, i.e.:</p> <pre><code>cd aui\nmkdir build\ncd build\ncmake .. -DAUI_BUILD_EXAMPLES=TRUE # &lt;-- here\ncmake --build .\n</code></pre>"},{"location":"aui-configure-flags/#common-variables","title":"Common variables","text":""},{"location":"aui-configure-flags/#AUI_APP_PACKAGING","title":"AUI_APP_PACKAGING","text":"<p>Specifies the desired packaging method. This variable accepts CPack generator or one of the packaging methods provided by AUI. See App Packaging for more info.</p>"},{"location":"aui-configure-flags/#aui_catch_unhandled","title":"AUI_CATCH_UNHANDLED","text":"<p>Whether catch unhandled exceptions in the root of event loops or not. Might be useful to set <code>AUI_CATCH_UNHANDLED=0</code> for debugging.</p>"},{"location":"aui-configure-flags/#aui_coroutines","title":"AUI_COROUTINES","text":"<p>Whether to use C++ 20 coroutines support.</p>"},{"location":"aui-configure-flags/#aui_enable_asan","title":"AUI_ENABLE_ASAN","text":"<p>Whether to use AddressSanitizer.</p>"},{"location":"aui-configure-flags/#aui_profiling","title":"AUI_PROFILING","text":"<p>When <code>true</code>, AUI profiling features are enabled. This means \"Performance\" tab in devtools would appear and show performance information. See profiling</p>"},{"location":"aui-configure-flags/#aui_show_touches","title":"AUI_SHOW_TOUCHES","text":"<p>When <code>true</code>, shows touches visually (like in Android Developer Tools) and performs additional trace logging on touches.</p>"},{"location":"aui-configure-flags/#auibuild","title":"aui.build","text":""},{"location":"aui-configure-flags/#aui_build_examples","title":"AUI_BUILD_EXAMPLES","text":"<p>Whether build examples or not.</p>"},{"location":"aui-configure-flags/#AUI_BUILD_FOR","title":"AUI_BUILD_FOR","text":"<p>Specifies target platform for cross-compilation (see cross-compiling).</p>"},{"location":"aui-configure-flags/#AUIB_CACHE_DIR","title":"AUIB_CACHE_DIR","text":"<p>Changes ~/.aui (AUI.Boot Cache Dir).</p> <p>Can be defined as environment variable.</p>"},{"location":"aui-configure-flags/#aui_install_runtime_dependencies","title":"AUI_INSTALL_RUNTIME_DEPENDENCIES","text":"<p>When <code>true</code>, all AUI's dependencies will be installed along with it. WARNING on Linux doing <code>make install</code> with <code>AUI_INSTALL_RUNTIME_DEPENDENCIES=TRUE</code> is dangerous and may cause system instability. It will replace some system libraries with AUI's ones (i.e. <code>libssl</code>, <code>libcrypto</code>, <code>GLEW</code>, etc...) which may produce the following messages:</p> <pre><code>libssl.so.1.0.0: no version information available (required by openssl)\n</code></pre>"},{"location":"aui-configure-flags/#aui_no_hidpi","title":"AUI_NO_HIDPI","text":"<p>Disables HIDPI. (Windows (operating system) only)</p>"},{"location":"aui-configure-flags/#aui_no_tests","title":"AUI_NO_TESTS","text":"<p>Disables tests.</p>"},{"location":"aui-configure-flags/#aui_shared_ptr_find_instances","title":"AUI_SHARED_PTR_FIND_INSTANCES","text":"<p>Adds <code>printAllInstances()</code> to AUI's shared pointer type (<code>_</code>) which prints stacktrace from constructor of every instance of <code>shared_ptr</code> (<code>_</code>) pointing to that object. Made for debugging purposes to find cycling and unwanted pointers. Dramatically slows the application's performance.</p>"},{"location":"aui-configure-flags/#build_shared_libs","title":"BUILD_SHARED_LIBS","text":"<p>When evaluates to <code>true</code>, libraries are built as shared, as static otherwise.</p> <p>When AUI_BUILD_FOR is set, <code>BUILD_SHARED_LIBS</code> is overwritten to <code>false</code>  (see cross-compiling)</p>"},{"location":"aui-configure-flags/#aui_ios_code_signing_required","title":"AUI_IOS_CODE_SIGNING_REQUIRED","text":"<p>Disables code signing step on iOS.</p>"},{"location":"aui-configure-flags/#auiboot-specific","title":"aui.boot-specific","text":"<p>See Variables.</p>"},{"location":"aui-contacts/","title":"AUI Contacts","text":"<p>Example's page</p> <p>This page describes an example listed in ui category.</p> <p>Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <p></p> <p>UI is defined using a declarative syntax, where the structure and layout of the UI are specified as a series of function calls.</p> <p>The application uses an AProperty named <code>mContacts</code> to store a vector of contact objects. Each contact object has properties like <code>displayName</code>, <code>note</code>, etc.</p>"},{"location":"aui-contacts/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"aui-contacts/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.contacts)\n\naui_link(aui.example.contacts PRIVATE aui::core aui::views)\n</code></pre>"},{"location":"aui-contacts/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;range/v3/all.hpp&gt;\n#include &lt;AUI/View/AForEachUI.h&gt;\n#include &lt;AUI/Platform/Entry.h&gt;\n#include \"AUI/Platform/AWindow.h\"\n#include \"AUI/Util/UIBuildingHelpers.h\"\n#include \"AUI/View/AScrollArea.h\"\n#include \"AUI/Model/AListModel.h\"\n#include &lt;AUI/View/ATextField.h&gt;\n#include &lt;AUI/View/AText.h&gt;\n#include \"model/PredefinedContacts.h\"\n\n#include &lt;view/ContactDetailsView.h&gt;\n#include &lt;view/common.h&gt;\n#include &lt;AUI/View/ASpacerFixed.h&gt;\n#include \"AUI/Platform/AMessageBox.h\"\n\nusing namespace declarative;\nusing namespace ass;\nusing namespace std::chrono_literals;\n\nstatic constexpr auto CONTACTS_SORT = ranges::actions::sort(std::less {}, [](const _&lt;Contact&gt;&amp; c) -&gt; decltype(auto) { return *c-&gt;displayName; });\n\nstatic auto groupLetter(const AString&amp; s) { return s.empty() ? AChar(U'_') : s.first(); }\n\nclass ContactsWindow : public AWindow {\npublic:\n    ContactsWindow() : AWindow(\"AUI Contacts\", 600_dp, 300_dp) {\n        setContents(\n            Horizontal {\n              AScrollArea::Builder()\n                      .withContents(\n                          Vertical {\n                            SpacerFixed(8_dp),\n                            _new&lt;ATextField&gt;() &amp;&amp; mSearchQuery,\n                            SpacerFixed(8_dp),\n                            AText::fromString(predefined::DISCLAIMER) AUI_WITH_STYLE { ATextAlign::CENTER },\n                            SpacerFixed(8_dp),\n                            CustomLayout {} &amp; mSearchQuery.readProjected([&amp;](const AString&amp; q) {\n                                if (q.empty()) {\n                                    return indexedList();\n                                }\n                                return searchQueryList();\n                            }),\n                            Label { AUI_REACT(\"{} contact(s)\"_format(mContactCount)) }\n                                &amp; mSearchQuery.readProjected([](const AString&amp; s) { return s.empty(); }) &gt; &amp;AView::setVisible\n                                 AUI_WITH_STYLE { FontSize { 10_pt }, ATextAlign::CENTER, Margin { 8_dp } },\n                          } AUI_WITH_STYLE { Padding(0, 8_dp) })\n                      .build() AUI_WITH_STYLE { Expanding(0, 1), MinSize(200_dp) },\n\n              CustomLayout::Expanding {} &amp; mSelectedContact.readProjected([this](const _&lt;Contact&gt;&amp; selectedContact) -&gt; _&lt;AView&gt; {\n                  auto editor = contactDetails(selectedContact);\n                  if (editor != nullptr) {\n                      connect(selectedContact-&gt;displayName.changed, editor, [this] {\n                          *mContacts.writeScope() |= CONTACTS_SORT;\n                      });\n                      connect(editor-&gt;deleteAction, me::deleteCurrentContact);\n                  }\n                  return editor;\n              }) AUI_WITH_STYLE { Expanding(), MinSize(300_dp), BackgroundSolid { AColor::WHITE } },\n            } AUI_WITH_STYLE {\n              Padding(0),\n            });\n    }\n\nprivate:\n    AProperty&lt;AVector&lt;_&lt;Contact&gt;&gt;&gt; mContacts =\n            predefined::PERSONS | ranges::views::transform([](Contact&amp; p) { return _new&lt;Contact&gt;(std::move(p)); }) |\n            ranges::to_vector | CONTACTS_SORT;\n    APropertyPrecomputed&lt;std::size_t&gt; mContactCount = [this] { return mContacts-&gt;size(); };\n    AProperty&lt;_&lt;Contact&gt;&gt; mSelectedContact = nullptr;\n    AProperty&lt;AString&gt; mSearchQuery;\n    APropertyPrecomputed&lt;AString&gt; mSearchQueryLowercased = [this] { return mSearchQuery-&gt;lowercase(); };\n\n    void deleteCurrentContact() {\n        if (mSelectedContact == nullptr) {\n            return;\n        }\n        if (AMessageBox::show(this,\n                              \"Do you really want to delete?\",\n                              \"This action is irreversible!\",\n                              AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n            return;\n        }\n        mContacts.writeScope()-&gt;removeFirst(mSelectedContact);\n        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n            return Vertical {\n                Label { firstLetter } AUI_WITH_STYLE {\n                                        Opacity(0.5f),\n                                        Padding { 12_dp, 0, 4_dp },\n                                        Margin { 0 },\n                                        FontSize { 8_pt },\n                                      },\n                common_views::divider(),\n                AUI_DECLARATIVE_FOR(i, group, AVerticalLayout) {\n                    ALogger::info(\"Test\") &lt;&lt; \"Computing view for item \" &lt;&lt; i-&gt;displayName;\n                    return contactPreview(i);\n                },\n            };\n        };\n    }\n\n    _&lt;AView&gt; searchQueryList() {\n        auto searchFilter = ranges::views::filter([&amp;](const _&lt;Contact&gt;&amp; c) {\n            for (const auto&amp; field : { c-&gt;displayName, c-&gt;note }) {\n                if (field-&gt;lowercase().contains(*mSearchQueryLowercased)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n        return AUI_DECLARATIVE_FOR(i, *mContacts | searchFilter, AVerticalLayout) {\n            return contactPreview(i);\n        };\n    }\n\n    _&lt;AView&gt; contactPreview(const _&lt;Contact&gt;&amp; contact) {\n        return Vertical {\n            Label { AUI_REACT(contact-&gt;displayName) } AUI_WITH_STYLE { Padding { 8_dp, 0 }, Margin { 0 }, ATextOverflow::ELLIPSIS },\n            common_views::divider(),\n        } AUI_LET {\n            connect(it-&gt;clicked, [this, contact] { mSelectedContact = contact; });\n        };\n    }\n\n    _&lt;ContactDetailsView&gt; contactDetails(const _&lt;Contact&gt;&amp; contact) {\n        if (!contact) {\n            return nullptr;\n        }\n        return _new&lt;ContactDetailsView&gt;(contact);\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;ContactsWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"aui-contacts/#srcmodelcontacth","title":"src/model/Contact.h","text":"<pre><code>// Copyright (C) 2020-2025 Alex2772 and Contributors\n//\n// SPDX-License-Identifier: MPL-2.0\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n#pragma once\n\n#include &lt;AUI/Common/AObject.h&gt;\n#include \"AUI/Common/AProperty.h\"\n\nstruct Contact {\n    AProperty&lt;AString&gt; displayName;\n    AProperty&lt;AString&gt; phone;\n    AProperty&lt;AString&gt; address;\n    AProperty&lt;AString&gt; email;\n    AProperty&lt;AString&gt; homepage;\n    AProperty&lt;AString&gt; note;\n};\n</code></pre>"},{"location":"aui-contacts/#srcmodelpredefinedcontactsh","title":"src/model/PredefinedContacts.h","text":"<pre><code>// Copyright (C) 2020-2025 Alex2772 and Contributors\n//\n// SPDX-License-Identifier: MPL-2.0\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n#include \"Contact.h\"\n\nnamespace predefined {\nstatic constexpr auto DISCLAIMER = \"Any similarity to actual persons, living or dead, that appear in this C++ program, are purely coincidental\";\ninline std::array PERSONS = {\n  Contact{ .displayName = \"Bryce Adelstein Lelbach\" },\n  Contact{ .displayName = \"Matt Austern\" },\n  Contact{ .displayName = \"Aaron Ballman\" },\n  Contact{ .displayName = \"JF Bastien\" },\n  Contact{ .displayName = \"Dean Michael Berris\" },\n  Contact{ .displayName = \"Hans Boehm\" },\n  Contact{ .displayName = \"Chandler Carruth\" },\n  Contact{ .displayName = \"Stephen D. Clamage\" },\n  Contact{ .displayName = \"Ben Craig\" },\n  Contact{ .displayName = \"Guy Davidson\" },\n  Contact{ .displayName = \"Hana Dus\u00edkov\u00e1\" },\n  Contact{ .displayName = \"Stefanus Du Toit\" },\n  Contact{ .displayName = \"Glen Fernandes\" },\n  Contact{ .displayName = \"Marco Foco\" },\n  Contact{ .displayName = \"J. Daniel Garcia\" },\n  Contact{ .displayName = \"Peter Gottschling\" },\n  Contact{ .displayName = \"Bernhard Manfred Gruber\" },\n  Contact{ .displayName = \"Michael Hava\" },\n  Contact{ .displayName = \"Howard Hinnant\" },\n  Contact{ .displayName = \"Tom Honermann\" },\n  Contact{ .displayName = \"Erich Keane\" },\n  Contact{ .displayName = \"Kyle Kloepper\" },\n  Contact{ .displayName = \"Dietmar K\u00fchl\" },\n  Contact{ .displayName = \"Inbal Levi\" },\n  Contact{ .displayName = \"Lisa Lippincott\" },\n  Contact{ .displayName = \"William M. (Mike) Miller\" },\n  Contact{ .displayName = \"Clark Nelson\" },\n  Contact{ .displayName = \"Eric Niebler\" },\n  Contact{ .displayName = \"Roger Orr\" },\n  Contact{ .displayName = \"P.J. Plauger\" },\n  Contact{ .displayName = \"Antony Polukhin\" },\n  Contact{ .displayName = \"Mateusz Pusz\" },\n  Contact{ .displayName = \"Nina Dinka Ranns\" },\n  Contact{ .displayName = \"Bill Seymour\" },\n  Contact{ .displayName = \"Peter Sommerlad\" },\n  Contact{ .displayName = \"Bryan St. Amour\" },\n  Contact{ .displayName = \"Bjarne Stroustrup\" },\n  Contact{ .displayName = \"Herb Sutter\" },\n  Contact{ .displayName = \"Andrew Sutton\" },\n  Contact{ .displayName = \"Daveed Vandevoorde\" },\n  Contact{ .displayName = \"JC van Winkel\" },\n  Contact{ .displayName = \"Vassil Vassilev\" },\n  Contact{ .displayName = \"Ville Voutilainen\" },\n  Contact{ .displayName = \"Michael Wong\" },\n  Contact{ .displayName = \"Jeffrey Yasskin\" },\n  Contact{ .displayName = \"Niall Douglas\" },\n};\n}\n</code></pre>"},{"location":"aui-contacts/#srcviewcontactdetailsviewh","title":"src/view/ContactDetailsView.h","text":"<pre><code>#pragma once\n\n#include &lt;model/Contact.h&gt;\n#include &lt;AUI/View/AViewContainer.h&gt;\n\nclass ContactDetailsView : public AViewContainerBase {\npublic:\n    ContactDetailsView(_&lt;Contact&gt; contact);\n\nsignals:\n    emits&lt;&gt; deleteAction;\n\nprivate:\n    _&lt;Contact&gt; mContact;\n    _&lt;Contact&gt; mOriginalContact;\n    AProperty&lt;bool&gt; mEditorMode = false;\n\n    template&lt;typename T&gt;\n    _&lt;AView&gt; presentation(AProperty&lt;T&gt;&amp; property);\n\n    template&lt;typename T&gt;\n    _&lt;AView&gt; row(AString title, AProperty&lt;T&gt;&amp; property);\n\n    void drop();\n    void toggleEdit();\n};\n</code></pre>"},{"location":"aui-contacts/#srcviewcontactdetailsviewcpp","title":"src/view/ContactDetailsView.cpp","text":"<pre><code>#include \"ContactDetailsView.h\"\n#include \"AUI/View/ATextField.h\"\n#include \"common.h\"\n#include \"AUI/Platform/AMessageBox.h\"\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/View/AScrollArea.h&gt;\n#include &lt;AUI/View/ATextArea.h&gt;\n\nusing namespace ass;\nusing namespace declarative;\n\nstatic constexpr auto EDITOR_CONTENT_MAX_WIDTH = 400_dp;\n\nnamespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n}\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; viewer(AProperty&lt;T&gt;&amp; property) {\n    return Label { AUI_REACT(\"{}\"_format(*property)) };\n}\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; editor(AProperty&lt;T&gt;&amp; property);\n\ntemplate &lt;&gt;\n_&lt;AView&gt; editor(AProperty&lt;AString&gt;&amp; property) {\n    return _new&lt;ATextField&gt;() &amp;&amp; property;\n}\n}   // namespace\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; ContactDetailsView::presentation(AProperty&lt;T&gt;&amp; property) {\n    if (mEditorMode) {\n        return editor(property) &lt;&lt; \".row-value\";\n    }\n    return viewer(property) &lt;&lt; \".row-value\";\n}\n\nContactDetailsView::ContactDetailsView(_&lt;Contact&gt; contact) : mContact(std::move(contact)) {\n    mOriginalContact = mContact;\n    setExtraStylesheet(AStylesheet {\n      {\n        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n    connect(mEditorMode, [this] {\n        setContents(Vertical::Expanding {\n          AScrollArea::Builder().withContents(Centered {\n            Vertical::Expanding {\n              Horizontal {\n                profilePhoto(mContact),\n                Centered::Expanding {\n                  presentation(mContact-&gt;displayName) AUI_WITH_STYLE { FontSize { 12_pt } },\n                },\n              } AUI_WITH_STYLE { Margin { 8_dp, {} }, LayoutSpacing { 4_dp } },\n              row(\"Phone\", mContact-&gt;phone),\n              row(\"Address\", mContact-&gt;address),\n              row(\"Email\", mContact-&gt;email),\n              row(\"Homepage\", mContact-&gt;homepage),\n              Horizontal::Expanding {\n                Vertical {\n                  Label { \"Note\" } AUI_WITH_STYLE { FixedSize { 100_dp, {} }, Opacity { 0.5f }, ATextAlign::RIGHT },\n                },\n                _new&lt;ATextArea&gt;() &amp;&amp; mContact-&gt;note,\n              } AUI_WITH_STYLE {\n                    MinSize { {}, 100_dp },\n                    LayoutSpacing { 4_dp },\n                  },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(8_dp), LayoutSpacing { 4_dp } },\n          }),\n          Centered {\n            Horizontal::Expanding {\n              SpacerExpanding(),\n              Button { Label { mEditorMode ? \"Discard\" : \"Delete\" }, {me::drop} },\n              Button { Label { mEditorMode ? \"Done\" : \"Edit\" }, {me::toggleEdit} },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(4_dp), LayoutSpacing { 4_dp } },\n          },\n        });\n    });\n}\n\nvoid ContactDetailsView::drop() {\n    if (!mEditorMode) {\n        // delete\n        emit deleteAction;\n        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n\nvoid ContactDetailsView::toggleEdit() {\n    if (mEditorMode) {\n        // done\n        *mOriginalContact = std::move(*mContact);\n        mContact = mOriginalContact;\n    } else {\n        // edit\n        mContact = _new&lt;Contact&gt;(*mOriginalContact);\n    }\n    mEditorMode = !mEditorMode;\n}\n\ntemplate &lt;typename T&gt;\n_&lt;AView&gt; ContactDetailsView::row(AString title, AProperty&lt;T&gt;&amp; property) {\n    if (!mEditorMode) {\n        if (property == T {}) {\n            return nullptr;\n        }\n    }\n    return Vertical {\n        Horizontal {\n          Label { std::move(title) } AUI_WITH_STYLE { FixedSize { 100_dp, {} }, Opacity { 0.5f }, ATextAlign::RIGHT },\n          presentation(property),\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        common_views::divider(),\n    } AUI_WITH_STYLE { LayoutSpacing(4_dp) };\n}\n</code></pre>"},{"location":"aui-contacts/#srcviewcommonh","title":"src/view/common.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/View/AView.h&gt;\n\nnamespace common_views {\n_&lt;AView&gt; divider();\n}\n</code></pre>"},{"location":"aui-contacts/#srcviewcommoncpp","title":"src/view/common.cpp","text":"<pre><code>#include \"common.h\"\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n\nusing namespace ass;\nusing namespace declarative;\n\n_&lt;AView&gt; common_views::divider() {\n    return _new&lt;AView&gt;() AUI_WITH_STYLE { FixedSize { {}, 1_px }, BackgroundSolid { AColor::GRAY } };\n}\n</code></pre>"},{"location":"aui-telegram-client-auigram/","title":"AUI Telegram Client (AUIgram)","text":"<p>Example's page</p> <p>This page describes an example listed in app category.</p> <p>Using AUI Framework from perspective of a Telegram client. This project shows how to solve typical problems of a UI application (i.e., dependency management, data binding, styling, asynchronous data loading, packaging, deploying).</p> <p></p>"},{"location":"aui-telegram-client-auigram/#motivationrationale","title":"Motivation/rationale","text":"<p>We wanted some kind of project/repository to be as an example/reference project of a real life application built entirely with AUI.</p> <p>Telegram Client is a great example:</p> <ul> <li><code>tdlib</code>, which is basis of every Telegram client, uses C++</li> <li>almost everyone is familiar with Telegram</li> <li>there are many challenges for AUI, such as importing <code>tdlib</code> with aui.boot (spoiler: it does the job   perfectly), asynchronous data loading, data binding, animations, assets, full support of Windows, macOS, Linux,   Android, iOS.</li> </ul>"},{"location":"aui-telegram-client-auigram/#source-code","title":"Source Code","text":"<p>This example is located outside AUI's source tree. Checkout its repository.</p>"},{"location":"aui.boot/","title":"aui.boot","text":"<p>AUI Boot is yet another package manager based on CMake. If a library uses CMake with good CMakeLists, AUI Boot in 99% cases can provide it for you into your project without additional tweaking. It downloads the library, compiles it and places it in ~/.aui (AUI.Boot Cache Dir) folder for future reuse.</p>"},{"location":"aui.boot/#importing-aui","title":"Importing AUI","text":"<p>See AUI's repository to check out the import script with the latest version.</p> <pre><code>set(AUI_VERSION v8.0.0-rc.8) # OLD!\n\nfile(\n    DOWNLOAD \n    https://raw.githubusercontent.com/aui-framework/aui/${AUI_VERSION}/aui.boot.cmake \n    ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\nauib_import(\n    AUI https://github.com/aui-framework/aui \n    COMPONENTS core views\n    VERSION ${AUI_VERSION})\n\naui_link(YOUR_APP PUBLIC aui::core\n                         aui::views)\n</code></pre>"},{"location":"aui.boot/#PREBUILT_PACKAGES","title":"Prebuilt packages","text":"<p>AUI Boot is a source-first package manager, however, it can pull precompiled packages instead of building them locally. At the moment, GitHub Releases page with carefully formatted archive names is the only supported option. AUI follows these rules, so AUI Boot can pull precompiled package of AUI.</p> <p>To use a precompiled binary, you must specify a tag of a released version from releases page (for example, <code>v8.0.0-rc.8</code> or <code>v7.0.0-rc.2</code>). These packages are self-sufficient, i.e., all AUI's dependencies are packed into them, so it is the only downloadable thing you need to set up a development and building with AUI.</p> <p>If you would like to force AUI Boot to use precompiled binaries only, you can set AUIB_FORCE_PRECOMPILED:</p> <pre><code>cmake .. -DAUIB_FORCE_PRECOMPILED=TRUE\n</code></pre> <p>This way AUI Boot will raise an error if it can't resolve dependency without compiling it.</p> <p>If usage of precompiled binaries break your build for whatever reason, you can set AUIB_NO_PRECOMPILED:</p> <pre><code>cmake .. -DAUIB_NO_PRECOMPILED=TRUE\n</code></pre> <p>This way AUI Boot will never try to use precompiled binaries and will try to build then locally.</p>"},{"location":"aui.boot/#CI_CACHING","title":"CI caching","text":"<p>No matter using precompiled binaries or building them locally, it's convenient to cache ~/.aui (AUI.Boot Cache Dir) in your CIs:</p> <pre><code>- name: Cache AUI.BOOT deps\n  id: cache-aui-boot\n  uses: actions/cache@v3\n  env:\n    cache-name: aui-boot-${{ matrix.shared_or_static }}-${{ matrix.debug_or_release }}-${{ matrix.arch }}\n  with:\n    path: |\n      ~/.aui\n\n    key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt') }}\n    restore-keys: |\n      ${{ runner.os }}-build-${{ env.cache-name }}-\n      ${{ runner.os }}-build-\n      ${{ runner.os }}-\n</code></pre> <p>This snippet is based on GitHub's cache action example.</p> <p>GitHub used npm's <code>package-lock.json</code> in their example's primary key (<code>key</code>). We've adapted their example to AUI Boot and use <code>CMakeLists.txt</code>, as dependencies' versions are \"locked\" there.</p> <p>Using a stricter primary key <code>key</code> with a bunch of additional keys <code>restore-keys</code> is essential. If a cache hit occurs on the primary key, the cache will not be uploaded back to GitHub cache so your primary key must differ when you update dependencies.</p> <p>Don't worry updating dependencies: GitHub <code>cache</code> action will restore the cache by using one of fallback keys <code>restore-keys</code> in such case, so you would not lose build speed up. Additionally, since the cache hit occurred on non-primary key, the newer cache will be uploaded to GitHub so the subsequent builds will reuse it.</p>"},{"location":"aui.boot/#AUI_BOOT_3RDPARTY","title":"Importing 3rdparty libraries","text":"<p>For a maintained list of <code>auib_import</code>ed libraries, please visit https://github.com/aui-framework/boot.</p> <pre><code>auib_import(Boost https://github.com/boostorg/boost/releases/download/boost-1.84.0/boost-1.84.0.tar.xz\n    ARCHIVE\n    CMAKE_ARGS -DBOOST_ENABLE_CMAKE=ON\n)\n\naui_link(${PROJECT_NAME} PRIVATE Boost::boost)\n</code></pre> <p>AUI Framework has a lot of modules and functionality, however, it never pretends to be all-in-one solution for everything. We value quality over quantity. It is just a basis (framework), where you are free to put whatever building blocks you want, and we encourage you to do so, particularly, by using 3rdparty libraries. Just don't forget to obey other projects' licensing conditions, which are, in common, pretty much applicable even for proprietary software.</p> <p>As was said in the beginning of this page, if a library has a good <code>CMakeLists.txt</code> (which mostly true for all popular C++ libraries), it can be imported with AUI.Boot:</p> <pre><code># importing Sentry with AUI.Boot\nauib_import(sentry https://github.com/getsentry/sentry-native\n            VERSION 0.8.1\n            CMAKE_ARGS -DSENTRY_BACKEND=crashpad)\naui_link(YOUR_APP PUBLIC sentry::sentry)\n</code></pre> <p>The first argument to <code>auib_import</code> is the library name, which is then passed to CMake's <code>find_package</code> in order to import the library to your project. So, valid library name should be specified. You can obtain the library name from the following places:</p> <ul> <li>In common, CMake package matches repository name on GitHub.</li> <li>From library's <code>README</code>.</li> <li>If library name is incorrect, AUI.Boot prints the following message:   <pre><code>Make Error at /home/.../.aui/repo/aui/as/0337639/aui/aui.boot.cmake:1019 (message):\nAUI.Boot could not resolve dependency: sentry_bruh\n\nnote: check build logs in\n/home/.../.aui/prefix/sentry_bruh/dd0cfe775cceb4610a5d55b5c257d660\n\nnote: package names are case sensitive\n\nnote: did you mean \"sentry\"?\n</code></pre></li> </ul> <p>Take a look on the last line:   <pre><code>note: did you mean \"sentry\"?\n</code></pre> <code>sentry</code> is a valid library name that should have been passed to <code>auib_import</code>.</p> <p>The second argument to <code>auib_import</code> is the URL to the library's repository. You can copy&amp;paste it from address bar from your web browser.</p> <p>The <code>VERSION</code> argument is tag name or hash name. You can copy&amp;paste the latest release version name from GitHub Releases page of the library (1), or discover their tags (2,3,4):</p> <p></p> <p>The optional <code>CMAKE_ARGS</code> argument is arguments passed to library's CMake configure, another point of customization by AUI.Boot. These arguments are library specific; their documentation can be found on library's respective documentation pages. You won't need to use that unless you want an advanced tinkering of the library.</p> <p>After library is imported to the project, its imported target should be linked to your executable/library. As with library's name, the name of the imported target probably can be found in library's <code>README</code>. Additionally, starting from CMake version <code>3.21</code>, AUI.Boot prints a handy line on configure time when a library is imported:</p> <pre><code>Imported: sentry (sentry::sentry) (/home/.../.aui/prefix/sentry/7542ab4956cac4e96fe399e976906221) (version e1ba734)\n</code></pre> <p>Here, you can see the imported target(s) name in braces, that one should be used with <code>aui_link</code>/<code>target_link_libraries</code>. The complete library import boilerplate is:</p> <p><code>CMakeLists.txt:</code> <pre><code># importing Sentry with AUI.Boot\nauib_import(sentry https://github.com/getsentry/sentry-native\n            VERSION 0.8.1\n            CMAKE_ARGS -DSENTRY_BACKEND=crashpad)\naui_link(YOUR_APP PUBLIC sentry::sentry)\n</code></pre></p> <p><code>src/main.cpp</code>: <pre><code>#include &lt;sentry.h&gt;\n\nAUI_ENTRY {\n    sentry_options_t *options = sentry_options_new();\n    sentry_options_set_dsn(options, \"https://YOUR_KEY@oORG_ID.ingest.sentry.io/PROJECT_ID\");\n    sentry_init(options);\n\n    // your application code \u2026\n\n    sentry_close();\n};\n</code></pre></p> <p>For more libraries, please visit https://github.com/aui-framework/boot.</p>"},{"location":"aui.boot/#how-to-fix-could-not-resolve-dependency-error","title":"How to fix \"Could not resolve dependency\" error","text":"<p>Common scenario:</p> <ol> <li>Remove ~/.aui (AUI.Boot Cache Dir)</li> <li>Remove your build directory</li> </ol> <p>And try again.</p>"},{"location":"aui.boot/#looks-like-a-config-file-does-not-exist-for-your-project","title":"\"looks like a config file does not exist for your project\"","text":"<p>This means that library's maintainer didn't bother about handling <code>cmake --install</code> properly. The best option in this scenario will be forking the library and append their <code>CMakeLists.txt</code> on your own.</p> <p>You can consult with Conan Recipes or Vcpkg Ports to see how they have workarounded the broken <code>CMakeLists.txt</code> of the library.</p>"},{"location":"aui.boot/#did-you-mean-package_name","title":"\"did you mean PACKAGE_NAME?\"","text":"<p>You have mispelled the package name (the first argument to <code>auib_import</code>). Please change the first argument to <code>auib_import</code> to <code>PACKAGE_NAME</code>.</p>"},{"location":"aui.boot/#imported-target-depends-on-an-out-of-tree-file","title":"\"Imported target ... depends on an out-of-tree file\"","text":"<p>The library's maintainer have misused CMake. Follow one of possible options provided by AUI.Boot or fix the library by forking it. You can consult with Conan Recipes or Vcpkg Ports to see how they have workarounded the broken <code>CMakeLists.txt</code> of the library.</p>"},{"location":"aui.boot/#fixing-3rdparty-librarys-cmakeliststxt","title":"Fixing 3rdparty library's CMakeLists.txt","text":"<p>As was mentioned, AUI.Boot might fail to import a 3rdparty library. Reasons include:</p> <ol> <li>Misusage of CMake. Mostly, this applies to CMake's <code>install</code> family of commands. Some library maintainers might    forget to configure CMake so other CMake projects can actually use their library.</li> </ol> <p>We can't blame them because making proper CMake install export is not an out-of-the-box feature and requires proper    knowledge with testing. See this for    opinionated guidelines. 2. Lack of CMakeLists.txt. Some libraries might not even use CMake either (mostly in favor to Makefile).</p> <p>For these reasons, you might want to fix the <code>CMakeLists.txt</code> on your own by forking them. AUI Project does it for some of its dependencies:</p> <ol> <li>backtrace: implement CMakeLists.txt over Makefile: https://github.com/ianlancetaylor/libbacktrace/compare/master...aui-framework:libbacktrace:master</li> <li>zlib: arbitrary fixes: https://github.com/madler/zlib/compare/master...aui-framework:zlib:master</li> <li>OpenSSL: arbitrary fixes: https://github.com/janbar/openssl-cmake/compare/master...aui-framework:openssl-cmake:master</li> </ol> <p>Also, you can consult with Conan Recipes or Vcpkg Ports to see how they have workaround the broken <code>CMakeLists.txt</code> of the library.</p>"},{"location":"aui.boot/#using-aui-boot-without-aui","title":"Using AUI Boot without AUI","text":"<p>AUI Boot does not have any hard dependencies on AUI, so it can be used to manage dependencies on non-AUI projects.</p> <pre><code>set(AUI_VERSION v8.0.0-rc.8)\n\nfile(\n    DOWNLOAD \n    https://raw.githubusercontent.com/aui-framework/aui/${AUI_VERSION}/aui.boot.cmake \n    ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n</code></pre> <p><pre><code>if(AUIB_DISABLE)\n    find_package(fmt REQUIRED CONFIG)\n    find_package(range-v3 REQUIRED CONFIG)\nelse()\n    auib_import(fmt https://github.com/fmtlib/fmt\n                VERSION 11.2.0\n                CMAKE_ARGS -DFMT_TEST=FALSE -DFMT_DOC=FALSE)\n\n    auib_import(range-v3 https://github.com/ericniebler/range-v3\n            VERSION 0.12.0\n            CMAKE_ARGS -DRANGE_V3_DOCS=OFF -DRANGE_V3_TESTS=OFF -DRANGE_V3_EXAMPLES=OFF -DRANGE_V3_PERF=OFF -DRANGE_V3_HEADER_CHECKS=OFF)\nendif()\n</code></pre> <pre><code>target_link_libraries(YOUR_APP PUBLIC fmt::fmt-header-only range-v3::range-v3)\n</code></pre></p>"},{"location":"aui.boot/#importing-project-as-a-subdirectory","title":"Importing project as a subdirectory","text":"<p>See ADD_SUBDIRECTORY</p>"},{"location":"aui.boot/#cmake-commands","title":"CMake commands","text":""},{"location":"aui.boot/#auib_import","title":"auib_import","text":"<p>If needed, downloads and compiles project. Adds an <code>IMPORTED</code> target. Built on top of <code>find_package</code>.</p>"},{"location":"aui.boot/#signature","title":"Signature","text":"<pre><code>auib_import(&lt;PackageName&gt; &lt;URL&gt;\n            [ADD_SUBDIRECTORY]\n            [ARCHIVE]\n            [COMPONENTS components...]\n            [CONFIG_ONLY]\n            [CMAKE_WORKING_DIR workingdir.txt]\n            [PRECOMPILED_URL_PREFIX &lt;PrecompiledUrlPrefix&gt;]\n            [LINK &lt;STATIC|SHARED&gt;]\n            [REQUIRES dependencies...]\n            [VERSION version])\n</code></pre> <p>Note</p> <p>This command copies <code>*.dll</code>, <code>*.so</code> and <code>*.dylib</code> (in case of shared libraries) alongside your executables during configure time. See Runtime dependency resolution for more info.</p>"},{"location":"aui.boot/#packagename","title":"PackageName","text":"<p>Specifies the package name which will be passed to <code>find_package</code>. See Importing 3rdparty libraries.</p>"},{"location":"aui.boot/#url","title":"URL","text":"<p>URL to the git repository of the project you want to import.</p>"},{"location":"aui.boot/#AUIB_ADD_SUBDIRECTORY","title":"ADD_SUBDIRECTORY","text":"<p>See also: AUIB__AS (=FALSE|TRUE). <p>Uses <code>add_subdirectory</code> instead of <code>find_package</code> as the project importing mechanism. </p> <p>Potential use case of this is when the dependency fails to provide proper CMake install, making <code>find_package</code> unusable. If you don't care about polluting your own build tree with dependency's targets - it is a good alternative to fixing their CMake install on your own, which is a challenging task.</p> <p>This action disables usage of precompiled binary and validation.</p>"},{"location":"aui.boot/#archive","title":"ARCHIVE","text":"<p>The provided URL is pointing to zip archive instead of a git repository.</p> <p>For large dependencies, this might be faster than pulling whole repository.</p>"},{"location":"aui.boot/#config_only","title":"CONFIG_ONLY","text":"<p>Forces <code>find_package</code> to use the config mode only.</p>"},{"location":"aui.boot/#version","title":"VERSION","text":"<p>Commit hash, tag or branch name to <code>checkout</code>.</p> <p>When no version is specified, AUI.Boot defaults to using the latest version from the main branch. Once AUI.Boot discovers and locks onto a version, it will never automatically update that version, even across rebuilds. If you specify a branch name in the <code>VERSION</code> parameter instead of a specific tag or commit, the same semantics take place.</p> <p>Branch names point to moving targets - the same branch name could reference different commits at different times. Using a specific tag or hash ensures you get exactly the same code every time you build.</p> <p>AUI.Boot will emit a warning encouraging the use of either:</p> <ul> <li>Tags (e.g. <code>v1.2.3</code>) - ideal for released versions</li> <li>Commit hashes (e.g. <code>8b0e838b</code>) - perfect for specific commits or work-in-progress changes</li> </ul> <p>Note</p> <p>Despite this argument is optional, we still encourage you to use it, to \"lock\" the version. This makes your builds precisely reproducible on other machines.</p>"},{"location":"aui.boot/#components","title":"COMPONENTS","text":"<p>List of components to import which will be passed to <code>find_package</code>. Also, passed as semicolon-separated list to dependency's <code>CMakeLists.txt</code> via <code>AUIB_COMPONENTS</code> variable.</p>"},{"location":"aui.boot/#cmake_working_dir","title":"CMAKE_WORKING_DIR","text":"<p>Run cmake in specified directory, in relation to the pulled repo's root directory.</p>"},{"location":"aui.boot/#precompiled_url_prefix","title":"PRECOMPILED_URL_PREFIX","text":"<p>Instead of building the dependency from sources, try to import the precompiled binaries first.</p>"},{"location":"aui.boot/#link","title":"LINK","text":"<p>Overrides <code>BUILD_SHARED_LIBS</code> of the dependency, specifying <code>SHARED</code> or <code>STATIC</code> linking.</p>"},{"location":"aui.boot/#requires","title":"REQUIRES","text":"<p>List of the package dependencies. Every dependency's root variable (${DEPENDENCY}_ROOT) is checked for existence and validness, then it passed directly to <code>auib_import</code>ed target (via ${DEPENDENCY}_ROOT).</p> <p>It is useful when some package root is implicitly defined in your project somewhere and aui.boot does not know about it, thus does not forward.</p>"},{"location":"aui.boot/#AUIB_VARIABLES","title":"Variables","text":"<p>See AUI Configure Flags on how to set variables.</p>"},{"location":"aui.boot/#AUIB_ALL_AS","title":"AUIB_ALL_AS (=FALSE|TRUE)","text":"<p>Equivalent of setting AUIB__AS (=FALSE|TRUE) for every single library present in the project."},{"location":"aui.boot/#AUIB_LIB_AS","title":"AUIB__AS (=FALSE|TRUE) <p>Uses <code>add_subdirectory</code> instead of <code>find_package</code> as the project importing mechanism. This means that the library becomes a part of your project, within your <code>build/</code> directory. This allows changing the library's code seamlessly.</p> <p>It is useful for library developers. They can use consumer's project to change something in their library, without changing <code>CMakeLists.txt</code> of the consumer's project. Setting <code>AUIB_&lt;PackageName&gt;_AS</code> is an equivalent of passing ADD_SUBDIRECTORY to <code>auib_import</code>.</p> <p>This action disables usage of precompiled binary and validation.</p> <p>Usage:</p> <p><pre><code>cd build\ncmake .. -DAUIB_LIB_AS=ON\n</code></pre> Where 'LIB' is library project name. For example, to import AUI as a subdirectory:</p> <pre><code>cd build\ncmake .. -DAUIB_AUI_AS=ON\n</code></pre> <p>You can switch <code>AUIB_AUI_AS</code> on an existing build tree, AUI.Boot is capable of switching on-the-fly.</p> <p>During the execution of the command above, the location of the LIB is printed:</p> <pre><code>Imported: aui () (/home/user/.aui/repo/aui/as/v8.0.0-rc.1/aui) (version v8.0.0-rc.1)\n</code></pre> <p>Which points to the LIB's source tree used to build the consumer's project. You can change anything in that directory as part of your development workflow, and these changes will reflect immediately on the consumer's project.</p> <p>Your changes will not be overridden by further CMake invocations.</p> <p>You can <code>cd</code> and commit changes right from that directory as you complete your work on the library:</p> <pre><code>cd /home/user/.aui/repo/aui/as/v8.0.0-rc.1/aui\n# don't forget to checkout, we are in detached HEAD state\ngit checkout -b feat/a-new-feature\ngit commit -m \"a new feature\"\ngit remote set-url origin git@github.com/your-name/your-aui-fork\ngit push\n</code></pre>  <p>Note</p> <p>To have write access to the library's repository, it's likely you'll need to make a fork. Optionally, you can upstream your changes in the future.</p>  <p>Since you have updated the library, you may want to share your own version of the library within your project. To do this, you need to:</p> <ol> <li>Acquire the commit hash:     <pre><code>/home/user/.aui/repo/aui/as/v8.0.0-rc.1/aui $ git log\ncommit 8b0e838b8cd6274210f4c05ac096e2862c36f25e (HEAD -&gt; feat/a-new-feature, origin/feat/a-new-feature)\nAuthor: smol boi &lt;uwu@uwu.uwu&gt;\nDate:   Sun Jun 1 21:49:31 2025 +0300\n\n    Never Gonna Give You Up\n...\n</code></pre></li> <li>In your <code>CMakeLists.txt</code>, make sure the URL points to your fork, if any:     <pre><code>auib_import(aui https://github.com/your-name/your-aui-fork\n            VERSION v8.0.0-rc.8\n)\n</code></pre></li> <li>Specify commit hash in <code>VERSION</code> field:     <pre><code>auib_import(aui https://github.com/your-name/your-aui-fork\n            VERSION 8b0e838b8cd6274210f4c05ac096e2862c36f25e\n)\n</code></pre></li> <li>Commit and push to your project</li> </ol>  <p>Note</p> <p>It is common to delete a feature branch after merging. Be careful: AUI.Boot can't find a commit if it was deleted from a repository.</p>","text":""},{"location":"aui.boot/#AUIB_DISABLE","title":"AUIB_DISABLE (=FALSE|TRUE) <p>Disables aui.boot. All calls to <code>auib_import</code> are forwarded to <code>find_package</code>.</p>","text":""},{"location":"aui.boot/#auib_skip_repository_wait-falsetrue","title":"AUIB_SKIP_REPOSITORY_WAIT (=FALSE|TRUE) <p>Disables \"Waiting for repository\".</p>","text":""},{"location":"aui.boot/#AUIB_NO_PRECOMPILED","title":"AUIB_NO_PRECOMPILED (=FALSE|TRUE) <p>Disables precompiled binaries, building all dependencies locally. You may want to set up CI caching.</p>","text":""},{"location":"aui.boot/#AUIB_FORCE_PRECOMPILED","title":"AUIB_FORCE_PRECOMPILED (=FALSE|TRUE) <p>Disables local compilation. If a precompiled binary was not found, a configure-time error is raised.</p>","text":""},{"location":"aui.boot/#auib_produced_packages_self_sufficient-falsetrue","title":"AUIB_PRODUCED_PACKAGES_SELF_SUFFICIENT (=FALSE|TRUE) <p>The <code>AUIB_PRODUCED_PACKAGES_SELF_SUFFICIENT</code> flag can be used to enable self-sufficiency of packages produced with AUI Boot. This means that the dependencies required for building these packages are included in the package (<code>tar.gz</code>) archive in the <code>deps/</code> dir.</p> <p>See Producing packages with dependencies managed by AUI Boot</p>","text":""},{"location":"aui.boot/#auib_validation_level","title":"AUIB_VALIDATION_LEVEL <p>Applies a set of checks on each dependency pulled by AUI.Boot. These checks verify that the dependency follows so-called modern CMake practices. Raising this value may help to localize some errors related to the dependency in your build system that would have appeared somewhere in the future unexpectedly.</p> <p>It is a forced measure due to lack of proper CMake usage.</p> <p>All AUI's dependencies are marked with the highest validation level.</p> <p>Defaults to <code>1</code>.</p>","text":""},{"location":"aui.boot/#auib_validation_level-0","title":"AUIB_VALIDATION_LEVEL 0","text":"<p>All checks are disabled.</p>"},{"location":"aui.boot/#auib_validation_level-1","title":"AUIB_VALIDATION_LEVEL 1","text":"<p>Covers scenario: <code>cmake --install .</code> of dependency produces a valid local CMake package installation.</p> <p>Requirements:</p> <ol> <li>Dependency's installation in directory <code>A</code> can be produced with <code>cmake --install . --prefix=A</code>. A <code>find_package</code>    call with dependency's name is capable of importing the dependency's into the consumer's build system.</li> <li>Targets created as a result of calling <code>find_package</code> on the dependency can and should define properties so the    consumer can actually use the functionality provided by the dependency. If such property refer to a local file,    this file must be located in AUI.Boot's cache dir (<code>~/aui</code>). In case of dependency's dependencies (aka grand    dependencies), those be imported by a prior <code>auib_import</code>.    <pre><code>auib_import(ZLIB https://github.com/aui-framework/zlib)\nauib_import(Freetype https://github.com/freetype/freetype\n            CONFIG_ONLY\n            CMAKE_ARGS ...\n)\n# Freetype depends on ZLIB, must refer to one located in\n# ~/.aui/prefix/zlib/.../libz.a, not the system one: /usr/libz.so\n</code></pre></li> </ol> <p>As an exception, a system file can be mentioned via CMake target. System packages must be wrapped with    <code>auib_use_system_libs_begin</code>/<code>auib_use_system_libs_end</code> in such scenario.    @dontinclude aui.views/CMakeLists.txt    @skip auib_use    @until auib_use_system_libs_end</p>"},{"location":"aui.boot/#auib_validation_level-2","title":"AUIB_VALIDATION_LEVEL 2","text":"<p>Covers scenario: <code>cmake --install .</code> of dependency produces a relocatable binary package.</p> <p>Requirements:</p> <ol> <li>Implies <code>VALIDATION_LEVEL 1</code>.</li> <li>Targets and variables created as a result of calling <code>find_package</code> on the dependency cannot contain absolute    paths, with an exception to commonly available system files.</li> <li>If a target depend on another library, it should express it by referring on exported target of that library instead    of referring to its file.</li> </ol> <pre><code>target_link_libraries(awesomelib PUBLIC ${ZLIB_LIBRARIES}) # WRONG!\ntarget_link_libraries(awesomelib PUBLIC ZLIB::ZLIB) # GOOD!\n</code></pre> <p>!!! note</p> <pre><code>   AUI.Boot is capable of replacing absolute paths to libraries by their respective target names in order to support\n   legacy libraries.\n</code></pre>"},{"location":"aui.boot/#diamond-shape-graphs","title":"Diamond Shape Graphs","text":""},{"location":"aui.boot/#case-1","title":"Case 1 <p>For example, your application uses <code>aui.core</code> module, which actually uses <code>ZLIB</code>:</p> <p></p> <p>When you also want to use <code>ZLIB</code>.</p> <p>Without AUI.Boot, you'd place (and compile) another copy of <code>ZLIB</code> whose version may differ from <code>ZLIB</code> that <code>aui.core</code> uses, causing you to stuck with dependency hell:</p> <p></p> <p>With AUI.Boot, you'd not even use AUI.Boot's functions! Just use <code>find_package(ZLIB REQUIRED)</code> and link it to your application with <code>target_link_libraries(YourApplication PRIVATE ZLIB::ZLIB)</code>, because AUI.Boot forwards location of used dependencies to your project. Your application and AUI are using the same <code>ZLIB</code>:</p> <p></p>","text":""},{"location":"aui.boot/#case-2","title":"Case 2 <p>Another case is <code>OpenSSL</code> between <code>aui.crypt</code> and <code>aui.curl</code>:</p> <p></p> <p>Because <code>libcurl</code> is not a part of AUI, it uses standard CMake's function to find <code>OpenSSL</code> (<code>find_package</code>).</p>","text":""},{"location":"aui.boot/#AUIB_PRODUCING_PACKAGES","title":"Producing packages with dependencies managed by AUI Boot","text":"<p>AUI distributions published on our GitHub releases page are produced with help of AUI Boot.</p> <p>CMake-driven projects produce package configuration with configure_file:</p> <pre><code>configure_file(cmake/aui-config.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/aui-config.cmake @ONLY)\ninstall(FILES\n        ${CMAKE_CURRENT_BINARY_DIR}/aui-config.cmake\n        DESTINATION \".\")\n</code></pre> <p>Inside of <code>aui-config.cmake.in</code>, there's a line: <pre><code>@AUIB_DEPS@\n</code></pre></p> <p><code>AUIB_DEPS</code> contains cmake commands to resolve dependencies of your project. This variable is populated by <code>auib_import</code> calls inside your project during configure time. <code>AUIB_DEPS</code> contains <code>auib_import</code> calls.</p> <p>As was mentioned, AUI Boot requires specially formatted (precompiled) package names to use them. For this to work, you can call <code>auib_precompiled_binary</code> inside of your root <code>CMakeLists.txt</code> which configures <code>cpack</code> to produce <code>tar.gz</code> with properly formatted name.</p> <pre><code>auib_precompiled_binary()\n</code></pre> <p>At last, use <code>cpack</code> to produce a package.</p> <pre><code>- name: Pack\n  working-directory: ${{github.workspace}}/build\n  run: cpack . -C ${{ matrix.debug_or_release }}\n\n- name: Upload\n  uses: actions/upload-artifact@v4\n  with:\n    path: ${{github.workspace}}/build/*.tar.gz\n    name: aui ${{ runner.os }} ${{ matrix.shared_or_static }} ${{ matrix.debug_or_release }} ${{ matrix.arch }} ${{ matrix.compiler }}\n</code></pre>"},{"location":"aui.boot/#importing-aui-without-aui-boot","title":"Importing AUI without AUI Boot","text":"<p>In some cases, AUI Boot might not cover your particular needs, and you would like to build without it. It is still not a recommended way of using AUI, as it is not fully covered with tests, and you're basically trying to complicate your life by hardcoding paths in your CMake lists and thus making hardly reproducible projects. Consider asking questions about AUI Boot on our GitHub page, and we'd help to adapt AUI Boot to your use case.</p>"},{"location":"aui.boot/#building-aui-without-aui-boot","title":"Building AUI without AUI Boot <p>AUIB_DISABLE (=FALSE|TRUE) CMake configure flag can be used to replace <code>auib_import</code> calls to <code>find_package</code>. In this scenario you will need to resolve AUI's dependencies in some other way (i.e, by using Conan).</p>","text":""},{"location":"aui.boot/#using-aui-distributions-with-find_package","title":"Using AUI distributions with <code>find_package</code> <p>AUI distributions published on our GitHub releases page are self-sufficient. That is, they have AUI's dependencies bundled, so they can be used by <code>find_package</code>, without even requiring AUI Boot.</p> <pre><code>cmake_minimum_required(VERSION 3.24)\n\nproject(test_project)\n\nset(AUIB_FORCE_PRECOMPILED ON CACHE BOOL \"Force used precompiled binaries\")\nset(AUI_TEST_DEPLOY_VERSION v6.2.1 CACHE BOOL \"AUI version\")\n# raise aui.boot validation level.\nset(AUIB_VALIDATION_LEVEL 2 CACHE STRING \"Package validation level\")\n\ninclude(FetchContent)\nif (DEFINED AUI_TEST_DEPLOY_REPO)\nFetchContent_Declare(aui\n    URL ${AUI_TEST_DEPLOY_REPO}/releases/download/${AUI_TEST_DEPLOY_VERSION}/aui_linux-gnu-x86_64-static-debug.tar.gz)\nelse()\nFetchContent_Declare(aui\n    URL https://github.com/aui-framework/aui/releases/download/${AUI_TEST_DEPLOY_VERSION}/aui_linux-gnu-x86_64-static-debug.tar.gz)\nendif()\nFetchContent_MakeAvailable(aui)\nFetchContent_GetProperties(aui\n        SOURCE_DIR aui_ROOT\n)\nfind_package(aui REQUIRED)\n\naui_executable(test_project)\naui_link(test_project PUBLIC aui::core aui::views)\naui_compile_assets(test_project)\n</code></pre>","text":""},{"location":"aui.boot/#AUIB_CACHE","title":"~/.aui (AUI.Boot Cache Dir)","text":"<p>It is a directory located in your home directory (can be changed with AUIB_CACHE_DIR). This directory contains dependencies' source code and installation artifacts of each dependency. AUI.Boot looks up there for built libraries or their source code in order to reduce build latency and bandwidth.</p> <p>If a dependency is not present in the cache, AUI.Boot will download a precompiled binary or build it from source, so the subsequent <code>auib_import</code> invocations can reuse that even across different projects.</p> <p>On a CI/CD, you can cache this directory to drastically improve build times.</p>"},{"location":"aui.boot/#structure","title":"Structure","text":""},{"location":"aui.boot/#auiprefix","title":"~/.aui/prefix <p>Contains dependencies produced by <code>cmake -B build -S .</code>, <code>cmake --build build</code> and <code>cmake --install build --prefix=~/.aui/prefix/../</code> series of commands, potentially invoked inside <code>auib_import</code>.</p> <p>Dependency installations are located in following path: <code>~/.aui/prefix/&lt;PackageName&gt;/&lt;BUILD_SPECIFIER&gt;</code>.</p> <p><code>&lt;BUILD_SPECIFIER&gt;</code> is a special hex string that identifies the build configuration, similarly to Conan's package_id. <code>&lt;BUILD_SPECIFIER&gt;</code> is a hashed string that includes information such as version, platform, architecture, or being a static or a shared library. When something changes in this information, it produces a new <code>&lt;BUILD_SPECIFIER&gt;</code> because it represents a different binary.</p> <p>Here's how exactly it is computed:</p> <pre><code>set(BUILD_SPECIFIER \"${TAG_OR_HASH}/${AUI_TARGET_ABI}-${CMAKE_BUILD_TYPE}-${SHARED_OR_STATIC}/${CMAKE_GENERATOR}/${AUIB_IMPORT_CMAKE_ARGS}\")\nstring(REPLACE \";\" \" \" BUILD_SPECIFIER \"${BUILD_SPECIFIER}\")\n\n# convert BUILD_SPECIFIER to hash; on windows msvc path length restricted by 260 chars\nstring(MD5 BUILD_SPECIFIER ${BUILD_SPECIFIER})\n</code></pre>","text":""},{"location":"aui.boot/#auirepo","title":"~/.aui/repo <p>Contains dependencies source code (if any), downloaded by <code>auib_import</code>.</p> <ul> <li><code>~/.aui/repo/&lt;PackageName&gt;/src</code> - source code of <code>&lt;PackageName&gt;</code>. If it is a git repository, AUI.Boot will try to   checkout a specific version first instead of cloning the whole repo again.</li> <li><code>~/.aui/repo/&lt;PackageName&gt;/src/FETCHED</code> - indicates the latest download is successful.</li> <li><code>~/.aui/repo/&lt;PackageName&gt;/build</code> - <code>&lt;PackageName&gt;</code> build directory. Cleaned up after a successful installation.</li> </ul> <p>If the dependency imported as a subdirectory, these paths are used instead:</p> <ul> <li><code>~/.aui/repo/&lt;PackageName&gt;/as/&lt;VERSION&gt;/&lt;PackageName&gt;</code> - a copy of source to be used by CMake's <code>add_subdirectory</code>.   The second <code>&lt;PackageName&gt;</code> helps IDEs such as CLion to identify dependency name.</li> <li><code>~/.aui/repo/&lt;PackageName&gt;/as/&lt;VERSION&gt;/&lt;PackageName&gt;/FETCHED</code> - indicates the latest download is successful.</li> <li><code>~/.aui/repo/&lt;PackageName&gt;/as/&lt;VERSION&gt;/build</code> - build directory.</li> </ul>","text":""},{"location":"aui.boot/#auicrosscompile-host","title":"~/.aui/crosscompile-host <p>In case of Crosscompiling (Android and iOS), contains AUI.Boot sub cache for the host system.</p>","text":""},{"location":"aui.boot/#auirepolock","title":"~/.aui/repo.lock <p>Lock file of <code>auib_import</code> to forbid multiple parallel processes to modify <code>auib_import</code>.</p>","text":""},{"location":"aui.boot/#philosophy-behind-aui-boot","title":"Philosophy behind AUI Boot","text":"<p>AUI Boot follows AUI Project philosophy, i.e, simplify developers' life and improve experience as far as possible. We were needed a CMake-only solution, so we skipped external generators (i.e., those that introduce additional building layer over CMake).</p> <p>Despite CMake itself is complex (spoiler: every build system is) but thanks to the complexity CMake actually does the job good enough and its scripting system thankfully allows to download files from internet (and not only that).</p> <p>Introducing additional building layer literally multiplies the building complexity by two. Moreover, Android targets already introduce such a layer (called Gradle). For example, if we were using Conan, Android building process would have 4 layers: Gradle, CMake, Conan, CMake (yes, 2 CMake layers).</p> <p>AUI Boot (and CPM) require CMake only and don't involve extra runtime. Build should be easily reproducible, i.e., invocation of CMake (<code>cmake -S . -B build</code>) is sufficient to set up a dev environment. No additional tinkering (i.e, downloading and installing external tools or libraries, passing them to the build) is required, with an exception to application's domain (for example, auth/API keys).</p> <p>That being said, let's overview alternatives:</p> <ul> <li>CPM (CMake's missing package manager) - almost perfectly suits our needs but   lacks precompiled packages support which renders painful to some of our users.</li> <li>vcpkg - external and maintained by Microsoft. Requires additional setup and   overwriting <code>CMAKE_TOOLCHAIN_FILE</code>. In case of Android, additional tinkering with Gradle script is required.</li> <li>conan - external, requires Python runtime and knowledge. Using Conan leads to 3 browser tabs   always opened: Python docs, Conan docs and CMake docs. In case of Android, additional tinkering with Gradle script is   required. Pushes Artifactory which is a paid self-hosted solution but thanks to that offers free large repository of   precompiled packages. Conan is slowly becoming a de facto standard for C++ so we're looking forward for adding conan   support (without dropping AUI Boot).</li> <li>CMake's FindPackage/FetchContent/ExternalProject - limited, involve a lot of boilerplate, can't be tweaked from   configure-time variables, lack precompiled binaries.</li> </ul> <p>AUI is a C++ project, thus it should use CMake for AUI itself and AUI-based applications. Configure? <code>cmake ..</code>. Build? <code>cmake --build .</code>. Test? <code>ctest .</code>. Package? <code>cpack .</code>. CMake offers enough functionality for various use cases. Let's avoid creating an uncomfortable situation by involving snakes in the process of developing C++ applications, we have our own great tools already.</p>"},{"location":"aui_animation_curves_cubicbezier/","title":"aui::animation_curves::CubicBezier","text":"Header:<code>#include &lt;AUI/Animator/Curves/bezier.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aui_any_view/","title":"aui::any_view","text":"<p>RTTI-wrapped range.</p> Header:<code>#include &lt;AUI/Traits/any_view.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_any_view/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p><code>aui::any_view</code> is a dynamic range class that mimics the behavior of C++20 ranges/range-v3 using type-erased interfaces. It allows for the creation of runtime-checked, polymorphic ranges with input iterators.</p> <p>Alternative implementation of <code>ranges::views::any_view</code>.</p> <p>The general idea is to preserve lazy nature of C++20 ranges/range-v3 and flexibility between compilation modules.</p> <p>Keep in mind that type erasure can lead to performance overhead due to dynamic dispatch.</p> <p><code>aui::any_view</code> initialized with an lvalue reference will contain a reference to the container; thus the container can be modified.</p> <pre><code>AVector&lt;int&gt; elements{1,2,3};\naui::any_view&lt;int&gt; ints = elements;\nEXPECT_EQ(ints | ranges::to_vector, std::vector({1, 2, 3 }));\nelements &lt;&lt; 4;\nEXPECT_EQ(ints | ranges::to_vector, std::vector({1, 2, 3, 4 }));\n</code></pre> <p><code>aui::any_view</code> initialized with an rvalue reference will move the container into itself; thus it acquires ownership.</p> <pre><code>AVector&lt;int&gt; elements{1,2,3};\naui::any_view&lt;int&gt; ints = std::move(elements);\nEXPECT_EQ(ints | ranges::to_vector, std::vector({1, 2, 3 }));\nelements &lt;&lt; 4;\nEXPECT_EQ(ints | ranges::to_vector, std::vector({1, 2, 3 }));\n</code></pre> <p>Using <code>aui::any_view::iterator</code> acquired before modification of the referenced container may lead to undefined behaviour; it all depends on the referenced container.</p> <p><code>aui::any_view</code> follows the same principle as <code>std::function</code> for functors.</p>"},{"location":"aui_any_view/#public-types","title":"Public Types","text":"<p><code>struct aui::any_view::iterator</code></p> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <p>Empty structure.</p>"},{"location":"aui_any_view/#aui::any_view::iterator","title":"iterator","text":""},{"location":"aui_any_view/#public-methods","title":"Public Methods","text":"<pre><code>iterator any_view::begin()\n</code></pre> Returns polymorphic begin iterator. <p>Examples:</p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/minesweeper/src/NewGameWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    _&lt;ALabel&gt; mDifficultyLabel;\n\n    void updateMinesMax();\n    void updateDifficultyLabel();\n    void begin();\n\n};\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>public:\n\n    void undo() {\n        if (nextAction == mStack.begin()) {\n            return;\n        }\n        nextAction = std::prev(*nextAction);\n        (**nextAction)-&gt;undo();\n    }\n</code></pre> examples/7guis/cells/src/Cell.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>}\n\nglm::uvec2 Cell::fromName(const AString&amp; name) {\n    glm::uvec2 out{UNDEFINED};\n    auto it = name.begin();\n    for (;it != name.end() &amp;&amp; 'A' &lt;= *it &amp;&amp; *it &lt;= 'Z'; ++it) {\n        if (out.x == UNDEFINED) { out.x = 0; }\n        out.x *= 26;\n        out.x += *it - 'A';\n    }\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                }\n            }\n            if (!binaryOperators.empty()) {\n                auto root = std::min_element(\n                    binaryOperators.begin(), binaryOperators.end(),\n                    [](const BinaryOperatorAndItsPriority&amp; lhs, const BinaryOperatorAndItsPriority&amp; rhs) {\n                        return lhs.priority &lt; rhs.priority;\n                    });\n                auto out = std::make_unique&lt;T&gt;();\n                AUI_ASSERT(root-&gt;owning != nullptr);\n</code></pre> <pre><code>iterator any_view::end()\n</code></pre> Returns polymorphic end iterator. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>            }\n        }\n        return accumulator;\n    }\n}; /// end\n\nclass CellsView : public AView {\npublic:\n    static constexpr auto SCALE = 8_dp;\n</code></pre> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        (**nextAction)-&gt;undo();\n    }\n\n    void redo() {\n        if (nextAction == mStack.end()) {\n            return;\n        }\n        (**nextAction)-&gt;redo();\n        nextAction = std::next(*nextAction);\n    }\n</code></pre> examples/7guis/cells/src/Cell.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>glm::uvec2 Cell::fromName(const AString&amp; name) {\n    glm::uvec2 out{UNDEFINED};\n    auto it = name.begin();\n    for (;it != name.end() &amp;&amp; 'A' &lt;= *it &amp;&amp; *it &lt;= 'Z'; ++it) {\n        if (out.x == UNDEFINED) { out.x = 0; }\n        out.x *= 26;\n        out.x += *it - 'A';\n    }\n    for (;it != name.end() &amp;&amp; '0' &lt;= *it &amp;&amp; *it &lt;= '9'; ++it) {\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                }\n            }\n            if (!binaryOperators.empty()) {\n                auto root = std::min_element(\n                    binaryOperators.begin(), binaryOperators.end(),\n                    [](const BinaryOperatorAndItsPriority&amp; lhs, const BinaryOperatorAndItsPriority&amp; rhs) {\n                        return lhs.priority &lt; rhs.priority;\n                    });\n                auto out = std::make_unique&lt;T&gt;();\n                AUI_ASSERT(root-&gt;owning != nullptr);\n</code></pre>"},{"location":"aui_any_view/#aui::any_view::begin","title":"begin","text":""},{"location":"aui_any_view/#aui::any_view::end","title":"end","text":""},{"location":"aui_app/","title":"aui_app","text":"<p>Provide application info for deployment (i.e. name, author, license, icon, etc...).</p> <p><code>aui_app</code> unifies the packaging process across all platforms. For (mostly) all desktop platforms, it acts in collaboration with CPack.</p> <ul> <li><code>ZIP</code>, <code>TGZ</code></li> <li><code>DEB</code></li> <li><code>NSIS</code></li> <li><code>WIX</code></li> <li><code>External</code></li> </ul> <p>For the targets that require cross-compilation, it requires <code>[AUI_BUILD_FOR]</code> to be set, and, in fact, does not involve CPack in such case.</p> <p>For all packaging methods, <code>aui_app</code> assumes it is called once per CMake project. It is relevant for packaging methods that expect one \"entrypoint\" per package. - <code>aui_app</code> -&gt; Android APK - <code>aui_app</code> -&gt; iOS app bundle - <code>aui_app</code> -&gt; Linux Flatpak - <code>aui_app</code> -&gt; Linux AppImage</p> <p>For this reason, <code>aui_app</code> populates some empty <code>CPACK_*</code> variables. This approach allows you not to bother about various installation methods but also override the variables if needed.</p> <p>For more info about packaging methods, see AUI Configure Flags.</p>"},{"location":"aui_app/#syntax","title":"Syntax","text":"<pre><code>aui_app(TARGET aui.example.views\n        NAME \"AUI Examples\"\n        APPLE_BUNDLE_IDENTIFIER \"aui.Examples\"\n        APPLE_SIGN_IDENTITY \"iPhone Developer\"\n        APPLE_TEAM_ID \"98S256N2KJ\"\n        ANDROID_PACKAGE \"com.github.aui.examples\"\n        ICON \"assets/img/logo.svg\"\n        )\n</code></pre> <pre><code>aui_app(\n    # common\n    &lt;TARGET &lt;target-name&gt;&gt;\n    &lt;NAME &lt;application-name&gt;&gt;\n    [ICON &lt;path-to-icon-svg&gt;]\n    [VENDOR &lt;vendor-name&gt;]\n    [COPYRIGHT &lt;copyright-string&gt;]\n    [VERSION &lt;version&gt;]\n\n    [NO_INCLUDE_CPACK]\n\n    # android only\n    [ANDROID_PACKAGE &lt;android-app-package&gt;]\n\n    # linux only\n    [LINUX_DESKTOP &lt;path-to-desktop-file&gt;]\n\n    # apple only\n    [APPLE_TEAM_ID &lt;apple-team-id&gt;]\n    [APPLE_BUNDLE_IDENTIFIER &lt;bundle-identifier&gt;]\n    [APPLE_SIGN_IDENTITY &lt;sign-identity&gt;]\n\n    # ios only\n    [IOS_VERSION &lt;target-ios-version&gt;]\n    [IOS_DEVICE &lt;target-ios-device&gt;]\n    [IOS_CONTROLLER &lt;custom-ios-controller-class-name&gt;]\n)\n</code></pre>"},{"location":"aui_app/#target","title":"TARGET","text":"<p>Specify main executable of the application which will be executed when your application is launched.</p> Platform Required Traits Windows + Linux + macOS + Android + iOS +"},{"location":"aui_app/#name","title":"NAME","text":"<p>Specify application display name that would appear in system's UIs (i.e., start menu, launchpad, desktop, control panel).</p> <p>This value is availabile in C++ via <code>app_info</code> namespace:</p> <pre><code>#include &lt;AUI/AppInfo.h&gt;\nint main() { auto appName = aui::app_info::name; }\n</code></pre> Platform Required Traits Windows + Linux + macOS + Android + iOS + <p><code>APP_NAME</code> populates the following CMake variables (only if they haven't been defined already):</p> <ul> <li><code>CPACK_BUNDLE_NAME</code>  = <code>${APP_NAME}</code></li> <li><code>CPACK_PACKAGE_EXECUTABLES</code>  = <code>\"${_executable};${APP_NAME}\"</code></li> <li><code>CPACK_PACKAGE_INSTALL_DIRECTORY</code>  = <code>${APP_NAME}</code></li> <li><code>CPACK_PACKAGE_NAME</code>  = <code>${APP_NAME}</code></li> <li><code>MACOSX_BUNDLE_BUNDLE_NAME</code>  = <code>${APP_NAME}</code></li> <li><code>MACOSX_BUNDLE_EXECUTABLE_NAME</code>  = <code>${APP_NAME}</code></li> </ul>"},{"location":"aui_app/#aui_app_ICON","title":"ICON","text":"<p>Specify SVG icon location (defaults to <code>icon.svg</code> if exists).</p> <p>See App Icon for best practices.</p> Platform Required Traits Windows generates <code>*.ico</code> and <code>*.bmp</code> files from your <code>svg</code> Linux + generates Freedesktop-compliant icons from your <code>svg</code> macOS + generates <code>*.icns</code> file from your <code>svg</code> Android + generates icon assets from your <code>svg</code> iOS + generates <code>*.icns</code> file from your <code>svg</code> <p>Using <code>aui.toolbox</code>, <code>aui_app</code> generates image assets from your icon depending on the app packaging method. chosen.</p> <p><code>APP_ICON</code> populates the following CMake variables (only if they haven't been defined already):</p> <ul> <li><code>CPACK_INNOSETUP_ICON_FILE</code>  = <code>${_ico}</code></li> <li><code>CPACK_INNOSETUP_SETUP_WizardSmallImageFile</code>  = <code>${_ico}</code></li> <li><code>CPACK_PACKAGE_ICON</code>  = <code>${_ico}</code></li> <li><code>CPACK_WIX_PRODUCT_ICON</code>  = <code>${_ico}</code></li> <li><code>CPACK_WIX_UI_BANNER</code>  = <code>${_ico}</code></li> <li><code>CPACK_WIX_UI_DIALOG</code>  = <code>${_ico}</code></li> </ul>"},{"location":"aui_app/#vendor","title":"VENDOR","text":"<p>Specify application author's name or company.</p> Platform Required Traits Windows Linux macOS Android iOS <p><code>APP_VENDOR</code> populates the following CMake variables (only if they haven't been defined already):</p> <ul> <li><code>CPACK_PACKAGE_VENDOR</code>  = <code>${APP_VENDOR}</code></li> </ul>"},{"location":"aui_app/#copyright","title":"COPYRIGHT","text":"<p>Specify application copyright string (not file)</p> Platform Required Traits Windows Linux does not matter macOS + Android iOS + <p><code>APP_COPYRIGHT</code> populates the following CMake variables (only if they haven't been defined already):</p> <ul> <li><code>MACOSX_BUNDLE_COPYRIGHT</code>  = <code>${APP_COPYRIGHT}</code></li> </ul>"},{"location":"aui_app/#version","title":"VERSION","text":"<p>Specify application version. If not set, the value of <code>PROJECT_VERSION</code> used instead.</p> Platform Required Traits Windows + Linux + macOS + Android + iOS + <p><code>APP_VERSION</code> populates the following CMake variables (only if they haven't been defined already):</p> <ul> <li><code>CPACK_PACKAGE_FILE_NAME</code>  = <code>${CPACK_PACKAGE_NAME}-${APP_VERSION}-${_cmake_system_processor_lower}</code></li> <li><code>CPACK_PACKAGE_VERSION</code>  = <code>${APP_VERSION}</code></li> <li><code>MACOSX_BUNDLE_BUNDLE_VERSION</code>  = <code>${APP_VERSION}</code></li> <li><code>MACOSX_BUNDLE_LONG_VERSION_STRING</code>  = <code>${APP_VERSION}</code></li> <li><code>MACOSX_BUNDLE_SHORT_VERSION_STRING</code>  = <code>${APP_VERSION}</code></li> </ul>"},{"location":"aui_app/#no_include_cpack","title":"NO_INCLUDE_CPACK","text":"<p>By default <code>aui_app</code> includes CPack in order to allow to generate packages using CPack. You can disable this behaviour by specifying <code>NO_INCLUDE_CPACK</code> flag.</p>"},{"location":"aui_app/#android_package","title":"ANDROID_PACKAGE","text":"<p>Android app package name.</p> Platform Required Traits Windows Linux macOS Android + iOS"},{"location":"aui_app/#linux_desktop","title":"LINUX_DESKTOP","text":"<p>Specify custom <code>*.desktop</code> file. If not set, <code>*.desktop</code> file is generated from <code>aui_app</code> arguments.</p> Platform Required Traits Linux +"},{"location":"aui_app/#apple_team_id","title":"APPLE_TEAM_ID","text":"<p>Specify your Apple Team ID (https://discussions.apple.com/thread/7942941).</p> Platform Required Traits macOS + iOS +"},{"location":"aui_app/#apple_bundle_identifier","title":"APPLE_BUNDLE_IDENTIFIER","text":"<p>Specify bundle identifier. If not set, the value of <code>NAME</code> used instead.</p> Platform Required Traits macOS iOS"},{"location":"aui_app/#apple_sign_identity","title":"APPLE_SIGN_IDENTITY","text":"<p>Specify Apple sign identity. Defaults to \"iPhone Developer\".</p> Platform Required Traits macOS unused iOS"},{"location":"aui_app/#ios_version","title":"IOS_VERSION","text":"<p>Specify target iOS platform. Defaults to \"14.3\".</p> Platform Required Traits iOS"},{"location":"aui_app/#ios_device","title":"IOS_DEVICE","text":"<p>Specify target iOS device. Applicable values are <code>IPHONE</code>, <code>IPAD</code> or <code>BOTH</code>. Defaults to <code>BOTH</code>.</p> Platform Required Traits iOS"},{"location":"aui_app/#ios_controller","title":"IOS_CONTROLLER","text":"<p>Specify custom view controller class name. Defaults to <code>AUIViewController</code>.</p> Platform Required Traits iOS"},{"location":"aui_archive_extractto/","title":"aui::archive::ExtractTo","text":"<p>Default extracter for aui::zlib::readZip.</p> Header:<code>#include &lt;AUI/Util/Archive.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_archive_extractto/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>std::function&lt;APath(APath)&gt; pathProjection</code></p> <p>Function to preprocess the destination path (excluding prefix).</p>"},{"location":"aui_archive_extractto/#aui::archive::ExtractTo::pathProjection","title":"pathProjection","text":""},{"location":"aui_archive_extractto/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <p><code>APath prefix</code></p> <p>Destination dir to unpack.</p>"},{"location":"aui_archive_extractto/#aui::archive::ExtractTo::prefix","title":"prefix","text":""},{"location":"aui_archive_extractto/#examples_1","title":"Examples","text":""},{"location":"aui_archive_fileentry/","title":"aui::archive::FileEntry","text":"<p>Zip file entry.</p> Header:<code>#include &lt;AUI/Util/Archive.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_archive_fileentry/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>std::string_view name</code></p> <p>file path inside ZIP.</p>"},{"location":"aui_archive_fileentry/#aui::archive::FileEntry::name","title":"name","text":""},{"location":"aui_archive_fileentry/#examples","title":"Examples","text":"examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>const T&amp; expect(const Variant&amp; variant) {\n    if (std::holds_alternative&lt;T&gt;(variant)) {\n        return std::get&lt;T&gt;(variant);\n    }\n    throw AException(\"VALUE {}\"_format(AClass&lt;T&gt;::name()).uppercase());\n}\n\nstruct BinaryOperatorNode : public INode {\n    _unique&lt;INode&gt; left;\n    _unique&lt;INode&gt; right;\n</code></pre> examples/ui/views/tests/LayoutManagerTest.cpp <p>Views Example - All-in-one views building example.</p> <pre><code> * Checks alignment (see \"Alex2772, 2021, alex2772.ru\" - it is not perfectly aligned)\n */\nTEST_F(UILayoutManager, LastElementAlignment) {\n    // copyright width can be also not minimal\n    By::name(\"#copyright\").check(widthIsMinimal(), \"copyright width should be minimal\");\n}\n\n/**\n * Checks alignment (looks like buttons and list views are not perfectly aligned)\n */\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        }\n        return {\n            {},\n            {\n              .name = \"Adjust radius...\",\n              .onAction =\n                  [this, circle] {\n\n\n                      auto radiusPopup = _new&lt;AWindow&gt;(\n</code></pre> examples/7guis/cells/src/Tokens.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>#include \"AUI/Util/ATokenizer.h\"\n\nnamespace token {\nstruct Identifier {\n    AString name;\n};\nstruct Double {\n    double value;\n};\nstruct Semicolon {};   // ;\n</code></pre> examples/7guis/cells/src/Cell.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>formula::Value Cell::evaluate() {\n    return formula::evaluate(*spreadsheet, expression);\n}\n\nglm::uvec2 Cell::fromName(const AString&amp; name) {\n    glm::uvec2 out{UNDEFINED};\n    auto it = name.begin();\n    for (;it != name.end() &amp;&amp; 'A' &lt;= *it &amp;&amp; *it &lt;= 'Z'; ++it) {\n        if (out.x == UNDEFINED) { out.x = 0; }\n        out.x *= 26;\n</code></pre> examples/7guis/cells/src/Cell.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    static AString rowName(unsigned index);\n\n    static constexpr auto UNDEFINED = std::numeric_limits&lt;unsigned&gt;::max();\n\n    static glm::uvec2 fromName(const AString&amp; name);\n};\n</code></pre>"},{"location":"aui_archive_fileentry/#public-methods","title":"Public Methods","text":"<pre><code>virtual aui::no_escape&lt;IInputStream&gt; FileEntry::open(const std::string&amp; password = { })\n</code></pre> <p>Opens the zip entry for read.</p> Arguments <code>password</code> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre>"},{"location":"aui_archive_fileentry/#aui::archive::FileEntry::open","title":"open","text":""},{"location":"aui_assert/","title":"AUI_ASSERT","text":"<p>Asserts that the passed condition evaluates to true.</p> Header:<code>#include &lt;AUI/Util/Assert.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_assert/#definition","title":"Definition","text":"<pre><code>#define AUI_ASSERT(condition) AUI_IMPL_ASSERT(condition)\n</code></pre>"},{"location":"aui_assert/#detailed-description","title":"Detailed Description","text":"<p>If the condition evaluates to false, triggers default C++ assert behavior (that is, program termination) on debug build or throws AAssertionFailedException on release builds, so it can be handled and reported properly in production applications.</p>"},{"location":"aui_assert/#examples","title":"Examples","text":"examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                    .op = out.get(),\n                    .priority = currentPriority,\n                    .owning = std::move(out),\n                };\n                AUI_ASSERT(temporaryValue == nullptr);\n                return;\n            }\n\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.priority &lt; currentPriority &amp;&amp; o.op-&gt;right) {\n</code></pre></p>"},{"location":"aui_assert/#examples_1","title":"Examples","text":""},{"location":"aui_assert_no_condition/","title":"AUI_ASSERT_NO_CONDITION","text":"<p>Always triggers assertion fail.</p> Header:<code>#include &lt;AUI/Util/Assert.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_assert_no_condition/#definition","title":"Definition","text":"<pre><code>#define AUI_ASSERT_NO_CONDITION(what) AUI_IMPL_FAIL(what)\n</code></pre>"},{"location":"aui_assert_no_condition/#detailed-description","title":"Detailed Description","text":"<p>Triggers default C++ assert behavior (that is, program termination) on debug build or throws AAssertionFailedException on release builds, so it can be handled and reported properly in production applications.</p>"},{"location":"aui_assert_no_condition/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p>"},{"location":"aui_assert_not_used_when_null/","title":"aui::assert_not_used_when_null","text":"Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_assert_ui_thread_only/","title":"AUI_ASSERT_UI_THREAD_ONLY","text":"<p>Asserts that the macro invocation has been performed in the UI thread.</p> Header:<code>#include &lt;AUI/Platform/AWindowBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aui_assert_ui_thread_only/#definition","title":"Definition","text":"<pre><code>#define AUI_ASSERT_UI_THREAD_ONLY() { AUI_ASSERTX(AWindow::current() == nullptr || AThread::current() == AWindow::current()-&gt;getThread(), \"this method should be used in ui thread only.\"); }\n</code></pre>"},{"location":"aui_assert_ui_thread_only/#detailed-description","title":"Detailed Description","text":""},{"location":"aui_assert_ui_thread_only/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_assert_worker_thread_only/","title":"AUI_ASSERT_WORKER_THREAD_ONLY","text":"<p>Asserts that the macro invocation has not been performed in the UI thread.</p> Header:<code>#include &lt;AUI/Platform/AWindowBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aui_assert_worker_thread_only/#definition","title":"Definition","text":"<pre><code>#define AUI_ASSERT_WORKER_THREAD_ONLY() { AUI_ASSERTX(AWindow::current() == nullptr || AThread::current() != AWindow::current()-&gt;getThread(), \"this method should be used in worker thread only.\"); }\n</code></pre>"},{"location":"aui_assert_worker_thread_only/#detailed-description","title":"Detailed Description","text":""},{"location":"aui_assert_worker_thread_only/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_assertx/","title":"AUI_ASSERTX","text":"<p>Asserts that the passed condition evaluates to true. Adds extra message string.</p> Header:<code>#include &lt;AUI/Util/Assert.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_assertx/#definition","title":"Definition","text":"<pre><code>#define AUI_ASSERTX(condition, what) AUI_IMPL_ASSERTX(condition, what)\n</code></pre>"},{"location":"aui_assertx/#detailed-description","title":"Detailed Description","text":"<p>If the condition evaluates to false, triggers default C++ assert behavior (that is, program termination) on debug build or throws AAssertionFailedException on release builds, so it can be handled and reported properly in production applications.</p>"},{"location":"aui_assertx/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_atomic_lazy/","title":"aui::atomic_lazy","text":"<p>A value that initializes when accessed for the first time. Unlike <code>aui::lazy</code>, internal logic of <code>aui::atomic_lazy</code> is threadsafe.</p> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_binarysearchnearesttozero/","title":"aui::BinarySearchNearestToZero","text":"<p>aui::binary_search helper to find a value the Predicate returns the nearest to zero result from.</p> Header:<code>#include &lt;AUI/Traits/algorithms.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_binarysearchresult/","title":"aui::BinarySearchResult","text":"<p>The result of the predicate passed to aui::binary_search.</p> Header:<code>#include &lt;AUI/Traits/algorithms.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_binarysearchresult/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_breakpoint/","title":"AUI_BREAKPOINT","text":"<p>Stops program execution in attached debugger as if a breakpoint were set.</p> Header:<code>#include &lt;AUI/Util/Breakpoint.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_breakpoint/#definition","title":"Definition","text":"<pre><code>#define AUI_BREAKPOINT() AUI_IMPL_BREAKPOINT\n</code></pre>"},{"location":"aui_breakpoint/#detailed-description","title":"Detailed Description","text":"<p>If debugger is not present, behaviour is undefined.</p> <pre><code>AUI_BREAKPOINT(); // stops debugger here.\n</code></pre>"},{"location":"aui_breakpoint/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_constraint_avoid_copy/","title":"aui::constraint::avoid_copy","text":"<p>Avoids copy of the wrapped value, pointing to a reference.</p> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_constraint_avoid_copy/#detailed-description","title":"Detailed Description","text":"<p>The caller can be sure his value wouldn't be copied.</p>"},{"location":"aui_constraint_move_only/","title":"aui::constraint::move_only","text":"<p>Wraps the object forbidding copy.</p> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_constraint_move_only/#detailed-description","title":"Detailed Description","text":"<p>The caller can be sure his value wouldn't be copied even if copy constructor allows to do so.</p>"},{"location":"aui_defer/","title":"AUI_DEFER","text":"<p>Defers execution of the next block to the end of current block (RAII scope).</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_defer/#definition","title":"Definition","text":"<pre><code>#define AUI_DEFER ARaiiHelper AUI_PP_CAT($AUI_DEFER_at_line_,  __LINE__) = [&amp;]\n</code></pre>"},{"location":"aui_defer/#detailed-description","title":"Detailed Description","text":"<p>This example prints \"Hello world\\n\": <pre><code>AUI_DEFER { printf(\" world\\n\") };\nprintf(\"Hello\");\n</code></pre></p>"},{"location":"aui_defer/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_do_once/","title":"AUI_DO_ONCE","text":"<p>Executes following function call or {} block once per program execution</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_do_once/#definition","title":"Definition","text":"<pre><code>#define AUI_DO_ONCE if(static bool _aui_once = false; (!_aui_once &amp;&amp; (_aui_once = true)))\n</code></pre>"},{"location":"aui_do_once/#detailed-description","title":"Detailed Description","text":"<p>Guarantees that the following code block will be executed only once per application execution.</p> without with <pre><code>static bool done = false;\nif (!done) {\n    done = true;\n    std::printf(\"Only once!\");\n}\n</code></pre> <pre><code>AUI_DO_ONCE {\n    std::printf(\"Only once!\");\n}\n</code></pre>"},{"location":"aui_do_once/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p>"},{"location":"aui_emit_foreign/","title":"AUI_EMIT_FOREIGN","text":"<p>emits the specified signal in context of specified object.</p> Header:<code>#include &lt;AUI/Common/AObject.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_emit_foreign/#definition","title":"Definition","text":"<pre><code>#define AUI_EMIT_FOREIGN(object, signal, ...) (*object) ^ object-&gt;signal(__VA_ARGS__)\n</code></pre>"},{"location":"aui_emit_foreign/#examples","title":"Examples","text":"examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        }\n    }\n}\nvoid MinesweeperWindow::updateCellViewStyle(int x, int y) const {\n    AUI_EMIT_FOREIGN(mGrid-&gt;getViews()[y * mFieldColumns + x], customCssPropertyChanged);\n}\n\nint MinesweeperWindow::countBombsAround(int x, int y) {\n    int count = 0;\n    for (int i = -1; i &lt;= 1; ++i) {\n</code></pre></p>"},{"location":"aui_emit_foreign/#examples_1","title":"Examples","text":""},{"location":"aui_emit_foreign_signal/","title":"AUI_EMIT_FOREIGN_SIGNAL","text":"<p>Emits a signal of a foreign object.</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_emit_foreign_signal/#definition","title":"Definition","text":"<pre><code>#define AUI_EMIT_FOREIGN_SIGNAL(object) (*object) ^ object\n</code></pre>"},{"location":"aui_emit_foreign_signal/#detailed-description","title":"Detailed Description","text":"without with <pre><code>class SomeObject {\npublic:\n  emits&lt;&gt; someSignal;\n};\n...\nauto obj = _new&lt;SomeObject&gt;();\n(*obj) ^ obj-&gt;someSignal();\n</code></pre> <pre><code>class SomeObject {\npublic:\n  emits&lt;&gt; someSignal;\n};\n...\nauto obj = _new&lt;SomeObject&gt;();\nAUI_EMIT_FOREIGN_SIGNAL(obj)-&gt;someSignal();\n</code></pre>"},{"location":"aui_emit_foreign_signal/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_entry/","title":"AUI_ENTRY","text":"<p>Application entry point.</p> Header:<code>#include &lt;AUI/Platform/Entry.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_entry/#definition","title":"Definition","text":"<pre><code>#define AUI_ENTRY \\\n    AUI_EXPORT int aui_entry(const AStringVector&amp; args); \\\n    AUI_EXPORT int aui_main(int argc, char** argv, int(*aui_entry)(const AStringVector&amp;)); \\\n    static int fake_main(int argc, char** argv) {                               \\\n        return aui_main(argc, argv, aui_entry);\\\n    }             \\\nAUI_EXPORT int aui_entry(const AStringVector&amp; args)\n</code></pre>"},{"location":"aui_entry/#detailed-description","title":"Detailed Description","text":"<p>Entry point of any AUI application.</p> <p>Native entry point varies platform to platform (i.e. Windows requires <code>int main</code> entry point for console applications and <code>WinMain</code> for graphical applications; entry point of an Android application is located in Java code). <code>AUI_ENTRY</code> unifies your entry point, effectively supporting every platform.</p> <p><code>AUI_ENTRY</code> of a graphical application should be non-blocking since on mobile platforms application's event loop is located outsize of the entry point. On desktop platforms, an event loop is created outside <code>AUI_ENTRY</code> in order to unify the mobile and desktop behaviour. If there are no open windows, the event loop breaks, causing the application to exit with the exit code returned by <code>AUI_ENTRY</code> earlier, or <code>0</code>.</p> <p>Application arguments <code>(int argc, char** argv)</code> are forwarded to <code>AUI_ENTRY</code> as <code>AStringVector args</code>.</p> <p>Minimal entrypoint of an UI application:</p> <pre><code>/*\n * AUI Framework - Declarative UI toolkit for modern C++20\n * Copyright (C) 2020-2025 Alex2772 and Contributors\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#include \"ExampleWindow.h\"\n#include &lt;AUI/Platform/Entry.h&gt;\n\nAUI_ENTRY {\n    _new&lt;ExampleWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> <p>Minimal entrypoint of a console application:</p> <pre><code>/*\n * AUI Framework - Declarative UI toolkit for modern C++20\n * Copyright (C) 2020-2022 Alex2772\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Logging/ALogger.h&gt;\n\nstatic constexpr auto LOG_TAG = \"MyApp\";\n\nAUI_ENTRY {\n    ALogger::info(LOG_TAG) &lt;&lt; \"Hello world!\";\n    return 0;\n}\n</code></pre> <p>Prototype of <code>AUI_ENTRY</code> function you are actually implementing: <pre><code>AUI_EXPORT int aui_entry(const AStringVector&amp; args);\n</code></pre></p>"},{"location":"aui_entry/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>    };\n    return result;\n}\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Backdrop test\", 600_dp, 300_dp);\n\n    window-&gt;setContents(headerWithContents(\n        Centered {\n          Vertical::Expanding {\n</code></pre></p> examples/basic/hello_world/src/main.cpp <p>Console Hello World Example - Basic CLI Hello World application. <pre><code>#include &lt;AUI/Logging/ALogger.h&gt;\n\nstatic constexpr auto LOG_TAG = \"MyApp\";\n\nAUI_ENTRY {\n    ALogger::info(LOG_TAG) &lt;&lt; \"Hello world!\";\n    return 0;\n}\n</code></pre></p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>private:\n    Cells mCells { { 64, 64 } };\n}; /// end\n\nAUI_ENTRY {\n    auto w = _new&lt;GameOfLifeWindow&gt;();\n    w-&gt;pack();\n    w-&gt;show();\n    return 0;\n}\n</code></pre></p> examples/app/minesweeper/src/main.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"MinesweeperWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MinesweeperWindow&gt;()-&gt;show();\n\n    return 0;\n}\n</code></pre></p> examples/app/fractal/src/main.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"FractalWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;FractalWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre></p> examples/ui/minimal_ui_xmake/src/main.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake. <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"MainWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MainWindow&gt;()-&gt;show();\n    return 0;\n};\n</code></pre></p> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter. <pre><code>    AProperty&lt;int&gt; mCounter;\n};\n/// [counter]\n\nAUI_ENTRY {\n    _new&lt;CounterWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>        AMessageBox::show(this, \"You've booked the flight\", msg);\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;FlightBookerWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>    void reset() { mStartTime = high_resolution_clock::now(); }\n};\n/// [example]\n\nAUI_ENTRY {\n    _new&lt;TimerWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>        mState.history.redo();\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;CircleDrawerWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>        } AUI_WITH_STYLE { Padding(0) });\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;CellsWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre></p> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa. <pre><code>    AProperty&lt;int&gt; mCelsius, mFahrenheit;\n};\n/// [window]\n\nAUI_ENTRY {\n    _new&lt;TemperatureConverterWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre></p> examples/ui/views/src/main.cpp <p>Views Example - All-in-one views building example. <pre><code>#include \"ExampleWindow.h\"\n#include &lt;AUI/Platform/Entry.h&gt;\n\nAUI_ENTRY {\n    _new&lt;ExampleWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre></p>"},{"location":"aui_entry/#examples_1","title":"Examples","text":""},{"location":"aui_enum_flag/","title":"AUI_ENUM_FLAG","text":"<p>Make a bitfield-style enum class.</p> Header:<code>#include &lt;AUI/Reflect/AEnumerate.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_enum_flag/#definition","title":"Definition","text":"<pre><code>#define AUI_ENUM_FLAG(name) enum class name: int; \\\n                            constexpr inline name operator|(name a, name b) {return static_cast&lt;name&gt;(static_cast&lt;int&gt;(a) | static_cast&lt;int&gt;(b));} \\\n                            constexpr inline name operator&amp;(name a, name b) {return static_cast&lt;name&gt;(static_cast&lt;int&gt;(a) &amp; static_cast&lt;int&gt;(b));} \\\n                            constexpr inline name operator^(name a, name b) {return static_cast&lt;name&gt;(static_cast&lt;int&gt;(a) ^ static_cast&lt;int&gt;(b));} \\\n                            constexpr inline name operator|=(name&amp; a, name b) {return a = static_cast&lt;name&gt;(static_cast&lt;int&gt;(a) | static_cast&lt;int&gt;(b));} \\\n                            constexpr inline name operator&amp;=(name&amp; a, name b) {return a = static_cast&lt;name&gt;(static_cast&lt;int&gt;(a) &amp; static_cast&lt;int&gt;(b));} \\\n                            constexpr inline name operator^=(name&amp; a, name b) {return a = static_cast&lt;name&gt;(static_cast&lt;int&gt;(a) ^ static_cast&lt;int&gt;(b));} \\\n                            constexpr inline name operator~(const name&amp; a) {return static_cast&lt;name&gt;(~static_cast&lt;int&gt;(a));} \\\n                            constexpr inline bool operator!(const name&amp; a) {return a == static_cast&lt;name&gt;(0);}                                     \\\n                                                                   \\\n                            constexpr inline bool operator&amp;&amp;(const name&amp; a, bool v) {return static_cast&lt;int&gt;(a) &amp;&amp; v;}                                     \\\n                            constexpr inline bool operator||(const name&amp; a, bool v) {return static_cast&lt;int&gt;(a) || v;}                                     \\\n\\\n                            enum class name: int\n</code></pre>"},{"location":"aui_enum_flag/#examples","title":"Examples","text":"examples/app/minesweeper/src/FieldCell.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>#include \"AUI/Reflect/AEnumerate.h\"\n\n/// [FieldCell]\nAUI_ENUM_FLAG(FieldCell) {\n    EMPTY = 0,\n    HAS_BOMB = 1,\n    OPEN = 2,\n    HAS_FLAG = 4,\n    RED_BG = 8,\n</code></pre></p>"},{"location":"aui_enum_flag/#examples_1","title":"Examples","text":""},{"location":"aui_enum_values/","title":"AUI_ENUM_VALUES","text":"<p>Defines all enum values for AEnumerate.</p> Header:<code>#include &lt;AUI/Reflect/AEnumerate.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_enum_values/#definition","title":"Definition","text":"<pre><code>#define AUI_ENUM_VALUES(enum_t, ...) template&lt;&gt; \\\nstruct AEnumerateAllValues&lt;enum_t&gt;{         \\\n    static inline constexpr AEnumerate&lt;enum_t&gt;::Values&lt;__VA_ARGS__&gt; get() {return {}; } \\\n};                                         \\\nnamespace std { inline AString to_wstring(enum_t v) { return AEnumerate&lt;enum_t&gt;::valueToNameMap().optional(v).valueOr(\"&lt;unknown enum value {}&gt;\"_format(int(v))); } } \\\ninline std::ostream&amp; operator&lt;&lt;(std::ostream&amp; o, enum_t v) { return o &lt;&lt; std::to_wstring(v); }\n</code></pre>"},{"location":"aui_enum_values/#detailed-description","title":"Detailed Description","text":"<p>Defines all enum values to by used by AEnumerate. <pre><code>enum class ATextOverflow {\n    NONE,\n    ELLIPSIS,\n    CLIP\n};\nAUI_ENUM_VALUES(ATextOverflow,\n                ATextOverflow::ELLIPSIS,\n                ATextOverflow::CLIP)\n\n// AEnumerate&lt;ATextOverflow&gt;::toName(ATextOverflow::CLIP) -&gt; \"CLIP\"\n</code></pre></p>"},{"location":"aui_enum_values/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_executable/","title":"aui_executable","text":"<p>Wraps standard <code>add_executable</code> with AUI's features support.</p> <p>Automatically adds all <code>c</code> and <code>cpp</code> source files from <code>src/</code> directory.</p>"},{"location":"aui_executable/#syntax","title":"Syntax","text":"<pre><code>aui_executable(\n    # common\n    &lt;target-name&gt;\n    [ADDITIONAL_SRCS &lt;src1 src2 ...&gt;]\n    [COMPILE_ASSETS &lt;ON|OFF&gt;]\n    [EXPORT &lt;export-name&gt;]\n\n    # windows only\n    [WIN32_SUBSYSTEM_CONSOLE]\n\n    [WHOLEARCHIVE]\n)\n</code></pre>"},{"location":"aui_executable/#additional_srcs","title":"ADDITIONAL_SRCS","text":"<p>Specify additional source files to be passed to <code>add_executable</code>. The value is not modified and kept as is.</p>"},{"location":"aui_executable/#compile_assets","title":"COMPILE_ASSETS","text":"<p>If evaluates to true, calls <code>aui_compile_assets()</code> for <code>&lt;target-name&gt;</code>. See AUI Assets.</p>"},{"location":"aui_executable/#export","title":"EXPORT","text":"<p>Adds the resulting target to CMake export <code>&lt;export-name&gt;</code>.</p>"},{"location":"aui_executable/#win32_subsystem_console","title":"WIN32_SUBSYSTEM_CONSOLE","text":"<p>The resulting <code>.exe</code> file would open console window, regardless of whether the application opens it's own window or not.</p>"},{"location":"aui_executable/#wholearchive","title":"WHOLEARCHIVE","text":"<p>The target is compiled with <code>wholearchive</code> compiler-specific flag, forcing all unused variables to be included to the binary. This may be required by AUI Assets.</p>"},{"location":"aui_fast_pimpl/","title":"aui::fast_pimpl","text":"<p>Utility wrapper implementing the stack-allocated (fast) pimpl idiom.</p> Header:<code>#include &lt;AUI/Util/APimpl.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_fast_pimpl/#detailed-description","title":"Detailed Description","text":"<p>the following functions can be called only if <code>T</code> is a complete type:</p> <ul> <li>ctor</li> <li>dtor</li> </ul> <p>See https://youtu.be/mkPTreWiglk?t=157 (Russian)</p>"},{"location":"aui_for_each_ui_detail_inflateopts/","title":"aui::for_each_ui::detail::InflateOpts","text":"<p>Key, used to avoid view instantiation on AForEachUI::setModelImpl.</p> Header:<code>#include &lt;AUI/View/AForEachUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aui_for_each_ui_detail_inflateopts/#detailed-description","title":"Detailed Description","text":"<p>Typically consists of a hash of underlying value.</p>"},{"location":"aui_hvlayout/","title":"aui::HVLayout","text":"<p>Shared implementation of AVerticalLayout and AHorizontalLayout.</p> Header:<code>#include &lt;AUI/Layout/HVLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aui_hvlayout/#detailed-description","title":"Detailed Description","text":"<p>HVLayout does not strictly requires to layout AView. The only requirement is to pass range of items that implement methods required by HVLayout (as AView does). This make compile time polymorphism possible.</p> <p>ASplitter is an example of object that requires AHorizontalLayout/AVerticalLayout-like behaviour with some changes.</p>"},{"location":"aui_hvlayout/#public-methods","title":"Public Methods","text":"<pre><code>static T&amp; HVLayout::getAxisValue(glm::tvec2&lt;T&gt;&amp; v)\n</code></pre> <p>On direction == HORIZONTAL returns x; on direction == VERTICAL returns y</p> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <pre><code>static T HVLayout::getAxisValue(const glm::tvec2&lt;T&gt;&amp; v)\n</code></pre> <p>On direction == HORIZONTAL returns x; on direction == VERTICAL returns y</p> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <pre><code>static T&amp; HVLayout::getPerpAxisValue(glm::tvec2&lt;T&gt;&amp; v)\n</code></pre> <p>On direction == HORIZONTAL returns y; on direction == VERTICAL returns x</p> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <pre><code>static T HVLayout::getPerpAxisValue(const glm::tvec2&lt;T&gt;&amp; v)\n</code></pre> <p>On direction == HORIZONTAL returns y; on direction == VERTICAL returns x</p> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre>"},{"location":"aui_hvlayout/#aui::HVLayout::getAxisValue","title":"getAxisValue","text":""},{"location":"aui_hvlayout/#aui::HVLayout::getPerpAxisValue","title":"getPerpAxisValue","text":""},{"location":"aui_identity/","title":"aui::identity","text":"<p>Function object type whose <code>operator()</code> returns its argument unchanged.</p> Header:<code>#include &lt;AUI/Traits/callables.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_identity/#detailed-description","title":"Detailed Description","text":"<p>Implementation of std::identity.</p>"},{"location":"aui_impl_future_cancellationwrapper/","title":"aui::impl::future::CancellationWrapper","text":"Header:<code>#include &lt;AUI/Thread/AFuture.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_impl_parallel_lambdacapturer/","title":"aui::impl::parallel::LambdaCapturer","text":"<p>Distributes iterator range over machine's threads. I.e. range of 32 elements on a 4-core machine would be split by 4 pieces of 8 elements.</p> Header:<code>#include &lt;AUI/Traits/parallel.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_impl_parallel_lambdacapturer/#detailed-description","title":"Detailed Description","text":"<p>Typical usage:</p> <pre><code>AVector&lt;int&gt; container = { ... };\naui::parallel(container.begin(),\n              container.end(),\n              [](const AVector&lt;int&gt;::iterator&amp; begin,\n                 const AVector&lt;int&gt;::iterator&amp; end) {\n    for (auto it = begin; it != end; ++it) {\n        // *it\n    }\n};\n</code></pre>"},{"location":"aui_impl_select_overload/","title":"aui::impl::select_overload","text":"<p>Determines whether <code>T</code> is complete or not.</p> Header:<code>#include &lt;AUI/Traits/types.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_jni_arrayview/","title":"aui::jni::ArrayView","text":"<p>Java array view.</p> Header:<code>#include &lt;AUI/JNI/ArrayView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_jni_class/","title":"AUI_JNI_CLASS","text":"<p>Defines getClassName and other useful methods required for Java class definition.</p> Header:<code>#include &lt;AUI/JNI/AJni.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_jni_class/#definition","title":"Definition","text":"<pre><code>#define AUI_JNI_CLASS(path, name) \\\nclass name ## _info: public ::aui::jni::GlobalRef { \\\npublic:                           \\\n    static constexpr auto JAVA_CLASS_NAME = #path ## _asl;                        \\\n    [[nodiscard]] static constexpr auto getClassName() noexcept { return #path; } \\\n    [[nodiscard]] static auto getClass() noexcept { static ::aui::jni::GlobalRef t = ::aui::jni::env()-&gt;FindClass(getClassName()); AUI_ASSERTX(t.asClass() != nullptr, \"no such class: \" #path); return t.asClass(); } \\\n                                      \\\n};                                \\\nstruct name: public name ## _info\n</code></pre>"},{"location":"aui_jni_class/#detailed-description","title":"Detailed Description","text":"<p>Usage: <pre><code>namespace com::github::aui::android {\n    AUI_JNI_CLASS(com/github/aui/android/Platform, AUI) {\n    public:\n        // class definition\n        AUI_JNI_STATIC_METHOD(void, callStaticMethod, ())\n        AUI_JNI_METHOD(void, CallNonStaticMethod, ())\n    };\n}\n..\ncom::github::aui::android::Platform::getClassName() -&gt; \"com/github/aui/android/Platform\"\n</code></pre></p>"},{"location":"aui_jni_class/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_jni_globalref/","title":"aui::jni::GlobalRef","text":"<p>Global ref.</p> Header:<code>#include &lt;AUI/JNI/GlobalRef.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_jni_method/","title":"AUI_JNI_METHOD","text":"<p>Defines nonstatic method C++ -&gt; Java.</p> Header:<code>#include &lt;AUI/JNI/AJni.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_jni_method/#definition","title":"Definition","text":"<pre><code>#define AUI_JNI_METHOD(ret_t, name, args) \\\n    ret_t name (AUI_PP_FOR_EACH(AUI_JNI_INTERNAL_OMIT_BRACES, _, args)) { \\\n        static_assert(::aui::jni::convertible&lt;ret_t&gt;, \"return type is required to be convertible\"); \\\n        auto clazz = getClass();                 \\\n        auto e = ::aui::jni::env();              \\\n        const char* signature = ::aui::jni::signature_v&lt;ret_t (AUI_PP_FOR_EACH(AUI_JNI_INTERNAL_OMIT_BRACES, _, args))&gt;; \\\n        static auto methodId = e-&gt;GetMethodID(clazz, #name, signature);    \\\n        if (methodId == 0) {                          \\\n            throw AException(\"no such jni method: {} {}\"_format(#name, signature)); \\\n        }                                         \\\n        return ::aui::jni::callMethod&lt;ret_t&gt;(this-&gt;asObject(), methodId AUI_PP_FOR_EACH(AUI_JNI_INTERNAL_OMIT_BRACES_CONTENTS, _, args)); \\\n    }\n</code></pre>"},{"location":"aui_jni_method/#detailed-description","title":"Detailed Description","text":"<p>Usage: <pre><code>namespace com::github::aui::android {\n    AUI_JNI_CLASS(com/github/aui/android/Platform, Platform) {  // required for AUI_JNI_STATIC_METHOD\n    public:\n        AUI_JNI_METHOD(float, getDpiRatio, ())\n        AUI_JNI_METHOD(void, openUrl, ((const AString&amp;) url))\n        AUI_JNI_METHOD(void, test, ((int) x, (int) y))\n    };\n}\n..\ncom::github::aui::android::Platform::getClassName() -&gt; \"com/github/aui/android/Platform\"\n</code></pre></p>"},{"location":"aui_jni_method/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_jni_static_method/","title":"AUI_JNI_STATIC_METHOD","text":"<p>Defines static method C++ -&gt; Java.</p> Header:<code>#include &lt;AUI/JNI/AJni.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_jni_static_method/#definition","title":"Definition","text":"<pre><code>#define AUI_JNI_STATIC_METHOD(ret_t, name, args) \\\n    static ret_t name (AUI_PP_FOR_EACH(AUI_JNI_INTERNAL_OMIT_BRACES, _, args)) { \\\n        static_assert(::aui::jni::convertible&lt;ret_t&gt;, \"return type is required to be convertible\"); \\\n        auto clazz = getClass();                 \\\n        auto e = ::aui::jni::env();              \\\n        const char* signature = ::aui::jni::signature_v&lt;ret_t (AUI_PP_FOR_EACH(AUI_JNI_INTERNAL_OMIT_BRACES, _, args))&gt;; \\\n        static auto methodId = e-&gt;GetStaticMethodID(clazz, #name, signature);    \\\n        if (methodId == 0) {                          \\\n            throw AException(\"no such static jni method: {} {}\"_format(#name, signature)); \\\n        }                                         \\\n        return ::aui::jni::callStaticMethod&lt;ret_t&gt;(clazz, methodId AUI_PP_FOR_EACH(AUI_JNI_INTERNAL_OMIT_BRACES_CONTENTS, _, args)); \\\n    }\n</code></pre>"},{"location":"aui_jni_static_method/#detailed-description","title":"Detailed Description","text":"<p>Usage: <pre><code>namespace com::github::aui::android {\n    AUI_JNI_CLASS(com/github/aui/android/Platform, Platform) {  // required for AUI_JNI_STATIC_METHOD\n    public:\n        AUI_JNI_STATIC_METHOD(float, getDpiRatio, ())\n        AUI_JNI_STATIC_METHOD(void, openUrl, ((const AString&amp;) url))\n        AUI_JNI_STATIC_METHOD(void, test, ((int) x, (int) y))\n    };\n}\n..\ncom::github::aui::android::Platform::getClassName() -&gt; \"com/github/aui/android/Platform\"\n</code></pre></p>"},{"location":"aui_jni_static_method/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_lambda_overloaded/","title":"aui::lambda_overloaded","text":"Header:<code>#include &lt;AUI/Traits/callables.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_lambda_overloaded/#examples","title":"Examples","text":"examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>auto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n                  }\n                  return formatDate(*v);\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n                            return float(d.count()) / float(MAX_DURATION.count());\n                        },\n                        [](aui::float_within_0_1 d) -&gt; high_resolution_clock::duration {\n                            return high_resolution_clock::duration(long(float(d) * float(MAX_DURATION.count())));\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>        mConnection = connect(mCell.value, [this](const formula::Value&amp; v) {\n            ALayoutInflater::inflate(\n                this,\n                std::visit(\n                    aui::lambda_overloaded {\n                      [](std::nullopt_t) -&gt; _&lt;AView&gt; { return _new&lt;AView&gt;(); },\n                      [](double v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) } AUI_WITH_STYLE { ATextAlign::RIGHT }; },\n                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n</code></pre></p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p>"},{"location":"aui_lazy/","title":"aui::lazy","text":"<p>A value that initializes when accessed for the first time.</p> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_let/","title":"AUI_LET","text":"<p>Performs multiple operations on a single object without repeating its name (in place)        This function can be used as an operator on object.</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_let/#definition","title":"Definition","text":"<pre><code>#define AUI_LET ^ [&amp;](const auto&amp; it)\n</code></pre>"},{"location":"aui_let/#detailed-description","title":"Detailed Description","text":"<p>Analogue to <code>with</code>, <code>apply</code> in Kotlin.</p> <p><code>AUI_LET</code> allows to call methods of newly created objects right in place. For example:</p> without with <pre><code>auto tf = _new&lt;ATextField&gt;();\ntf-&gt;setText(\"Hello!\");\n</code></pre> <pre><code>auto tf = _new&lt;ATextField&gt;() AUI_LET { it-&gt;setText(\"Hello!\"); };\n</code></pre> <p>It's especially useful when building user interfaces:</p> without with <pre><code>auto tf1 = _new&lt;ATextField&gt;();\ntf1-&gt;setText(\"Hello!\");\nauto tf2 = _new&lt;ATextField&gt;();\ntf2-&gt;setText(\"World!\");\n...\nsetContents(Vertical { // confusing\n    tf1,\n    tf2,\n});\n</code></pre> <pre><code>// clean, less code and easy to understand\nsetContents(Vertical {\n    _new&lt;ATextField&gt;() AUI_LET { it-&gt;setText(\"Hello!\") },\n    _new&lt;ATextField&gt;() AUI_LET { it-&gt;setText(\"World!\") },\n});\n</code></pre>"},{"location":"aui_let/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n                             t&lt;AScrollAreaViewport&gt;(),\n                             AOverflow::VISIBLE,\n                         },\n</code></pre></p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>    GameOfLifeWindow() : AWindow(\"Game of Life\") {\n        setContents(Vertical {\n          Centered {\n            Horizontal {\n              _new&lt;AButton&gt;(\"Randomize\") AUI_LET {\n                      connect(it-&gt;clicked, AUI_SLOT(mCells)::randomize);\n                  },\n              _new&lt;AButton&gt;() AUI_LET {\n                      it &amp; mCells.isRunning &gt; [](AButton&amp; b, bool isRunning) {\n                          b.setText(isRunning ? \"Pause\" : \"Run\");\n</code></pre></p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    setContents(Vertical {\n      _form({\n        {\n          \"Cells by width:\"_as,\n          mWidth = _new&lt;ANumberPicker&gt;() AUI_LET {\n                       it-&gt;setMin(8);\n                       it-&gt;setMax(25);\n                   },\n        },\n        {\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>        _new&lt;AButton&gt;(\"Jump to coords...\")\n            .connect(&amp;AButton::clicked, this, [&amp;, fractal]() { _new&lt;JumpToCoordsWindow&gt;(fractal, this)-&gt;show(); }),\n        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n                it-&gt;setMax(1000);\n                it-&gt;setValue(350);\n            },\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>auto formatDate(system_clock::time_point date) { return \"{0:%d}.{0:%m}.{0:%G}\"_format(date); }\n\nauto dateTextField(DateTextFieldState&amp; state) {\n    return _new&lt;ATextField&gt;() AUI_LET {\n        AObject::biConnect(\n            state.parsed.biProjected(aui::lambda_overloaded {\n              [](const AOptional&lt;system_clock::time_point&gt;&amp; v) -&gt; AString {\n                  if (!v) {\n                      return \"\";\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>          Vertical::Expanding {\n            Horizontal {\n              Label { \"Elapsed Time:\" },\n              Centered::Expanding {\n                _new&lt;AProgressBar&gt;() AUI_LET {\n                        it &amp; mElapsedTimeRatio;\n                        it-&gt;setCustomStyle({ Expanding { 1, 0 } });\n                    },\n              },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>                      auto radiusPopup = _new&lt;AWindow&gt;(\n                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n                                connect(\n                                    it-&gt;valueChanging, [this, circle](aui::float_within_0_1 s) {\n                                        circle-&gt;radius = s * MAX_RADIUS;\n                                        mState-&gt;circles.notify();\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>            _new&lt;ATextField&gt;() AUI_WITH_STYLE {\n                  MinSize { 0 },\n                  Margin { 0 },\n                  BorderRadius { 0 },\n                } AUI_LET {\n                    it &amp;&amp; mState-&gt;currentExpression;\n                    it-&gt;focus();\n                    connect(it-&gt;focusLost, me::commitExpression);\n                });\n    }\n</code></pre></p> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa. <pre><code>using namespace declarative;\n\nauto myPicker() {\n    return _new&lt;ANumberPicker&gt;() AUI_LET {\n        it-&gt;setMin(-999);\n        it-&gt;setMax(999);\n    };\n}\n</code></pre></p>"},{"location":"aui_let/#examples_1","title":"Examples","text":"examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>                    close();\n                } catch (...) {\n                    AMessageBox::show(this, \"Error\", \"Please check your values are valid numbers.\");\n                }\n            }) AUI_LET { it-&gt;setDefault(); },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    pack();\n</code></pre></p>"},{"location":"aui_link/","title":"aui_link","text":"<p>Alias to target_link_libraries with additional rules (see below)</p>"},{"location":"aui_link/#syntax","title":"Syntax","text":"<pre><code>aui_link(aui.example.views PRIVATE aui::core aui::views aui::audio aui::curl)\n</code></pre> <pre><code>aui_link(&lt;target&gt;\n        &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...\n        [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)\n</code></pre> <p>In contrast to <code>target_link_libraries</code>, the only one syntax variant is allowed.</p> <p>The <code>PUBLIC</code>, <code>PRIVATE</code> and <code>INTERFACE</code> scope keywords can be used to specify both the link dependencies and the link  interface in one command.</p> <p>Libraries and targets following <code>PUBLIC</code> are linked to, and are made part of the link interface. Libraries and targets following <code>PRIVATE</code> are linked to, but are not made part of the link interface. Libraries following <code>INTERFACE</code> are appended to the link interface and are not used for linking <code>&lt;target&gt;</code>.</p> <p>If building with <code>BUILD_SHARED_LIBS=OFF</code>, the following rules apply: 1. Visibility is forced to <code>PUBLIC</code> to propagate static libraries up to the executable. 2. Target <code>&lt;item&gt;</code>s with <code>INTERFACE_AUI_WHOLEARCHIVE=TRUE</code> are wrapped with compiler-specific flags during linkage to    enable whole archive linking (i.e., forbid dropping of unused symbols). This is essential when linking to binaries    with AUI Assets. 3. The <code>&lt;item&gt;</code>s are reordered this way: from the most dependant target to the less dependant target.</p> <p>If A depends on B; C depends on both A and B, you should write    <pre><code>target_link_libraries(C PRIVATE A B)\n</code></pre>    and not    <pre><code>target_link_libraries(C PRIVATE B A)  #Wrong!\n</code></pre></p>"},{"location":"aui_mark_as_used/","title":"AUI_MARK_AS_USED","text":"<p>Marks the variable as being used.</p> Header:<code>#include &lt;AUI/Traits/macros.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_mark_as_used/#definition","title":"Definition","text":"<pre><code>#define AUI_MARK_AS_USED(variable) { (void)variable; }\n</code></pre>"},{"location":"aui_mark_as_used/#detailed-description","title":"Detailed Description","text":"<p>Silences the unused variable compiler warning.</p> <p>Can be used to force <code>[=]</code> lambda to capture a variable.</p>"},{"location":"aui_mark_as_used/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_module/","title":"aui_module","text":"<p>Wraps standard <code>add_library</code> with AUI's features support.</p> <p>Automatically adds all <code>c</code> and <code>cpp</code> source files from <code>src/</code> directory.</p>"},{"location":"aui_module/#syntax","title":"Syntax","text":"<pre><code>aui_module(\n    # common\n    &lt;target-name&gt;\n    [ADDITIONAL_SRCS &lt;src1 src2 ...&gt;]\n    [EXPORT &lt;export-name&gt;]\n    [FORCE_SHARED]\n    [FORCE_STATIC]\n    [PLUGIN]\n    [WHOLEARCHIVE]\n</code></pre>"},{"location":"aui_module/#additional_srcs","title":"ADDITIONAL_SRCS","text":"<p>Specify additional source files to be passed to <code>add_executable</code>. The value is not modified and kept as is.</p>"},{"location":"aui_module/#export","title":"EXPORT","text":"<p>Adds the resulting target to CMake export <code>&lt;export-name&gt;</code>.</p>"},{"location":"aui_module/#force_shared","title":"FORCE_SHARED","text":"<p>The target is compiled as a shared library, regardless of <code>BUILD_SHARED_LIBS</code>.</p>"},{"location":"aui_module/#force_static","title":"FORCE_STATIC","text":"<p>The target is compiled as a static library, regardless of <code>BUILD_SHARED_LIBS</code>.</p>"},{"location":"aui_module/#plugin","title":"PLUGIN","text":"<p>The target is a dynamically loadable AUI plugin.</p>"},{"location":"aui_module/#WHOLEARCHIVE","title":"WHOLEARCHIVE","text":"<p>The target is compiled with <code>wholearchive</code> compiler-specific flag, forcing all unused variables to be included to the  binary. This may be required by AUI Assets.</p>"},{"location":"aui_no_escape/","title":"aui::no_escape","text":"<p>A funcntion contract that does not allow escaping, allowing to accept lvalue ref, rvalue ref, shared_ptr and etc without overhead</p> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_no_escape/#detailed-description","title":"Detailed Description","text":"<p>Promises that the contained object wouldn't be copied/moved/referenced outside the function where the no_escape came to; thus does not take responsibility of deleting the object. This allows to accept any kind of lifetimes: lvalue and rvalue references, pointers, unique_ptr and shared_ptr without ref counter modification.</p> <p>Intended to use in function arguments.</p> <p>Accepts lvalue ref, rvalue ref, ptr and shared_ptr. Does not accepts null.</p>"},{"location":"aui_no_escape/#examples","title":"Examples","text":"examples/7guis/cells/src/Tokens.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>};\n\nusing Any = std::variant&lt;Identifier, Double, Semicolon, LPar, RPar, Colon, Plus, Minus, Asterisk, Slash, LAngle, RAngle, StringLiteral&gt;;\n\nAVector&lt;token::Any&gt; parse(aui::no_escape&lt;ATokenizer&gt; t);\n\n}   // namespace token\n</code></pre></p> examples/7guis/cells/src/Tokens.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code> */\n\n#include \"Tokens.h\"\n\nAVector&lt;token::Any&gt; token::parse(aui::no_escape&lt;ATokenizer&gt; t) {\n    AVector&lt;token::Any&gt; out;\n    t-&gt;readChar();   // =\n    try {\n        while (!t-&gt;isEof()) {\n            switch (char c = t-&gt;readChar()) {\n</code></pre></p>"},{"location":"aui_no_optimize_out/","title":"AUI_NO_OPTIMIZE_OUT","text":"<p>Forbids object from being optimized out by compiler.</p> Header:<code>#include &lt;AUI/Traits/macros.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_no_optimize_out/#definition","title":"Definition","text":"<pre><code>#define AUI_NO_OPTIMIZE_OUT(object) { auto unused = &amp;object ; }\n</code></pre>"},{"location":"aui_no_optimize_out/#detailed-description","title":"Detailed Description","text":"<p>Performs compiler hacks in order to prevent the compiler/linker from optimizing out the specified object. It's useful for debugging purposes, when the function is expected to exist to be called.</p> <p>The macro should be called in any function/method which is not being optimized out (i.e. in destructor).</p> <p>Basic usage: <pre><code>struct SomeClass {\npublic:\n  ~SomeClass() {\n      AUI_NO_OPTIMIZE_OUT(SomeClass::debuggerMethod)\n  }\n\n  int debuggerMethod() {\n    ...\n  }\n}\n</code></pre></p>"},{"location":"aui_no_optimize_out/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_non_null/","title":"aui::non_null","text":"<p>A contract that enforces non-nullable initialization.</p> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_non_null/#detailed-description","title":"Detailed Description","text":"<p>If initialized with a value that equals to <code>nullptr</code>, issues a runtime assertion failure.</p> <p>If initialized with <code>nullptr</code> itself, throws a compile-time error.</p> <pre><code>void render(aui::non_null&lt;_&lt;AView&gt;&gt; view) {\n    view-&gt;render();\n}\n\nrender(someView); // ok\nsomeView = nullptr;\nrender(someView); // assertion failure in runtime\nrender(nullptr); // compile-time error\n</code></pre>"},{"location":"aui_non_null_lateinit/","title":"aui::non_null_lateinit","text":"<p>A contract that enforces non-nullable initialization at a later point in time.</p> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_non_null_lateinit/#detailed-description","title":"Detailed Description","text":"<p>Same as aui::non_null but allows default ctor. This is particularly useful for scenarios where initial setup data is unavailable at object creation time, but you require a guarantee that the value will be assigned before it is accessed.</p> <p>If initialized with a value that equals to <code>nullptr</code>, issues a runtime assertion failure.</p> <p>If initialized with <code>nullptr</code> itself, throws a compile-time error.</p>"},{"location":"aui_noncopyable/","title":"aui::noncopyable","text":"<p>Forbids copy of your class.</p> <pre><code>class MyObject: public aui::noncopyable {\nprivate:\n    void* mResource;\n}\n...\nMyObject obj1;\nMyObject obj2 = obj1; // error\nMyObject obj3 = std::move(obj); // but this one is ok\n</code></pre> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_perform_as_member/","title":"AUI_PERFORM_AS_MEMBER","text":"<p>Performs multiple operations on a single object without repeating its name.</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_perform_as_member/#definition","title":"Definition","text":"<pre><code>#define AUI_PERFORM_AS_MEMBER(object, lambda)                                                  \\\n    struct __apply ## __FUNCTION__ ## __LINE__   : std::decay_t&lt;decltype(object)&gt; { \\\n        void operator()() {                                                    \\\n            lambda;                                                            \\\n        }                                                                      \\\n    };                                                                         \\\n    (static_cast&lt;__apply ## __FUNCTION__ ## __LINE__ &amp;&gt;(object))()\n</code></pre>"},{"location":"aui_perform_as_member/#detailed-description","title":"Detailed Description","text":"<p>It's an analogue to <code>with</code>, <code>apply</code> in Kotlin.</p> without with <pre><code>class Worker {\npublic:\n  void buildHouse();\n  void plantTree();\n  void raiseSon();\n};\n...\nauto worker = _new&lt;Worker&gt;();\nworker-&gt;buildHouse();\nworker-&gt;plantTree();\nworker-&gt;raiseSon();\n</code></pre> <pre><code>class Worker {\npublic:\n  void buildHouse();\n  void plantTree();\n  void raiseSon();\n};\n...\nauto worker = _new&lt;Worker&gt;();\nAUI_PERFORM_AS_MEMBER(*worker, {\n  buildHouse();\n  plantTree();\n  raiseSon();\n});\n</code></pre>"},{"location":"aui_perform_as_member/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_cat/","title":"AUI_PP_CAT","text":"<p>Expands and concatenates the arguments. Constructed macros reevaluate.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_cat/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_CAT(_1, _2) AUI_PP_INTERNAL_CAT(_1, _2)\n</code></pre>"},{"location":"aui_pp_cat/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_comma/","title":"AUI_PP_COMMA","text":"<p>Returns a comma. Given a variadic number of arguments.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_comma/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_COMMA(...) ,\n</code></pre>"},{"location":"aui_pp_comma/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_comma_if/","title":"AUI_PP_COMMA_IF","text":"<p>Returns comma if <code>_i != 0</code>. Requires <code>_i</code> to be between 0 and 15.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_comma_if/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_COMMA_IF(_i) AUI_PP_CAT(AUI_PP_INTERNAL_COMMA_IF_, _i)\n</code></pre>"},{"location":"aui_pp_comma_if/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_empty/","title":"AUI_PP_EMPTY","text":"<p>Returns empty. Given a variadic number of arguments.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_empty/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_EMPTY(...)\n</code></pre>"},{"location":"aui_pp_empty/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_for_each/","title":"AUI_PP_FOR_EACH","text":"<p>Expands to _Macro(0, _Data, e1) _Macro(1, _Data, e2) ... _Macro(K -1, _Data, eK) as many of AUI_INTERNAL_NARG0 _Tuple.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_for_each/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_FOR_EACH(_Macro, _Data, _Tuple)                        \\\n  AUI_PP_CAT(AUI_PP_INTERNAL_FOR_EACH_IMPL_, AUI_PP_NARG0 _Tuple) \\\n  (0, _Macro, _Data, _Tuple)\n</code></pre>"},{"location":"aui_pp_for_each/#detailed-description","title":"Detailed Description","text":"<p>Requires: - <code>_Macro</code> can be called with 3 arguments. - <code>_Tuple</code> expansion has no more than 15 elements.</p>"},{"location":"aui_pp_for_each/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_generic_if/","title":"AUI_PP_GENERIC_IF","text":"<p>Similar to AUI_PP_IF but takes _Then and _Else in parentheses.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_generic_if/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_GENERIC_IF(_Cond, _Then, _Else) \\\n  AUI_PP_REMOVE_PARENS(AUI_PP_IF(_Cond, _Then, _Else))\n</code></pre>"},{"location":"aui_pp_generic_if/#detailed-description","title":"Detailed Description","text":"<pre><code>AUI_PP_GENERIC_IF(1, (a, b, c), (d, e, f)) =&gt; a, b, c\nAUI_PP_GENERIC_IF(0, (a, b, c), (d, e, f)) =&gt; d, e, f\n</code></pre>"},{"location":"aui_pp_generic_if/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_has_comma/","title":"AUI_PP_HAS_COMMA","text":"<p>Returns 1 if the expansion of arguments has an unprotected comma.Otherwise returns 0.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_has_comma/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_HAS_COMMA(...) \\\n  AUI_PP_INTERNAL_16TH(       \\\n      (__VA_ARGS__, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0))\n</code></pre>"},{"location":"aui_pp_has_comma/#detailed-description","title":"Detailed Description","text":"<p>Requires no more than 15 unprotected commas.</p>"},{"location":"aui_pp_has_comma/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_head/","title":"AUI_PP_HEAD","text":"<p>Returns the first argument.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_head/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_HEAD(...) AUI_PP_INTERNAL_HEAD((__VA_ARGS__, unusedArg))\n</code></pre>"},{"location":"aui_pp_head/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_identity/","title":"AUI_PP_IDENTITY","text":"<p>Returns the only argument.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_identity/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_IDENTITY(_1) _1\n</code></pre>"},{"location":"aui_pp_identity/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_if/","title":"AUI_PP_IF","text":"<p>Evaluates to _Then if _Cond is 1 and _Else if _Cond is 0.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_if/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_IF(_Cond, _Then, _Else) \\\n  AUI_PP_CAT(AUI_PP_INTERNAL_IF_, _Cond)(_Then, _Else)\n</code></pre>"},{"location":"aui_pp_if/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_inc/","title":"AUI_PP_INC","text":"<p>Increments the argument, requires the argument to be between 0 and 15.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_inc/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_INC(_i) AUI_PP_CAT(AUI_PP_INTERNAL_INC_, _i)\n</code></pre>"},{"location":"aui_pp_inc/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_is_begin_parens/","title":"AUI_PP_IS_BEGIN_PARENS","text":"<p>Expands to 1 if the first argument starts with something in parentheses, otherwise to 0.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_is_begin_parens/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_IS_BEGIN_PARENS(...)                              \\\n  AUI_PP_HEAD(AUI_PP_CAT(AUI_PP_INTERNAL_IBP_IS_VARIADIC_R_, \\\n                             AUI_PP_INTERNAL_IBP_IS_VARIADIC_C __VA_ARGS__))\n</code></pre>"},{"location":"aui_pp_is_begin_parens/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_is_empty/","title":"AUI_PP_IS_EMPTY","text":"<p>If the arguments after expansion have no tokens, evaluates to <code>1</code>. Otherwise evaluates to <code>0</code>.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_is_empty/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_IS_EMPTY(...)                                               \\\n  AUI_PP_INTERNAL_IS_EMPTY(AUI_PP_HAS_COMMA(__VA_ARGS__),                \\\n                             AUI_PP_HAS_COMMA(AUI_PP_COMMA __VA_ARGS__), \\\n                             AUI_PP_HAS_COMMA(__VA_ARGS__()),              \\\n                             AUI_PP_HAS_COMMA(AUI_PP_COMMA __VA_ARGS__()))\n</code></pre>"},{"location":"aui_pp_is_empty/#detailed-description","title":"Detailed Description","text":"<p>Requires: - the number of arguments after expansion is at most 15. - If the argument is a macro, it must be able to be called with one argument.</p>"},{"location":"aui_pp_is_empty/#implementation-details","title":"Implementation details","text":"<p>There is one case when it generates a compile error: if the argument is macro that cannot be called with one argument.</p> <pre><code>#define M(a, b)  // it doesn't matter what it expands to\n\n// Expected: expands to `0`.\n// Actual: compile error.\nAUI_PP_IS_EMPTY(M)\n</code></pre> <p>There are 4 cases tested:</p> <ul> <li><code>__VA_ARGS__</code> possible expansion has no unparen'd commas. Expected 0.</li> <li><code>__VA_ARGS__</code> possible expansion is not enclosed in parenthesis. Expected 0.</li> <li><code>__VA_ARGS__</code> possible expansion is not a macro that ()-evaluates to a comma. Expected 0</li> <li><code>__VA_ARGS__</code> is empty, or has unparen'd commas, or is enclosed in parenthesis, or is a macro that ()-evaluates to comma. Expected 1.</li> </ul> <p>We trigger detection on '0001', i.e. on empty.</p>"},{"location":"aui_pp_is_empty/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_is_enclosed_parens/","title":"AUI_PP_IS_ENCLOSED_PARENS","text":"<p>Expands to 1 is there is only one argument and it is enclosed in parentheses.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_is_enclosed_parens/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_IS_ENCLOSED_PARENS(...)             \\\n  AUI_PP_IF(AUI_PP_IS_BEGIN_PARENS(__VA_ARGS__), \\\n              AUI_PP_IS_EMPTY(AUI_PP_EMPTY __VA_ARGS__), 0)\n</code></pre>"},{"location":"aui_pp_is_enclosed_parens/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_narg/","title":"AUI_PP_NARG","text":"<p>Evaluates to the number of arguments after expansion.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_narg/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_NARG(...) \\\n  AUI_PP_INTERNAL_16TH(  \\\n      (__VA_ARGS__, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0))\n</code></pre>"},{"location":"aui_pp_narg/#detailed-description","title":"Detailed Description","text":"<pre><code>#define PAIR x, y\n\nAUI_PP_NARG() =&gt; 1\nAUI_PP_NARG(x) =&gt; 1\nAUI_PP_NARG(x, y) =&gt; 2\nAUI_PP_NARG(PAIR) =&gt; 2\n</code></pre> <p>Requires: the number of arguments after expansion is at most 15.</p>"},{"location":"aui_pp_narg/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_narg0/","title":"AUI_PP_NARG0","text":"<p>Evaluates to the number of arguments after expansion. Identifies 'empty' as 0.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_narg0/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_NARG0(...) \\\n  AUI_PP_IF(AUI_PP_IS_EMPTY(__VA_ARGS__), 0, AUI_PP_NARG(__VA_ARGS__))\n</code></pre>"},{"location":"aui_pp_narg0/#detailed-description","title":"Detailed Description","text":"<pre><code>#define PAIR x, y\n\nAUI_PP_NARG0() =&gt; 0\nAUI_PP_NARG0(x) =&gt; 1\nAUI_PP_NARG0(x, y) =&gt; 2\nAUI_PP_NARG0(PAIR) =&gt; 2\n</code></pre> <p>Requires: - the number of arguments after expansion is at most 15. - If the argument is a macro, it must be able to be called with one argument.</p>"},{"location":"aui_pp_narg0/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_remove_parens/","title":"AUI_PP_REMOVE_PARENS","text":"<p>Remove the parens, requires AUI_PP_IS_ENCLOSED_PARENS(args) =&gt; 1.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_remove_parens/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_REMOVE_PARENS(...) AUI_PP_INTERNAL_REMOVE_PARENS __VA_ARGS__\n</code></pre>"},{"location":"aui_pp_remove_parens/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_repeat/","title":"AUI_PP_REPEAT","text":"<p>Expands to _Macro(0, _Data, ) _Macro(1, _Data, ) ... _Macro(K - 1, _Data, )</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_repeat/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_REPEAT(_Macro, _Data, _N)           \\\n  AUI_PP_CAT(AUI_PP_INTERNAL_FOR_EACH_IMPL_, _N) \\\n  (0, _Macro, _Data, AUI_PP_INTENRAL_EMPTY_TUPLE)\n</code></pre>"},{"location":"aui_pp_repeat/#detailed-description","title":"Detailed Description","text":"<p>Empty if <code>_K = 0</code>. Requires: - <code>_Macro</code> can be called with 3 arguments. - <code>_K</code> literal between 0 and 15.</p>"},{"location":"aui_pp_repeat/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_stringize/","title":"AUI_PP_STRINGIZE","text":"<p>Expands and stringifies the only argument.</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_stringize/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_STRINGIZE(...) AUI_PP_INTERNAL_STRINGIZE(__VA_ARGS__)\n</code></pre>"},{"location":"aui_pp_stringize/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_tail/","title":"AUI_PP_TAIL","text":"<p>Returns the tail. A variadic list of all arguments minus the first</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_tail/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_TAIL(...) AUI_PP_INTERNAL_TAIL((__VA_ARGS__))\n</code></pre>"},{"location":"aui_pp_tail/#detailed-description","title":"Detailed Description","text":"<p>Requires at least one argument.</p>"},{"location":"aui_pp_tail/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_pp_variadic_call/","title":"AUI_PP_VARIADIC_CALL","text":"<p>Calls CAT(_Macro, NARG(VA_ARGS))(VA_ARGS)</p> Header:<code>#include &lt;AUI/Util/APreprocessor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_pp_variadic_call/#definition","title":"Definition","text":"<pre><code>#define AUI_PP_VARIADIC_CALL(_Macro, ...) \\\n  AUI_PP_IDENTITY(                        \\\n      AUI_PP_CAT(_Macro, AUI_PP_NARG(__VA_ARGS__))(__VA_ARGS__))\n</code></pre>"},{"location":"aui_pp_variadic_call/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_propertymodifier/","title":"aui::PropertyModifier","text":"<p>Temporary transparent object that gains write access to underlying property's value, notifying about value changes when destructed.</p> Header:<code>#include &lt;AUI/Common/PropertyModifier.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_propertymodifier/#detailed-description","title":"Detailed Description","text":"<p>PropertyModifier is a result of <code>writeScope()</code> method of writeable properties. Also, it is used inside non-const operator implementations (see below). It gains transparent writeable handle to property's value, and calls <code>notify()</code> method on associated property upon PropertyModifier destruction.</p> <p>Non-const operators of properties such as non-const versions of <code>operator=</code>, <code>operator+=</code>, <code>operator-=</code> have a side effect of emitting <code>changed</code> signal upon operation completion. This ensures that modifying access to the property can be observed.</p> <p><pre><code>AProperty&lt;int&gt; counter = 0;\nAObject::connect(counter.changed, AUI_SLOT(observer)::observeInt);\nEXPECT_CALL(observer, observeInt(1)).Times(1);\ncounter += 1; // observable by observeInt\n</code></pre> <pre><code>AProperty&lt;AString&gt; name = \"Hello\";\nAObject::connect(name.changed, AUI_SLOT(observer)::observeString);\nEXPECT_CALL(observer, observeString(\"Hello world\"_as)).Times(1);\nname += \" world\"; // observable by observeString\n</code></pre></p> <p>Note</p> <p>Make sure your read-only operators (such as <code>operator+</code>, <code>operator-</code>) have marked const, otherwise property would treat them as a writing access, resulting in unwanted signaling <code>changed</code> upon each access.</p> <pre><code>AProperty&lt;int&gt; counter = 0;\nAObject::connect(counter.changed, AUI_SLOT(observer)::observeInt);\nEXPECT_CALL(observer, observeInt(testing::_)).Times(0);\nint nextCounter = counter + 1; // read-only access; noone is notified\n</code></pre>"},{"location":"aui_propertymodifier/#member-access-operator-operator-","title":"Member access operator (operator-&gt;)","text":"<p><code>operator-&gt;</code> is a special case. <code>operator-&gt;</code> having both non-const and const versions is a common practice, so there's should be a way to distinguish between non-const access and const access, preferring the latter if possible. The const version of <code>operator-&gt;</code> can be used directly on property: <pre><code>EXPECT_CALL(observer, observeString(testing::_)).Times(0);\nAProperty&lt;AString&gt; name = \"Hello\";\nAObject::connect(name.changed, AUI_SLOT(observer)::observeString);\n\n// returns const pointer\nauto data = name-&gt;data();\n</code></pre> property-system is designed in such a way you would explicitly express a modifying operation via binary equals operator (and favours such as <code>+=</code>, <code>-=</code>):</p> <p><pre><code>AProperty&lt;AString&gt; name = \"Hello\";\nAObject::connect(name.changed, AUI_SLOT(observer)::observeString);\n\nEXPECT_CALL(observer, observeString(\"Test\"_as)).Times(1);\nname = \"Test\";\n</code></pre> However, it is still possible to achieve non-const version of <code>operator-&gt;</code>. To do this, you need a <code>aui::PropertyModifier</code> object that grants such access: <pre><code>AProperty&lt;AString&gt; name = \"Hello\";\nAObject::connect(name.changed, AUI_SLOT(observer)::observeString);\n\nEXPECT_CALL(observer, observeString(\"Hell\"_as)).Times(1);\nname.writeScope()-&gt;removeAll('o');\n</code></pre></p> <p>You need to be careful when performing multiple operations at once. Design rationale behind <code>writeScope()</code> method makes it painful (by intention) performing multiple accesses, since it would lead to unwanted change notifications during the process: <pre><code>// WRONG WAY\nEXPECT_CALL(observer, observeString(\"Hell\"_as)).Times(1);\nname.writeScope()-&gt;removeAll('o');\n\nEXPECT_CALL(observer, observeString(\"He\"_as)).Times(1);\nname.writeScope()-&gt;removeAll('l');\n</code></pre></p> <p>The right way is to create <code>aui::PropertyModifier</code> just once. This will produce exactly one notification, ensuring that modifications to the property are performed atomically. This means that all operations within the scope of <code>aui::PropertyModifier</code> produced by <code>writeScope()</code> will be treated as one unit, and only one change notification will be emitted. <pre><code>// RIGHT WAY\nEXPECT_CALL(observer, observeString(\"He\"_as)).Times(1);\nauto nameWriteable = name.writeScope();\nnameWriteable-&gt;removeAll('o');\nnameWriteable-&gt;removeAll('l');\n</code></pre></p>"},{"location":"aui_ptr_alias/","title":"AUI_PTR_ALIAS","text":"<p>Constructs an alias shared_ptr.</p> Header:<code>#include &lt;AUI/Common/SharedPtrTypes.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_ptr_alias/#definition","title":"Definition","text":"<pre><code>#define AUI_PTR_ALIAS(owner, field) aui::ptr::alias(owner, owner-&gt;field)\n</code></pre>"},{"location":"aui_ptr_alias/#detailed-description","title":"Detailed Description","text":"<p>Shares ownership information with the initial value of <code>owner</code>, but holds a pointer to field whose name is specified by <code>field</code>. If this shared_ptr is the last of the group to go out of scope, it will call the stored deleter for the object originally managed by <code>owner</code>. However, calling <code>get()</code> on this <code>shared_ptr</code> will always return a copy of pointer to the field.</p> <pre><code>_&lt;AView&gt; minimalCheckBox(_&lt;AProperty&lt;bool&gt;&gt; state) {\n   // lifetime is managed by _&lt;State&gt; in the outer scope, however,\n   // the bool field is all we need.\n   return CheckBox { .value = AUI_REACT(*state), ... };\n}\n\nAUI_ENTRY {\n  auto window = _new&lt;AWindow&gt;(\"Checkbox\", 300_dp, 100_dp);\n  _&lt;State&gt; state = _new&lt;State&gt;();\n  window-&gt;setContents(\n     Vertical {\n        minimalCheckBox(AUI_PTR_ALIAS(state, checked)),\n     }\n  );\n  window-&gt;show();\n  return 0;\n}\n</code></pre> <p>This macro enable developers to create <code>shared_ptr</code> that manage the lifetime of a parent object while directly referencing a specific member or sub-object. This enhances flexibility in managing object ownership where a component might only need a pointer to a specific property within a larger state object, as demonstrated by the example above.</p>"},{"location":"aui_ptr_alias/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_ranged_number/","title":"aui::ranged_number","text":"<p>Clamps the possible values for a number to the specified range: <code>[min;max]</code></p> Header:<code>#include &lt;AUI/Traits/values.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_react/","title":"AUI_REACT","text":"<p>Explicitly denotes a reactive expression.</p> Header:<code>#include &lt;AUI/Traits/macros.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_react/#definition","title":"Definition","text":"<pre><code>#define AUI_REACT(expression) [=]() -&gt; decltype(auto) { return (expression); }\n</code></pre>"},{"location":"aui_react/#detailed-description","title":"Detailed Description","text":"<p>AUI_REACT is a core component of AUI Framework's reactive reactive programming model. It's used to create reactive expressions that automatically update UI elements when their dependent values change.</p> <p>The expression is a C++ expression that depends on AProperty values:</p> <pre><code>AUI_REACT(expression)\n</code></pre>"},{"location":"aui_react/#basic-example","title":"Basic example","text":"<p>This creates a label that automatically updates when property <code>mCounter</code> changes:</p> <pre><code>class CounterWindow : public AWindow {\npublic:\n    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCounter;\n};\n</code></pre>"},{"location":"aui_react/#formatted-label-example","title":"Formatted label example","text":"<pre><code>class TimerWindow : public AWindow {\npublic:\n    TimerWindow() : AWindow(\"AUI - 7GUIs - Timer\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Vertical::Expanding {\n            Horizontal {\n              Label { \"Elapsed Time:\" },\n              Centered::Expanding {\n                _new&lt;AProgressBar&gt;() AUI_LET {\n                        it &amp; mElapsedTimeRatio;\n                        it-&gt;setCustomStyle({ Expanding { 1, 0 } });\n                    },\n              },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n                            return float(d.count()) / float(MAX_DURATION.count());\n                        },\n                        [](aui::float_within_0_1 d) -&gt; high_resolution_clock::duration {\n                            return high_resolution_clock::duration(long(float(d) * float(MAX_DURATION.count())));\n                        },\n                      });\n                      it-&gt;setCustomStyle({ Expanding {} });\n                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n    }\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    high_resolution_clock::time_point mStartTime = high_resolution_clock::now();\n    AProperty&lt;high_resolution_clock::time_point&gt; mCurrentTime;\n    AProperty&lt;high_resolution_clock::duration&gt; mDuration = 30s;\n\n    APropertyPrecomputed&lt;high_resolution_clock::duration&gt; mElapsedTime = [&amp;] {\n        return std::min(mCurrentTime - mStartTime, *mDuration);\n    };\n\n    APropertyPrecomputed&lt;aui::float_within_0_1&gt; mElapsedTimeRatio = [&amp;] {\n        return float(mElapsedTime-&gt;count()) / float(mDuration-&gt;count());\n    };\n\n    void update() { mCurrentTime = high_resolution_clock::now(); }\n\n    void reset() { mStartTime = high_resolution_clock::now(); }\n};\n</code></pre>"},{"location":"aui_react/#implementation-details","title":"Implementation details","text":"<p>When used in declarative UI building, <code>AUI_REACT</code> creates an instance of <code>APropertyPrecomputed&lt;T&gt;</code> behind the scenes, which:</p> <ol> <li>Evaluates the expression initially.</li> <li>Sets up observers for all dependent properties.</li> <li>Re-evaluates when dependencies change.</li> </ol> <p>The macros itself consists of a lambda syntax with forced <code>[=]</code> capture and explicit <code>decltype(auto)</code> return type.</p>"},{"location":"aui_react/#examples","title":"Examples","text":"examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter. <pre><code>public:\n    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>                        it-&gt;setCustomStyle({ Expanding { 1, 0 } });\n                    },\n              },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n                        [](high_resolution_clock::duration d) -&gt; aui::float_within_0_1 {\n</code></pre></p>"},{"location":"aui_react/#examples_1","title":"Examples","text":"examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre></p>"},{"location":"aui_react_dependencyobserver/","title":"aui::react::DependencyObserver","text":"<p>Reactive expressions namespace.</p> Header:<code>#include &lt;AUI/Common/React.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_reflect_detail_lref_base_asserting/","title":"aui::reflect::detail::lref_base_asserting","text":"<p>Detects aggregates with inheritance.</p> Header:<code>#include &lt;AUI/Reflect/detail/fields_count.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_reflect_detail_lref_constructing/","title":"aui::reflect::detail::lref_constructing","text":"<p>Structure that can be converted to reference to anything.</p> Header:<code>#include &lt;AUI/Reflect/detail/fields_count.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_reflect_detail_rref_constructing/","title":"aui::reflect::detail::rref_constructing","text":"<p>Structure that can be converted to rvalue reference to anything.</p> Header:<code>#include &lt;AUI/Reflect/detail/fields_count.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_reflect_member/","title":"aui::reflect::member","text":"Header:<code>#include &lt;AUI/Reflect/members.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_reverse_iterator_wrap/","title":"aui::reverse_iterator_wrap","text":"<p>Helper wrapper for objects implementing rbegin and rend for using in foreach loops \\example</p> <pre>\nfor (auto&amp; view : aui::reverse_iterator_wrap(mViews)) { ... }\n</pre> Header:<code>#include &lt;AUI/Traits/iterators.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_slot/","title":"AUI_SLOT","text":"<p>Passes some variable and type of the variable separated by comma. It's convenient to use with the connect        function (see examples).</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_slot/#definition","title":"Definition","text":"<pre><code>#define AUI_SLOT(v) v, &amp;aui::impl::slot::decode_type_t&lt;std::decay_t&lt;decltype(v)&gt;&gt;\n</code></pre>"},{"location":"aui_slot/#detailed-description","title":"Detailed Description","text":"<p>Quick example:</p> without with <pre><code>connect(clicked, myObject, &amp;MyObject::handleClicked);\n</code></pre> <pre><code>connect(clicked, AUI_SLOT(myObject)::handleClicked);\n</code></pre> <p>If you are intended to reference this-&gt; object, consider using me instead.</p>"},{"location":"aui_slot/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n</code></pre></p> examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>          },\n        },\n      },\n      Vertical {\n        _new&lt;AButton&gt;(\"Identity\").connect(&amp;AButton::clicked, AUI_SLOT(fractal)::reset),\n        _new&lt;AButton&gt;(\"Jump to coords...\")\n            .connect(&amp;AButton::clicked, this, [&amp;, fractal]() { _new&lt;JumpToCoordsWindow&gt;(fractal, this)-&gt;show(); }),\n        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>                    connect(it-&gt;selectionId().readProjected([](int selectionId) { return selectionId == 1; }),\n                            mIsReturnFlight);\n                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n                    connect(it-&gt;clicked, me::book);\n                    connect(mIsValid, AUI_SLOT(it)::setEnabled);\n                },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n</code></pre></p>"},{"location":"aui_slot/#examples_1","title":"Examples","text":""},{"location":"aui_threadpool/","title":"AUI_THREADPOOL","text":"<p>Executes following {} block asynchronously in the global thread pool. Unlike AUI_THREADPOOL_X, does now allow to set lambda's capture. Lambda's capture is <code>[=]</code>.</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_threadpool/#definition","title":"Definition","text":"<pre><code>#define AUI_THREADPOOL AThreadPool::global() * [=]()\n</code></pre>"},{"location":"aui_threadpool/#detailed-description","title":"Detailed Description","text":"<p>When <code>AFuture is destroyed, the corresponding <code>AUI_THREADPOOL</code> task is either cancelled or removed from the execution queue. Use AFutureSet or AAsyncHolder to keep multiple AFuture alive. <p>Example without a return value: <pre><code>auto task = AUI_THREADPOOL {\n  AThread::sleep(1000); // a long task\n};\n</code></pre></p> <p>Example with a return value:</p> <pre><code>auto futureStatus = AUI_THREADPOOL {\n  int status;\n  ...\n  AThread::sleep(1000); // a long task\n  ...\n  return status;\n};\nint status = *futureStatus;\n</code></pre> <p>Lambda operators are supported: <pre><code>auto futureStatus = AUI_THREADPOOL mutable noexcept {\n  int status;\n  ...\n  AThread::sleep(1000); // a long task\n  ...\n  return status;\n};\nint status = *futureStatus;\n</code></pre></p>"},{"location":"aui_threadpool/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p>"},{"location":"aui_threadpool_x/","title":"AUI_THREADPOOL_X","text":"<p>Executes following {} block asynchronously in the global thread pool. Unlike AUI_THREADPOOL, allows to set lambda's capture but you should always specify lambda's capture.</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_threadpool_x/#definition","title":"Definition","text":"<pre><code>#define AUI_THREADPOOL_X AThreadPool::global() *\n</code></pre>"},{"location":"aui_threadpool_x/#detailed-description","title":"Detailed Description","text":"<p>When <code>AFuture is destroyed, the corresponding <code>AUI_THREADPOOL</code> task is either cancelled or removed from the execution queue. Use AFutureSet or AAsyncHolder to keep multiple AFuture alive. <p>Example without a return value:</p> <pre><code>auto task = AUI_THREADPOOL_X [&amp;] {\n  AThread::sleep(1000); // a long task\n};\n</code></pre> <p>Example with a return value: <pre><code>auto futureStatus = AUI_THREADPOOL_X [&amp;] {\n  int status;\n  ...\n  AThread::sleep(1000); // a long task\n  ...\n  return status;\n};\nint status = *futureStatus;\n</code></pre></p>"},{"location":"aui_threadpool_x/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_ui_building_view/","title":"aui::ui_building::view","text":"<p>Declarative view trait.</p> Header:<code>#include &lt;AUI/Util/Declarative/Containers.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aui_ui_building_view/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>/// [CellSelector]\ntemplate&lt;FieldCell fieldCell&gt;\nstruct CellSelector: IAssSubSelector {\npublic:\n    bool isPossiblyApplicable(AView* view) override {\n        return dynamic_cast&lt;CellView*&gt;(view) != nullptr;\n    }\n\n    bool isStateApplicable(AView* view) override {\n        if (auto c = dynamic_cast&lt;CellView*&gt;(view)) {\n</code></pre></p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>            formula::Value evaluate(const Spreadsheet&amp; ctx) override {\n                return function(functions::Ctx {\n                  .spreadsheet = ctx,\n                  .args = AVector(\n                      args | ranges::view::transform([&amp;](const _unique&lt;INode&gt;&amp; node) { return node-&gt;evaluate(ctx); }) |\n                      ranges::to_vector),\n                });\n            }\n        };\n        auto out = std::make_unique&lt;FunctionCall&gt;();\n</code></pre></p>"},{"location":"aui_ui_thread/","title":"AUI_UI_THREAD","text":"<p>Executes lambda on main thread.</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_ui_thread/#definition","title":"Definition","text":"<pre><code>#define AUI_UI_THREAD (*AThread::main()) * [=]()\n</code></pre>"},{"location":"aui_ui_thread/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p>"},{"location":"aui_ui_thread_x/","title":"AUI_UI_THREAD_X","text":"<p>Executes lambda on main thread. Allows to determine lambda's capture.</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_ui_thread_x/#definition","title":"Definition","text":"<pre><code>#define AUI_UI_THREAD_X (*AThread::main()) *\n</code></pre>"},{"location":"aui_ui_thread_x/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_updater_appropriateportablepackagepredicate/","title":"aui::updater::AppropriatePortablePackagePredicate","text":"<p>Determines whether the passed package name is a portable package that matches current arch and platform.</p> Header:<code>#include &lt;AUI/Updater/AppropriatePortablePackagePredicate.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::updater)</code>"},{"location":"aui_updater_appropriateportablepackagepredicate/#detailed-description","title":"Detailed Description","text":""},{"location":"aui_updater_appropriateportablepackagepredicate/#AppropriatePredicateTest_Custom_qualifier","title":"Custom qualifier","text":"<pre><code>aui::updater::AppropriatePortablePackagePredicate p { .qualifier = \"windows-x86_64\" };\nEXPECT_TRUE(p(\"app-windows-x86_64.zip\"));\nEXPECT_FALSE(p(\"app-windows-x86.zip\"));\n</code></pre>"},{"location":"aui_updater_appropriateportablepackagepredicate/#AppropriatePredicateTest_Typical_usage_with_default_qualifier","title":"Typical usage with default qualifier","text":"<p>It's convenient to use it with <code>find_if</code>: <pre><code>struct Response {\n    AString fileName;\n    AString downloadUrl;\n} foundFiles[] = {\n    { \"app-some_os-x86_64-portable.zip\", \"https://...\" },\n    { \"app-some_os-arm64-portable.zip\", \"https://...\" },\n};\nauto foundFilesIt =\n    ranges::find_if(foundFiles, aui::updater::AppropriatePortablePackagePredicate {}, &amp;Response::fileName);\n</code></pre></p>"},{"location":"aui_updater_appropriateportablepackagepredicate/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>AString qualifier</code></p> <p>Package qualifier which is expected to be present in package name.</p> <p>If qualifier is empty, an AUI's package qualifier which is used as default name for portable packages is used.</p> <p>Since AUI is only capable of unpacking ZIPs, this predicate checks for \".zip\" extension.</p> <p>Implemented as AString::contains with an additional check that \"_\" does not goes after, to distinguish <code>x86_64</code> and <code>x86</code>.</p> <p>Linux x86_64 -&gt; <code>linux-x86_64</code> Windows arm64 -&gt; <code>windows-arm64</code></p> <p>If you wish to publish portable packages with different qualifiers, you must specify it to this variable. As AUI's package name, it's convenient to evaluate the package name in CMake and pass it to your target with <code>target_compile_definitions</code>.</p>"},{"location":"aui_updater_appropriateportablepackagepredicate/#aui::updater::AppropriatePortablePackagePredicate::qualifier","title":"qualifier","text":""},{"location":"aui_updater_appropriateportablepackagepredicate/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre>"},{"location":"aui_updater_semver/","title":"aui::updater::Semver","text":"<p>Semantic version.</p> Header:<code>#include &lt;AUI/Updater/Semver.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::updater)</code>"},{"location":"aui_updater_semver/#detailed-description","title":"Detailed Description","text":""},{"location":"aui_updater_semver/#VersionTest_Parsing_version","title":"Parsing version","text":"<p>Up to 3 numbers split with dots are supported: <pre><code>EXPECT_EQ(aui::updater::Semver::fromString(\"1.2.3\"), (aui::updater::Semver{ 1, 2, 3 }));\nEXPECT_EQ(aui::updater::Semver::fromString(\"1.2\"), (aui::updater::Semver{ 1, 2, 0 }));\nEXPECT_EQ(aui::updater::Semver::fromString(\"1\"), (aui::updater::Semver{ 1, 0, 0 }));\n</code></pre> <code>v</code> prefix is acceptable: <pre><code>EXPECT_EQ(aui::updater::Semver::fromString(\"v1.2.3\"), (aui::updater::Semver{ 1, 2, 3 }));\nEXPECT_EQ(aui::updater::Semver::fromString(\"v0.0.0\"), (aui::updater::Semver{ 0, 0, 0 }));\n</code></pre> \"Channel names\" and other suffixes are ignored: <pre><code>EXPECT_EQ(aui::updater::Semver::fromString(\"1.2.3-beta\"), (aui::updater::Semver{ 1, 2, 3 }));\n</code></pre></p>"},{"location":"aui_updater_semver/#public-methods","title":"Public Methods","text":"<pre><code>static Semver Semver::fromString(const AString&amp; version)\n</code></pre> <p>Parse semver from string.</p> <p>Examples:</p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo.</p> <pre><code>          Vertical::Expanding {\n            Centered {\n              Icon { \":logo.svg\" } AUI_WITH_STYLE { FixedSize { 128_dp } },\n            } AUI_WITH_STYLE { FixedSize { 500_dp, {} } },\n            AText::fromString(\n                \"    \u2014 Eh bien, mon prince. G\u00eanes et Lucques ne sont plus que des apanages, des \"\n                \"\u043f\u043e\u043c\u0435\u0441\u0442\u044c\u044f, de la famille Buonaparte. Non, je vous pr\u00e9viens que si vous ne me dites pas \"\n                \"que nous avons la guerre, si vous vous permettez encore de pallier toutes les infamies, \"\n                \"toutes les atrocit\u00e9s de cet Antichrist (ma parole, j'y crois) \u2014 je ne vous connais \"\n                \"plus, vous n'\u00eates plus mon ami, vous n'\u00eates plus \u043c\u043e\u0439 \u0432\u0435\u0440\u043d\u044b\u0439 \u0440\u0430\u0431, comme vous dites\u202f1. \"\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> <pre><code>uint64_t Semver::toLongInt()\n</code></pre> <p>Converts semver to a long int representation.</p> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre>"},{"location":"aui_updater_semver/#aui::updater::Semver::fromString","title":"fromString","text":""},{"location":"aui_updater_semver/#aui::updater::Semver::toLongInt","title":"toLongInt","text":""},{"location":"aui_valid_chars_latin/","title":"aui::valid::chars::latin","text":"Header:<code>#include &lt;AUI/Validation/AValidator.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_valid_chars_numeric/","title":"aui::valid::chars::numeric","text":"Header:<code>#include &lt;AUI/Validation/AValidator.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_valid_container_all/","title":"aui::valid::container::all","text":"Header:<code>#include &lt;AUI/Validation/AValidator.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_valid_container_all/#examples","title":"Examples","text":"examples/basic/hello_world/CMakeLists.txt <p>Console Hello World Example - Basic CLI Hello World application. <pre><code>    AUI https://github.com/aui-framework/aui \n    COMPONENTS core)\n\n\n# Create the executable. This function automatically links all sources from the src/ folder, creates CMake target and\n# places the resulting executable to bin/ folder.\naui_executable(project_template)\n\n# Link required libs\ntarget_link_libraries(project_template PRIVATE aui::core)\n</code></pre></p>"},{"location":"aui_valid_container_any/","title":"aui::valid::container::any","text":"Header:<code>#include &lt;AUI/Validation/AValidator.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_valid_container_any/#examples","title":"Examples","text":"examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    Cell&amp; operator[](glm::uvec2 pos) { return *mCells[pos.y * mSize.x + pos.x]; }\n\n    const Cell&amp; operator[](glm::uvec2 pos) const {\n        if (glm::any(glm::greaterThanEqual(pos, mSize))) {\n            throw AException(\"OUTOFBOUNDS\");\n        }\n        return *mCells[pos.y * mSize.x + pos.x];\n    }\n</code></pre></p>"},{"location":"aui_valid_in_range/","title":"aui::valid::in_range","text":"Header:<code>#include &lt;AUI/Validation/AValidator.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_variant_index_of/","title":"aui::variant::index_of","text":"<p>Determines type index inside of std::variant.</p> Header:<code>#include &lt;AUI/Traits/variant.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_variant_index_of/#examples","title":"Examples","text":"examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>namespace {\n\ntemplate &lt;typename type&gt;\nconstexpr size_t got = aui::variant::index_of&lt;token::Any, type&gt;::value;\n\ntemplate &lt;typename T, typename Variant&gt;\nconst T&amp; expect(const Variant&amp; variant) {\n    if (std::holds_alternative&lt;T&gt;(variant)) {\n        return std::get&lt;T&gt;(variant);\n</code></pre></p>"},{"location":"aui_win32_bitmapmode/","title":"aui::win32::BitmapMode","text":"<p>HBITMAP to AImage.</p> Header:<code>#include &lt;AUI/Platform/win32/Win32Util.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aui_win32_bitmapmode/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"aui_with_style/","title":"AUI_WITH_STYLE","text":"<p>Allows to define a style to the view right in place.</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_with_style/#definition","title":"Definition","text":"<pre><code>#define AUI_WITH_STYLE &amp; ass::PropertyListRecursive\n</code></pre>"},{"location":"aui_with_style/#detailed-description","title":"Detailed Description","text":"<pre><code>#include &lt;AUI/ASS/ASS.h&gt;\nusing namespace ass;\n...\nsetContents(Centered {\n  _new&lt;ALabel&gt;(\"Red text!\") AUI_WITH_STYLE { TextColor { AColor::RED } },\n});\n</code></pre> <p>Also applicable to declarative-style views: <pre><code>#include &lt;AUI/ASS/ASS.h&gt;\nusing namespace ass;\n...\nsetContents(Centered {\n  Label { \"Red text!\" } AUI_WITH_STYLE { TextColor { AColor::RED } },\n});\n</code></pre></p>"},{"location":"aui_with_style/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>using namespace ass;\n\nstatic auto headerWithContents(_&lt;AView&gt; content) {\n    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n</code></pre></p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>                          b.setText(isRunning ? \"Pause\" : \"Run\");\n                      };\n                      connect(it-&gt;clicked, [&amp;] { mCells.isRunning = !mCells.isRunning; });\n                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n          },\n          Centered {\n            _new&lt;CellsView&gt;(aui::ptr::fake_shared(&amp;mCells)) AUI_WITH_STYLE {\n                  Expanding(),\n                  BackgroundSolid(AColor::BLACK),\n</code></pre></p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        {\n          \"Mines count:\"_as,\n          mMines = _new&lt;ANumberPicker&gt;() AUI_LET { it-&gt;setMin(8); },\n        },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      mDifficultyLabel = _new&lt;ALabel&gt;(),\n      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n                it-&gt;setMax(1000);\n                it-&gt;setValue(350);\n            },\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    fractal-&gt;focus();\n}\n</code></pre></p> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter. <pre><code>        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n            Button { Label { \"Count\" }, [this] { mCounter += 1; } },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCounter;\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n                    connect(it-&gt;clicked, me::book);\n                    connect(mIsValid, AUI_SLOT(it)::setEnabled);\n                },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n\nprivate:\n    DateTextFieldState mDepartureDate { system_clock::now() }, mReturnDate { system_clock::now() };\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>                        it &amp; mElapsedTimeRatio;\n                        it-&gt;setCustomStyle({ Expanding { 1, 0 } });\n                    },\n              },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            Label { AUI_REACT(\"{:.1f}s\"_format(duration_cast&lt;milliseconds&gt;(*mElapsedTime).count() / 1000.f)) },\n            Horizontal {\n              Label { \"Duration:\" },\n              _new&lt;ASlider&gt;() AUI_LET {\n                      it&amp;&amp; mDuration.biProjected(aui::lambda_overloaded {\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>              },\n            },\n          },\n          _new&lt;CircleDrawArea&gt;(aui::ptr::fake_shared(&amp;mState)),\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp }});\n    }\n\nprivate:\n    State mState;\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    AProperty&lt;AString&gt; currentExpression;\n};\n\nstatic _&lt;AView&gt; labelTitle(AString s) {\n    return _new&lt;ALabel&gt;(std::move(s)) AUI_WITH_STYLE {\n        Opacity { 0.5f },\n        ATextAlign::CENTER,\n    };\n}\n</code></pre></p> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa. <pre><code>                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n            Label { \"\u00b0F\" },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n</code></pre></p>"},{"location":"aui_with_style/#examples_1","title":"Examples","text":"examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    beginGame(10, 10, 20);\n}\n\nvoid MinesweeperWindow::openCell(int x, int y, bool doGameLoseIfBomb) {\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>      _form({\n        { \"Re=\"_as, re },\n        { \"Im=\"_as, im },\n        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n    };\n</code></pre></p> examples/ui/contacts/src/view/common.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>using namespace ass;\nusing namespace declarative;\n\n_&lt;AView&gt; common_views::divider() {\n    return _new&lt;AView&gt;() AUI_WITH_STYLE { FixedSize { {}, 1_px }, BackgroundSolid { AColor::GRAY } };\n}\n</code></pre></p>"},{"location":"aui_zip/","title":"aui::zip","text":"<p>Iterates multiple containers in parallel.</p> Header:<code>#include &lt;AUI/Traits/iterators.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aui_zip/#detailed-description","title":"Detailed Description","text":"<pre><code>std::array&lt;int, 3&gt; ints = { 1, 2, 3 };\nstd::array&lt;std::string, 3&gt; strings = { \"one\", \"two\", \"three\" };\nfor (auto&amp;[i, s] : aui::zip(ints, strings)) {\n    std::cout &lt;&lt; i &lt;&lt; \", \" &lt;&lt; s &lt;&lt; std::endl;\n}\n</code></pre> <pre>\n1, one\n2, two\n3, three\n</pre>"},{"location":"aui_zip/#public-types","title":"Public Types","text":"<p><code>struct aui::zip::iterator</code></p> <p>Examples:</p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <p>Empty structure.</p>"},{"location":"aui_zip/#aui::zip::iterator","title":"iterator","text":""},{"location":"aunorderedmap/","title":"AUnorderedMap","text":"<p>A std::unordered_map with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/AMap.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aupdater/","title":"AUpdater","text":"<p>Updater class.</p> Header:<code>#include &lt;AUI/Updater/AUpdater.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::updater)</code>"},{"location":"aupdater/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>AUpdater follows a strategy pattern, i.e., you are excepted to call its functions, but the behavior and conditions are up to you.</p> <p>Refer to <code>aui::updater</code> for the update process overview.</p>"},{"location":"aupdater/#public-types","title":"Public Types","text":"<p><code>struct AUpdater::InstallCmdline</code></p> <p>Data required to launch installation child process.</p> <code>APath installerExecutable</code>  Absolute path to installer executable. By default, installerExecutable is a copy of your application executable. The installation process is triggered via installerArguments.  <code>AVector&lt;AString&gt; installerArguments</code>  Arguments passed to installer.  <p><code>struct AUpdater::GetInstallationDirectoryContext</code></p> <p>Context for AUpdater::getInstallationDirectory</p> <code>APath selfProcessExePath</code>  Self process exe. Typically <code>AProcess::self()-&gt;getPathToExecutable()</code>.  <code>APath updaterDir</code>  Updater dir. Typically parent of selfProcessExePath.  <code>APath originExe</code>  The path to executable who invoked the installation process. Typically full path to the original exe to replace.  <p><code>struct AUpdater::StatusIdle</code></p> <p>Idling.</p> <p>Empty structure.</p> <p><code>struct AUpdater::StatusCheckingForUpdates</code></p> <p>Checking for updates.</p> <p>Empty structure.</p> <p><code>struct AUpdater::StatusDownloading</code></p> <p>Downloading state.</p> <p>Empty structure.</p> <p><code>struct AUpdater::StatusNotAvailable</code></p> <p>AUpdater::isAvailable() evaluated to false.</p> <p>Empty structure.</p> <p><code>struct AUpdater::StatusWaitingForApplyAndRestart</code></p> <p>Waiting to applyUpdateAndRestart call state.</p> <code>InstallCmdline installCmdline</code>"},{"location":"aupdater/#AUpdater::InstallCmdline","title":"InstallCmdline","text":""},{"location":"aupdater/#AUpdater::GetInstallationDirectoryContext","title":"GetInstallationDirectoryContext","text":""},{"location":"aupdater/#AUpdater::StatusIdle","title":"StatusIdle","text":""},{"location":"aupdater/#AUpdater::StatusCheckingForUpdates","title":"StatusCheckingForUpdates","text":""},{"location":"aupdater/#AUpdater::StatusDownloading","title":"StatusDownloading","text":""},{"location":"aupdater/#AUpdater::StatusNotAvailable","title":"StatusNotAvailable","text":""},{"location":"aupdater/#AUpdater::StatusWaitingForApplyAndRestart","title":"StatusWaitingForApplyAndRestart","text":""},{"location":"aupdater/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>AAsyncHolder mAsync</code></p> <p>Holder for async operations.</p> <p><code>AProperty&lt;std::any&gt; status</code></p> <p>State of the updater.</p> <p>Status of the AUpdater to observe from outside, i.e., by UI.</p> <p><code>status</code> is updated in UI thread only.</p> <p><code>status</code> is designed in such a way the user can use their own custom status types or any of predefined ones:</p> <ul> <li><code>AUpdater::StatusIdle</code></li> <li><code>AUpdater::StatusCheckingForUpdates</code></li> <li><code>AUpdater::StatusDownloading</code></li> <li><code>AUpdater::StatusWaitingForApplyAndRestart</code></li> <li><code>AUpdater::StatusNotAvailable</code></li> </ul> <p>These statuses might be set by AUpdater itself.</p> <p>Typical observer of status is a UI projection displaying its value. You can even display controls in it: <pre><code>CustomLayout {} &amp; mUpdater-&gt;status.readProjected([&amp;updater = mUpdater](const std::any&amp; status) -&gt; _&lt;AView&gt; {\n    if (std::any_cast&lt;AUpdater::StatusIdle&gt;(&amp;status)) {\n        return _new&lt;AButton&gt;(\"Check for updates\").connect(&amp;AView::clicked, AUI_SLOT(updater)::checkForUpdates);\n    }\n    if (std::any_cast&lt;AUpdater::StatusCheckingForUpdates&gt;(&amp;status)) {\n        return Label { \"Checking for updates...\" };\n    }\n    if (auto downloading = std::any_cast&lt;AUpdater::StatusDownloading&gt;(&amp;status)) {\n        return Vertical {\n            Label { \"Downloading...\" },\n            _new&lt;AProgressBar&gt;() &amp; downloading-&gt;progress,\n        };\n    }\n    if (std::any_cast&lt;AUpdater::StatusWaitingForApplyAndRestart&gt;(&amp;status)) {\n        return _new&lt;AButton&gt;(\"Apply update and restart\")\n            .connect(&amp;AView::clicked, AUI_SLOT(updater)::applyUpdateAndRestart);\n    }\n    return nullptr;\n}),\n</code></pre></p>"},{"location":"aupdater/#AUpdater::mAsync","title":"mAsync","text":""},{"location":"aupdater/#AUpdater::status","title":"status","text":""},{"location":"aupdater/#public-methods","title":"Public Methods","text":"<pre><code>virtual void AUpdater::applyUpdateAndRestart()\n</code></pre> <p>Deploy the downloaded update.</p> <p>Basically about replacing files (no network operations will be performed).</p> <p>Requires <code>AUpdater::status</code> = StatusWaitingForApplyAndRestart, otherwise has no effect.</p> <p>Terminates current process with <code>std::exit(0)</code></p>"},{"location":"aupdater/#AUpdater::applyUpdateAndRestart","title":"applyUpdateAndRestart","text":""},{"location":"aupdater/#debugging-update-deployment","title":"Debugging update deployment","text":"<p>You can locate update deployment logs by locating deployment process id (pid). The PID is printed by this function:</p> <pre><code>[06:49:33][UI thread][AUpdater][INFO]: applyUpdateAndRestart: started process pid=3708325, exe=...\n</code></pre> <p>Log files location are printed in the beginning of every AUI-based programs (if they use ALogger):</p> <pre><code>[06:49:14][UI thread][Logger][INFO]: Log file: /tmp/aui.3707546.log\n</code></pre> <p>You can now locate the log file by using subprocess' PID printed earlier:</p> <pre><code>cat /tmp/aui.3708325.log\n[06:49:33][UI thread][Logger][INFO]: Log file: /tmp/aui.3708325.log\n[06:49:33][UI thread][AUpdater][INFO]: --aui-updater-wait-for-process: 3707546 exited with 0\n[06:49:33][UI thread][AUpdater][INFO]: deploying update: /tmp/__aui_update_example_app/download -&gt; /home/...\n[06:49:33][UI thread][AUpdater][ERR]: Can't deploy update, trying to launch original: ...\n - at 0x5555558f3aae aui_entry(AStringVector const&amp;)(main.cpp:9)\n - at 0x5555556b0028 aui_main(int, char**, int (*)(AStringVector const&amp;))(OSDesktop.cpp:160)\n - at 0x7ffff7261248(?:0)\n - at 0x7ffff726130b(?:0)\n - at 0x555555654195(?:0)\nCaused by: (AIOException) AFileOutputStream: could not open /home/...: Text file busy\n - at 0x5555556c0443 aui::impl::lastErrorToException(AString)(ErrorToExceptionImpl.cpp:21)\n - at 0x55555568ec97 AFileOutputStream::open(bool)(AFileOutputStream.cpp:67)\n - at 0x55555568ed44 AFileOutputStream::AFileOutputStream(AString, bool)(AFileOutputStream.cpp:24)\n - at 0x5555556964a2 APath::copy(APath const&amp;, APath const&amp;)(APath.cpp:291)\n - at 0x555555641585 AUpdater::deployUpdate(APath const&amp;, APath const&amp;)(AUpdater.cpp:267)\n - at 0x5555558fb2ff AUpdater::handleStartup(AStringVector const&amp;)(AUpdater.cpp:76)\n - at 0x5555558f3aae aui_entry(AStringVector const&amp;)(main.cpp:9)\n - at 0x5555556b0028 aui_main(int, char**, int (*)(AStringVector const&amp;))(OSDesktop.cpp:160)\n - at 0x7ffff7261248(?:0)\n - at 0x7ffff726130b(?:0)\n - at 0x555555654195(?:0)\n</code></pre> <pre><code>void AUpdater::checkForUpdates()\n</code></pre> <p>Sets <code>status</code> to <code>AUpdater::StatusCheckingForUpdates</code> and calls AUpdater::checkForUpdatesImpl, implemented by user.</p> <p>Requires <code>AUpdater::status</code> = StatusIdle, otherwise has no effect.</p> <pre><code>virtual AFuture&lt;void&gt; AUpdater::checkForUpdatesImpl()\n</code></pre> <p>Check for updates user's implementation.</p> <pre><code>virtual void AUpdater::cleanupUnpackedUpdateDirBeforeDownloading()\n</code></pre> <p>called by AUpdater::downloadUpdate before downloading update to cleanup AUpdater::getUnpackedUpdateDir() dir.</p> <pre><code>virtual void AUpdater::deployUpdate(const APath&amp; source, const APath&amp; destination)\n</code></pre> <p>Deploys update by recursively copying (moving) files from source dir to destination dir.</p> <p>Called in newly downloaded executable.</p> <pre><code>void AUpdater::downloadAndUnpack(AString downloadUrl, const APath&amp; unpackedUpdateDir)\n</code></pre> <p>Typical download and unpack implementation.</p> <p>Called by downloadUpdateImpl. Updates AUpdate::status progress.</p> <pre><code>void AUpdater::downloadUpdate()\n</code></pre> <p>Sets <code>status</code> to <code>AUpdater::StatusDownloading</code> and calls AUpdater::downloadUpdateImpl, implemented by user.</p> <p>An implementation might expect to checkForUpdates to be called first.</p> <pre><code>virtual AFuture&lt;void&gt; AUpdater::downloadUpdateImpl(const APath&amp; unpackedUpdateDir)\n</code></pre> <p>Performs update delivery to the specified directory.</p> Arguments <code>unpackedUpdateDir</code>  location to unpack an update to. <p>Typically implemented as download to temporary dir and unpacking the archive to the specified unpackedUpdateDir.</p> <p>Unpack your application files to <code>unpackedUpdateDir</code>. AUpdater is responsible for cleaning this dir in the future.</p> <pre><code>virtual APath AUpdater::getInstallationDirectory(const GetInstallationDirectoryContext&amp; context)\n</code></pre> <p>Retrieves installation directory based on given context.</p> <p>Default implementation guesses installation directory based on</p> <pre><code>virtual AString AUpdater::getModuleName()\n</code></pre> <p>Returns a module name of your (your_app_name or your_app_name.exe, without a leading path).</p> <p>Default implementation determines module name using AProcess::self().</p> <p>The module name is used to construct temporary directory and locate an executable in a downloaded portable.</p> <pre><code>virtual APath AUpdater::getTempWorkDir()\n</code></pre> <p>Working directory for AUpdater. By default, points to some path in TEMP.</p> <pre><code>virtual APath AUpdater::getUnpackedUpdateDir()\n</code></pre> <p>The path where the update is unpacked to.</p> <p>The dir persists between different launches.</p> <pre><code>virtual void AUpdater::handlePostUpdateCleanup()\n</code></pre> <p>Performs post update cleanup routines.</p> <p>Default implementation deletes AUpdater::getUnpackedUpdateDir() dir.</p> <pre><code>virtual void AUpdater::handleStartup(const AStringVector&amp; applicationArguments)\n</code></pre> <p>Performs a pre-application AUpdater routine.</p> Arguments <code>applicationArguments</code>  arguments to your program. <p>The arguments starting with <code>--aui-updater</code> are should be ignored by your application.</p> <p>Performs autoupdate-specific routines on startup of your application. In best scenario, this function should be called by your application as early as possible.</p> <p>This function might terminate current process with std::exit(0), in case of performing autoupdate routines.</p> <p>This function will attempt to restore InstallCmdline state (StatusWaitingForApplyAndRestart) via AUpdater::loadInstallCmdline. If the latter succeeds, AUpdate::triggerUpdateOnStartup is called to perform on-startup update.</p> <p>This function handles following arguments to your application: - <code>--aui-updater-origin</code> - - <code>--aui-updater-wait-for-process</code> - maps to <code>AUpdater::handleWaitForProcess()</code> that instructs AUpdater to wait   the specified process to finish before processing next argument(s). - <code>--aui-updater-cleanup</code> - maps to <code>AUpdater::handlePostUpdateCleanup()</code> and returns control flow to normal   execution of your application (last updating step) - <code>--aui-updater-failed</code> - reports last error occurred while update deployment. See AUpdater::getLastDeploymentError().</p> <p>Refer to <code>aui::updater</code> for update process overview.</p> <pre><code>virtual void AUpdater::handleWaitForProcess(uint32_t pid)\n</code></pre> <p>Handles --aui-updater-wait-for-process.</p> <pre><code>virtual AVector&lt;AString&gt; AUpdater::injectWaitForMyPid(AVector&lt;AString&gt; args)\n</code></pre> <p>Injects --aui-updater-wait-for-process=THIS_PROCESS_PID as the first argument.</p> <pre><code>static bool AUpdater::isAvailable()\n</code></pre> <p>Checks that updater functionality is available.</p> <p>For cases when AUpdater is available see <code>aui::updater</code></p> <pre><code>virtual AOptional&lt;InstallCmdline&gt; AUpdater::loadInstallCmdline()\n</code></pre> <p>Restores install command line state, if any.</p> <p>AUpdater::handleStartup will try to restore the state via loadInstallCmdline. If InstallCmdline is successfully restored, AUpdater immediately triggers update routine with triggerUpdateOnStartup which exits the application.</p> <p>The implementation must ensure that subsequent startups would not trigger on-startup update to avoid endless loops in case of failure, i.e, by deleting a file.</p> <pre><code>InstallCmdline AUpdater::makeDefaultInstallationCmdline()\n</code></pre> <p>Constructs InstallCmdline with default arguments.</p> <p>By default, installerExecutable is a copy of your application executable. The installation process is triggered via special arguments in installerArguments.</p> <pre><code>void AUpdater::reportDownloadedPercentage(aui::float_within_0_1 progress)\n</code></pre> <p>Being called by downloadUpdateImpl, reports download percentage to <code>status</code>.</p> <p>Requires <code>AUpdater::status</code> = StatusDownloading, otherwise has no effect. Updates the value in UI thread.</p> <pre><code>void AUpdater::reportReadyToApplyAndRestart(InstallCmdline cmdline)\n</code></pre> <p>Dumps InstallCmdline to temporary download directory, indicating that an update is ready to install. Updates status accordingly.</p> <pre><code>virtual void AUpdater::saveCmdline(const InstallCmdline&amp; cmdline)\n</code></pre> <p>Saves install command line to restore state when application is restarted.</p> <pre><code>virtual void AUpdater::triggerUpdateOnStartup()\n</code></pre> <p>Triggers update routine.</p> <p>The function is called by AUpdater::handleStartup. If triggerUpdateOnStartup succeeds, it should terminate execution of the current process.</p> <p>Requires <code>AUpdater::status</code> = StatusWaitingForApplyAndRestart.</p> <p>If you'd like to disable applying downloaded update on startup, stub this function.</p>"},{"location":"aupdater/#AUpdater::checkForUpdates","title":"checkForUpdates","text":""},{"location":"aupdater/#AUpdater::checkForUpdatesImpl","title":"checkForUpdatesImpl","text":""},{"location":"aupdater/#AUpdater::cleanupUnpackedUpdateDirBeforeDownloading","title":"cleanupUnpackedUpdateDirBeforeDownloading","text":""},{"location":"aupdater/#AUpdater::deployUpdate","title":"deployUpdate","text":""},{"location":"aupdater/#AUpdater::downloadAndUnpack","title":"downloadAndUnpack","text":""},{"location":"aupdater/#AUpdater::downloadUpdate","title":"downloadUpdate","text":""},{"location":"aupdater/#AUpdater::downloadUpdateImpl","title":"downloadUpdateImpl","text":""},{"location":"aupdater/#AUpdater::getInstallationDirectory","title":"getInstallationDirectory","text":""},{"location":"aupdater/#AUpdater::getModuleName","title":"getModuleName","text":""},{"location":"aupdater/#AUpdater::getTempWorkDir","title":"getTempWorkDir","text":""},{"location":"aupdater/#AUpdater::getUnpackedUpdateDir","title":"getUnpackedUpdateDir","text":""},{"location":"aupdater/#AUpdater::handlePostUpdateCleanup","title":"handlePostUpdateCleanup","text":""},{"location":"aupdater/#AUpdater::handleStartup","title":"handleStartup","text":""},{"location":"aupdater/#AUpdater::handleWaitForProcess","title":"handleWaitForProcess","text":""},{"location":"aupdater/#AUpdater::injectWaitForMyPid","title":"injectWaitForMyPid","text":""},{"location":"aupdater/#AUpdater::isAvailable","title":"isAvailable","text":""},{"location":"aupdater/#AUpdater::loadInstallCmdline","title":"loadInstallCmdline","text":""},{"location":"aupdater/#AUpdater::makeDefaultInstallationCmdline","title":"makeDefaultInstallationCmdline","text":""},{"location":"aupdater/#AUpdater::reportDownloadedPercentage","title":"reportDownloadedPercentage","text":""},{"location":"aupdater/#AUpdater::reportReadyToApplyAndRestart","title":"reportReadyToApplyAndRestart","text":""},{"location":"aupdater/#AUpdater::saveCmdline","title":"saveCmdline","text":""},{"location":"aupdater/#AUpdater::triggerUpdateOnStartup","title":"triggerUpdateOnStartup","text":""},{"location":"aurl/","title":"AUrl","text":"<p>Uniform Resource Locator implementation.</p> Header:<code>#include &lt;AUI/Url/AUrl.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"aurl/#detailed-description","title":"Detailed Description","text":"<p>Handles standard web url (schema://host:port/path).</p> <p>Empty schema is mapped to the assets file. In example, \":icon.svg\" references to <code>icon.svg</code> file in your assets. See aui_compile_assets() and examples of asset usage.</p>"},{"location":"autf8constiterator/","title":"AUtf8ConstIterator","text":"<p>UTF-8 forward iterator for AString</p> Header:<code>#include &lt;AUI/Common/AUtf8.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"autf8constreverseiterator/","title":"AUtf8ConstReverseIterator","text":"<p>UTF-8 reverse iterator for AString</p> Header:<code>#include &lt;AUI/Common/AUtf8.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"auuid/","title":"AUuid","text":"<p>Implements universally unique identifier (UUID)</p> Header:<code>#include &lt;AUI/Common/AUuid.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"auuid/#public-methods","title":"Public Methods","text":"<pre><code>AUuid::AUuid(const AString&amp; s)\n</code></pre> Arguments <code>s</code>  string representing UUID <p>Construct UUID value from string. Supported the following formats:</p> <ul> <li>Canonical: <code>8-4-4-4-12</code> (<code>123e4567-e89b-12d3-a456-426655440000</code>)</li> <li>Raw: <code>32</code> (<code>123e4567e89b12d3a456426655440000</code>)</li> </ul> <pre><code>static AUuid AUuid::fromString(const AString&amp; string)\n</code></pre> Arguments <code>string</code> Returns generated UUID. <p>Converts a string to UUID. If the string is a valid UUID it is converted to the matching AUuid value else a new UUID generated from the string contents.</p> <p>Examples:</p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo.</p> <pre><code>          Vertical::Expanding {\n            Centered {\n              Icon { \":logo.svg\" } AUI_WITH_STYLE { FixedSize { 128_dp } },\n            } AUI_WITH_STYLE { FixedSize { 500_dp, {} } },\n            AText::fromString(\n                \"    \u2014 Eh bien, mon prince. G\u00eanes et Lucques ne sont plus que des apanages, des \"\n                \"\u043f\u043e\u043c\u0435\u0441\u0442\u044c\u044f, de la famille Buonaparte. Non, je vous pr\u00e9viens que si vous ne me dites pas \"\n                \"que nous avons la guerre, si vous vous permettez encore de pallier toutes les infamies, \"\n                \"toutes les atrocit\u00e9s de cet Antichrist (ma parole, j'y crois) \u2014 je ne vous connais \"\n                \"plus, vous n'\u00eates plus mon ami, vous n'\u00eates plus \u043c\u043e\u0439 \u0432\u0435\u0440\u043d\u044b\u0439 \u0440\u0430\u0431, comme vous dites\u202f1. \"\n</code></pre> <pre><code>AString AUuid::toRawString()\n</code></pre> Returns uuid string in raw format <pre><code>AString AUuid::toString()\n</code></pre> Returns uuid string in canonical format <p>Examples:</p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre>"},{"location":"auuid/#AUuid::AUuid","title":"constructor","text":""},{"location":"auuid/#AUuid::fromString","title":"fromString","text":""},{"location":"auuid/#AUuid::toRawString","title":"toRawString","text":""},{"location":"auuid/#AUuid::toString","title":"toString","text":""},{"location":"avdividerview/","title":"AVDividerView","text":"<p>A vertical line.</p> <p></p> Header:<code>#include &lt;AUI/View/AVDividerView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"avector/","title":"AVector","text":"<p>An std::vector with AUI extensions.</p> Header:<code>#include &lt;AUI/Common/AVector.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"avector/#examples","title":"Examples","text":"examples/app/minesweeper/src/MinesweeperWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    int mBombs;\n    int mOpenedCells;\n\n    _&lt;AViewContainer&gt; mGrid;\n    AVector&lt;FieldCell&gt; mField;\n\n    void openCell(int x, int y, bool doGameLoseIfBomb);\n    int countBombsAround(int x, int y);\n    bool isValidCell(int x, int y) { return x &gt;= 0 &amp;&amp; x &lt; mFieldColumns &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; mFieldRows; }\n    FieldCell&amp; fieldAt(int x, int y) { return mField[mFieldColumns * y + x]; }\n</code></pre></p> examples/7guis/cells/src/Functions.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>namespace functions {\nstruct Ctx {\n    const Spreadsheet&amp; spreadsheet;\n    AVector&lt;formula::Value&gt; args;\n};\nusing Invocable = std::function&lt;formula::Value(Ctx ctx)&gt;;\n\nconst AMap&lt;AString, Invocable&gt;&amp; predefined();\n}\n</code></pre></p> examples/7guis/cells/src/Tokens.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>};\n\nusing Any = std::variant&lt;Identifier, Double, Semicolon, LPar, RPar, Colon, Plus, Minus, Asterisk, Slash, LAngle, RAngle, StringLiteral&gt;;\n\nAVector&lt;token::Any&gt; parse(aui::no_escape&lt;ATokenizer&gt; t);\n\n}   // namespace token\n</code></pre></p> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    glm::uvec2 size() const { return mSize; }\n\nprivate:\n    glm::uvec2 mSize;\n    AVector&lt;_unique&lt;Cell&gt;&gt; mCells;\n};\n</code></pre></p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>            int priority = -1;\n            _unique&lt;BinaryOperatorNode&gt; owning;\n        };\n\n        AVector&lt;BinaryOperatorAndItsPriority&gt; binaryOperators;\n\n        auto putValue = [&amp;](_unique&lt;INode&gt; node) {\n            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n</code></pre></p> examples/7guis/cells/src/Tokens.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code> */\n\n#include \"Tokens.h\"\n\nAVector&lt;token::Any&gt; token::parse(aui::no_escape&lt;ATokenizer&gt; t) {\n    AVector&lt;token::Any&gt; out;\n    t-&gt;readChar();   // =\n    try {\n        while (!t-&gt;isEof()) {\n            switch (char c = t-&gt;readChar()) {\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>            this,\n            AGridSplitter::Builder()\n                    .noDefaultSpacers()\n                    .withItems([&amp;] {\n                        AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt; views;\n                        views.resize(mState-&gt;spreadsheet.size().y + 1);\n                        for (auto&amp; c : views) {\n                            c.resize(mState-&gt;spreadsheet.size().x + 1);\n                        }\n</code></pre></p>"},{"location":"avector/#public-methods","title":"Public Methods","text":"<pre><code>bool AVector::contains(const StoredType&amp; value)\n</code></pre> Returns true if container contains an element, false otherwise. <pre><code>StoredType* AVector::findIf(Predicate&amp;&amp; predicate)\n</code></pre> <p>Finds element by predicate</p> Arguments <code>predicate</code>  predicate Returns Pointer to the value on which the predicate returned true, nullptr otherwise <pre><code>StoredType&amp; AVector::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>const StoredType&amp; AVector::first()\n</code></pre> Returns the first element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>namespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n        FixedSize { 64_dp },\n        BorderRadius { 32_dp },\n        BackgroundGradient { AColor::GRAY.lighter(0.5f), AColor::GRAY, 163_deg },\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            // should assign it to some operator\n            for (const auto&amp; o : binaryOperators | ranges::views::reverse) {\n                if (o.op-&gt;right == nullptr) {\n                    o.op-&gt;right = std::move(temporaryValue);\n                    AUI_ASSERT(binaryOperators.first().owning != nullptr);\n                    return std::move(binaryOperators.first().owning);\n                }\n            }\n            throw AException {};\n        }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>static auto AVector::fromRange(aui::range&lt;Iterator&gt; range, UnaryOperation&amp;&amp; transformer)\n</code></pre> <p>Constructs a new vector of transformed items of the range.</p> Arguments <code>range</code>  items to transform from. <code>transformer</code>  transformer function. Returns A new vector. <pre><code>AOptional&lt;size_t&gt; AVector::indexOf(const StoredType&amp; value)\n</code></pre> Arguments <code>value</code>  element to find. Returns index of the specified element. If element is not found, std::nullopt is returned. <pre><code>template&lt;typename OtherContainer &gt;\niterator AVector::insertAll(const OtherContainer&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator AVector::insertAll(OtherContainer&amp;&amp; c)\n</code></pre> Arguments <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container to the end.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator AVector::insertAll(iterator at, const OtherContainer&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\niterator AVector::insertAll(iterator at, OtherContainer&amp;&amp; c)\n</code></pre> Arguments <code>at</code>  position to insert at. <code>c</code>  other container Returns iterator pointing to the first element inserted. <p>Inserts all values of the specified container.</p> <pre><code>template&lt;typename OtherContainer &gt;\nbool AVector::isSubsetOf(const OtherContainer&amp; c)\n</code></pre> Returns true if <code>c</code> container is a subset of this container, false otherwise. <pre><code>StoredType&amp; AVector::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>const StoredType&amp; AVector::last()\n</code></pre> Returns the last element. Sneaky assertions Container is not empty. <p>Examples:</p> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            if (temporaryValue) {\n                throw AException(\"SYNTAX\");\n            }\n            if (!binaryOperators.empty()) {\n                if (binaryOperators.last().op-&gt;right) {\n                    throw AException {};\n                }\n                binaryOperators.last().op-&gt;right = std::move(node);\n                return;\n            }\n</code></pre> <pre><code>void AVector::removeAll(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. <p>Removes all occurrences of <code>item</code>.</p> <pre><code>template&lt;typename T, aui::mapper&lt;const StoredType &amp;, const T &amp;&gt; Projection &gt;\nvoid AVector::removeAll(const T&amp; item, Projection projection)\n</code></pre> Arguments <code>item</code>  element to remove. <code>projection</code>  callable that transforms <code>const StoredType&amp;</code> to <code>const T&amp;</code>. Can be any        operator() cappable object, including lambda and pointer-to-member. <p>Removes all occurrences of <code>item</code> with specified projection.</p> <pre><code>void AVector::removeAt(size_t index)\n</code></pre> Arguments <code>index</code> index of the element. <p>Removes element at the specified index.</p> Sneaky assertions <code>index</code> points to the existing element. <pre><code>AOptional&lt;std::size_t&gt; AVector::removeFirst(const StoredType&amp; item)\n</code></pre> Arguments <code>item</code>  element to remove. Returns If the item is removed, it's index returned. <p>Removes first occurrence of <code>item</code>.</p> <pre><code>template&lt;aui::predicate&lt;StoredType&gt; Predicate &gt;\nvoid AVector::removeIf(Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>predicate</code>  predicate <p>Removes element if <code>predicate(container[i]) == true</code>.</p> <pre><code>template&lt;aui::predicate&lt;StoredType&gt; Predicate &gt;\nvoid AVector::removeIfFirst(Predicate&amp;&amp; predicate)\n</code></pre> Arguments <code>predicate</code>  predicate <p>Removes only the first element if <code>predicate(container[i]) == true</code>.</p>"},{"location":"avector/#AVector::contains","title":"contains","text":""},{"location":"avector/#AVector::findIf","title":"findIf","text":""},{"location":"avector/#AVector::first","title":"first","text":""},{"location":"avector/#AVector::fromRange","title":"fromRange","text":""},{"location":"avector/#AVector::indexOf","title":"indexOf","text":""},{"location":"avector/#AVector::insertAll","title":"insertAll","text":""},{"location":"avector/#AVector::isSubsetOf","title":"isSubsetOf","text":""},{"location":"avector/#AVector::last","title":"last","text":""},{"location":"avector/#AVector::removeAll","title":"removeAll","text":""},{"location":"avector/#AVector::removeAt","title":"removeAt","text":""},{"location":"avector/#AVector::removeFirst","title":"removeFirst","text":""},{"location":"avector/#AVector::removeIf","title":"removeIf","text":""},{"location":"avector/#AVector::removeIfFirst","title":"removeIfFirst","text":""},{"location":"averticallayout/","title":"AVerticalLayout","text":"<p>Places views in a column.</p> Header:<code>#include &lt;AUI/Layout/AVerticalLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"averticallayout/#detailed-description","title":"Detailed Description","text":"Declarative notation <code>Vertical { }</code> <p>Vertical layout manager places views in a column, fitting their width to the container's height. Has a <code>Vertical</code> shortcut that allows easy usage in UI building: <pre><code>setContents(\n  Vertical {\n    _new&lt;AButton&gt;(\"1\"),\n    _new&lt;AButton&gt;(\"2\"),\n    _new&lt;AButton&gt;(\"3\"),\n  }\n);\n</code></pre></p> <p> </p>"},{"location":"averticallayout/#examples","title":"Examples","text":"examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>NewGameWindow::NewGameWindow(MinesweeperWindow* minesweeper)\n  : AWindow(\"New game\", 100, 100, minesweeper), mMinesweeper(minesweeper) {\n    setWindowStyle(WindowStyle::MODAL);\n\n    setLayout(std::make_unique&lt;AVerticalLayout&gt;());\n    setContents(Vertical {\n      _form({\n        {\n          \"Cells by width:\"_as,\n          mWidth = _new&lt;ANumberPicker&gt;() AUI_LET {\n</code></pre></p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"averticallayout/#public-methods","title":"Public Methods","text":"<pre><code>void AVerticalLayout::setSpacing(int spacing)\n</code></pre>"},{"location":"averticallayout/#AVerticalLayout::setSpacing","title":"setSpacing","text":""},{"location":"aview/","title":"AView","text":"<p>Base class of all UI objects.</p> Header:<code>#include &lt;AUI/View/AView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aview/#detailed-description","title":"Detailed Description","text":"<p>A class that describes the minimum unit that can be placed in a container (including a window) that takes up  some space on the screen, responds to changes in size, position, moving the cursor, pressing / releasing  keys and buttons, mouse wheel, etc...</p> <p>Analogue to Qt's QWidget, Android's View.</p> <p>Every view has a position and size. Also, almost every view has parent, in exception to toplevel view, AWindow. Parent view is AViewContainerBase which is responsible for layout of all views inside.</p>"},{"location":"aview/#examples","title":"Examples","text":"examples/app/minesweeper/src/Style.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>/// [CellSelector]\ntemplate&lt;FieldCell fieldCell&gt;\nstruct CellSelector: IAssSubSelector {\npublic:\n    bool isPossiblyApplicable(AView* view) override {\n        return dynamic_cast&lt;CellView*&gt;(view) != nullptr;\n    }\n\n    bool isStateApplicable(AView* view) override {\n        if (auto c = dynamic_cast&lt;CellView*&gt;(view)) {\n</code></pre></p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    mTexture-&gt;tex2D(*AImage::fromUrl(\":img/color_scheme_wikipedia.png\"));\n}\n\nvoid FractalView::render(ARenderContext context) {\n    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n</code></pre></p> examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>using namespace declarative;\nusing namespace ass;\n\nstatic auto headerWithContents(_&lt;AView&gt; content) {\n    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n</code></pre></p> examples/ui/views/src/DemoGraphView.h <p>Views Example - All-in-one views building example. <pre><code>#include \"AUI/View/AView.h\"\n\nclass DemoGraphView: public AView {\npublic:\n    DemoGraphView();\n\n    void render(ARenderContext ctx) override;\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>                  return sys_days(ymd);\n              },\n            }),\n            it-&gt;text());\n        it &amp; state.parsed &gt; [](AView&amp; textField, const AOptional&lt;system_clock::time_point&gt;&amp; value) {\n            textField.setAssName(\".red\", !value.hasValue());\n        };\n    };\n}\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>    Spreadsheet spreadsheet{glm::uvec2 { 'Z' - 'A' + 1, 100 }};\n    AProperty&lt;AString&gt; currentExpression;\n};\n\nstatic _&lt;AView&gt; labelTitle(AString s) {\n    return _new&lt;ALabel&gt;(std::move(s)) AUI_WITH_STYLE {\n        Opacity { 0.5f },\n        ATextAlign::CENTER,\n    };\n}\n</code></pre></p> examples/app/minesweeper/src/CellView.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>#pragma once\n#include \"FieldCell.h\"\n#include \"AUI/View/AView.h\"\n\nclass CellView : public AView {\npublic:\n    CellView(FieldCell&amp; cell);\n\n    void render(ARenderContext context) override;\n</code></pre></p> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>void CellView::render(ARenderContext context) {\n    if (mCell != mCellValueCopy) {\n        mCellValueCopy = mCell;\n    }\n    AView::render(context);\n\n    if (bool(mCell &amp; FieldCell::OPEN)) {\n        int count = field_cell::getBombCountAround(mCell);\n        if (count) {\n            AFontStyle fs;\n</code></pre></p> examples/app/fractal/src/FractalView.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>#include &lt;AUI/View/AView.h&gt;\n#include &lt;AUI/GL/Program.h&gt;\n#include &lt;AUI/GL/Texture2D.h&gt;\n\nclass FractalView : public AView {\nprivate:\n    gl::Program mShader;\n    _&lt;gl::Texture2D&gt; mTexture;\n    glm::mat4 mTransform;\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>    _&lt;Contact&gt; mOriginalContact;\n    AProperty&lt;bool&gt; mEditorMode = false;\n\n    template&lt;typename T&gt;\n    _&lt;AView&gt; presentation(AProperty&lt;T&gt;&amp; property);\n\n    template&lt;typename T&gt;\n    _&lt;AView&gt; row(AString title, AProperty&lt;T&gt;&amp; property);\n\n    void drop();\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>static constexpr auto EDITOR_CONTENT_MAX_WIDTH = 400_dp;\n\nnamespace {\n_&lt;AView&gt; profilePhoto(const _&lt;Contact&gt;&amp; contact) {\n    return Centered {\n        Label {\n          AUI_REACT(contact-&gt;displayName-&gt;empty() ? \"?\" : AString(1, contact-&gt;displayName-&gt;first()).uppercase())\n        } AUI_WITH_STYLE { Opacity(0.5f), FontSize { 32_dp } },\n    } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/contacts/src/view/common.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>#include &lt;AUI/View/AView.h&gt;\n\nnamespace common_views {\n_&lt;AView&gt; divider();\n}\n</code></pre></p> examples/ui/contacts/src/view/common.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>using namespace ass;\nusing namespace declarative;\n\n_&lt;AView&gt; common_views::divider() {\n    return _new&lt;AView&gt;() AUI_WITH_STYLE { FixedSize { {}, 1_px }, BackgroundSolid { AColor::GRAY } };\n}\n</code></pre></p> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example. <pre><code>    }\n}\n\nvoid DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre></p> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake. <pre><code>    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n</code></pre></p>"},{"location":"aview/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;&gt; clicked</code></p> <p>Left mouse button clicked.</p>"},{"location":"aview/#AView::clicked","title":"clicked","text":""},{"location":"aview/#examples_1","title":"Examples","text":"<p><code>emits&lt;APointerIndex&gt; clickedButton</code></p> <p>Some mouse button clicked.</p> <p><code>emits&lt;&gt; clickedRight</code></p> <p>Right mouse button clicked.</p> <p><code>emits&lt;&gt; clickedRightOrLongPressed</code></p> <p>Right mouse button clicked or long press gesture applied.</p> <p><code>emits&lt;bool&gt; focusState</code></p> <p>Focus state changed.</p> <p>first whether focused or not.</p> <p><code>emits&lt;glm::ivec2,glm::ivec2&gt; geometryChanged</code></p> <p>Geometry (position and size) changed.</p> <p><code>emits&lt;AInput::Key&gt; keyPressed</code></p> <p>Keyboard key pressed.</p> <p><code>emits&lt;AInput::Key&gt; keyReleased</code></p> <p>Keyboard key released.</p> <p><code>std::array&lt;ass::prop::IPropertyBase*,int(ass::prop::PropertySlot::COUNT)&gt; mAss</code></p> <p>Drawing list, or baking drawing commands so that you don't have to parse the ASS every time.</p> <p><code>AOptional&lt;ACursor&gt; mCursor</code></p> <p>Determines shape which should pointer take when it's above this AView.</p> <p><code>ass::PropertyListRecursive mCustomStyleRule</code></p> <p>Custom ASS Rules</p> <p><code>AViewContainerBase* mParent</code></p> <p>Parent AView.</p> <p><code>glm::ivec2 mPosition</code></p> <p>Top left corner's position relative to top left corner's position of the parent AView.</p> <p><code>emits&lt;&gt; redrawn</code></p> <p>View is painted onto the some surface.</p> <p>This signal is emitted when view's AView::postRender() is called. This signal can be used to keep track if view is visible; however, AUI performs some optimizations when painting views. For example, a view located somewhere in AScrollArea is not painted until it is outside of AScrollArea's frame or at least barely reaches it.</p> <p><code>emits&lt;glm::ivec2&gt; scrolled</code></p> <p>Scroll event.</p> <p><code>emits&lt;&gt; viewGraphSubtreeChanged</code></p> <p>onViewGraphSubtreeChanged()</p>"},{"location":"aview/#AView::clickedButton","title":"clickedButton","text":""},{"location":"aview/#AView::clickedRight","title":"clickedRight","text":""},{"location":"aview/#AView::clickedRightOrLongPressed","title":"clickedRightOrLongPressed","text":""},{"location":"aview/#AView::focusState","title":"focusState","text":""},{"location":"aview/#AView::geometryChanged","title":"geometryChanged","text":""},{"location":"aview/#AView::keyPressed","title":"keyPressed","text":""},{"location":"aview/#AView::keyReleased","title":"keyReleased","text":""},{"location":"aview/#AView::mAss","title":"mAss","text":""},{"location":"aview/#AView::mCursor","title":"mCursor","text":""},{"location":"aview/#AView::mCustomStyleRule","title":"mCustomStyleRule","text":""},{"location":"aview/#AView::mParent","title":"mParent","text":""},{"location":"aview/#AView::mPosition","title":"mPosition","text":""},{"location":"aview/#AView::redrawn","title":"redrawn","text":""},{"location":"aview/#AView::scrolled","title":"scrolled","text":""},{"location":"aview/#AView::viewGraphSubtreeChanged","title":"viewGraphSubtreeChanged","text":""},{"location":"aview/#public-methods","title":"Public Methods","text":"<pre><code>void AView::addAssName(const AString&amp; assName)\n</code></pre> <p>Adds an ASS class to this AView.</p> Arguments <code>assName</code>  new ASS name <pre><code>virtual bool AView::capturesFocus()\n</code></pre> Returns Can this view capture focus. <p>For containers, capturing focus is redundant.</p> <pre><code>void AView::click()\n</code></pre> <p>Simulates click on the view. Useful then you want to call clicked() slots of this view.</p> <pre><code>virtual bool AView::consumesClick(const glm::ivec2&amp; pos)\n</code></pre> <p>Determines whether this AView processes this click or passes it thru.</p> Arguments <code>pos</code>  mouse position Returns true if AView processes this click <p>Used in AViewContainer::getViewAt method subset, thus affecting click event handling.</p> <pre><code>virtual AString AView::debugString()\n</code></pre> <p>String which helps to identify this object in debug string output (i.e., for logging)</p> <pre><code>auto AView::enabled()\n</code></pre> <p>Whether view is enabled (i.e., reacts to user).</p> <pre><code>auto AView::expanding()\n</code></pre> <p>Expansion coefficient. Hints layout manager how much this AView should be extended relative to other        AViews in the same container.</p> <p>It does affect expanding environment inside the container. See expanding layout managers for more info.</p> <p>It does not affect parent's size or parent's expanding property. Use AView::setExpanding() on parent, or <code>Expanding</code> variant of declarative container notation (<code>Vertical::Expanding</code>, <code>Horizontal::Expanding</code>, <code>Stacked::Expanding</code>) for such case.</p> <pre><code>const _&lt;AStylesheet&gt;&amp; AView::extraStylesheet()\n</code></pre> <pre><code>void AView::focus(bool needFocusChainUpdate = true)\n</code></pre> <p>Requests focus for this AView.</p> Arguments <code>needFocusChainUpdate</code>  if true, focus chain for new focused view will be updated <p>If needFocusChainUpdate is false you need to control focus chain targets outside the focus function</p> <p>Examples:</p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>            },\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    fractal-&gt;focus();\n}\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                  Margin { 0 },\n                  BorderRadius { 0 },\n                } AUI_LET {\n                    it &amp;&amp; mState-&gt;currentExpression;\n                    it-&gt;focus();\n                    connect(it-&gt;focusLost, me::commitExpression);\n                });\n    }\n\n    void commitExpression() {\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n                biConnect(it-&gt;value(), mCelsius);\n                it-&gt;focus();\n            },\n            Label { \"\u00b0C\" },\n            Label { \"=\" } AUI_WITH_STYLE { Margin { {}, 16_dp } },\n            myPicker() AUI_LET { biConnect(it-&gt;value(), mFahrenheit); },\n            Label { \"\u00b0F\" },\n</code></pre> <pre><code>float AView::getBorderRadius()\n</code></pre> <p>border-radius, specified in ASS.</p> <pre><code>glm::ivec2 AView::getCenterPointInWindow()\n</code></pre> <p>The center point position of the view relatively to top left corner of the window.</p> <p>Useful in UI tests: <pre><code>mWindow-&gt;onPointerMove(mView-&gt;getCenterPointInWindow()); // triggers on pointer move over the view through window\n</code></pre></p> <pre><code>virtual int AView::getContentMinimumHeight()\n</code></pre> Returns minimal content-area height. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    }\n\n    int getContentMinimumWidth() override { return mCells-&gt;size().x * SCALE; }\n\n    int getContentMinimumHeight() override { return mCells-&gt;size().y * SCALE; }\n\nprivate:\n    _&lt;Cells&gt; mCells;\n    _&lt;ITexture&gt; mTexture;\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>class CellView : public AViewContainer {\npublic:\n    CellView(_&lt;State&gt; state, Cell&amp; cell) : mState(std::move(state)), mCell(cell) { inflateLabel(); }\n    int getContentMinimumWidth() override { return 0; }\n    int getContentMinimumHeight() override { return 0; }\n\nprivate:\n    _&lt;State&gt; mState;\n    Cell&amp; mCell;\n    AAbstractSignal::AutoDestroyedConnection mConnection;\n</code></pre> <pre><code>glm::ivec2 AView::getContentMinimumSize()\n</code></pre> Returns minimal content-area size. <pre><code>virtual int AView::getContentMinimumWidth()\n</code></pre> Returns minimal content-area width. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        (*mCells)[position] = !(*mCells)[position];\n        updateTexture();\n    }\n\n    int getContentMinimumWidth() override { return mCells-&gt;size().x * SCALE; }\n\n    int getContentMinimumHeight() override { return mCells-&gt;size().y * SCALE; }\n\nprivate:\n    _&lt;Cells&gt; mCells;\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>class CellView : public AViewContainer {\npublic:\n    CellView(_&lt;State&gt; state, Cell&amp; cell) : mState(std::move(state)), mCell(cell) { inflateLabel(); }\n    int getContentMinimumWidth() override { return 0; }\n    int getContentMinimumHeight() override { return 0; }\n\nprivate:\n    _&lt;State&gt; mState;\n    Cell&amp; mCell;\n</code></pre> <pre><code>glm::ivec2 AView::getContentSize()\n</code></pre> Returns content size <pre><code>const AOptional&lt;ACursor&gt;&amp; AView::getCursor()\n</code></pre> <p>Determines shape which should pointer take when it's above this AView.</p> <pre><code>const glm::ivec2&amp; AView::getFixedSize()\n</code></pre> <p>Fixed size.</p> Returns Fixed size. {0, 0} if unspecified. <pre><code>AFloat AView::getFloating()\n</code></pre> <p>Floating value for AText.</p> <pre><code>const ABoxFields&amp; AView::getMargin()\n</code></pre> <p>Returns the margin.</p> Returns margin <pre><code>const glm::ivec2&amp; AView::getMaxSize()\n</code></pre> Returns maxSize (ignoring fixedSize) <pre><code>glm::ivec2 AView::getMinSize()\n</code></pre> Returns minSize (ignoring fixedSize) <pre><code>glm::ivec2 AView::getMinimumSize()\n</code></pre> <p>Returns the minimum size required for this view.</p> Returns Minimum size (width, height) this view requires in pixels, excluding margins. <p>The minimum size includes: - Minimum content size - Padding</p> <p>This value represents the absolute minimum dimensions the view needs to properly display its content. It's used by layout managers to ensure views aren't sized smaller than what they require to be functional.</p> <pre><code>glm::ivec2 AView::getMinimumSizePlusMargin()\n</code></pre> Returns minimum content size plus margin. <p>This value is bare minimum space required for this view. It includes minimal content size + padding + margin which is exact space the view requires.</p> <pre><code>AOverflow AView::getOverflow()\n</code></pre> <p>Determines whether display graphics that go out of the bounds of this AView or not.</p> <pre><code>AOverflowMask AView::getOverflowMask()\n</code></pre> <p>Controls how does the overflow (stencil) mask is produced.</p> <pre><code>const ABoxFields&amp; AView::getPadding()\n</code></pre> <p>Returns the padding.</p> Returns padding <pre><code>AViewContainerBase* AView::getParent()\n</code></pre> <p>Parent AView.</p> <pre><code>glm::ivec2 AView::getPosition()\n</code></pre> <p>Top left corner's position relative to top left corner's position of the parent AView.</p> <pre><code>glm::ivec2 AView::getPositionInWindow()\n</code></pre> Returns Coords of this AView relative to window <pre><code>glm::ivec2 AView::getSize()\n</code></pre> <p>Size, including content area, border and padding.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        }\n        auto drawGrid = [&amp;] {\n            ASmallVector&lt;std::pair&lt;glm::vec2, glm::vec2&gt;, 128 * 2&gt; points;\n            for (int i = 1; i &lt; mCells-&gt;size().x; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(i * SCALE, 0.f), glm::vec2(i * SCALE, getSize().y));\n            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n</code></pre> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n</code></pre> <pre><code>int AView::getTotalFieldHorizontal()\n</code></pre> Returns pixel count which this AView's margin and padding acquired by width. <pre><code>glm::ivec2 AView::getTotalFieldSize()\n</code></pre> Returns pixel count which this AView's margin and padding acquired. <pre><code>int AView::getTotalFieldVertical()\n</code></pre> Returns pixel count which this AView's margin and padding acquired by height. <pre><code>int AView::getTotalOccupiedHeight()\n</code></pre> Returns pixel count which this AView acquired by height including content area, padding, border and margin. <pre><code>int AView::getTotalOccupiedWidth()\n</code></pre> Returns pixel count which this AView acquired by width including content area, padding, border and margin. <pre><code>AWindowBase* AView::getWindow()\n</code></pre> <p>Determines window which this AView belongs to.</p> Returns window which this AView belongs to. Could be nullptr <pre><code>virtual bool AView::handlesNonMouseNavigation()\n</code></pre> Returns true if this AView accepts tab focus <pre><code>bool AView::hasIndirectParent(const _&lt;AView&gt;&amp; v)\n</code></pre> <p>Checks if the specified view is an indirect parent of this view.</p> <pre><code>virtual void AView::invalidateAllStyles()\n</code></pre> <p>Invalidates all styles, causing to iterate over all rules in global and parent stylesheets.</p> <p>Unlike invalidateStateStyles(), completely resets styles for this view, causing it to iterate over all rules in global and parent stylesheets. This operation is much more expensive than invalidateStateStyles because invalidateStateStyles iterates over a small set of rules and performs fewer checks.</p> <p>Prefer invalidateAllStyles over invalidateStateStyles when:</p> <ul> <li>Added/removed rules to applicable stylesheets</li> <li>The view is reinflated to other layout</li> <li>Added/removed/changed ass names of this or parent views</li> </ul> <pre><code>virtual void AView::invalidateAssHelper()\n</code></pre> <p>Resets mAssHelper.</p> <pre><code>void AView::invalidateStateStyles()\n</code></pre> <p>Updates state selectors for ASS.</p> <p>Unlike invalidateAllStyles, iterates on an already calculated small set of rules which is much more cheap that invalidateAllStyles.</p> <p>Prefer invalidateStateStyles over invalidateAllStyles when:</p> <ul> <li>Changed state (hover, active, focus) of this view</li> </ul> <pre><code>virtual void AView::markMinContentSizeInvalid()\n</code></pre> <p>Marks this view it requires a layout update.</p> <p>See layout-managers for more info.</p> <pre><code>virtual void AView::onClickPrevented()\n</code></pre> <p>Called on AWindowBase::preventClickOnPointerRelease.</p> <pre><code>virtual bool AView::onGesture(const glm::ivec2&amp; origin, const AGestureEvent&amp; event)\n</code></pre> Arguments <code>origin</code>  position where the event(s) started to occur from. <code>event</code>  gesture event. Returns true, if consumed (handled). True value prevents click. <p>Handles touch screen gesture event. The standard implementation <code>AView::onGesture</code> emulates desktop events such as right click and scroll.</p> <pre><code>virtual void AView::onPointerMove(glm::vec2 pos, const APointerMoveEvent&amp; event)\n</code></pre> <p>Handles pointer hover events</p> Arguments <code>pos</code>  event position <code>event</code>  event description <p>If the view is pressed, it would still received move events. Use AView::isMouseHover to check is the pointer actually over view or not. See AView::onPointerReleased for more info.</p> <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        }\n    }\n\n    void onPointerMove(glm::vec2 pos, const APointerMoveEvent&amp; event) override {\n        AView::onPointerMove(pos, event);\n        mHoveredCircle = [&amp;] {\n            Circle* result = nullptr;\n            float nearestDistanceToCursor = std::numeric_limits&lt;float&gt;::max();\n            for (auto&amp; circle : mState-&gt;circles.raw) {\n                float distanceToCursor = glm::distance2(circle.position, pos);\n</code></pre> <pre><code>virtual void AView::onPointerPressed(const APointerPressedEvent&amp; event)\n</code></pre> <p>Called on pointer (mouse) released event.</p> Arguments <code>event</code>  event <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n        AView::onPointerPressed(event);\n        glm::ivec2 position = glm::ivec2(event.position / float(SCALE));\n        (*mCells)[position] = !(*mCells)[position];\n        updateTexture();\n    }\n</code></pre> <pre><code>virtual void AView::onPointerReleased(const APointerReleasedEvent&amp; event)\n</code></pre> <p>Called on pointer (mouse) released event.</p> Arguments <code>event</code>  event <p>To handle clicks, you should use AView::clicked signal instead. View still receives pointer move and released events even if cursor goes outside the view boundaries, or other exclusive event appeared (i.e. scrollarea scroll). AView::clicked emitted only if release event occurred inside view and no other event has prevented click gesture. See APointerReleasedEvent::triggerClick.</p> <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>    }\n\npublic:\n    void onPointerReleased(const APointerReleasedEvent&amp; event) override {\n        AView::onPointerReleased(event);\n        if (event.asButton != AInput::LBUTTON) {\n            return;\n        }\n        class ActionAddCircle : public IAction {\n        public:\n</code></pre> <pre><code>virtual void AView::onScroll(const AScrollEvent&amp; event)\n</code></pre> Arguments <code>event</code>  event info. <p>Handles mouse wheel events.</p> <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mShader.set(UNIFORM_ITERATIONS, int(it));\n}\n\nvoid FractalView::onScroll(const AScrollEvent&amp; event) {\n    AView::onScroll(event);\n    auto projectedPos = (glm::dvec2(event.origin) / glm::dvec2(getSize()) - glm::dvec2(0.5)) * 2.0;\n    projectedPos.x *= mAspectRatio;\n    mTransform = glm::translate(mTransform, glm::vec3 { projectedPos, 0.0 });\n    mTransform = glm::scale(mTransform, glm::vec3(1.0 - event.delta.y / 1000.0));\n    mTransform = glm::translate(mTransform, -glm::vec3 { projectedPos, 0.0 });\n</code></pre> examples/app/fractal/src/FractalView.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    void onKeyDown(AInput::Key key) override;\n\n    void onKeyRepeat(AInput::Key key) override;\n\n    void onScroll(const AScrollEvent&amp; event) override;\n\n    void setSize(glm::ivec2 size) override;\n\n    gl::Program&amp; getShader() { return mShader; }\n</code></pre> <pre><code>void AView::pack()\n</code></pre> <p>Sets minimal size.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>}; /// end\n\nAUI_ENTRY {\n    auto w = _new&lt;GameOfLifeWindow&gt;();\n    w-&gt;pack();\n    w-&gt;show();\n    return 0;\n}\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    connect(mHeight-&gt;valueChanging, me::updateMinesMax);\n    connect(mHeight-&gt;valueChanging, me::updateDifficultyLabel);\n    connect(mMines-&gt;valueChanging, me::updateDifficultyLabel);\n\n    pack();\n}\n\nvoid NewGameWindow::begin() {\n    close();\n    mMinesweeper-&gt;beginGame(gWidth = mWidth-&gt;getValue(), gHeight = mHeight-&gt;getValue(), gMines = mMines-&gt;getValue());\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        setupEventHandlers(x, y, cell);\n        mGrid-&gt;addView(cell);\n    }\n\n    pack();\n}\n/// [beginGame]\n\nvoid MinesweeperWindow::setupEventHandlers(int x, int y, const _&lt;CellView&gt;&amp; cell) {\n    /// [clicked]\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    pack();\n}\n</code></pre> <pre><code>auto AView::position()\n</code></pre> <p>Top left corner's position relative to top left corner's position of the parent AView.</p> <pre><code>virtual void AView::postRender(ARenderContext ctx)\n</code></pre> <p>Performs post-draw routines of this AView. Noone should call this function except rendering routine.</p> <pre><code>void AView::redraw()\n</code></pre> <p>Request window manager to redraw this AView.</p> <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mTransform = glm::translate(mTransform, -glm::vec3 { projectedPos, 0.0 });\n\n    handleMatrixUpdated();\n\n    redraw();\n}\n\nvoid FractalView::reset() {\n    mTransform = glm::dmat4(1.0);\n    handleMatrixUpdated();\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>                            : AColor::TRANSPARENT_BLACK));\n            }\n        }\n        mTexture-&gt;setImage(image);\n        redraw();\n    }\n}; /// end\n\nclass GameOfLifeWindow : public AWindow {\npublic:\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        if (doGameLoseIfBomb) {\n            c |= FieldCell::RED_BG;\n            mReveal = true;\n            emit customCssPropertyChanged();\n            redraw();\n            AMessageBox::show(this, \"You lost!\", \"You lost! Ahahahhaa!\");\n        }\n        return;\n    }\n    c |= FieldCell::OPEN;\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre> <pre><code>void AView::removeAssName(const AString&amp; assName)\n</code></pre> <p>Removes an ASS class to this AView.</p> Arguments <code>assName</code>  ASS name to remove <pre><code>virtual void AView::render(ARenderContext ctx)\n</code></pre> <p>Draws this AView. Noone should call this function except rendering routine.</p> <p>AView::render is not guaranteed to be called on per-frame basis. Moreover, this method can be called multiple times if render-to-texture caching decides to do so.</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    CellsView(_&lt;Cells&gt; cells) : mCells(std::move(cells)) { connect(mCells-&gt;frameComplete, me::updateTexture); }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n        if (mTexture) {\n            ctx.render.rectangle(ATexturedBrush { mTexture }, { 0, 0 }, float(SCALE) * glm::vec2(mCells-&gt;size()));\n        }\n        auto drawGrid = [&amp;] {\n            ASmallVector&lt;std::pair&lt;glm::vec2, glm::vec2&gt;, 128 * 2&gt; points;\n</code></pre> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>void CellView::render(ARenderContext context) {\n    if (mCell != mCellValueCopy) {\n        mCellValueCopy = mCell;\n    }\n    AView::render(context);\n\n    if (bool(mCell &amp; FieldCell::OPEN)) {\n        int count = field_cell::getBombCountAround(mCell);\n        if (count) {\n            AFontStyle fs;\n</code></pre> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mTexture-&gt;tex2D(*AImage::fromUrl(\":img/color_scheme_wikipedia.png\"));\n}\n\nvoid FractalView::render(ARenderContext context) {\n    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n</code></pre> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>    }\n}\n\nvoid DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n\n        for (const auto&amp; circle : *mState-&gt;circles) {\n            if (&amp;circle == mHoveredCircle) {\n                ctx.render.roundedRectangle(\n                    ASolidBrush { AColor::GRAY }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n</code></pre> examples/app/minesweeper/src/CellView.h <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>class CellView : public AView {\npublic:\n    CellView(FieldCell&amp; cell);\n\n    void render(ARenderContext context) override;\n\n    [[nodiscard]]\n    FieldCell fieldCell() const { return mCell; }\n\nprivate:\n</code></pre> examples/app/fractal/src/FractalView.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    void handleMatrixUpdated();\n\npublic:\n    FractalView();\n    void render(ARenderContext context) override;\n\n    void reset();\n\n    void setIterations(unsigned it);\n</code></pre> examples/ui/views/src/DemoGraphView.h <p>Views Example - All-in-one views building example.</p> <pre><code>class DemoGraphView: public AView {\npublic:\n    DemoGraphView();\n\n    void render(ARenderContext ctx) override;\n\nprivate:\n    AVector&lt;glm::vec2&gt; mPoints;\n};\n</code></pre> <pre><code>void AView::setAssName(const AString&amp; assName, bool value)\n</code></pre> <p>Depending on value, either adds or removes ass name.</p> Arguments <code>assName</code>  ASS name to add or remove <code>value</code>  boolean that determines actual operation <p>Examples:</p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>              },\n            }),\n            it-&gt;text());\n        it &amp; state.parsed &gt; [](AView&amp; textField, const AOptional&lt;system_clock::time_point&gt;&amp; value) {\n            textField.setAssName(\".red\", !value.hasValue());\n        };\n    };\n}\n\nclass FlightBookerWindow : public AWindow {\n</code></pre> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example.</p> <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre> <pre><code>void AView::setExpanding(glm::ivec2 expanding)\n</code></pre> <p>Changes the expanding of view.</p> <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>static gl::Program::Uniform UNIFORM_RATIO(\"ratio\");\nstatic gl::Program::Uniform UNIFORM_ITERATIONS(\"iterations\");\n\nFractalView::FractalView() : mTransform(1.f) {\n    setExpanding();\n    mShader.load(R\"(\n#version 330 core\n\nin vec4 pos;\nin vec2 uv;\n</code></pre> <pre><code>void AView::setExpanding(int expanding)\n</code></pre> <p>Changes the expanding of view.</p> <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>static gl::Program::Uniform UNIFORM_RATIO(\"ratio\");\nstatic gl::Program::Uniform UNIFORM_ITERATIONS(\"iterations\");\n\nFractalView::FractalView() : mTransform(1.f) {\n    setExpanding();\n    mShader.load(R\"(\n#version 330 core\n\nin vec4 pos;\nin vec2 uv;\n</code></pre> <pre><code>void AView::setExtraStylesheet(_&lt;AStylesheet&gt; extraStylesheet)\n</code></pre> <p>Examples:</p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo.</p> <pre><code>    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n                             t&lt;AScrollAreaViewport&gt;(),\n                             AOverflow::VISIBLE,\n                         },\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>class FlightBookerWindow : public AWindow {\npublic:\n    FlightBookerWindow() : AWindow(\"AUI - 7GUIs - Book Flight\", 150_dp, 50_dp) {\n        setExtraStylesheet(AStylesheet { {\n          ass::c(\".red\"),\n          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>}\n\nContactDetailsView::ContactDetailsView(_&lt;Contact&gt; contact) : mContact(std::move(contact)) {\n    mOriginalContact = mContact;\n    setExtraStylesheet(AStylesheet {\n      {\n        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n</code></pre> <pre><code>void AView::setExtraStylesheet(AStylesheet&amp;&amp; extraStylesheet)\n</code></pre> <p>Examples:</p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo.</p> <pre><code>    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n                             t&lt;AScrollAreaViewport&gt;(),\n                             AOverflow::VISIBLE,\n                         },\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>class FlightBookerWindow : public AWindow {\npublic:\n    FlightBookerWindow() : AWindow(\"AUI - 7GUIs - Book Flight\", 150_dp, 50_dp) {\n        setExtraStylesheet(AStylesheet { {\n          ass::c(\".red\"),\n          ass::BackgroundSolid { AColor::RED },\n        } });\n        setContents(Centered {\n          Vertical {\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>}\n\nContactDetailsView::ContactDetailsView(_&lt;Contact&gt; contact) : mContact(std::move(contact)) {\n    mOriginalContact = mContact;\n    setExtraStylesheet(AStylesheet {\n      {\n        c(\".row-value\"),\n        Expanding(1, 0),\n      },\n    });\n</code></pre> <pre><code>void AView::setFloating(AFloat f)\n</code></pre> <p>Set floating value for AText.</p> <pre><code>virtual void AView::setGeometry(int x, int y, int width, int height)\n</code></pre> <p>Sets position and size of the view.</p> <p>See layout-managers for more info.</p> <pre><code>void AView::setMargin(const ABoxFields&amp; margin)\n</code></pre> <p>Sets the margin.</p> Arguments <code>margin</code>  margin <pre><code>void AView::setPadding(const ABoxFields&amp; padding)\n</code></pre> <p>Sets the padding.</p> Arguments <code>padding</code>  padding <pre><code>void AView::setSizeForced(glm::ivec2 size)\n</code></pre> Arguments <code>size</code> <p>Set size ignoring all restrictions (i.e. min size, max size, fixed size, etc...). Used by AAnimator.</p> <pre><code>void AView::setSkipUntilLayoutUpdate(bool skipUntilLayoutUpdate)\n</code></pre> <pre><code>auto AView::size()\n</code></pre> <p>Size, including content area, border and padding.</p> <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n    mShader.set(UNIFORM_RATIO, mAspectRatio = float(size.x) / float(size.y));\n}\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            AGridSplitter::Builder()\n                    .noDefaultSpacers()\n                    .withItems([&amp;] {\n                        AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt; views;\n                        views.resize(mState-&gt;spreadsheet.size().y + 1);\n                        for (auto&amp; c : views) {\n                            c.resize(mState-&gt;spreadsheet.size().x + 1);\n                        }\n\n                        views[0][0] = _new&lt;AView&gt;();   // blank\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>using CellsImage = AFormattedImage&lt;APixelFormat::RGBA_BYTE&gt;;\n\nclass Cells : public AObject {\npublic:\n    Cells(glm::ivec2 size) {\n        mSize = size;\n        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n</code></pre> examples/7guis/cells/src/Functions.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>              return double(accumulator);\n            } },\n        { \"IF\",\n            [](Ctx ctx) {\n              if (ctx.args.size() != 3) {\n                  throw AException(\"ARG\");\n              }\n              auto condition = std::get_if&lt;double&gt;(&amp;ctx.args[0]);\n              if (condition == nullptr) {\n                  throw AException(\"ARG0\");\n</code></pre> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>#include \"AUI/Common/AException.h\"\n\nclass Spreadsheet {\npublic:\n    explicit Spreadsheet(glm::uvec2 size) : mSize(size) {\n        mCells.resize(size.x * size.y);\n        for (auto&amp; v : mCells) {\n            v = std::make_unique&lt;Cell&gt;();\n            v-&gt;spreadsheet = this;\n        }\n</code></pre> <pre><code>auto AView::visibility()\n</code></pre> <p>Visibility value.</p> <pre><code>virtual bool AView::wantsTouchscreenKeyboard()\n</code></pre> <p>Returns true if view is textfield-like view which requires touchscreen keyboard when clicked.</p>"},{"location":"aview/#AView::addAssName","title":"addAssName","text":""},{"location":"aview/#AView::capturesFocus","title":"capturesFocus","text":""},{"location":"aview/#AView::click","title":"click","text":""},{"location":"aview/#AView::consumesClick","title":"consumesClick","text":""},{"location":"aview/#AView::debugString","title":"debugString","text":""},{"location":"aview/#AView::enabled","title":"enabled","text":""},{"location":"aview/#AView::expanding","title":"expanding","text":""},{"location":"aview/#AView::extraStylesheet","title":"extraStylesheet","text":""},{"location":"aview/#AView::focus","title":"focus","text":""},{"location":"aview/#AView::getBorderRadius","title":"getBorderRadius","text":""},{"location":"aview/#AView::getCenterPointInWindow","title":"getCenterPointInWindow","text":""},{"location":"aview/#AView::getContentMinimumHeight","title":"getContentMinimumHeight","text":""},{"location":"aview/#AView::getContentMinimumSize","title":"getContentMinimumSize","text":""},{"location":"aview/#AView::getContentMinimumWidth","title":"getContentMinimumWidth","text":""},{"location":"aview/#AView::getContentSize","title":"getContentSize","text":""},{"location":"aview/#AView::getCursor","title":"getCursor","text":""},{"location":"aview/#AView::getFixedSize","title":"getFixedSize","text":""},{"location":"aview/#AView::getFloating","title":"getFloating","text":""},{"location":"aview/#AView::getMargin","title":"getMargin","text":""},{"location":"aview/#AView::getMaxSize","title":"getMaxSize","text":""},{"location":"aview/#AView::getMinSize","title":"getMinSize","text":""},{"location":"aview/#AView::getMinimumSize","title":"getMinimumSize","text":""},{"location":"aview/#AView::getMinimumSizePlusMargin","title":"getMinimumSizePlusMargin","text":""},{"location":"aview/#AView::getOverflow","title":"getOverflow","text":""},{"location":"aview/#AView::getOverflowMask","title":"getOverflowMask","text":""},{"location":"aview/#AView::getPadding","title":"getPadding","text":""},{"location":"aview/#AView::getParent","title":"getParent","text":""},{"location":"aview/#AView::getPosition","title":"getPosition","text":""},{"location":"aview/#AView::getPositionInWindow","title":"getPositionInWindow","text":""},{"location":"aview/#AView::getSize","title":"getSize","text":""},{"location":"aview/#AView::getTotalFieldHorizontal","title":"getTotalFieldHorizontal","text":""},{"location":"aview/#AView::getTotalFieldSize","title":"getTotalFieldSize","text":""},{"location":"aview/#AView::getTotalFieldVertical","title":"getTotalFieldVertical","text":""},{"location":"aview/#AView::getTotalOccupiedHeight","title":"getTotalOccupiedHeight","text":""},{"location":"aview/#AView::getTotalOccupiedWidth","title":"getTotalOccupiedWidth","text":""},{"location":"aview/#AView::getWindow","title":"getWindow","text":""},{"location":"aview/#AView::handlesNonMouseNavigation","title":"handlesNonMouseNavigation","text":""},{"location":"aview/#AView::hasIndirectParent","title":"hasIndirectParent","text":""},{"location":"aview/#AView::invalidateAllStyles","title":"invalidateAllStyles","text":""},{"location":"aview/#AView::invalidateAssHelper","title":"invalidateAssHelper","text":""},{"location":"aview/#AView::invalidateStateStyles","title":"invalidateStateStyles","text":""},{"location":"aview/#AView::markMinContentSizeInvalid","title":"markMinContentSizeInvalid","text":""},{"location":"aview/#AView::onClickPrevented","title":"onClickPrevented","text":""},{"location":"aview/#AView::onGesture","title":"onGesture","text":""},{"location":"aview/#AView::onPointerMove","title":"onPointerMove","text":""},{"location":"aview/#AView::onPointerPressed","title":"onPointerPressed","text":""},{"location":"aview/#AView::onPointerReleased","title":"onPointerReleased","text":""},{"location":"aview/#AView::onScroll","title":"onScroll","text":""},{"location":"aview/#AView::pack","title":"pack","text":""},{"location":"aview/#AView::position","title":"position","text":""},{"location":"aview/#AView::postRender","title":"postRender","text":""},{"location":"aview/#AView::redraw","title":"redraw","text":""},{"location":"aview/#AView::removeAssName","title":"removeAssName","text":""},{"location":"aview/#AView::render","title":"render","text":""},{"location":"aview/#AView::setAssName","title":"setAssName","text":""},{"location":"aview/#AView::setExpanding","title":"setExpanding","text":""},{"location":"aview/#AView::setExtraStylesheet","title":"setExtraStylesheet","text":""},{"location":"aview/#AView::setFloating","title":"setFloating","text":""},{"location":"aview/#AView::setGeometry","title":"setGeometry","text":""},{"location":"aview/#AView::setMargin","title":"setMargin","text":""},{"location":"aview/#AView::setPadding","title":"setPadding","text":""},{"location":"aview/#AView::setSizeForced","title":"setSizeForced","text":""},{"location":"aview/#AView::setSkipUntilLayoutUpdate","title":"setSkipUntilLayoutUpdate","text":""},{"location":"aview/#AView::size","title":"size","text":""},{"location":"aview/#AView::visibility","title":"visibility","text":""},{"location":"aview/#AView::wantsTouchscreenKeyboard","title":"wantsTouchscreenKeyboard","text":""},{"location":"aviewcontainer/","title":"AViewContainer","text":"<p>A trivial modifiable view that represents a set of views.</p> Header:<code>#include &lt;AUI/View/AViewContainer.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aviewcontainer/#detailed-description","title":"Detailed Description","text":"<p>AViewContainer can store, render, resize, provide events to and handle the child views.</p> <p>AViewContainer does not control the position and size of the child views by itself; instead, it delegates that responsibility to it's layout manager.</p> <p>Since AViewContainer is an instance of AView, AViewContainer can handle AViewContainers recursively, thus, making possible complex UI by nested AViewContainers with different layout managers.</p> <p>Consider using AViewContainerBase as a base class when possible. Use AViewContainer if you want to expose view modifying methods such as addView, removeView, setContents, setLayout, etc. Use AViewContainerBase if these methods might cause unwanted interference with implementation details of your view.</p>"},{"location":"aviewcontainer/#examples","title":"Examples","text":"examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    beginGame(10, 10, 20);\n}\n</code></pre></p> examples/app/minesweeper/src/MinesweeperWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    bool mBombsPlanted = false;\n    int mBombs;\n    int mOpenedCells;\n\n    _&lt;AViewContainer&gt; mGrid;\n    AVector&lt;FieldCell&gt; mField;\n\n    void openCell(int x, int y, bool doGameLoseIfBomb);\n    int countBombsAround(int x, int y);\n    bool isValidCell(int x, int y) { return x &gt;= 0 &amp;&amp; x &lt; mFieldColumns &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; mFieldRows; }\n</code></pre></p>"},{"location":"aviewcontainerbase/","title":"AViewContainerBase","text":"<p>A view that represents a set of views.</p> Header:<code>#include &lt;AUI/View/AViewContainerBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"aviewcontainerbase/#detailed-description","title":"Detailed Description","text":"<p>AViewContainerBase can store, render, resize, provide events to and handle the child views.</p> <p>AViewContainerBase does not control the position and size of the child views by itself; instead, it delegates that responsibility to it's layout manager.</p> <p>Since AViewContainerBase is an instance of AView, AViewContainerBase can handle AViewContainerBases recursively, thus, making possible complex UI by nested AViewContainerBases with different layout managers.</p> <p>This class is abstract. The methods for modifying it's views are protected. You can use AViewContainer which exposes these methods to public or extend AViewContainerBase to make your own container-like view.</p>"},{"location":"aviewcontainerbase/#public-types","title":"Public Types","text":"<p><code>struct AViewContainerBase::PointerEventsMapping</code></p> <p>Empty structure.</p>"},{"location":"aviewcontainerbase/#AViewContainerBase::PointerEventsMapping","title":"PointerEventsMapping","text":""},{"location":"aviewcontainerbase/#public-methods","title":"Public Methods","text":"<pre><code>void AViewContainerBase::applyGeometryToChildrenIfNecessary()\n</code></pre> <p>Applies geometry to all children if needed.</p> <p>See layout-managers for more info.</p> <pre><code>_&lt;AView&gt; AViewContainerBase::focusChainTarget()\n</code></pre> Returns Focus chain target. <p>See mFocusChainTarget for further info.</p> <pre><code>const _unique&lt;ALayout&gt;&amp; AViewContainerBase::getLayout()\n</code></pre> <p>Get layout manager of the container.</p> <pre><code>virtual _&lt;AView&gt; AViewContainerBase::getViewAt(glm::ivec2 pos, ABitField&lt;AViewLookupFlags&gt; flags = AViewLookupFlags::NONE)\n</code></pre> <p>Finds first direct child view under position.</p> Arguments <code>pos</code>  position relative to this container <code>flags</code>  see AViewLookupFlags Returns found view or nullptr <p>Some containers may implement getViewAt by it's own (i.e. AListView for performance reasons).</p> <pre><code>_&lt;AView&gt; AViewContainerBase::getViewAtRecursive(glm::ivec2 pos, ABitField&lt;AViewLookupFlags&gt; flags = AViewLookupFlags::NONE)\n</code></pre> <p>Acts as AViewContainerBase::getViewAt but recursively (may include non-direct child).</p> Arguments <code>pos</code>  position relative to this container <code>flags</code>  see AViewLookupFlags Returns found view or nullptr <pre><code>template&lt;aui::predicate&lt;_&lt;AView&gt; &gt; Callback &gt;\nbool AViewContainerBase::getViewAtRecursive(glm::ivec2 pos, const Callback&amp; callback, ABitField&lt;AViewLookupFlags&gt; flags = AViewLookupFlags::NONE)\n</code></pre> <p>Acts as AViewContainerBase::getViewAtRecursive but calls a callback instead of returning value.</p> Arguments <code>pos</code>  position relative to this container <code>callback</code>  callback to call <code>flags</code>  see AViewLookupFlags Returns true if callback returned true; false otherwise <p>The passed callback is a predicate. If predicate returns true, the execution of lookup is stopped and getViewAt returns true. If predicate returns false, the lookup continues.</p> <pre><code>template&lt;typename T &gt;\n_&lt;T&gt; AViewContainerBase::getViewAtRecursiveOfType(glm::ivec2 pos, ABitField&lt;AViewLookupFlags&gt; flags = AViewLookupFlags::NONE)\n</code></pre> <p>Acts as AViewContainerBase::getViewAtRecursive but finds a view castable to specified template type.</p> Arguments <code>pos</code>  position relative to this container <code>flags</code>  see AViewLookupFlags Returns found view or nullptr <pre><code>const AVector&lt;_&lt;AView&gt;&gt;&amp; AViewContainerBase::getViews()\n</code></pre> <p>Get all views of the container.</p> <p>Examples:</p> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>        }\n    }\n}\nvoid MinesweeperWindow::updateCellViewStyle(int x, int y) const {\n    AUI_EMIT_FOREIGN(mGrid-&gt;getViews()[y * mFieldColumns + x], customCssPropertyChanged);\n}\n\nint MinesweeperWindow::countBombsAround(int x, int y) {\n    int count = 0;\n    for (int i = -1; i &lt;= 1; ++i) {\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre> <pre><code>const ASmallVector&lt;PointerEventsMapping,1&gt;&amp; AViewContainerBase::pointerEventsMapping()\n</code></pre> <pre><code>void AViewContainerBase::setFocusChainTarget(_weak&lt;AView&gt; target)\n</code></pre> <p>Set focus chain target.</p> Arguments <code>target</code>  a new focus chain view belonging to this container <p>See mFocusChainTarget for further info.</p> <pre><code>template&lt;aui::predicate&lt;_&lt;AView&gt; &gt; Callback &gt;\nbool AViewContainerBase::visitsViewRecursive(Callback&amp;&amp; callback, ABitField&lt;AViewLookupFlags&gt; flags = AViewLookupFlags::NONE)\n</code></pre> <p>Performs recursive view traversal.</p> Arguments <code>callback</code>  callback to call. Returns true to finish traversal. <code>flags</code>  see AViewLookupFlags Returns true if there's at least one view for which callback returned true, false otherwise."},{"location":"aviewcontainerbase/#AViewContainerBase::applyGeometryToChildrenIfNecessary","title":"applyGeometryToChildrenIfNecessary","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::focusChainTarget","title":"focusChainTarget","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::getLayout","title":"getLayout","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::getViewAt","title":"getViewAt","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::getViewAtRecursive","title":"getViewAtRecursive","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::getViewAtRecursiveOfType","title":"getViewAtRecursiveOfType","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::getViews","title":"getViews","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::pointerEventsMapping","title":"pointerEventsMapping","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::setFocusChainTarget","title":"setFocusChainTarget","text":""},{"location":"aviewcontainerbase/#AViewContainerBase::visitsViewRecursive","title":"visitsViewRecursive","text":""},{"location":"awatchdog/","title":"AWatchdog","text":"<p>Watchdog helper class.</p> Header:<code>#include &lt;AUI/Util/AWatchdog.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"awatchdog/#detailed-description","title":"Detailed Description","text":"<p>Watchdog is either hardware or software (as in this case) module which detects hangs of subject (in this case, of a callback).</p> <p>AWatchdog catches ANR (Application Not Responsive) errors in GUI AUI applications.</p> <p>It's important to periodically call AWatchdog::isHang in order to check for hangs. It can be done via separate thread or AUI's timers (separate thread is more reliable).</p>"},{"location":"awatchdog/#public-methods","title":"Public Methods","text":"<pre><code>AWatchdog::AWatchdog(std::chrono::high_resolution_clock::duration hangDuration = std::chrono::seconds(10))\n</code></pre> Arguments <code>hangDuration</code>  the time frame exceeding which considered as hang. <pre><code>bool AWatchdog::isHang()\n</code></pre> <p>Checks for hang state.</p> Returns true, if runOperation exceeded mHangDuration. <pre><code>template&lt;aui::invocable Operation &gt;\nauto AWatchdog::runOperation(Operation&amp;&amp; operation)\n</code></pre> <p>Runs callback which is subject to check for hangs.</p> <p>If execution time of operation exceeds mHangDuration, the operation is considered hang and AWatchdog::isHang would report hang state when AWatchdog::isHang is called.</p>"},{"location":"awatchdog/#AWatchdog::AWatchdog","title":"constructor","text":""},{"location":"awatchdog/#AWatchdog::isHang","title":"isHang","text":""},{"location":"awatchdog/#AWatchdog::runOperation","title":"runOperation","text":""},{"location":"awavsoundstream/","title":"AWavSoundStream","text":"<p>Sound stream for WAV format</p> Header:<code>#include &lt;AUI/Audio/Formats/wav/AWavSoundStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"awebsocket/","title":"AWebsocket","text":"<p>Websocket implementation.</p> Header:<code>#include &lt;AUI/Curl/AWebsocket.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::curl)</code>"},{"location":"awebsocket/#public-types","title":"Public Types","text":"<p><code>enum class AWebsocket::Opcode</code></p> Constant Description <code>Opcode::CONTINUATION</code> <code>Opcode::TEXT</code> <code>Opcode::BINARY</code> <code>Opcode::CLOSE</code> <code>Opcode::PING</code> <code>Opcode::PONG</code>"},{"location":"awebsocket/#AWebsocket::Opcode","title":"Opcode","text":""},{"location":"awin32event/","title":"AWin32Event","text":"<p>Encapsulates calls to CreateEvent/</p> Header:<code>#include &lt;AUI/Platform/win32/AWin32Event.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"awin32event/#public-methods","title":"Public Methods","text":"<pre><code>AWin32Event::AWin32Event(LPSECURITY_ATTRIBUTES securityAttributes, bool manualReset, bool initialState, LPCWSTR name)\n</code></pre> <p>Creates or opens a named or unnamed event object.</p> Arguments <code>securityAttributes</code>  A pointer to a SECURITY_ATTRIBUTES structure. If this parameter is NULL, the handle        cannot be inherited by child processes. The lpSecurityDescriptor member of the structure specifies a        security descriptor for the new event. If lpEventAttributes is NULL, the event gets a default security        descriptor. The ACLs in the default security descriptor for an event come from the primary or        impersonation token of the creator. <code>manualReset</code>  If this parameter is TRUE, the function creates a manual-reset event object, which requires        the use of the ResetEvent function to set the event state to nonsignaled. If this parameter is FALSE, the        function creates an auto-reset event object, and system automatically resets the event state to        nonsignaled after a single waiting thread has been release. <code>initialState</code>  If this parameter is TRUE, the initial state of the event object is signaled; otherwise, it        is nonsignaled. <code>name</code>  The name of the event object. The name is limited to MAX_PATH characters. Name comparison is case        sensitive."},{"location":"awin32event/#AWin32Event::AWin32Event","title":"constructor","text":""},{"location":"awin32eventwait/","title":"AWin32EventWait","text":"<p>Encapsulates calls to RegisterWaitForSingleObject/UnregisterWait</p> Header:<code>#include &lt;AUI/Platform/win32/AWin32EventWait.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"awindow/","title":"AWindow","text":"<p>Represents a window in the underlying windowing system.</p> Header:<code>#include &lt;AUI/Platform/AWindow.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"awindow/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>    _&lt;ITexture&gt; mTexture;\n\n    void updateTexture() {\n        if (!mTexture) {\n            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n</code></pre></p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    mDifficultyLabel-&gt;setText(text);\n}\n\nNewGameWindow::NewGameWindow(MinesweeperWindow* minesweeper)\n  : AWindow(\"New game\", 100, 100, minesweeper), mMinesweeper(minesweeper) {\n    setWindowStyle(WindowStyle::MODAL);\n\n    setLayout(std::make_unique&lt;AVerticalLayout&gt;());\n    setContents(Vertical {\n      _form({\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>#include &lt;AUI/Platform/AWindow.h&gt;\n#include \"FractalView.h\"\n\nclass JumpToCoordsWindow : public AWindow {\npublic:\n    explicit JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent);\n};\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre></p> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo. <pre><code>    return result;\n}\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Backdrop test\", 600_dp, 300_dp);\n\n    window-&gt;setContents(headerWithContents(\n        Centered {\n          Vertical::Expanding {\n            Centered {\n</code></pre></p> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake. <pre><code>#include &lt;AUI/Platform/APlatform.h&gt;\n\nusing namespace declarative;\n\nMainWindow::MainWindow(): AWindow(\"Project template app\", 300_dp, 200_dp) {\n    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n</code></pre></p> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter. <pre><code>using namespace declarative;\n\n/// [counter]\nclass CounterWindow : public AWindow {\npublic:\n    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>        };\n    };\n}\n\nclass FlightBookerWindow : public AWindow {\npublic:\n    FlightBookerWindow() : AWindow(\"AUI - 7GUIs - Book Flight\", 150_dp, 50_dp) {\n        setExtraStylesheet(AStylesheet { {\n          ass::c(\".red\"),\n          ass::BackgroundSolid { AColor::RED },\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>static constexpr high_resolution_clock::duration MAX_DURATION = 60s;\n\n/// [example]\nclass TimerWindow : public AWindow {\npublic:\n    TimerWindow() : AWindow(\"AUI - 7GUIs - Timer\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Vertical::Expanding {\n            Horizontal {\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>              .onAction =\n                  [this, circle] {\n\n\n                      auto radiusPopup = _new&lt;AWindow&gt;(\n                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>private:\n    _&lt;State&gt; mState;\n};\n\nclass CellsWindow : public AWindow {\npublic:\n    CellsWindow() : AWindow(\"AUI - 7GUIs - Cells\", 500_dp, 400_dp) {\n        setContents(Centered {\n          AScrollArea::Builder()\n                  .withContents(Horizontal { _new&lt;CellsView&gt;(_new&lt;State&gt;()) })\n</code></pre></p> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa. <pre><code>    };\n}\n\n/// [window]\nclass TemperatureConverterWindow : public AWindow {\npublic:\n    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n</code></pre></p> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>#include \"AUI/Util/ARandom.h\"\n\nusing namespace declarative;\n\nMinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n</code></pre></p> examples/app/minesweeper/src/NewGameWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>#include \"AUI/Platform/AWindow.h\"\n#include \"AUI/View/ANumberPicker.h\"\n#include \"AUI/View/ALabel.h\"\n\nclass NewGameWindow : public AWindow {\npublic:\n    NewGameWindow(MinesweeperWindow* minesweeper);\n\nprivate:\n    MinesweeperWindow* mMinesweeper;\n</code></pre></p> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>using namespace ass;\nusing namespace declarative;\n\nFractalWindow::FractalWindow() : AWindow(\"Mandelbrot set\") {\n    setLayout(std::make_unique&lt;AHorizontalLayout&gt;());\n\n    auto centerPosDisplay = _new&lt;ALabel&gt;(\"-\");\n    {\n        centerPosDisplay-&gt;setCustomStyle({\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>#include &lt;AUI/Platform/AMessageBox.h&gt;\n\nusing namespace declarative;\n\nJumpToCoordsWindow::JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent)\n  : AWindow(\"Jump to coords\", 854_dp, 500_dp, parent, WindowStyle::NO_RESIZE) {\n    auto re = _new&lt;ATextField&gt;();\n    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n</code></pre></p> examples/app/fractal/src/FractalWindow.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass FractalWindow : public AWindow {\npublic:\n    FractalWindow();\n};\n</code></pre></p> examples/ui/minimal_ui_xmake/src/MainWindow.h <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake. <pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass MainWindow: public AWindow {\npublic:\n    MainWindow();\n};\n</code></pre></p>"},{"location":"awindow/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>bool mFocusNextViewOnTab</code></p> <p>defines if the next view must be focused on tab button pressed</p> <p><code>emits&lt;&gt; maximized</code></p> <p>Window is maximized.</p> <p><code>emits&lt;&gt; minimized</code></p> <p>Window is minimized (hidden to the taskbar, iconified).</p> <p><code>emits&lt;glm::vec2&gt; moving</code></p> <p>Window is moving.</p> <p>client area position.</p> <p><code>emits&lt;&gt; restored</code></p> <p>Window is restored (shown from the taskbar, deiconified).</p>"},{"location":"awindow/#AWindow::mFocusNextViewOnTab","title":"mFocusNextViewOnTab","text":""},{"location":"awindow/#AWindow::maximized","title":"maximized","text":""},{"location":"awindow/#AWindow::minimized","title":"minimized","text":""},{"location":"awindow/#AWindow::moving","title":"moving","text":""},{"location":"awindow/#AWindow::restored","title":"restored","text":""},{"location":"awindow/#public-methods","title":"Public Methods","text":"<pre><code>AWindow::AWindow(std::nullptr_t)\n</code></pre> <p>Constructor for custom initialization logic</p> <p>Please call windowNativePreInit</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    _&lt;ITexture&gt; mTexture;\n\n    void updateTexture() {\n        if (!mTexture) {\n            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n</code></pre> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    mDifficultyLabel-&gt;setText(text);\n}\n\nNewGameWindow::NewGameWindow(MinesweeperWindow* minesweeper)\n  : AWindow(\"New game\", 100, 100, minesweeper), mMinesweeper(minesweeper) {\n    setWindowStyle(WindowStyle::MODAL);\n\n    setLayout(std::make_unique&lt;AVerticalLayout&gt;());\n    setContents(Vertical {\n      _form({\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>#include &lt;AUI/Platform/AWindow.h&gt;\n#include \"FractalView.h\"\n\nclass JumpToCoordsWindow : public AWindow {\npublic:\n    explicit JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent);\n};\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre> examples/ui/views/src/ExampleWindow.h <p>Views Example - All-in-one views building example.</p> <pre><code>#include \"AUI/Thread/AAsyncHolder.h\"\n\nclass API_AUI_AUDIO IAudioPlayer;\n\nclass ExampleWindow: public AWindow {\npublic:\n    ExampleWindow();\n\n    void onDragDrop(const ADragNDrop::DropEvent&amp; event) override;\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>#include &lt;AUI/Platform/APlatform.h&gt;\n\nusing namespace declarative;\n\nMainWindow::MainWindow(): AWindow(\"Project template app\", 300_dp, 200_dp) {\n    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n</code></pre> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter.</p> <pre><code>using namespace declarative;\n\n/// [counter]\nclass CounterWindow : public AWindow {\npublic:\n    CounterWindow() : AWindow(\"AUI - 7GUIs - Counter\", 200_dp, 100_dp) {\n        setContents(Centered {\n          Horizontal {\n            Label { AUI_REACT(\"Count: {}\"_format(mCounter)) },\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        };\n    };\n}\n\nclass FlightBookerWindow : public AWindow {\npublic:\n    FlightBookerWindow() : AWindow(\"AUI - 7GUIs - Book Flight\", 150_dp, 50_dp) {\n        setExtraStylesheet(AStylesheet { {\n          ass::c(\".red\"),\n          ass::BackgroundSolid { AColor::RED },\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>static constexpr high_resolution_clock::duration MAX_DURATION = 60s;\n\n/// [example]\nclass TimerWindow : public AWindow {\npublic:\n    TimerWindow() : AWindow(\"AUI - 7GUIs - Timer\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Vertical::Expanding {\n            Horizontal {\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>              .onAction =\n                  [this, circle] {\n\n\n                      auto radiusPopup = _new&lt;AWindow&gt;(\n                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>private:\n    _&lt;State&gt; mState;\n};\n\nclass CellsWindow : public AWindow {\npublic:\n    CellsWindow() : AWindow(\"AUI - 7GUIs - Cells\", 500_dp, 400_dp) {\n        setContents(Centered {\n          AScrollArea::Builder()\n                  .withContents(Horizontal { _new&lt;CellsView&gt;(_new&lt;State&gt;()) })\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>    };\n}\n\n/// [window]\nclass TemperatureConverterWindow : public AWindow {\npublic:\n    TemperatureConverterWindow() : AWindow(\"AUI - 7GUIs - TempConv\", 300_dp, 50_dp) {\n        setContents(Centered {\n          Horizontal {\n            myPicker() AUI_LET {\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Util/ARandom.h\"\n\nusing namespace declarative;\n\nMinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"FieldCell.h\"\n#include \"AUI/Platform/ACustomCaptionWindow.h\"\n#include \"CellView.h\"\n\nclass MinesweeperWindow : public AWindow {\npublic:\n    void beginGame(int columns, int rows, int bombs);\n    MinesweeperWindow();\n\n    [[nodiscard]]\n</code></pre> examples/app/minesweeper/src/NewGameWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include \"AUI/Platform/AWindow.h\"\n#include \"AUI/View/ANumberPicker.h\"\n#include \"AUI/View/ALabel.h\"\n\nclass NewGameWindow : public AWindow {\npublic:\n    NewGameWindow(MinesweeperWindow* minesweeper);\n\nprivate:\n    MinesweeperWindow* mMinesweeper;\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>using namespace ass;\nusing namespace declarative;\n\nFractalWindow::FractalWindow() : AWindow(\"Mandelbrot set\") {\n    setLayout(std::make_unique&lt;AHorizontalLayout&gt;());\n\n    auto centerPosDisplay = _new&lt;ALabel&gt;(\"-\");\n    {\n        centerPosDisplay-&gt;setCustomStyle({\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>#include &lt;AUI/Platform/AMessageBox.h&gt;\n\nusing namespace declarative;\n\nJumpToCoordsWindow::JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent)\n  : AWindow(\"Jump to coords\", 854_dp, 500_dp, parent, WindowStyle::NO_RESIZE) {\n    auto re = _new&lt;ATextField&gt;();\n    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n</code></pre> examples/app/fractal/src/FractalWindow.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass FractalWindow : public AWindow {\npublic:\n    FractalWindow();\n};\n</code></pre> examples/ui/minimal_ui_xmake/src/MainWindow.h <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass MainWindow: public AWindow {\npublic:\n    MainWindow();\n};\n</code></pre> <pre><code>void AWindow::allowDragNDrop()\n</code></pre> <p>Enables drag-n-drop for this window.</p> <pre><code>static AWindowBase* AWindow::current()\n</code></pre> Returns Current window for current thread. <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    _&lt;ITexture&gt; mTexture;\n\n    void updateTexture() {\n        if (!mTexture) {\n            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n</code></pre> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>                  [this, circle] {\n\n\n                      auto radiusPopup = _new&lt;AWindow&gt;(\n                          \"\", 200_dp, 50_dp, dynamic_cast&lt;AWindow*&gt;(AWindow::current()), WindowStyle::MODAL);\n                      radiusPopup-&gt;setContents(Vertical {\n                        Label { \"Adjust diameter of circle at {}.\"_format(circle-&gt;position) },\n                        _new&lt;ASlider&gt;() AUI_LET {\n                                it-&gt;setValue(circle-&gt;radius / MAX_RADIUS);\n                                connect(\n</code></pre> examples/7guis/cells/src/Spreadsheet.h <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>        struct RangeIterator {\n            const Spreadsheet* spreadsheet;\n            formula::Range range;\n            glm::uvec2 current;\n\n            RangeIterator operator++() {\n                current.x += 1;\n                if (current.x &lt;= range.to.x) {\n                    return *this;\n</code></pre> <pre><code>bool AWindow::isMaximized()\n</code></pre> Returns true if window maximized (fullscreen) <pre><code>bool AWindow::isMinimized()\n</code></pre> Returns true if window minimized (hidden in taskbar, iconified) <pre><code>static bool AWindow::isRedrawWillBeEfficient()\n</code></pre> <p>Checks whether last monitor frame is displayed and redraw will be efficient.        If some object often updates UI thread for displaying some data it may cause extra CPU and GPU overload.        AUI throttles window redraws and FPS does not go above 60 FPS but UI views may also cause extra CPU and        GPU overload that does not have visual difference.</p> Returns true if 16 milliseconds elapsed since last frame <pre><code>glm::ivec2 AWindow::mapPosition(const glm::ivec2&amp; position)\n</code></pre> <p>Translates coordinates from the monitor's coordinate space to the coordinate space of this window.</p> Arguments <code>position</code>  the coordinate in screen space Returns coordinates in the space of this window <pre><code>glm::ivec2 AWindow::mapPositionTo(const glm::ivec2&amp; position, _&lt;AWindow&gt; other)\n</code></pre> <p>Translates coordinates from the coordinate space of this window to the coordinate space of another window.</p> Arguments <code>position</code>  coordinates in the space of this window <code>other</code>  other window Returns coordinates in the space of the other window <pre><code>void AWindow::maximize()\n</code></pre> <p>Maximizes window (makes window fullscreen)</p> <pre><code>void AWindow::minimize()\n</code></pre> <p>Minimizes window (hide window to the taskbar, iconifies)</p> <pre><code>void AWindow::moveToCenter()\n</code></pre> <p>Moves the window to the center of monitor.</p> <p>When using in series with setSize(), do the setSize() first, when moveToCenter().</p> <pre><code>void AWindow::quit()\n</code></pre> <p>Removes window from AWindowManager.</p> <pre><code>void AWindow::restore()\n</code></pre> <p>Restores window (shows window from taskbar)</p> <pre><code>void AWindow::setMobileScreenOrientation(AScreenOrientation screenOrientation)\n</code></pre> <p>Controls mobile device's screen orientation when this window is on the foreground.</p> <p>Affects only mobile OSes. On window-based interfaces (desktop) does nothing.</p> <pre><code>void AWindow::show()\n</code></pre> <p>Shows the window.</p> Behavior under UI tests Does not actually shows the window and don't even needed in graphics environment. <p>Examples:</p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n        return;\n    }\n    mContact = mOriginalContact;\n    mEditorMode = false;\n}\n</code></pre> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>AUI_ENTRY {\n    auto w = _new&lt;GameOfLifeWindow&gt;();\n    w-&gt;pack();\n    w-&gt;show();\n    return 0;\n}\n</code></pre> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>            c |= FieldCell::RED_BG;\n            mReveal = true;\n            emit customCssPropertyChanged();\n            redraw();\n            AMessageBox::show(this, \"You lost!\", \"You lost! Ahahahhaa!\");\n        }\n        return;\n    }\n    c |= FieldCell::OPEN;\n    mOpenedCells += 1;\n</code></pre> examples/app/minesweeper/src/main.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"MinesweeperWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MinesweeperWindow&gt;()-&gt;show();\n\n    return 0;\n}\n</code></pre> examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>      },\n      Vertical {\n        _new&lt;AButton&gt;(\"Identity\").connect(&amp;AButton::clicked, AUI_SLOT(fractal)::reset),\n        _new&lt;AButton&gt;(\"Jump to coords...\")\n            .connect(&amp;AButton::clicked, this, [&amp;, fractal]() { _new&lt;JumpToCoordsWindow&gt;(fractal, this)-&gt;show(); }),\n        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n                it-&gt;setMax(1000);\n                it-&gt;setValue(350);\n</code></pre> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>                    auto dScale = std::stod((*re-&gt;text()).toStdString());\n                    fractalView-&gt;setPlotPositionAndScale(glm::dvec2 { dRe, dIm }, dScale);\n                    close();\n                } catch (...) {\n                    AMessageBox::show(this, \"Error\", \"Please check your values are valid numbers.\");\n                }\n            }) AUI_LET { it-&gt;setDefault(); },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre> examples/app/fractal/src/main.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"FractalWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;FractalWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> examples/ui/backdrop/src/main.cpp <p>Backdrop - Backdrop effects demo.</p> <pre><code>                \"\u0410\u043d\u043d\u0435 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0435, \u043f\u043e\u0446\u0435\u043b\u043e\u0432\u0430\u043b \u0435\u0435 \u0440\u0443\u043a\u0443, \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0432 \u0435\u0439 \u0441\u0432\u043e\u044e \u043d\u0430\u0434\u0443\u0448\u0435\u043d\u043d\u0443\u044e \u0438 \u0441\u0438\u044f\u044e\u0449\u0443\u044e \u043b\u044b\u0441\u0438\u043d\u0443, \u0438 \"\n                \"\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u0443\u0441\u0435\u043b\u0441\u044f \u043d\u0430 \u0434\u0438\u0432\u0430\u043d\u0435.\") } AUI_WITH_STYLE { MaxSize { 550_dp, {} }, Padding { 16_dp } },\n        }));\n\n    window-&gt;show();\n\n    return 0;\n}\n</code></pre> examples/ui/views/tests/LayoutManagerTest.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>public:\nprotected:\n    void SetUp() override {\n        UITest::SetUp();\n        _new&lt;ExampleWindow&gt;()-&gt;show();\n    }\n\n    void TearDown() override {\n        UITest::TearDown();\n    }\n</code></pre> examples/ui/views/src/main.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>#include \"ExampleWindow.h\"\n#include &lt;AUI/Platform/Entry.h&gt;\n\nAUI_ENTRY {\n    _new&lt;ExampleWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> examples/ui/minimal_ui_xmake/src/main.cpp <p>Minimal UI Template XMake - Minimal UI boilerplate template XMake.</p> <pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"MainWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MainWindow&gt;()-&gt;show();\n    return 0;\n};\n</code></pre> examples/7guis/counter/src/main.cpp <p>7GUIs Counter - Simple counter.</p> <pre><code>};\n/// [counter]\n\nAUI_ENTRY {\n    _new&lt;CounterWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker.</p> <pre><code>        AString msg = \"Departure - {}\"_format(formatDate(mDepartureDate.parsed-&gt;value()));\n        if (mIsReturnFlight) {\n            msg += \"\\nReturn - {}\"_format(formatDate(mReturnDate.parsed-&gt;value()));\n        }\n        AMessageBox::show(this, \"You've booked the flight\", msg);\n    }\n};\n\nAUI_ENTRY {\n    _new&lt;FlightBookerWindow&gt;()-&gt;show();\n</code></pre> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example.</p> <pre><code>};\n/// [example]\n\nAUI_ENTRY {\n    _new&lt;TimerWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>                              float mNewRadius;\n                          };\n                          mState-&gt;history.add(std::make_unique&lt;ActionChangeRadius&gt;(circle, oldRadius, circle-&gt;radius));\n                      });\n                      radiusPopup-&gt;show();\n                  },\n            },\n        };\n    }\n</code></pre> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    }\n};\n\nAUI_ENTRY {\n    _new&lt;CellsWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> examples/7guis/temperature_converter/src/main.cpp <p>7GUIs Temperature Converter - Fahrenheit to Celsius and vice versa.</p> <pre><code>};\n/// [window]\n\nAUI_ENTRY {\n    _new&lt;TemperatureConverterWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre> <pre><code>glm::ivec2 AWindow::unmapPosition(const glm::ivec2&amp; position)\n</code></pre> <p>Translates coordinates from the coordinate space of this window to the coordinate space of the monitor.</p> Arguments <code>position</code>  coordinates in the space of this window Returns the coordinates in space of the monitor <pre><code>static _&lt;AWindow&gt; AWindow::wrapViewToWindow(const _&lt;AView&gt;&amp; view, const AString&amp; title, int width = 854 _dp, int height = 500 _dp, AWindow* parent = nullptr, WindowStyle ws = WindowStyle::DEFAULT)\n</code></pre> <p>Wraps your AView to window.</p> Arguments <code>view</code>  view to wrap <code>title</code>  window title <code>width</code>  window width <code>height</code>  window height <code>parent</code>  parent window <code>ws</code>  window style flags Returns created window, AWindow::show() is not called"},{"location":"awindow/#AWindow::AWindow","title":"constructor","text":""},{"location":"awindow/#AWindow::allowDragNDrop","title":"allowDragNDrop","text":""},{"location":"awindow/#AWindow::current","title":"current","text":""},{"location":"awindow/#AWindow::isMaximized","title":"isMaximized","text":""},{"location":"awindow/#AWindow::isMinimized","title":"isMinimized","text":""},{"location":"awindow/#AWindow::isRedrawWillBeEfficient","title":"isRedrawWillBeEfficient","text":""},{"location":"awindow/#AWindow::mapPosition","title":"mapPosition","text":""},{"location":"awindow/#AWindow::mapPositionTo","title":"mapPositionTo","text":""},{"location":"awindow/#AWindow::maximize","title":"maximize","text":""},{"location":"awindow/#AWindow::minimize","title":"minimize","text":""},{"location":"awindow/#AWindow::moveToCenter","title":"moveToCenter","text":""},{"location":"awindow/#AWindow::quit","title":"quit","text":""},{"location":"awindow/#AWindow::restore","title":"restore","text":""},{"location":"awindow/#AWindow::setMobileScreenOrientation","title":"setMobileScreenOrientation","text":""},{"location":"awindow/#AWindow::show","title":"show","text":""},{"location":"awindow/#AWindow::unmapPosition","title":"unmapPosition","text":""},{"location":"awindow/#AWindow::wrapViewToWindow","title":"wrapViewToWindow","text":""},{"location":"awordwrappinglayout/","title":"AWordWrappingLayout","text":"<p>Imitates behaviour of word wrapping, but uses views instead words</p> Header:<code>#include &lt;AUI/Layout/AWordWrappingLayout.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"awordwrappinglayout/#examples","title":"Examples","text":"examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p>"},{"location":"ax509/","title":"AX509","text":"<p>x509 certificate object.</p> Header:<code>#include &lt;AUI/Crypt/AX509.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::crypt)</code>"},{"location":"ax509store/","title":"AX509Store","text":"<p>x509 certificate store object.</p> Header:<code>#include &lt;AUI/Crypt/AX509Store.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::crypt)</code>"},{"location":"axmlparseerror/","title":"AXmlParseError","text":"<p>Thrown when a parse error occur.</p> Header:<code>#include &lt;AUI/Xml/AXmlParseError.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::xml)</code>"},{"location":"backdrop/","title":"Backdrop","text":"<p>Example's page</p> <p>This page describes an example listed in ui category.</p> <p>Backdrop effects demo.</p> <p></p> <p>This example demonstrates how <code>ass::Backdrop</code> effects can be used to produce rich visuals that conform modern design principles.</p> <p>In this example, a combination of <code>ass::Backdrop</code> -enabled view and AScrollArea is used. To raise the <code>ass::Backdrop</code> above the AScrollArea, AStackedLayout layout is used.</p>"},{"location":"backdrop/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"backdrop/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.backdrop)\naui_compile_assets(aui.example.backdrop)\naui_link(aui.example.backdrop PRIVATE aui::core aui::views)\n</code></pre>"},{"location":"backdrop/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;range/v3/all.hpp&gt;\n\n#include &lt;AUI/Platform/Entry.h&gt;\n#include \"AUI/Platform/AWindow.h\"\n#include \"AUI/Util/UIBuildingHelpers.h\"\n#include \"AUI/View/AScrollArea.h\"\n#include \"AUI/View/ASpinnerV2.h\"\n#include \"AUI/View/AForEachUI.h\"\n#include \"AUI/Model/AListModel.h\"\n#include \"AUI/Thread/AAsyncHolder.h\"\n#include \"AUI/View/AText.h\"\n#include \"AUI/View/ADrawableView.h\"\n\nusing namespace declarative;\nusing namespace ass;\n\nstatic auto headerWithContents(_&lt;AView&gt; content) {\n    auto result = Stacked {\n        AScrollArea::Builder().withContents(content).build() AUI_WITH_STYLE {\n              Expanding(),\n              Padding { 80_dp, 0, 0 },\n            } AUI_LET { it-&gt;setExtraStylesheet(\n                     AStylesheet {\n                         {\n                             t&lt;AScrollAreaViewport&gt;(),\n                             AOverflow::VISIBLE,\n                         },\n                     }\n                     ); },\n        Vertical::Expanding {\n          Centered {\n            Horizontal {\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n                      ATextAlign::CENTER,\n                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.7f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n                  },\n                  Label { \"boll\" } AUI_WITH_STYLE {\n                      FixedSize { 60_dp },\n                      BorderRadius { 60_dp / 2.f },\n                      Padding { 0 },\n                      ATextAlign::CENTER,\n                      AOverflow::HIDDEN_FROM_THIS,\n                      AOverflowMask::ROUNDED_RECT,\n                      Backdrop {\n                          Backdrop::LiquidFluid {},\n                          Backdrop::GaussianBlur { 5_dp },\n                      },\n//                      Border { 1_dp, AColor::GRAY.transparentize(0.6f) },\n                      BoxShadow { 0, 32_dp, 32_dp, AColor::BLACK.transparentize(0.8f) },\n                      BackgroundSolid { AColor::WHITE.transparentize(0.5f) },\n                  },\n              }\n          } AUI_WITH_STYLE { Padding { 50_dp } },\n        },\n    };\n    return result;\n}\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Backdrop test\", 600_dp, 300_dp);\n\n    window-&gt;setContents(headerWithContents(\n        Centered {\n          Vertical::Expanding {\n            Centered {\n              Icon { \":logo.svg\" } AUI_WITH_STYLE { FixedSize { 128_dp } },\n            } AUI_WITH_STYLE { FixedSize { 500_dp, {} } },\n            AText::fromString(\n                \"    \u2014 Eh bien, mon prince. G\u00eanes et Lucques ne sont plus que des apanages, des \"\n                \"\u043f\u043e\u043c\u0435\u0441\u0442\u044c\u044f, de la famille Buonaparte. Non, je vous pr\u00e9viens que si vous ne me dites pas \"\n                \"que nous avons la guerre, si vous vous permettez encore de pallier toutes les infamies, \"\n                \"toutes les atrocit\u00e9s de cet Antichrist (ma parole, j'y crois) \u2014 je ne vous connais \"\n                \"plus, vous n'\u00eates plus mon ami, vous n'\u00eates plus \u043c\u043e\u0439 \u0432\u0435\u0440\u043d\u044b\u0439 \u0440\u0430\u0431, comme vous dites\u202f1. \"\n                \"\u041d\u0443, \u0437\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, \u0437\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435. Je vois que je vous fais peur, \u0441\u0430\u0434\u0438\u0442\u0435\u0441\u044c \u0438 \"\n                \"\u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0439\u0442\u0435.\"),\n            AText::fromString(\n                \"    \u0422\u0430\u043a \u0433\u043e\u0432\u043e\u0440\u0438\u043b\u0430 \u0432 \u0438\u044e\u043b\u0435 1805 \u0433\u043e\u0434\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u0410\u043d\u043d\u0430 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0430 \u0428\u0435\u0440\u0435\u0440, \u0444\u0440\u0435\u0439\u043b\u0438\u043d\u0430 \u0438 \"\n                \"\u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u0430\u044f \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0440\u0438\u0446\u044b \u041c\u0430\u0440\u0438\u0438 \u0424\u0435\u043e\u0434\u043e\u0440\u043e\u0432\u043d\u044b, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044f \u0432\u0430\u0436\u043d\u043e\u0433\u043e \u0438 \u0447\u0438\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043a\u043d\u044f\u0437\u044f \u0412\u0430\u0441\u0438\u043b\u0438\u044f, \"\n                \"\u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0435\u0445\u0430\u0432\u0448\u0435\u0433\u043e \u043d\u0430 \u0435\u0435 \u0432\u0435\u0447\u0435\u0440. \u0410\u043d\u043d\u0430 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0430 \u043a\u0430\u0448\u043b\u044f\u043b\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439, \u0443 \u043d\u0435\u0435 \u0431\u044b\u043b \u0433\u0440\u0438\u043f\u043f, \"\n                \"\u043a\u0430\u043a \u043e\u043d\u0430 \u0433\u043e\u0432\u043e\u0440\u0438\u043b\u0430 (\u0433\u0440\u0438\u043f\u043f \u0431\u044b\u043b \u0442\u043e\u0433\u0434\u0430 \u043d\u043e\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e, \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0432\u0448\u0435\u0435\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0434\u043a\u0438\u043c\u0438). \u0412 \"\n                \"\u0437\u0430\u043f\u0438\u0441\u043e\u0447\u043a\u0430\u0445, \u0440\u0430\u0437\u043e\u0441\u043b\u0430\u043d\u043d\u044b\u0445 \u0443\u0442\u0440\u043e\u043c \u0441 \u043a\u0440\u0430\u0441\u043d\u044b\u043c \u043b\u0430\u043a\u0435\u0435\u043c, \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u0445:\"),\n            AText::fromString(\n                \"    \u00abSi vous n'avez rien de mieux \u00e0 faire, Monsieur le comte (\u0438\u043b\u0438 mon prince), et si la \"\n                \"perspective de passer la soir\u00e9e chez une pauvre malade ne vous effraye pas trop, je \"\n                \"serai charm\u00e9e de vous voir chez moi entre 7 et 10 heures. Annette Scherer\u00bb\u202f3.\"),\n            AText::fromString(\n                \"    \u2014 Dieu, quelle virulente sortie!\u202f4 \u2014 \u043e\u0442\u0432\u0435\u0447\u0430\u043b, \u043d\u0438\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u0441\u043c\u0443\u0442\u044f\u0441\u044c \u0442\u0430\u043a\u043e\u044e \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u0439, \"\n                \"\u0432\u043e\u0448\u0435\u0434\u0448\u0438\u0439 \u043a\u043d\u044f\u0437\u044c, \u0432 \u043f\u0440\u0438\u0434\u0432\u043e\u0440\u043d\u043e\u043c, \u0448\u0438\u0442\u043e\u043c \u043c\u0443\u043d\u0434\u0438\u0440\u0435, \u0432 \u0447\u0443\u043b\u043a\u0430\u0445, \u0431\u0430\u0448\u043c\u0430\u043a\u0430\u0445 \u0438 \u0437\u0432\u0435\u0437\u0434\u0430\u0445, \u0441 \u0441\u0432\u0435\u0442\u043b\u044b\u043c \"\n                \"\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c \u043f\u043b\u043e\u0441\u043a\u043e\u0433\u043e \u043b\u0438\u0446\u0430.\"),\n            AText::fromString(\n                \"    \u041e\u043d \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u043d\u0430 \u0442\u043e\u043c \u0438\u0437\u044b\u0441\u043a\u0430\u043d\u043d\u043e\u043c \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b\u0438, \u043d\u043e \u0438 \"\n                \"\u0434\u0443\u043c\u0430\u043b\u0438 \u043d\u0430\u0448\u0438 \u0434\u0435\u0434\u044b, \u0438 \u0441 \u0442\u0435\u043c\u0438, \u0442\u0438\u0445\u0438\u043c\u0438, \u043f\u043e\u043a\u0440\u043e\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u043e\u043d\u0430\u0446\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \"\n                \"\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u044b \u0441\u043e\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u043c\u0443\u0441\u044f \u0432 \u0441\u0432\u0435\u0442\u0435 \u0438 \u043f\u0440\u0438 \u0434\u0432\u043e\u0440\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0443. \u041e\u043d \u043f\u043e\u0434\u043e\u0448\u0435\u043b \u043a \"\n                \"\u0410\u043d\u043d\u0435 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0435, \u043f\u043e\u0446\u0435\u043b\u043e\u0432\u0430\u043b \u0435\u0435 \u0440\u0443\u043a\u0443, \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0432 \u0435\u0439 \u0441\u0432\u043e\u044e \u043d\u0430\u0434\u0443\u0448\u0435\u043d\u043d\u0443\u044e \u0438 \u0441\u0438\u044f\u044e\u0449\u0443\u044e \u043b\u044b\u0441\u0438\u043d\u0443, \u0438 \"\n                \"\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u0443\u0441\u0435\u043b\u0441\u044f \u043d\u0430 \u0434\u0438\u0432\u0430\u043d\u0435.\") } AUI_WITH_STYLE { MaxSize { 550_dp, {} }, Padding { 16_dp } },\n        }));\n\n    window-&gt;show();\n\n    return 0;\n}\n</code></pre>"},{"location":"blending/","title":"Blending","text":"Header:<code>#include &lt;AUI/Render/IRenderer.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"blending/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"classes/","title":"Classes","text":"A B C D E F G H I J L M N O P Q R S T U V W X Z _ A <p>A2FingerTransformArea</p> <p>AAbsoluteLayout</p> <p>AAbstractLabel</p> <p>AAbstractSignal</p> <p>AAbstractSocket</p> <p>AAbstractTextField</p> <p>AAbstractThread</p> <p>AAbstractTypeable</p> <p>AAbstractTypeableView</p> <p>AAdvancedGridLayout</p> <p>AAngleRadians</p> <p>AArrayView</p> <p>AAssHelper</p> <p>AAsyncHolder</p> <p>AAudioFormat</p> <p>AAudioMixer</p> <p>Activated</p> <p>AppropriatePortablePackagePredicate</p> <p>ArrayView</p> <p>all</p> <p>any</p> <p>any_view</p> <p>assert_not_used_when_null</p> <p>atomic_lazy</p> <p>avoid_copy</p> B <p>ABaseMap</p> <p>ABasicListEditor</p> <p>ABitField</p> <p>ABorderStyle</p> <p>ABoxFields</p> <p>ABuiltinFiles</p> <p>AButton</p> <p>AByteBuffer</p> <p>AByteBufferInputStream</p> <p>AByteBufferView</p> <p>Backdrop</p> <p>BackgroundCropping</p> <p>BackgroundEffect</p> <p>BackgroundGradient</p> <p>BackgroundImage</p> <p>BackgroundSolid</p> <p>BinarySearchNearestToZero</p> <p>Border</p> <p>BorderBottom</p> <p>BorderLeft</p> <p>BorderRadius</p> <p>BorderRight</p> <p>BorderTop</p> <p>BoxShadow</p> <p>BoxShadowInner</p> C <p>AChar</p> <p>ACheckBox</p> <p>AChildProcess</p> <p>ACircleProgressBar</p> <p>AClass</p> <p>ACleanup</p> <p>AColor</p> <p>AColorHSV</p> <p>AComBase</p> <p>AComPtr</p> <p>ACommandLineArgs</p> <p>AComplexFutureOperation</p> <p>AConcatInputStream</p> <p>AConditionVariable</p> <p>ACurl</p> <p>ACurlMulti</p> <p>ACursor</p> <p>ACustomCaptionWindow</p> <p>ACustomShaderBrush</p> <p>ACustomWindow</p> <p>ACutoffSignal</p> <p>CancellationWrapper</p> <p>CubicBezier</p> <p>CustomProperty</p> D <p>ADBus</p> <p>ADataBinding</p> <p>ADataBindingDefault</p> <p>ADeque</p> <p>ADirChooserView</p> <p>ADividerView</p> <p>ADoubleNumberPicker</p> <p>ADragArea</p> <p>ADragNDrop</p> <p>ADrawableView</p> <p>ADropdownList</p> <p>ADynamicPipe</p> <p>ADynamicVector</p> <p>DependencyObserver</p> <p>Disabled</p> E <p>AEOFException</p> <p>AEmbedAuiWrap</p> <p>AEnumerate</p> <p>AEvaluationLoopException</p> <p>AEventLoop</p> <p>AException</p> <p>Expanding</p> <p>ExtractTo</p> F <p>AFakeMutex</p> <p>AFakeWindowInitializer</p> <p>AFatalException</p> <p>AFieldObservable</p> <p>AFieldSignalEmitter</p> <p>AFileChooserView</p> <p>AFileInputStream</p> <p>AFileOutputStream</p> <p>AFlatVector</p> <p>AForEachUI</p> <p>AFormMultipart</p> <p>AFormattedColorConverter</p> <p>AFormattedImage</p> <p>AFormattedImageView</p> <p>AFraction</p> <p>AFunctionQueue</p> <p>AFuture</p> <p>AFutureSet</p> <p>FileEntry</p> <p>FileExtension</p> <p>FixedSize</p> <p>Focused</p> <p>Font</p> <p>FontFamily</p> <p>FontSize</p> <p>FormatEtcEnumerator</p> <p>fast_pimpl</p> G <p>AGLEmbedAuiWrap</p> <p>AGainFilter</p> <p>AGlibPtr</p> <p>AGridLayout</p> <p>AGridSplitter</p> <p>AGroupBox</p> <p>GlobalRef</p> <p>GroupBox</p> H <p>AHDividerView</p> <p>AHorizontalLayout</p> <p>AHotCodeReload</p> <p>HVLayout</p> <p>Hovered</p> I <p>AI18n</p> <p>AIOException</p> <p>AImage</p> <p>AImageLoaderRegistry</p> <p>AImageView</p> <p>AImplementationManager</p> <p>AInet4Address</p> <p>IAnimatedImageFactory</p> <p>IAudioPlayer</p> <p>IBackgroundEffect</p> <p>IDrawable</p> <p>IFontView</p> <p>IImageFactory</p> <p>IImageLoader</p> <p>IInputStream</p> <p>IPlatformAbstraction</p> <p>IPropertyBase</p> <p>IRenderViewToTexture</p> <p>IRenderer</p> <p>IRenderingContext</p> <p>ISeekableInputStream</p> <p>ISelectable</p> <p>ISoundInputStream</p> <p>ISoundPipe</p> <p>IStringable</p> <p>ITexture</p> <p>ITreeModel</p> <p>IXmlDocumentVisitor</p> <p>IXmlEntityVisitor</p> <p>IXmlHeaderVisitor</p> <p>In</p> <p>InflateOpts</p> <p>InputStreamAsync</p> <p>identity</p> <p>in_range</p> <p>index_of</p> <p>inherit_t</p> J <p>AJson</p> <p>AJson</p> <p>AJsonConv</p> <p>AJsonConv</p> <p>AJsonException</p> <p>AJsonParseException</p> <p>AJsonTypeMismatchException</p> L <p>ALabel</p> <p>ALanguageCode</p> <p>ALayout</p> <p>ALimitedInputStream</p> <p>ALineSegment</p> <p>ALinearGradientBrush</p> <p>ALinearLayout</p> <p>AListView</p> <p>ALogger</p> <p>ALongPressEvent</p> <p>LambdaCapturer</p> <p>LayoutSpacing</p> <p>LineHeight</p> <p>lambda_overloaded</p> <p>latin</p> <p>lazy</p> <p>lazy</p> <p>lref_base_asserting</p> <p>lref_constructing</p> M <p>AMap</p> <p>AMessageQueue</p> <p>AMetric</p> <p>AMimedData</p> <p>AModelMeta</p> <p>AMutex</p> <p>AMutexWrapper</p> <p>Margin</p> <p>MaxSize</p> <p>MinSize</p> <p>member</p> <p>member</p> <p>member</p> <p>member</p> <p>member</p> <p>member</p> <p>move_only</p> N <p>ANumberPicker</p> <p>no_escape</p> <p>non_null</p> <p>non_null_lateinit</p> <p>noncopyable</p> <p>numeric</p> O <p>AObject</p> <p>AOggSoundStream</p> <p>AOptional</p> <p>AOpusSoundPipe</p> <p>Opacity</p> P <p>APageView</p> <p>APath</p> <p>APathOwner</p> <p>APerformanceFrame</p> <p>APerformanceSection</p> <p>APipe</p> <p>APixelFormat</p> <p>APlatformAbstractionOptions</p> <p>APointerIndex</p> <p>APointerMoveEvent</p> <p>APointerPressedEvent</p> <p>APointerReleasedEvent</p> <p>AProcess</p> <p>AProcessException</p> <p>AProgressBar</p> <p>AProperty</p> <p>APropertyDef</p> <p>APropertyPrecomputed</p> <p>Padding</p> <p>Pipe</p> <p>PropertyModifier</p> <p>PushMask</p> Q <p>AQueue</p> R <p>ARadioButton</p> <p>ARandomInputStream</p> <p>ARawSoundStream</p> <p>ARect</p> <p>ARecursiveMutex</p> <p>ARenderContext</p> <p>ARenderingContextOptions</p> <p>ARsa</p> <p>ARulerArea</p> <p>ARulerView</p> <p>RenderToTexture</p> <p>RepaintTrap</p> <p>ranged_number</p> <p>reverse_iterator_wrap</p> <p>rref_constructing</p> S <p>AScheduler</p> <p>AScrollArea</p> <p>AScrollAreaViewport</p> <p>AScrollEvent</p> <p>AScrollbar</p> <p>ASet</p> <p>ASharedMutex</p> <p>ASharedRaiiHelper</p> <p>ASignal</p> <p>ASlider</p> <p>ASmallVector</p> <p>ASoftwareEmbedAuiWrap</p> <p>ASolidBrush</p> <p>ASpacerExpanding</p> <p>ASpacerFixed</p> <p>ASpinlockMutex</p> <p>ASpinner</p> <p>ASpinnerV2</p> <p>ASplitter</p> <p>ASqlModel</p> <p>AStackedLayout</p> <p>AStacktrace</p> <p>AStaticVector</p> <p>AStdIStream</p> <p>AString</p> <p>AString</p> <p>AStringFormatHelper</p> <p>AStringLiteral</p> <p>AStringStream</p> <p>AStringVector</p> <p>AStringView</p> <p>AStrongByteBufferInputStream</p> <p>AStubWindowManager</p> <p>ScopedHGlobal</p> <p>ScrollbarAppearance</p> <p>Selected</p> <p>Semver</p> <p>SizeInjector</p> <p>Sound</p> <p>SpacerExpanding</p> <p>SpacerFixed</p> <p>State</p> <p>Style</p> <p>select_overload</p> T <p>ATabView</p> <p>ATcpServerSocket</p> <p>ATcpSocket</p> <p>AText</p> <p>ATextArea</p> <p>ATextBase</p> <p>ATextField</p> <p>ATextLayoutHelper</p> <p>ATexturedBrush</p> <p>AThread</p> <p>AThreadPool</p> <p>ATimer</p> <p>ATouchScroller</p> <p>ATreeModel</p> <p>ATreeModelIndex</p> <p>ATreeView</p> <p>TextBorder</p> <p>TextColor</p> <p>TextShadow</p> <p>Texture2DArray</p> <p>TransformOffset</p> <p>TransformRotate</p> <p>TransformScale</p> U <p>AUdpSocket</p> <p>AUnorderedMap</p> <p>AUpdater</p> <p>AUrl</p> <p>AUtf8ConstIterator</p> <p>AUtf8ConstReverseIterator</p> <p>AUuid</p> <p>UnixEventFd</p> <p>UnixIoThread</p> V <p>AVDividerView</p> <p>AVector</p> <p>AVerticalLayout</p> <p>AView</p> <p>AViewContainer</p> <p>AViewContainerBase</p> <p>view</p> W <p>AWatchdog</p> <p>AWavSoundStream</p> <p>AWebsocket</p> <p>AWin32Event</p> <p>AWin32EventWait</p> <p>AWindow</p> <p>AWordWrappingLayout</p> <p>WebpImageFactory</p> X <p>AX509</p> <p>AX509Store</p> <p>AXmlParseError</p> Z <p>zip</p> _ <p>_</p> <p>_weak</p>"},{"location":"code-style/","title":"Code Style and Recommendations","text":"<p>AUI's code should be kept with the following code style:</p> <ul> <li><code>No tabs</code>; only four spaces (exception: for UI building, 2 spaces is acceptable)</li> <li>Row length: up to <code>120</code> characters</li> <li>Class names: <code>CamelCase</code>. Every framework public API class name starts with capital '<code>A</code>'. Use <code>GenericSpecific</code> pattern   (<code>EventClose</code>, not <code>CloseEvent</code>, <code>PacketConnect</code>, not <code>ConnectPacket</code>). Using that convention files group nicely in   file lists.</li> <li>Functions, variables: <code>lowerCamelCase</code></li> <li>Constants: <code>UPPER_SNAKE_CASE</code></li> <li>Member fields: <code>m...</code> (<code>lineNumber</code> -&gt; <code>mLineNumber</code>)</li> <li>Getters: <code>...</code> (<code>lineNumber</code> -&gt; <code>lineNumber()</code>, (field: <code>mLineNumber</code> )</li> <li>Getters: <code>set...</code>/<code>with...</code> (<code>lineNumber</code> -&gt; <code>setLineNumber(...)</code>, <code>accessible</code> -&gt; <code>withAccessible(...)</code>)</li> <li>Structures: commonly holds some data and does not have member functions; <code>CamelCase</code>.   Also used for stl-like functionality (AUI/Traits), in that case, <code>snake_case</code> used   for file names, struct name and its member functions.</li> <li>Constructors and setters: move semantics. This allows caller to choose whether copy or move the passed object</li> <li>Use <code>const</code>, <code>noexcept</code> and <code>[[nodiscard]]</code> whenever possible</li> <li>Tend to not to use macros. <code>UPPER_SNAKE_CASE</code> prefixed with '<code>AUI_</code>'</li> <li>Use <code>#pragma once</code> instead of C-style include guards</li> <li>Use Doxygen (<code>@</code>-style, not <code>\\</code>)</li> <li>Avoid global functions (at least put them to namespaces)</li> <li>Every symbol (class, struct, namespace, file) prefixed with '<code>A</code>', '<code>aui</code>', '<code>AUI_</code>' is a part of AUI's stable public   API ready for the external usage. Symbols without such prefixes are called internal and can be also used (if   possible) when needed. Be careful using internal symbols since there's no guarantee about their API stability.</li> <li>Follow visibility in this order when possible: <code>public</code>, <code>protected</code>, <code>private</code>. Header's user is more interested in   public APIs rather than in private.</li> </ul> <p>Basic example: <pre><code>class User {\npublic:\n  // User(const AString&amp; username): mUsername(username) {} &lt;--- outdated\n  // use this instead:\n  User(AString username) noexcept: mUsername(std::move(username)) {}\n\n  [[nodiscard]\n  const AString&amp; username() const noexcept { // a typical getter; notice the const and noexcept keywords and [[nodiscard]] attribute\n    return mUsername;\n  }\n\n  void setUsername(AString username) noexcept { // a typical setter; also uses noexcept\n    mUsername = std::move(username);\n  }\n\nprivate:\n  AString mUsername;\n\n};\n</code></pre></p> <p>Note</p> <p>With property-system, a better way of defining data models will be: <pre><code>struct User {\n    AProperty&lt;AString&gt; username;\n};\n</code></pre> It allows aggregate initialization: <code>User u { .username = \"Test\" };</code></p>"},{"location":"code-style/#assertions","title":"Assertions","text":"<p>The whole AUI framework's code filled with assertion checks so if you do something wrong the framework will tell you about it. Also in AUI almost every assertion contains a quick tip how to solve the problem. It is recommended to you to do the same. For example:</p> <pre><code>AUI_ASSERTX(mId == std::this_thread::get_id(),\n            \"AAbstractThread::processMessages() should not be called from other thread\");\n</code></pre> <p>The code above ensures that the function was not called from some other thread.</p> <p>Note</p> <p>Do not put algorithm-necessary code inside <code>assert()</code>, <code>AUI_ASSERT</code> or <code>AUI_ASSERTX</code> since asserts are removed in release builds on some compilers, i.e. don't <code>assert((\"someAction failed!\", someObject-&gt;someAction() != 0))</code> since it leads to hard-to-find bugs.</p>"},{"location":"code-style/#assert-or-exception","title":"Assert or exception?","text":"<p>Assert is an enemy for the production application since it terminates program execution. Use it when it's condition relies only on the developer. Quick example:</p> <pre><code>connect(mLoginButton-&gt;clicked, me::loginButtonClicked);\n...\nvoid loginButtonClicked() {\n  AUI_ASSERT(mUsername-&gt;text().length() &lt; 32); // bad! throw an exception instead so it can be handled: throw AException(\"username is too long!\")\n}\n</code></pre>"},{"location":"code-style/#code-style-exceptions","title":"Code style exceptions","text":"<p>Commonly, any iterator-based algorithm (i.e. <code>aui::binary_search</code>), global functions, trait structs are STL-like functionality. The final goal is to avoid mixed-style expressions like <code>AString::const_iterator</code> which hurts eyes.</p>"},{"location":"code-style/#template-metaprogramming-and-macros","title":"Template metaprogramming and macros","text":"<p>Both C++ template instantiation mechanism and macro preprocessor are Turing complete. However, writing and understanding C++ template metaprogramming (TMP) and macro preprocessor code requires expert knowledge of C++ and a lot of time to understand. Use TMP deliberately.</p> <p>Since TMP and macros often evolve custom syntax and usage scenarios, consider writing especially well documentation with examples when defining public API templates and macros.</p>"},{"location":"code-style/#improving-compiler-error-messages-techniques","title":"Improving compiler error messages techniques","text":""},{"location":"code-style/#TRY_TO_BREAK","title":"Try to break your templates","text":"<p>After considering actions listed below, try your types/traits/concepts against various awkward types/arguments/use  cases.</p>"},{"location":"code-style/#concepts-are-preferable","title":"Concepts are preferable","text":"<p>Use concepts instead of SFINAE were possible.</p>"},{"location":"code-style/#raise-static_assert-messages","title":"Raise static_assert messages","text":"<p>With <code>static_assert</code> with potentially helpful message, use <code>====================&gt;</code> prefix in your message to raise your message among a long list of compiler diagnostics.</p> <pre><code>/**\n * @brief Compile-time class introspection.\n * @ingroup reflection\n */\ntemplate&lt;class T&gt;\nclass AClass {\npublic:\n    static_assert(!std::is_reference&lt;T&gt;::value, \"====================&gt; AClass: attempt to use AClass on a reference.\");\n</code></pre>"},{"location":"code-style/#single-line-comment-error-messages","title":"Single line comment error messages","text":"<p>You can exploit the fact that a compiler prints code lines in its diagnostics. Put a single line comment with long arrow prefix to put potentially helpful messages. Use Try to break your templates technique to discover the lines to put the comments in.</p> <p>Cast failure example:</p> <pre><code>auto&amp; [a] = const_cast&lt;std::remove_cv_t&lt;Clazz&gt;&amp;&gt;(clazz); // ====================&gt; aui::reflect: Clazz is not a SimpleAggregate.\n</code></pre> <p>Overload substitution failure example:</p> <pre><code>...\ntemplate&lt;typename T&gt;\nrequires requires(T&amp; t) { std::hash&lt;T&gt;{}(t); }\nconstexpr std::size_t forEachKey(const T&amp; value) { // ====================&gt; std::hash based specialization\n    return std::hash&lt;T&gt;{}(value);\n}\n\ntemplate&lt;typename T&gt;\nrequires requires(T&amp; t) { { t.base() } -&gt; ranges::range; }\nconstexpr std::size_t forEachKey(const T&amp; value) { // ====================&gt; specialization for subranges\n...    \n</code></pre> <p>Produces the following diagnostics:</p> <pre><code>.../AForEachUI.h:220:92: error: no matching function for call to \u2018forEachKey(...)\u2019\n220 |     return AForEachUIBase::Entry { .view = mFactory(t), .id = forEachKey(t) };\n    |                                                               ~~~~~~~~~~^~~\n...View/AForEachUI.h:34:23: note: candidate: template&lt;class T&gt; requires(T&amp; t) {{}(t);} ...\n34 | constexpr std::size_t forEachKey(const T&amp; value) { // ====================&gt; std::hash based specialization\n</code></pre> <p>This makes it obvious what does this overload do.</p>"},{"location":"code-style/#clang-format","title":".clang-format","text":"<p>clang-format is a de facto standard tool to auto format (C++) code with style described by <code>.clang-format</code> file that typically located inside your project's root directory. AUI has such file.</p> <p>Since AUI abuses C++'s syntax, it's important to set up appropriate auto formatting, or you will often find yourself struggling with AUI's DSL especially in large portions of layout, despite the fact we recommend to decompose large AUI DSLs into smaller pieces (i.e., functions). For your project, we recommend to start with AUI's formatting configuration listed below. AUI's App Template has <code>.clang-format</code> already. Your IDE should pick up it without further configuration.</p>"},{"location":"code-style/#always-use-trailing-comma-in-initializer-lists","title":"Always Use Trailing Comma in Initializer Lists","text":"<p>When it comes to <code>clang-format</code> there's one an unobvious feature when using AUI's DSL. Consider the example:</p> With Trailing CommaWithout Trailing Comma <pre><code>setContents(Vertical {\n  Label { \"Up\" },\n  Label { \"Down\" },\n});\n</code></pre> <pre><code>setContents(Vertical {\n  Label { \"Up\" },\n  Label { \"Down\" }\n});\n</code></pre> <p>See the difference? The second example lacks one comma. If we try to trigger <code>clang-format</code> (ALT+CTRL+L in CLion), we'll get the following results (assuming AUI's \".clang-format\"):</p> With Trailing CommaWithout Trailing Comma <pre><code>setContents(Vertical {\n  Label { \"Up\" },\n  Label { \"Down\" },\n});\n</code></pre> <pre><code>setContents(Vertical {\n  Label { \"Up\" }, Label { \"Down\" } });\n</code></pre> <p>The first example left as is (correct), the second example formatted confusingly.</p> <p>When using any kind of AUI's DSL with initializer lists please always use trailing comma. Not only it helps with reordering, git diffs, etc..., but also <code>.clang-format</code> makes proper formatting for lists with trailing commas.</p>"},{"location":"code-style/#use-clang-format-offon","title":"Use clang-format off/on","text":"<p>In some scenarios clang-format may fight against you, especially with complicated syntax. You can use <code>// clang-format off</code> and <code>// clang-format on</code> to disable and enable clang-format, respectively.</p> <pre><code>struct DataOptional {\n    int v1;\n    int v2;\n};\n\n// clang-format off\nAJSON_FIELDS(DataOptional,\n             (v1, \"v1\")\n             (v2, \"v2\", AJsonFieldFlags::OPTIONAL))\n// clang-format on\n</code></pre>"},{"location":"code-style/#CLANG_FORMAT","title":"AUI's .clang-format","text":"<p>Place this <code>.clang-format</code> file in root of your project.</p> <pre><code># options: https://clang.llvm.org/docs/ClangFormatStyleOptions.html\nBasedOnStyle: Google\nIndentWidth: 4\nColumnLimit: 120\n# does (int) x instead of (int)x\nSpaceAfterCStyleCast: true\n# spaces, not tabs!\nUseTab: Never\n# if (x) doStuff()  is not allowed, bad style\nAllowShortIfStatementsOnASingleLine: false\nAlignTrailingComments: true\nSpacesBeforeTrailingComments: 3\nAlignConsecutiveMacros: Consecutive\n\n# use \\n instead of \\r\\n\nUseCRLF: false\n\nAccessModifierOffset: -4\nEmptyLineBeforeAccessModifier: Always\nEmptyLineAfterAccessModifier: Never\n\nNamespaceIndentation: None\nBreakConstructorInitializers: BeforeComma\n\n# we have some problems with ranges-v3 and AUI's AUI_LET, so keep it disabled\nSortIncludes: Never\n\n\n################################################# UI BUILDING ##########################################################\n\n# use shorter indentation for UI building stuff (like in Dart/Flutter)\nBracedInitializerIndentWidth: 2\nConstructorInitializerIndentWidth: 2\n\n# better spacing around AUI_WITH_STYLE and AUI_LET.\n# before:\n# view AUI_WITH_STYLE{Expanding()},\n# view AUI_LET{printf(\"Hello\");},\n#\n# after:\n# view AUI_WITH_STYLE { Expanding() },\n# view AUI_LET { printf(\"Hello\"); },\nCpp11BracedListStyle: false\nSpaceBeforeCpp11BracedList: true\n\n# forces nested initializer lists to begin with their own lines.\n# note: you should use comma after last element in initializer lists.\n# before:\n# Centered { Horizontal {\n#\n# after:\n# Centered {\n#   Horizontal {\nPenaltyIndentedWhitespace: 1000\nBreakBeforeBraces: Attach\nBreakBeforeBinaryOperators: None\n\nStatementAttributeLikeMacros:\n  - emit\n\n# fix AUI's scary macros.\nMacros:\n  - AUI_LET=+[]\n  - AUI_THREADPOOL=[]\n  - AUI_DECLARATIVE_FOR(a,b,c)=[v2=b,v3=c](a)\n  - AUI_DECLARATIVE_FOR_EX(a,b,c,d)=[d,v2=b,v3=c](a)\n  - AUI_WITH_STYLE=+std::vector\n</code></pre>"},{"location":"console-hello-world-example/","title":"Console Hello World Example","text":"<p>Example's page</p> <p>This page describes an example listed in desktop category.</p> <p>Basic CLI Hello World application.</p>"},{"location":"console-hello-world-example/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"console-hello-world-example/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>cmake_minimum_required(VERSION 3.16)\nproject(project_template)\n\n# Use AUI.Boot\nfile(\n    DOWNLOAD \n    https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake \n    ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n\n# link AUI\nauib_import(\n    AUI https://github.com/aui-framework/aui \n    COMPONENTS core)\n\n\n# Create the executable. This function automatically links all sources from the src/ folder, creates CMake target and\n# places the resulting executable to bin/ folder.\naui_executable(project_template)\n\n# Link required libs\ntarget_link_libraries(project_template PRIVATE aui::core)\n</code></pre>"},{"location":"console-hello-world-example/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Logging/ALogger.h&gt;\n\nstatic constexpr auto LOG_TAG = \"MyApp\";\n\nAUI_ENTRY {\n    ALogger::info(LOG_TAG) &lt;&lt; \"Hello world!\";\n    return 0;\n}\n</code></pre>"},{"location":"contributing/","title":"Contributing to AUI","text":"<p>AUI is maintained by 1 developer so community help and contributions are heavily appreciated. Here's some helpful information.</p>"},{"location":"contributing/#becoming-a-contributor","title":"Becoming a contributor","text":"<ol> <li>Follow AUI's code style.</li> <li>Anyone may become an AUI contributor: there are no restrictions.</li> <li>Tasks and todos are listed on the GitHub Issues page. Issues marked    as <code>good first issue</code> are relatively simple and can be done without deep dive into AUI.</li> <li>AUI follows git flow-like branching model. <code>master</code> branch is a release candidate branch. <code>develop</code> branch is current    develop branch. Each feature of the framework is created in a separate branch from <code>develop</code> in the <code>feat/</code> folder.    pulling changes from your branch to <code>develop</code> is possible only if the merge with your branch does not generate merge    conflicts and does not break the build and tests.</li> </ol> <p>That is, if you want to implement a feature, you should fork AUI's repository (if you don't have direct access to    it's repository), checkout the <code>develop</code> branch and create a new branch called <code>feat/feature-name</code>, where you work    under your feature.</p> <p>When you have finished your work, you should open a pull request from the <code>feat/feature-name</code> branch of your    repository to the <code>develop</code> branch of the AUI's original repository. 5. Contributing to AUI, you agree that your code will be released under    AUI's license.</p>"},{"location":"contributing/#workflow","title":"Workflow","text":"<p><code>master</code> branch contains code of the release candidate. Code of this branch must compile without errors and should pass all tests on all supported platforms. Each feature of the framework is created in a separate branch in the <code>feat/</code> folder. Pulling changes from your branch to <code>master</code> is possible only if the merge with your branch does not generate merge conflicts and does not break the build and tests.</p> <p>Merges from <code>feat/</code> branch are allowed only to <code>develop</code> branch. <code>develop</code> is the branch were our actual development work happens. When we consider <code>develop</code> branch stable enough, we merge <code>develop</code> and <code>master</code> and create a release.</p> <p>If you are an external developer (i.e., have no write access to AUI's repository), you will need to create a fork of AUI and commit to it. Whilst you can commit to <code>master</code> and <code>develop</code> branches of your own repository, we still recommend to follow feature branch workflow. After you finished your work in your feature branch, open pull request from your feature branch to AUI's <code>develop</code> branch.</p>"},{"location":"contributing/#ai","title":"AI","text":"<p>We'd happily accept your AI-assisted work, as soon as you take complete responsibility thereof, and you have complete understanding of the changes you propose. Make sure your AI-assisted work does not violate someone's copyright. Please manually review and adjust AI-generated code/documentation. We won't merge changes if they contain obvious AI traces:</p> <ul> <li>hallucinations</li> <li>AI assistant-specific unnecessary statements: \"I'm happy to help\", \"Please let me know if you have questions\", etc</li> <li>overexplanation, repetitive points, fluff writing</li> <li>excessive usage of bullet points: nobody writes a page filled with bullet points entirely but AI</li> </ul> <p>Please treat AI as a tool, not as a complete replacement of a software engineer.</p>"},{"location":"contributing/#understanding-story-point-values","title":"Understanding Story Point Values","text":"<p>Story points are designed as relative measurements of work complexity, deliberately decoupled from time-based metrics ( hours/days/weeks). They provide a general indication of effort required for task completion. It's important to note that story point comparisons across different teams, departments, or organizations are inherently invalid.</p> <p></p> <p>For example, Team A's 100-point sprint delivery might represent more actual work than Team B's 200 points, as each team develops their own story point scale. While this guide isn't meant to standardize story points globally, it offers internal guidelines for consistent estimation.</p> <p>Note: All stories include standard overhead for PR reviews, test verification, and deployment processes. This overhead should be factored into estimates and can sometimes exceed the time needed for the primary task.</p> <p>This section explains how story points are assigned to tasks in the AUI framework project and their relationship to developer compensation.</p>"},{"location":"contributing/#financial-compensation","title":"Financial compensation","text":"<p>The number of story points assigned to a GitHub issue in the AUI repository directly determines the financial compensation paid to the external developer who successfully resolves that issue.</p> <p>For information about getting in touch regarding compensation, please refer to the contact details provided in our README. Pick a task which you want to resolve before contacting.</p>"},{"location":"contributing/#1-point-minimal-complexity","title":"1 Point - Minimal Complexity","text":"<p>These represent the simplest possible changes. They involve single-line or minimal code modifications, such as text corrections or content updates. Tasks typically involve simple configuration value modifications with no logic alterations or risk of breakage. There are no external dependencies, and all necessary information is self-contained within the ticket. The changes are covered by existing tests or basic smoke testing, with no test updates required.</p>"},{"location":"contributing/#2-points-low-complexity","title":"2 Points - Low Complexity","text":"<p>These tasks represent approximately double the effort of a 1-point story. They may include minor third-party dependency updates with API adjustments and basic method refactoring without output changes. New test creation might be necessary. External dependencies are straightforward, such as Docker image whitelisting, and follow clear documentation or known processes.</p>"},{"location":"contributing/#3-points-moderate-complexity","title":"3 Points - Moderate Complexity","text":"<p>This is the first level where significant uncertainty enters the picture. These tasks require a notable but manageable time investment and may involve multiple external dependencies. They often include major version updates of libraries with breaking changes. Some cross-team communication is required, though clarifications can typically be resolved through a single call or chat. This represents the upper range of typical story size.</p>"},{"location":"contributing/#5-points-high-complexity","title":"5 Points - High Complexity","text":"<p>These stories are an extended version of 3-point complexity, involving a substantial workload with multiple unknowns to resolve. They often include significant breaking changes across components and require extensive test modifications. Multiple cross-team meetings are likely necessary, and broader stakeholder involvement is common.</p>"},{"location":"contributing/#8-points-very-high-complexity","title":"8 Points - Very High Complexity","text":"<p>This represents the maximum reasonable scope for a single sprint. These stories involve major system changes or refactoring, new integrations, or complete rewrites. They come with significant unknowns at the start and should be considered for splitting into smaller stories. Examples include framework migrations or major library updates. Requirements often have high uncertainty.</p>"},{"location":"contributing/#13-points-excessive-complexity","title":"13+ Points - Excessive Complexity","text":"<p>Stories of this size exceed single sprint capacity and typically require multiple sprints to complete. They contain too many unknowns and variables, carrying a high risk of underestimation. Such stories should be split into smaller components or converted to epics. Examples include full API integrations or complete rebranding projects. These large-scale changes are too complex to estimate accurately and manage effectively within a single sprint.</p>"},{"location":"contributing/#guides","title":"Guides","text":""},{"location":"contributing/#creating-an-aui-module","title":"Creating an AUI module","text":"<p>Suppose whe want to create a module called <code>aui::my_module</code>:</p> <ol> <li>In the main <code>CMakeLists.txt</code>:<ol> <li>Find the <code># define all components</code> anchor, put <code>define_aui_component(my_module)</code>.</li> <li>Find the <code># all components for exporting</code> anchor, put <code>my_module</code> to <code>AUI_ALL_COMPONENTS</code>.</li> </ol> </li> <li>If <code>aui::my_module</code> has external dependencies, handle them at <code># add dependencies</code> in    <code>cmake/aui-config.cmake.in</code>.</li> <li>Put the reference to the module in <code>docs/index.md</code>.</li> <li>Create <code>aui.my_module</code> dir.</li> <li>Copy &amp; paste <code>CMakeLists.txt</code> from any small module (i.e. <code>aui::xml</code>) and configure it for your module.</li> <li>Use <code>API_AUI_&lt;your module&gt;</code> to export symbols from your module (it's created by the <code>aui_module</code> CMake function).</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Recommended: easy way to contribute</p> <p>Want to fix a typo or make a small documentation improvement? You can do it directly through GitHub:</p> <ol> <li>Navigate to top right corner of the page you would like to contribute to and click \"Edit this page\".    </li> <li>On GitHub's edit page, you'll be prompted to fork the AUI repository if needed</li> <li>Make your changes in the editor.</li> <li>Commit your changes and create a pull request to https://github.com/aui-framework/aui</li> <li>Once our documentation pipelines verify the changes, we'll merge your contribution.</li> </ol> <p>This process is perfect for minor documentation updates and doesn't require setting up a local development environment.</p> <p>The docs found on aui-framework.github.io is generated with MkDocs.</p> <p>To generate documentation, run the following command from the root of AUI repository:</p> <p>Note</p> <p>These commands are not tested on Windows.</p> <pre><code>git clone https://github.com/aui-framework/aui\ncd aui\ngit checkout develop # we do development on develop branch only\n\n# if you want to use venv\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# only for the first time\npython3 -m pip install -r docs/python/requirements.txt \n\n# generate docs\nmkdocs serve --use-directory-urls\n</code></pre> <p>After the command is complete, you can visit docs at http://127.0.0.1:8000/.</p> <p>In our pipelines, we use <code>--strict</code> flag to treat warnings as errors. If warnings were produced during generation, the CI/CD pipeline wouldn't pass.</p> <pre><code>mkdocs build --strict --use-directory-urls\n</code></pre> <p>Most functionality is provided by Material for MkDocs theme. In addition to <code>md</code> files found in <code>docs/</code> dir, we have several python scripts to populate documentation:</p> <ul> <li><code>docs/python/hooks.py</code> - handles XML comments.</li> <li><code>docs/python/doxygen.py</code> - handles Doxygen-style documentation found in our C++ code. Doxygen, as the tool, does not    participate in our documentation generation. We still use Doxygen style to maintain compatibility with documentation    readers in IDEs.</li> <li><code>docs/python/examples_page.py</code> - generates pages related to examples.</li> </ul>"},{"location":"core/","title":"aui::core","text":"<p>Main central library.</p>"},{"location":"core/#detailed-description","title":"Detailed Description","text":"<p><code>aui::core</code> is the main module of AUI. All other modules are built on top of <code>aui::core</code>. It implements several basic features:</p> <ul> <li>interruptable threads</li> <li>i18n</li> <li>logging</li> <li>data models</li> <li>trait classes</li> <li>urls</li> </ul>"},{"location":"core/#related-pages","title":"Related Pages","text":"<ul> <li> <p>AComPtr</p> <p>Takes care of AddRef and Release() reference counting mechanism of COM objects.</p> </li> <li> <p>aui::win32::BitmapMode</p> <p>HBITMAP to AImage.</p> </li> <li> <p>AComBase</p> <p>Helper class implementing COM AddRef Release, and QueryInterface.</p> </li> <li> <p>AGlibPtr</p> <p>Takes care of g_object_ref and g_object_unref() reference counting mechanism of Glib objects.</p> </li> <li> <p>AObject</p> <p>A base object class.</p> </li> <li> <p>ATimer</p> <p>Async timer.</p> </li> <li> <p>AString</p> <p>Represents a UTF-8 string.</p> </li> <li> <p>AByteBufferView</p> <p>Acts like std::string_view but for AByteBuffer.</p> </li> <li> <p>AStringView</p> <p>Represents a UTF-8 string view.</p> </li> <li> <p>AStaticVector</p> <p>Vector-like container up to maxSize elements inplace.</p> </li> <li> <p>ASet</p> <p>A std::set with AUI extensions.</p> </li> <li> <p>ABaseMap</p> <p>Base class for maps with AUI extensions.</p> </li> <li> <p>AMap</p> <p>A std::map with AUI extensions.</p> </li> <li> <p>AUnorderedMap</p> <p>A std::unordered_map with AUI extensions.</p> </li> <li> <p>AByteBuffer</p> <p>std::vector-like growing array for byte storage.</p> </li> <li> <p>AStringVector</p> <p>An AVector with string-related functions.</p> </li> <li> <p>AAbstractSignal</p> <p>Base class for signal.</p> </li> <li> <p>AVector</p> <p>An std::vector with AUI extensions.</p> </li> <li> <p>ADeque</p> <p>A std::deque with AUI extensions.</p> </li> <li> <p>ABoxFields</p> <p>Represents a rectangle fields. Useful for margin and padding around AViews.</p> </li> <li> <p>AChar</p> <p>Represents a single 32-bit char.</p> </li> <li> <p>IStringable</p> <p>Object that can be converted to string.</p> </li> <li> <p>AQueue</p> <p>A std::queue with AUI extensions.</p> </li> <li> <p>AUuid</p> <p>Implements universally unique identifier (UUID)</p> </li> <li> <p>ASmallVector</p> <p>Vector-like container consisting of few elements on stack and switches to dynamic allocation vector if needed.</p> </li> <li> <p>AException</p> <p>Abstract AUI exception.</p> </li> <li> <p>AColor</p> <p>Represents a 4-component floating point color (RGBA).</p> </li> <li> <p>AColorHSV</p> <p>Represents a 3-component floating point color (HSV).</p> </li> <li> <p>AFatalException</p> <p>An exception that thrown when non-c++ unhandled error occurs (i.e. access violation).</p> </li> <li> <p>AProcessException</p> <p>Flag enum for AChildProcess::run</p> </li> <li> <p>AProcess</p> <p>Retrieves information about processes.</p> </li> <li> <p>AStacktrace</p> <p>Stacktrace consisting of a collection of stack function frames.</p> </li> <li> <p>AUI_ENUM_FLAG</p> <p>Make a bitfield-style enum class.</p> </li> <li> <p>APipe</p> <p>A thread safe buffer that converts an IInputStream to IOutputStream (and otherwise).</p> </li> <li> <p>ADynamicPipe</p> <p>An asynchronous buffer that converts an IInputStream to IOutputStream (and otherwise).</p> </li> <li> <p>ALineSegment</p> <p>2D line segment.</p> </li> <li> <p>ARect</p> <p>Axis aligned 2D rectangle.</p> </li> <li> <p>AComplexFutureOperation</p> <p>Helper class to construct AFuture values.</p> </li> <li> <p>AFutureSet</p> <p>Manages multiple futures.</p> </li> <li> <p>AConditionVariable</p> <p>Represents a condition variable.</p> </li> <li> <p>AFuture</p> <p>Represents a value that will be available at some point in the future.</p> </li> <li> <p>AEventLoop</p> <p>Default event loop implementation.</p> </li> <li> <p>AMutex</p> <p>Basic syscall-based synchronization primitive.</p> </li> <li> <p>ARecursiveMutex</p> <p>Like AMutex but can handle multiple locks for one thread (recursive).</p> </li> <li> <p>ASharedMutex</p> <p>Like AMutex but has shared lock type (in addition to basic lock which is unique locking) implementing RW synchronization.</p> </li> <li> <p>AAsyncHolder</p> <p>Holds a set of futures keeping them valid.</p> </li> <li> <p>AAbstractThread</p> <p>Represents an abstract thread which might be not created with AThread.</p> </li> <li> <p>AThread</p> <p>Represents a user-defined thread.</p> </li> <li> <p>ACutoffSignal</p> <p>One-shot event communication.</p> </li> <li> <p>AMutexWrapper</p> <p>Wraps the object with a Lockable, providing exclusive access layer, i.e., for thread-safety.</p> </li> <li> <p>APerformanceFrame</p> <p>Defines beginning and ending of window frame by RAII.</p> </li> <li> <p>APerformanceSection</p> <p>Defines performance profiling named (and colored) span within RAII range.</p> </li> <li> <p>AUrl</p> <p>Uniform Resource Locator implementation.</p> </li> <li> <p>AI18n</p> <p>Provides i18n (internationalization) support.</p> </li> <li> <p>ALanguageCode</p> <p>Represents a language code in ISO 639-1, for example, en-US or ru-RU</p> </li> <li> <p>ALogger</p> <p>A logger class.</p> </li> <li> <p>aui::any_view</p> <p>RTTI-wrapped range.</p> </li> <li> <p>AScheduler</p> <p>Basic scheduler used for timers.</p> </li> <li> <p>AFieldObservable</p> <p>Stores a value and observes it's changes, notifying observers.</p> </li> <li> <p>AFieldSignalEmitter</p> <p>Stores a value and observes it's changes, emitting a signal.</p> </li> <li> <p>AImplementationManager</p> <p>Helps with picking implementation specified in template arguments which does not throw an exception in tryAllUntilSuccess.</p> </li> <li> <p>ACleanup</p> <p>Cleanup helper.</p> </li> <li> <p>AEvaluationLoopException</p> <p>Indicates an evaluation loop.</p> </li> <li> <p>AStringLiteral</p> <p>Compile-time string literal.</p> </li> <li> <p>AFunctionQueue</p> <p>Thread-safe implementation of function queue.</p> </li> <li> <p>ASharedRaiiHelper</p> <p>Shared completion marker for multithreaded callback-based future handling.</p> </li> <li> <p>ACommandLineArgs</p> <p>Simple command line arguments parser.</p> </li> <li> <p>AMessageQueue</p> <p>Universal thread-safe message (callback) queue implementation.</p> </li> <li> <p>AWatchdog</p> <p>Watchdog helper class.</p> </li> </ul>"},{"location":"crosscompiling-with-toolchain/","title":"Replacing AUI mobile project","text":"<p>Note</p> <p>This page describes an advanced scenario of integrating AUI. For basic usage, see Crosscompiling (Android and iOS)</p> <p>Some projects may require their custom mobile project (Android Studio or Xcode), for example to specific mobile features (such as Google Play Games integration, Face ID, etc). In this case, you would have to create your own project and link AUI as a library.</p> <p>You will need a toolchain file which describes your target platform.</p> <p>In Android, a Gradle-driven project provides the toolchain for you. You don't even need to specify CMAKE_TOOLCHAIN_FILE, Gradle does it for you.</p> <p>In iOS, there's no \"official\" toolchain so there are community-provided toolchains (like the one used in AUI).</p> <p>AUI.Boot forwards <code>CMAKE_TOOLCHAIN_FILE</code> across all the dependencies.</p>"},{"location":"crosscompiling-with-toolchain/#android","title":"Android","text":"<ol> <li>Create new Android Studio project with native C++ support.</li> <li>In your <code>app/src/cpp/CMakeLists.txt</code>, <code>add_subdirectory</code> your C++ application or directly <code>auib_import</code> the AUI    framework (unrecommended because you will experience difficulties when compiling for other platforms).</li> <li>Copy &amp; paste AUI's native Java code for Android    to your project. You may also want to adjust your <code>app.gradle</code> and <code>AndroidManifest.xml</code>.</li> <li>To draw AUI, you should use <code>GLSurfaceView</code> and pass rendering routines    to AUI. Also, take care of handling user input. Also, you can inflate AuiView    to your own Android layout.</li> </ol>"},{"location":"crosscompiling-with-toolchain/#ios","title":"iOS","text":"<ol> <li>Create new Xcode project.</li> <li>Since Xcode does not support CMake, you will have to compile AUI (and your C++ AUI application) by yourself (by    creating Xcode rules or manually dropping compiled binaries to Xcode project).</li> <li>Take a look on how does AUI handles its routines on iOS and implement them by yourself in your project.</li> </ol>"},{"location":"crosscompiling/","title":"Crosscompiling (Android and iOS)","text":"<p>AUI provides the unified way to cross-compile your application with AUI_BUILD_FOR CMake configure variable. When specified, CMake does the whole configure routine as if the project is compiled for the host system but it generates extra project directory for the target platform's development environment once the <code>apps</code> target is invoked.</p> <p>To build target platform's final application package, run build the <code>apps</code> target.</p>"},{"location":"crosscompiling/#workflow","title":"Workflow","text":"<p>Android: <pre><code>mkdir build # or whatever name\ncd build\ncmake -DAUI_BUILD_FOR=android ..\ncmake --build . -t apps\n</code></pre></p> <p>iOS: <pre><code>mkdir build # or whatever name\ncd build\ncmake -DAUI_BUILD_FOR=ios ..\ncmake --build . -t apps\n</code></pre></p> <p>These commands produce an Android Studio/Xcode project in <code>build/app_project</code> directory and build it. You can now open it in Android Studio/Xcode to upload the application to your device and debug. Both support C++, so you can continue development of your app there.</p>"},{"location":"crosscompiling/#supported-platforms","title":"Supported platforms","text":"<code>AUI_BUILD_FOR</code> value Host platform Target platform Project environment Project dir <code>android</code> Windows Linux macOS Android Gradle (can be opened with Android Studio) <code>${CMAKE_BINARY_DIR}/app_project</code> <code>ios</code> macOS iOS Xcode <code>${CMAKE_BINARY_DIR}/app_project</code>"},{"location":"crosscompiling/#limitations","title":"Limitations","text":"<ol> <li>Variables defined in the configure step (including the ones specified with command line by <code>-DVAR=VALUE</code> syntax) are    not forwarded to the child CMake configure process. To bypass the limitation, use <code>auib_mark_var_forwardable(VAR)</code>     function, where <code>VAR</code> is your variable name.</li> <li>As like CMake's generated projects, the projects generated by AUI are not portable too.</li> </ol>"},{"location":"declarative_contract_in/","title":"declarative::contract::In","text":"<p>Denotes a potentially reactive value in declarative contracts.</p> Header:<code>#include &lt;AUI/Util/Declarative/Contracts.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"declarative_contract_in/#detailed-description","title":"Detailed Description","text":"<p>A helper class that allows you to declare a value that can be either a constant or a reactive expression.</p>"},{"location":"declarative_groupbox/","title":"declarative::GroupBox","text":"Header:<code>#include &lt;AUI/View/AGroupBox.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"declarative_spacerexpanding/","title":"declarative::SpacerExpanding","text":"Header:<code>#include &lt;AUI/View/ASpacerExpanding.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"declarative_spacerexpanding/#examples","title":"Examples","text":"examples/app/fractal/src/FractalWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    setContents(Horizontal {\n      Stacked::Expanding {\n        fractal,\n        Vertical::Expanding {\n          SpacerExpanding {},\n          Horizontal {\n            SpacerExpanding {},\n            centerPosDisplay,\n          },\n        },\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(8_dp), LayoutSpacing { 4_dp } },\n          }),\n          Centered {\n            Horizontal::Expanding {\n              SpacerExpanding(),\n              Button { Label { mEditorMode ? \"Discard\" : \"Delete\" }, {me::drop} },\n              Button { Label { mEditorMode ? \"Done\" : \"Edit\" }, {me::toggleEdit} },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(4_dp), LayoutSpacing { 4_dp } },\n          },\n        });\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>        { \"Im=\"_as, im },\n        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n</code></pre></p>"},{"location":"declarative_spacerfixed/","title":"declarative::SpacerFixed","text":"Header:<code>#include &lt;AUI/View/ASpacerFixed.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"declarative_style/","title":"declarative::Style","text":"<p>Extra styles wrapper.</p> Header:<code>#include &lt;AUI/Util/Declarative/Containers.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"declarative_style/#detailed-description","title":"Detailed Description","text":"<pre><code>Label { \"Default label\" },\nStyle{\n    {\n        c(\".btn\"),\n        BackgroundSolid { 0xff0000_rgb },\n    },\n} ({\n    Label { \"Red label\" },\n    Label { \"Another red label\" },\n}),\n</code></pre>"},{"location":"devtools/","title":"Devtools","text":"<p>Devtools is a UI set of tools integrated in <code>aui.views</code> and thus in every AUI application. The devtools window can be invoked by hitting <code>CTRL+F12</code> on AUI-based application (debug only).</p> <p></p>"},{"location":"devtools/#layout-tab","title":"Layout tab","text":"<p>The most notable functionality of devtools is the <code>Layout</code> tab. Here you can discover your view hierarchy and check which ASS rules were applied to your view.</p> <p>You can hold <code>CTRL</code> and hover over your application to peek views:</p> <p></p>"},{"location":"emit/","title":"emit","text":"<p>emits the specified signal in context of <code>this</code> object.</p> Header:<code>#include &lt;AUI/Common/AObject.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"emit/#definition","title":"Definition","text":"<pre><code>#define emit (*this) ^\n</code></pre>"},{"location":"emit/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>                }\n            }\n            std::swap(mStorage, mNextPopulation);\n\n            emit frameComplete;\n        };\n    }\n\n    [[nodiscard]] glm::ivec2 size() const noexcept { return mSize; }\n</code></pre></p> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>    if (bool(c &amp; FieldCell::HAS_BOMB)) {\n        if (doGameLoseIfBomb) {\n            c |= FieldCell::RED_BG;\n            mReveal = true;\n            emit customCssPropertyChanged();\n            redraw();\n            AMessageBox::show(this, \"You lost!\", \"You lost! Ahahahhaa!\");\n        }\n        return;\n    }\n</code></pre></p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>void FractalView::handleMatrixUpdated() {\n    mShader.use();\n    mShader.set(UNIFORM_TR, mTransform);\n    emit centerPosChanged(getPlotPosition(), getPlotScale());\n}\n\nvoid FractalView::onKeyDown(AInput::Key key) {\n    AView::onKeyDown(key);\n    onKeyRepeat(key);\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>void ContactDetailsView::drop() {\n    if (!mEditorMode) {\n        // delete\n        emit deleteAction;\n        return;\n    }\n\n    // discard\n    if (AMessageBox::show(dynamic_cast&lt;AWindow*&gt;(AWindow::current()), \"Do you really want to discard?\", \"This action is irreversible!\", AMessageBox::Icon::NONE, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n</code></pre></p> examples/ui/views/src/DemoListModel.cpp <p>Views Example - All-in-one views building example. <pre><code>}\n\nvoid DemoListModel::addItem() {\n    mListSize += 1;\n    emit dataInserted(range({mListSize - 1}));\n}\n\nvoid DemoListModel::removeItem() {\n    if (mListSize &gt; 0) {\n        mListSize -= 1;\n</code></pre></p>"},{"location":"emit/#examples_1","title":"Examples","text":"examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n    if (mCell != mCellValueCopy) {\n</code></pre></p>"},{"location":"emscripten/","title":"Emscripten (WebAssembly)","text":"<p>@page emscripten Emscripten (WebAssembly) @details @auisourcemarker Emscripten is a compiler that converts C and C++ code into WebAssembly, allowing it to run efficiently in web browsers. It emulates a POSIX operating system and supports the C standard library. Now Emscripten can also be used for non-web applications due to new technologies like WebAssembly System Interface (WASI) and runtimes.</p> <p>Early Access Feature</p> <p>At the moment, support of WebAssembly in AUI Framework is in early stage and lacks a lot of features.</p>"},{"location":"examples/","title":"Examples","text":"<p>This document lists a collection of code samples and tutorials designed to help both newcomers and experienced developers with AUI Framework app development. These projects cover diversity of topics, from fundamental views usage through to complete application assembly.</p>"},{"location":"examples/#building-the-examples","title":"Building the Examples","text":"<p>To build these examples, simply clone AUI repository and configure CMake with <code>-DAUI_BUILD_EXAMPLES=TRUE</code>:</p> <pre><code>git clone https://github.com/aui-framework/aui\ncd aui\nmkdir build\ncd build\ncmake .. -DAUI_BUILD_EXAMPLES=TRUE -GNinja\ncmake --build . --parallel\ncd bin\n\n# launch any program\n./aui.example.views\n</code></pre> <p>Some of these examples are located outside AUI's build tree; such examples should be compiled as regular CMake projects.</p>"},{"location":"examples/#app","title":"App","text":"<p>These examples typically go beyond single-file projects and delve into more substantial applications that showcase how multiple techniques can be integrated to create nearly production-ready applications. Each example not only demonstrates specific features of the AUI Framework but also covers practical aspects such as dependency management, data binding and user interface customization.</p> Name Description Game of Life  Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. App Template \u26a1  GitHub-hosted app project with CI/CD building, testing, releasing, auto updating, code quality checking and more. AUI Telegram Client (AUIgram)  Using AUI Framework from perspective of a Telegram client. This project shows how to solve typical problems of a UI application (i.e., dependency management, data binding, styling, asynchronous data loading, packaging, deploying). Minesweeper Game  Minesweeper game implementation driven by ass. Fractal Example  Fractal viewer application demonstrating usage of custom shaders. Notes App  Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading."},{"location":"examples/#ui","title":"UI","text":"<p>Various UI building samples.</p> Name Description AUI Contacts  Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. Backdrop Backdrop effects demo. Minimal UI Template with Assets  Minimal UI boilerplate template with AUI Assets. Views Example  All-in-one views building example. Minimal UI Template XMake  Minimal UI boilerplate template XMake. Minimal UI Template  Minimal UI boilerplate template. Infinite Lazy List  Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list."},{"location":"examples/#desktop","title":"Desktop","text":"<p>Desktop-specific examples.</p> Name Description Prometheus Exporter Template  Example of using aui.boot to pull Prometheus library. Console Hello World Example  Basic CLI Hello World application."},{"location":"examples/#7guis","title":"7GUIs","text":"<p>7GUIs is a GUI toolkit benchmark that defines seven tasks representing typical challenges in GUI programming. In addition, 7GUIs provide a recommended set of evaluation dimensions. As such, implementations of these tasks can be compared side by side. AUI project provides its own implementations.</p> Name Description 7GUIs CRUD  Create/Read/Update/Delete example. 7GUIs Counter  Simple counter. 7GUIs Flight Booker  Flight Booker. 7GUIs Timer  Timer example. 7GUIs Circle Drawer  Undo, redo, dialog control. 7GUIs Cells  Spreadsheet processor (Excel). 7GUIs Temperature Converter  Fahrenheit to Celsius and vice versa."},{"location":"fontrendering/","title":"FontRendering","text":"<p>Controls how fonts are rendered in the view.</p> Header:<code>#include &lt;AUI/Render/FontRendering.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"fontrendering/#detailed-description","title":"Detailed Description","text":"<p>When choosing a font rendering mode, consider:</p> <ul> <li>The display type (LCD, OLED, etc.)</li> <li>Performance requirements</li> <li>Text size</li> <li>Visual quality requirements</li> </ul> <p>Note that subpixel rendering might not be suitable for all display types (particularly non-LCD displays found on phones) and might produce color fringing artifacts in some cases.</p>"},{"location":"fontrendering/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"forking-aui/","title":"Forking AUI","text":"<p>It's a common scenario when you want to fork AUI's repository. Reasons might include:</p> <ol> <li>Zero trust policy. Of course, we value our reputation, but it's completely okay you might want to mitigate    security risks by obtaining full control of the code that appears in your project.</li> <li>AUI development. You want to improve AUI or make your own version of AUI in your project.</li> </ol> <p>This page describes how to do so.</p> <p>You can fork AUI to whatever source hosting provider you want, but in general, it's recommended to fork AUI on GitHub:</p> <ol> <li>AUI's original infrastructure setup is on GitHub already. You'll benefit from complete build, docs gen and testing    pipelines without asking your devops to support them on your behalf.</li> </ol> <p>Additionally, you won't lose Prebuilt packages \"AUI.Boot's precompiled binaries\" feature by publishing your fork    on GitHub and enabling GitHub Actions (AUI's license does not obligate you to publish byproducts, e.g., compiled    binaries or documentation). 2. As soon as you publish your project with modified version of AUI, you'll need to publish changes to AUI anyway    (a requirement of MPL2).</p>"},{"location":"forking-aui/#steps","title":"Steps","text":"<ol> <li>Mirror/clone/fork AUI's repo from https://github.com/aui-framework/aui.</li> <li>If you follow zero trust policy, you will need to fork all AUI's dependencies to your controlled zone as well.    You can search them by <code>auib_import</code> keyword. Once discovered, fork the dependencies and update URLs in your AUI repo    accordingly.</li> <li>(Optionally) update URLs in <code>.github</code> directory in your AUI repo or make adjustments that suit your particular    project needs.</li> <li>Don't forget to update URL to AUI.Boot and <code>auib_import</code> boilerplate in your project.</li> </ol> <p>Once done, you don't depend on 3rd parties anymore. It is now up to you when and how change AUI's code.</p>"},{"location":"formatetcenumerator/","title":"FormatEtcEnumerator","text":"<p>Enumation interface implementation.</p> Header:<code>#include &lt;AUI/Platform/win32/FormatEtcEnumerator.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"fractal-example/","title":"Fractal Example","text":"<p>Example's page</p> <p>This page describes an example listed in app category.</p> <p>Fractal viewer application demonstrating usage of custom shaders.</p> <p></p> <p>If you are familiar with OpenGL, you can use custom shaders with AUI. In this example, we're using such shader to display a GPU-computed Mandelbrot set.</p>"},{"location":"fractal-example/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"fractal-example/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>if (NOT (AUI_PLATFORM_WIN OR AUI_PLATFORM_LINUX OR AUI_PLATFORM_MACOS))\n    return()\nendif ()\n\naui_executable(aui.example.fractal)\naui_compile_assets(aui.example.fractal)\n\naui_link(aui.example.fractal PRIVATE aui::core aui::views)\n</code></pre>"},{"location":"fractal-example/#srcfractalviewcpp","title":"src/FractalView.cpp","text":"<pre><code>//\n// Created by alex2772 on 12/9/20.\n//\n\n#include \"FractalView.h\"\n#include \"AUI/Render/IRenderer.h\"\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n\nstatic gl::Program::Uniform UNIFORM_TR(\"tr\");\nstatic gl::Program::Uniform UNIFORM_SQ(\"sq\");\nstatic gl::Program::Uniform UNIFORM_RATIO(\"ratio\");\nstatic gl::Program::Uniform UNIFORM_ITERATIONS(\"iterations\");\n\nFractalView::FractalView() : mTransform(1.f) {\n    setExpanding();\n    mShader.load(R\"(\n#version 330 core\n\nin vec4 pos;\nin vec2 uv;\nout vec2 pass_uv;\nuniform float ratio;\nuniform mat4 SL_uniform_transform;\n\nvoid main() {\n    gl_Position = SL_uniform_transform * pos;\n    pass_uv = (uv - 0.5) * 2.0;\n    pass_uv.x *= ratio;\n}\n)\",\n    R\"(\n#version 330 core\n\nin vec2 pass_uv;\n\n#define product(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define conjugate(a) vec2(a.x,-a.y)\n#define divide(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n\nuniform float c;\nuniform int iterations;\nuniform mat4 tr;\nuniform sampler2D tex;\n\nout vec4 color;\n\nvoid main() {\n    vec2 tmp_pass_uv = (tr * vec4(pass_uv, 0.0, 1.0)).xy;\n    vec2 v = vec2(0, 0);\n    int i = 0;\n    for (; i &lt; iterations; ++i) {\n        v = product(v, v) + tmp_pass_uv;\n        vec2 tmp = v * v;\n        if ((v.x + v.y) &gt; 4) {\n            break;\n        }\n    }\n    if (i == iterations) {\n        color = vec4(0, 0, 0, 1);\n    } else {\n        float theta = float(i) / float(iterations);\n        color = texture(tex, vec2(theta, 0));\n    }\n}\n)\", { \"pos\", \"uv\" }, gl::GLSLOptions { .custom = true });\n    mShader.compile();\n    mShader.use();\n    mShader.set(UNIFORM_TR, mTransform);\n    mShader.set(UNIFORM_SQ, 1.f);\n\n    mTexture = _new&lt;gl::Texture2D&gt;();\n    mTexture-&gt;tex2D(*AImage::fromUrl(\":img/color_scheme_wikipedia.png\"));\n}\n\nvoid FractalView::render(ARenderContext context) {\n    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n    mShader.set(UNIFORM_RATIO, mAspectRatio = float(size.x) / float(size.y));\n}\n\nvoid FractalView::setIterations(unsigned it) {\n    mShader.use();\n    mShader.set(UNIFORM_ITERATIONS, int(it));\n}\n\nvoid FractalView::onScroll(const AScrollEvent&amp; event) {\n    AView::onScroll(event);\n    auto projectedPos = (glm::dvec2(event.origin) / glm::dvec2(getSize()) - glm::dvec2(0.5)) * 2.0;\n    projectedPos.x *= mAspectRatio;\n    mTransform = glm::translate(mTransform, glm::vec3 { projectedPos, 0.0 });\n    mTransform = glm::scale(mTransform, glm::vec3(1.0 - event.delta.y / 1000.0));\n    mTransform = glm::translate(mTransform, -glm::vec3 { projectedPos, 0.0 });\n\n    handleMatrixUpdated();\n\n    redraw();\n}\n\nvoid FractalView::reset() {\n    mTransform = glm::dmat4(1.0);\n    handleMatrixUpdated();\n    redraw();\n}\n\nvoid FractalView::handleMatrixUpdated() {\n    mShader.use();\n    mShader.set(UNIFORM_TR, mTransform);\n    emit centerPosChanged(getPlotPosition(), getPlotScale());\n}\n\nvoid FractalView::onKeyDown(AInput::Key key) {\n    AView::onKeyDown(key);\n    onKeyRepeat(key);\n}\n\nvoid FractalView::onKeyRepeat(AInput::Key key) {\n    AView::onKeyRepeat(key);\n    constexpr float SPEED = 0.2f;\n    switch (key) {\n        case AInput::UP:\n            mTransform = glm::translate(mTransform, { 0, -SPEED, 0 });\n            break;\n        case AInput::DOWN:\n            mTransform = glm::translate(mTransform, { 0, SPEED, 0 });\n            break;\n        case AInput::LEFT:\n            mTransform = glm::translate(mTransform, { -SPEED, 0, 0 });\n            break;\n        case AInput::RIGHT:\n            mTransform = glm::translate(mTransform, { SPEED, 0, 0 });\n            break;\n        case AInput::PAGEDOWN:\n            mTransform = glm::scale(mTransform, glm::vec3 { 0.99 });\n            break;\n        case AInput::PAGEUP:\n            mTransform = glm::scale(mTransform, glm::vec3 { 1.01 });\n            break;\n\n        default:\n            return;\n    }\n    handleMatrixUpdated();\n}\n\nglm::dvec2 FractalView::getPlotPosition() const { return glm::dvec2(mTransform[3]); }\n\ndouble FractalView::getPlotScale() const { return mTransform[0][0]; }\n\nvoid FractalView::setPlotPositionAndScale(glm::dvec2 position, double scale) {\n    mTransform = glm::dmat4(scale);\n    mTransform[3] = glm::dvec4 { position, 0, 1 };\n    handleMatrixUpdated();\n}\n</code></pre>"},{"location":"fractal-example/#srcjumptocoordswindowh","title":"src/JumpToCoordsWindow.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include \"FractalView.h\"\n\nclass JumpToCoordsWindow : public AWindow {\npublic:\n    explicit JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent);\n};\n</code></pre>"},{"location":"fractal-example/#srcfractalviewh","title":"src/FractalView.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/View/AView.h&gt;\n#include &lt;AUI/GL/Program.h&gt;\n#include &lt;AUI/GL/Texture2D.h&gt;\n\nclass FractalView : public AView {\nprivate:\n    gl::Program mShader;\n    _&lt;gl::Texture2D&gt; mTexture;\n    glm::mat4 mTransform;\n\n    float mAspectRatio;\n\n    void handleMatrixUpdated();\n\npublic:\n    FractalView();\n    void render(ARenderContext context) override;\n\n    void reset();\n\n    void setIterations(unsigned it);\n\n    void onKeyDown(AInput::Key key) override;\n\n    void onKeyRepeat(AInput::Key key) override;\n\n    void onScroll(const AScrollEvent&amp; event) override;\n\n    void setSize(glm::ivec2 size) override;\n\n    gl::Program&amp; getShader() { return mShader; }\n\n    const _&lt;gl::Texture2D&gt;&amp; getTexture() const { return mTexture; }\n\n    glm::dvec2 getPlotPosition() const;\n    double getPlotScale() const;\n\n    void setPlotPositionAndScale(glm::dvec2 position, double scale);\n\nsignals:\n\n    emits&lt;glm::dvec2, double&gt; centerPosChanged;\n};\n</code></pre>"},{"location":"fractal-example/#srcfractalwindowcpp","title":"src/FractalWindow.cpp","text":"<pre><code>//\n// Created by alex2772 on 12/9/20.\n//\n\n#include &lt;AUI/View/ANumberPicker.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/Traits/strings.h&gt;\n#include \"FractalWindow.h\"\n#include \"FractalView.h\"\n#include \"JumpToCoordsWindow.h\"\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/ASS/ASS.h&gt;\n\nusing namespace ass;\nusing namespace declarative;\n\nFractalWindow::FractalWindow() : AWindow(\"Mandelbrot set\") {\n    setLayout(std::make_unique&lt;AHorizontalLayout&gt;());\n\n    auto centerPosDisplay = _new&lt;ALabel&gt;(\"-\");\n    {\n        centerPosDisplay-&gt;setCustomStyle({\n          BackgroundSolid { 0x80000000_argb },\n          Padding { 4_dp },\n          TextColor { 0xffffff_rgb },\n          FontSize { 11_pt },\n        });\n    }\n\n    auto fractal = _new&lt;FractalView&gt;();\n    connect(fractal-&gt;centerPosChanged, this, [centerPosDisplay](const glm::dvec2&amp; newPos, double scale) {\n        centerPosDisplay-&gt;setText(\"Center position: {} {}, scale: {}\"_format(newPos.x, -newPos.y, scale));\n    });\n\n    setContents(Horizontal {\n      Stacked::Expanding {\n        fractal,\n        Vertical::Expanding {\n          SpacerExpanding {},\n          Horizontal {\n            SpacerExpanding {},\n            centerPosDisplay,\n          },\n        },\n      },\n      Vertical {\n        _new&lt;AButton&gt;(\"Identity\").connect(&amp;AButton::clicked, AUI_SLOT(fractal)::reset),\n        _new&lt;AButton&gt;(\"Jump to coords...\")\n            .connect(&amp;AButton::clicked, this, [&amp;, fractal]() { _new&lt;JumpToCoordsWindow&gt;(fractal, this)-&gt;show(); }),\n        _new&lt;ALabel&gt;(\"Iterations:\"),\n        _new&lt;ANumberPicker&gt;().connect(\n            &amp;ANumberPicker::valueChanged, this, [fractal](int v) { fractal-&gt;setIterations(v); }) AUI_LET {\n                it-&gt;setMax(1000);\n                it-&gt;setValue(350);\n            },\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    fractal-&gt;focus();\n}\n</code></pre>"},{"location":"fractal-example/#srcjumptocoordswindowcpp","title":"src/JumpToCoordsWindow.cpp","text":"<pre><code>//\n// Created by alex2772 on 12/10/20.\n//\n\n#include &lt;AUI/Layout/AVerticalLayout.h&gt;\n#include &lt;AUI/Layout/AAdvancedGridLayout.h&gt;\n#include \"JumpToCoordsWindow.h\"\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/ATextField.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/Platform/AMessageBox.h&gt;\n\nusing namespace declarative;\n\nJumpToCoordsWindow::JumpToCoordsWindow(_&lt;FractalView&gt; fractalView, AWindow* parent)\n  : AWindow(\"Jump to coords\", 854_dp, 500_dp, parent, WindowStyle::NO_RESIZE) {\n    auto re = _new&lt;ATextField&gt;();\n    auto im = _new&lt;ATextField&gt;();\n    auto scale = _new&lt;ATextField&gt;();\n\n    auto pos = fractalView-&gt;getPlotPosition();\n    re-&gt;setText(AString::number(pos.x));\n    im-&gt;setText(AString::number(pos.y));\n    scale-&gt;setText(AString::number(fractalView-&gt;getPlotScale()));\n\n    setContents(Vertical {\n      _form({\n        { \"Re=\"_as, re },\n        { \"Im=\"_as, im },\n        { \"Scale=\"_as, scale },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      Horizontal {\n        SpacerExpanding {},\n        _new&lt;AButton&gt;(\"Jump\").connect(\n            &amp;AButton::clicked, this,\n            [&amp;, fractalView, re, im, scale]() {\n                try {\n                    auto dRe = std::stod((*re-&gt;text()).toStdString());\n                    auto dIm = -std::stod((*re-&gt;text()).toStdString());\n                    auto dScale = std::stod((*re-&gt;text()).toStdString());\n                    fractalView-&gt;setPlotPositionAndScale(glm::dvec2 { dRe, dIm }, dScale);\n                    close();\n                } catch (...) {\n                    AMessageBox::show(this, \"Error\", \"Please check your values are valid numbers.\");\n                }\n            }) AUI_LET { it-&gt;setDefault(); },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    pack();\n}\n</code></pre>"},{"location":"fractal-example/#srcfractalwindowh","title":"src/FractalWindow.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass FractalWindow : public AWindow {\npublic:\n    FractalWindow();\n};\n</code></pre>"},{"location":"fractal-example/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"FractalWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;FractalWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"game-of-life/","title":"Game of Life","text":"<p>Example's page</p> <p>This page describes an example listed in app category.</p> <p>Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <p></p> <p>Conway's Game of Life, a cellular automaton devised by the mathematician John Conway. The game consists of a grid where each cell can be either alive or dead, and its state evolves over time according to simple rules based on the states of adjacent cells.</p> <p>Every cell interacts with its eight neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:</p> <ul> <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li> <li>Any live cell with two or three live neighbours lives on to the next generation.</li> <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li> <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li> </ul> <p>Wikipedia</p>"},{"location":"game-of-life/#cells","title":"Cells","text":"<p>Represents the grid of cells with their states (<code>CellState::ALIVE</code> or <code>CellState::DEAD</code>). It has methods for initialization and randomization, as well as accessors to get the size and state of individual cells.</p> <p>Computations are handled asynchronously by an AThreadPool, improving performance during state transitions or rule computations in large grids.</p> <p>@dontinclude examples/app/game_of_life/src/main.cpp @skip class Cells @until /// end</p>"},{"location":"game-of-life/#cellsview","title":"CellsView","text":"<p>Visualizes the grid using a texture. It updates the texture when cells change their states. When the pointer is pressed on the view, it toggles the state of the cell under the cursor.</p> <p>The grid is composed by lines in <code>drawGrid</code> lambda. These lines are then passed to the rendering, making a single draw call to draw the grid.</p> <p>@skip class CellsView @until /// end</p>"},{"location":"game-of-life/#gameoflifewindow","title":"GameOfLifeWindow","text":"<p>This is the main window for the Game of Life application. It sets up the UI with buttons to randomize the grid and start/pause the game, as well as a central area where the <code>CellsView</code> is displayed.</p> <p>@skip class GameOfLifeWindow @until /// end</p>"},{"location":"game-of-life/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"game-of-life/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>cmake_minimum_required(VERSION 3.16)\n\nif (NOT (AUI_PLATFORM_WIN OR AUI_PLATFORM_LINUX OR AUI_PLATFORM_MACOS))\n    return()\nendif ()\n\n# Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n# auib_import(aui https://github.com/aui-framework/aui\n#             COMPONENTS core views json)\n\naui_executable(aui.example.game_of_life)\naui_link(aui.example.game_of_life PRIVATE aui::views)\n</code></pre>"},{"location":"game-of-life/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;range/v3/all.hpp&gt;\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/View/AScrollArea.h&gt;\n#include &lt;AUI/View/ATextArea.h&gt;\n\nusing namespace declarative;\nusing namespace ass;\nusing namespace std::chrono_literals;\n\nenum class CellState : std::uint8_t {\n    DEAD,\n    ALIVE,\n};\n\nconstexpr CellState operator!(CellState s) {\n    return s == CellState::ALIVE ? CellState::DEAD : CellState::ALIVE;\n}\n\nusing CellsImage = AFormattedImage&lt;APixelFormat::RGBA_BYTE&gt;;\n\nclass Cells : public AObject {\npublic:\n    Cells(glm::ivec2 size) {\n        mSize = size;\n        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n            for (int y = 0; y &lt; mSize.y; ++y) {\n                for (int x = 0; x &lt; mSize.x; ++x) {\n                    glm::ivec2 i { x, y };\n                    get(mNextPopulation, i) = [&amp;] {\n                        auto around = cellsAround(i);\n                        switch (around) {\n                            default:\n                                return CellState::DEAD;\n                            case 2:\n                                return get(mStorage, i);\n                            case 3:\n                                return CellState::ALIVE;\n                        }\n                    }();\n                }\n            }\n            std::swap(mStorage, mNextPopulation);\n\n            emit frameComplete;\n        };\n    }\n\n    [[nodiscard]] glm::ivec2 size() const noexcept { return mSize; }\n\n    [[nodiscard]] const AVector&lt;CellState&gt;&amp; storage() const noexcept { return mStorage; }\n\n    [[nodiscard]] CellState&amp; operator[](glm::ivec2 position) { return get(mStorage, position); }\n\n    void randomize() {\n        ranges::generate(mStorage, [&amp;] {\n            static std::default_random_engine re;\n            static std::uniform_int_distribution d(0, 10);\n            return d(re) &gt; 7 ? CellState::ALIVE : CellState::DEAD;\n        });\n        emit frameComplete;\n    }\n\n    AProperty&lt;bool&gt; isRunning = false;\n    emits&lt;&gt; frameComplete;\n\nprivate:\n    _&lt;ATimer&gt; mTimer = _new&lt;ATimer&gt;(100ms);\n    AFuture&lt;&gt; mFrame;\n    glm::ivec2 mSize {};\n    AVector&lt;CellState&gt; mStorage;\n    AVector&lt;CellState&gt; mNextPopulation;\n\n    CellState&amp; get(AVector&lt;CellState&gt;&amp; storage, glm::ivec2 position) {\n        position %= mSize;\n        if (position.x &lt; 0) {\n            position.x = mSize.x + position.x;\n        }\n        if (position.y &lt; 0) {\n            position.y = mSize.y + position.y;\n        }\n        return storage[position.y * mSize.x + position.x];\n    }\n\n    unsigned cellsAround(glm::ivec2 position) {\n        unsigned accumulator = 0;\n        for (int y = -1; y &lt;= 1; ++y) {\n            for (int x = -1; x &lt;= 1; ++x) {\n                if (x == 0 &amp;&amp; y == 0) {\n                    continue;\n                }\n                accumulator += get(mStorage, position + glm::ivec2 { x, y }) == CellState::ALIVE ? 1 : 0;\n            }\n        }\n        return accumulator;\n    }\n}; /// end\n\nclass CellsView : public AView {\npublic:\n    static constexpr auto SCALE = 8_dp;\n\n    CellsView(_&lt;Cells&gt; cells) : mCells(std::move(cells)) { connect(mCells-&gt;frameComplete, me::updateTexture); }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n        if (mTexture) {\n            ctx.render.rectangle(ATexturedBrush { mTexture }, { 0, 0 }, float(SCALE) * glm::vec2(mCells-&gt;size()));\n        }\n        auto drawGrid = [&amp;] {\n            ASmallVector&lt;std::pair&lt;glm::vec2, glm::vec2&gt;, 128 * 2&gt; points;\n            for (int i = 1; i &lt; mCells-&gt;size().x; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(i * SCALE, 0.f), glm::vec2(i * SCALE, getSize().y));\n            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n        AView::onPointerPressed(event);\n        glm::ivec2 position = glm::ivec2(event.position / float(SCALE));\n        (*mCells)[position] = !(*mCells)[position];\n        updateTexture();\n    }\n\n    int getContentMinimumWidth() override { return mCells-&gt;size().x * SCALE; }\n\n    int getContentMinimumHeight() override { return mCells-&gt;size().y * SCALE; }\n\nprivate:\n    _&lt;Cells&gt; mCells;\n    _&lt;ITexture&gt; mTexture;\n\n    void updateTexture() {\n        if (!mTexture) {\n            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n                image.set(\n                    { x, y },\n                    AFormattedColorConverter(\n                        (*mCells)[glm::ivec2(x, y)] == CellState::ALIVE\n                            ? AColor::WHITE\n                            : AColor::TRANSPARENT_BLACK));\n            }\n        }\n        mTexture-&gt;setImage(image);\n        redraw();\n    }\n}; /// end\n\nclass GameOfLifeWindow : public AWindow {\npublic:\n    GameOfLifeWindow() : AWindow(\"Game of Life\") {\n        setContents(Vertical {\n          Centered {\n            Horizontal {\n              _new&lt;AButton&gt;(\"Randomize\") AUI_LET {\n                      connect(it-&gt;clicked, AUI_SLOT(mCells)::randomize);\n                  },\n              _new&lt;AButton&gt;() AUI_LET {\n                      it &amp; mCells.isRunning &gt; [](AButton&amp; b, bool isRunning) {\n                          b.setText(isRunning ? \"Pause\" : \"Run\");\n                      };\n                      connect(it-&gt;clicked, [&amp;] { mCells.isRunning = !mCells.isRunning; });\n                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n          },\n          Centered {\n            _new&lt;CellsView&gt;(aui::ptr::fake_shared(&amp;mCells)) AUI_WITH_STYLE {\n                  Expanding(),\n                  BackgroundSolid(AColor::BLACK),\n                },\n          },\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n    }\n\nprivate:\n    Cells mCells { { 64, 64 } };\n}; /// end\n\nAUI_ENTRY {\n    auto w = _new&lt;GameOfLifeWindow&gt;();\n    w-&gt;pack();\n    w-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"getting-started/","title":"Getting started with AUI","text":""},{"location":"getting-started/#ide","title":"IDE","text":"CLion VS Code <ul> <li>Recommended as \"out of the box\" crossplatform solution.</li> <li>Has free version for non-commercial development.</li> <li>No additional setup required.</li> </ul> <ul> <li>Install following extensions:</li> </ul> Extension Description cpp tools pack Introduces basic C/C++ support and CMake integration. vscode-clangd C++ language server for extensive code navigation, autocomplete, etc. <ul> <li>Add these lines to your <code>settings.json</code> (F1 <code>&gt; Preferences: Open User Settings (JSON)</code>):</li> </ul> settings.json<pre><code>\"clangd.arguments\": [\n    \"--compile-commands-dir=build/\"\n],\n</code></pre>"},{"location":"getting-started/#os-prerequirements","title":"OS prerequirements","text":"Windows macOS Ubuntu Fedora <p>Install Windows updates</p> <p>You may want to ignore this, but in case of errors, please ensure you have installed Windows updates.</p> <p></p> <p>Install msvc</p> <p> CLion comes with MinGW by default. MinGW is not supported!</p> <p>You are not forced to use Visual Studio IDE, you can use whatever IDE you want. We just want the compiler part.</p> <p>Visual Studio Community edition is sufficient.</p> <p>Install msvc or clang, if you haven't already, and reboot.</p> <p>Press Win, type <code>Visual Studio Installer</code> and launch.</p> <p>Choose <code>Individual components</code> tab.</p> <p></p> <p>Search and select the following components:</p> <ol> <li><code>Windows Universal C Runtime</code></li> <li><code>MSVC v142</code> or newer</li> <li><code>Windows 10 SDK</code> or newer</li> <li><code>Windows Universal CRT SDK</code></li> </ol> <p>Click <code>Install</code>.</p> <p>Don't forget to reboot!</p> <p>Configure CLion to use MSVC instead of MinGW</p> <p>If you use  CLion:</p> <ol> <li>Ctrl+Shift+S, navigate to \"Build, Execution, Deployment\" &gt; \"Toolchains\".</li> <li>Press <code>+</code>.</li> <li>Choose Visual Studio. CLion should pick up it automatically.</li> </ol> <p></p> <ol> <li>Select Visual Studio.</li> <li>Press \"arrow up\" button to raise priority. Visual Studio compiler should be by default!</li> <li>Press OK.</li> </ol> <p></p> <p>Install Xcode.</p> <p>Install following dependencies:</p> <pre><code>sudo apt update\nsudo apt install pkg-config libglew-dev zlib1g-dev libssl-dev libcurl4-openssl-dev libgtk-3-dev libdbus-1-dev libfontconfig-dev ninja-build libpulse-dev git cmake g++\n</code></pre> <p>Install following dependencies:</p> <pre><code>sudo dnf install fontconfig-devel gtk3-devel dbus-devel libXi libglvnd-devel libstdc++-static glew-devel pulseaudio-libs-devel git cmake g++\n</code></pre>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>AUI does not provide \"traditional\" installation methods that involve manual downloading and deploying; instead, package managers are used to ensure easily reproducible builds. They compile and link all required dependencies automatically to free you from dependency management and focus you right to development of your application.</p> AUI App TemplateManual Setup <p>You can use our App Template \u26a1 to set up a new project quickly with AUI's .clang-format, Github Actions and other features out-of-the-box. The template is based on CMake and aui.boot.</p> <p>Clone <code>https://github.com/aui-framework/example_app</code> with your IDE or via terminal:</p> <pre><code>git clone https://github.com/aui-framework/example_app\n</code></pre> <p>and open that directory in your IDE.</p> Recommended: Create a new repo <p>From App Template \u26a1 repository, you can generate a completely separate repo with clean git history:</p> <ol> <li>Open http://github.com/aui-framework/example_app</li> <li>Click <code>Create a new repository</code>.</li> </ol> <p></p> <ol> <li>Clone your own repo into IDE.</li> </ol> <p>AUI provides support to several package managers, to choose at your own.</p> AUI BootCPM <p>aui.boot is *official* way of using AUI. It is a CMake-based package manager that requires nothing but CMake.</p> CMakeLists.txt<pre><code># Standard routine\ncmake_minimum_required(VERSION 3.16)\nproject(project_template)\n\n# Use AUI.Boot\nfile(\n    DOWNLOAD \n    https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake \n    ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n\n# import AUI\nauib_import(\n    aui https://github.com/aui-framework/aui \n    COMPONENTS core views\n    VERSION v8.0.0-rc.8\n    )\n\n\n# Create the executable. This function automatically links all sources from the src/ folder, creates CMake target and\n# places the resulting executable to bin/ folder.\naui_executable(project_template)\n\n# Link required libs\naui_link(project_template PRIVATE aui::core aui::views)\n</code></pre> <p>CMake's missing package manager is a small CMake script for setup-free, cross-platform, reproducible dependency management.</p> <p>Download CPM to your project directory:</p> <pre><code>mkdir -p cmake\nwget -O cmake/CPM.cmake https://github.com/cpm-cmake/CPM.cmake/releases/latest/download/get_cpm.cmake\n</code></pre> <p>Then, create a <code>CMakeLists.txt</code>:</p> CMakeLists.txt<pre><code># Standard routine\ncmake_minimum_required(VERSION 3.16)\nproject(project_template)\n\n# import AUI\ninclude(cmake/CPM.cmake)\nCPMAddPackage(\"gh:aui-framework/aui#v7.1.2\")\n\n# Create the executable. This function automatically links all sources from the src/ folder, creates CMake target and\n# places the resulting executable to bin/ folder.\naui_executable(project_template)\n\n# Link required libs\naui_link(project_template PRIVATE aui::core aui::views)\n</code></pre> <p>aui_executable hooks all CPP files from <code>src/</code> directory. You need to create <code>src/</code> directory and a CPP file in it.</p> src/main.cpp<pre><code>/*\n * AUI Framework - Declarative UI toolkit for modern C++20\n * Copyright (C) 2020-2025 Alex2772 and Contributors\n *\n * SPDX-License-Identifier: MPL-2.0\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/// [AButton_example]\n#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n\nusing namespace ass;\nusing namespace declarative;\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Button\", 600_dp, 300_dp);\n    window-&gt;setContents(Centered {\n      Button {\n        .content = Label { \"Click me\" },\n        .onClick = [] { ALogger::info(\"Test\") &lt;&lt; \"Hello world!\"; },\n      },\n    });\n    window-&gt;show();\n    return 0;\n}\n/// [AButton_example]\n</code></pre> <p>Why CMake or IDE doesn't recognize a new CPP file?</p> <p>This indicates that the IDE's build system needs to be initialized or refreshed.</p> <p>Reload CMake project to hook up a newly added CPP file:</p>  CLion VS Code Terminal <p><code>File</code> &gt; <code>Reload CMake Project</code> or right-click on <code>CMakeLists.txt</code> &gt; <code>Load/Reload CMake project</code>.</p> <ol> <li>Please make sure you have followed setup procedure listed in the beginning on this page.</li> <li>F1 <code>&gt;CMake: Configure</code>. If it asks for a toolchain, choose <code>Unspecified</code>.</li> </ol> <pre><code>cmake -S . -B build\n</code></pre>"},{"location":"getting-started/#build-and-run-your-app","title":"Build and Run Your App","text":"CLion VS Code Terminal <p><code>Run</code> -&gt; <code>Run \"project name\"</code> or green arrow in top right corner.</p> <p></p> <ol> <li>F1 <code>&gt;CMake: Configure</code>.</li> <li>Choose CMake logo in the left panel (where the extensions tab live).</li> <li>Right click on project's target &gt; <code>Set Build target</code> and <code>Set Launch/Debug target</code>.    </li> <li>F1 <code>&gt;CMake: Debug</code>.</li> </ol> <pre><code>cmake -S . -B build\ncmake --build build\n</code></pre> <p></p> <p>See layout managers for more info about layout managers.</p> <p>See ASS for more info about styling.</p> <p>See Examples for examples.</p>"},{"location":"gl_state/","title":"gl::State","text":"<p>Helper class for optimizing gl calls count</p> Header:<code>#include &lt;AUI/GL/State.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"gl_state/#examples","title":"Examples","text":"examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>    AProperty&lt;Iterator&gt; nextAction = mStack.end();\n};\n\nstruct State {\n    AProperty&lt;std::list&lt;Circle&gt;&gt; circles;\n    UndoStack history;\n};\n\nstatic constexpr auto MAX_RADIUS = 128.f;\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>using namespace declarative;\nusing namespace ass;\n\nstruct State {\n    Spreadsheet spreadsheet{glm::uvec2 { 'Z' - 'A' + 1, 100 }};\n    AProperty&lt;AString&gt; currentExpression;\n};\n\nstatic _&lt;AView&gt; labelTitle(AString s) {\n</code></pre></p>"},{"location":"gl_texture2darray/","title":"gl::Texture2DArray","text":"<p>Represents a 2D texture array.</p> Header:<code>#include &lt;AUI/GL/Texture2DArray.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"gl_texture2darray/#detailed-description","title":"Detailed Description","text":"<p>A 2D texture array is a texture that contains multiple 2D textures, each accessible by its index. It's useful for storing and accessing multiple textures with the same dimensions.</p> <p>After creating a 2D texture array, you can use <code>update</code> to update a single texture in the array. You cannot update dimensions of the texture array, so you should create a new one if you want to change the size of the texture array.</p>"},{"location":"gl_texture2darray/#public-methods","title":"Public Methods","text":"<pre><code>Texture2DArray::Texture2DArray(glm::uvec2 textureSize, unsigned textureCount)\n</code></pre> <p>Initializes the 2D texture array with empty data.</p> Arguments <code>textureSize</code>  The size of the 2D texture (width and height). <code>textureCount</code>  The number of layers in the texture array. <p>This function allocates storage for a 2D texture array with the specified size and texture count. It binds the texture and uses <code>glTexStorage3D</code> to allocate the storage.</p> <pre><code>void Texture2DArray::update(unsigned texture, AImageView image)\n</code></pre> <p>Updates a single texture of the 2D texture array.</p> Arguments <code>texture</code>  The index of the texture to be updated. <code>image</code>  The image to be used as the new texture. <p>This function binds the texture and uploads the provided image as a texture in the 2D texture array. It uses <code>glTexSubImage3D</code> to update the texture.</p> <p>This function expects the image to have the same size as the texture size initialized earlier, otherwise, an assertion error is thrown.</p>"},{"location":"gl_texture2darray/#gl::Texture2DArray::Texture2DArray","title":"constructor","text":""},{"location":"gl_texture2darray/#gl::Texture2DArray::update","title":"update","text":""},{"location":"ianimatedimagefactory/","title":"IAnimatedImageFactory","text":"<p>Produces images related to an animation</p> Header:<code>#include &lt;AUI/Image/IAnimatedImageFactory.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"ianimatedimagefactory/#public-methods","title":"Public Methods","text":"<pre><code>virtual bool IAnimatedImageFactory::hasAnimationFinished()\n</code></pre> <p>Returns true, if last provided frame was last (within one cycle of animation)</p>"},{"location":"ianimatedimagefactory/#IAnimatedImageFactory::hasAnimationFinished","title":"hasAnimationFinished","text":""},{"location":"iaudioplayer/","title":"IAudioPlayer","text":"<p>Interface for audio playback.</p> Header:<code>#include &lt;AUI/Audio/IAudioPlayer.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"iaudioplayer/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p>"},{"location":"iaudioplayer/#public-types","title":"Public Types","text":"<p><code>enum class IAudioPlayer::PlaybackStatus</code></p> <p>Playback status depends on last called function among play(), pause(), stop().</p> Constant Description <code>PlaybackStatus::PLAYING</code> <code>PlaybackStatus::PAUSED</code> <code>PlaybackStatus::STOPPED</code>"},{"location":"iaudioplayer/#IAudioPlayer::PlaybackStatus","title":"PlaybackStatus","text":""},{"location":"iaudioplayer/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;&gt; finished</code></p> <p>On playback finished.</p> <p><code>emits&lt;&gt; read</code></p> <p>On sound stream read.</p>"},{"location":"iaudioplayer/#IAudioPlayer::finished","title":"finished","text":""},{"location":"iaudioplayer/#IAudioPlayer::read","title":"read","text":""},{"location":"iaudioplayer/#public-methods","title":"Public Methods","text":"<pre><code>bool IAudioPlayer::loop()\n</code></pre> Returns Current loop flag <pre><code>void IAudioPlayer::onFinished()\n</code></pre> <p>Called By AAudioMixer when the playback is finished.</p> <p>See IAudioPlayer::finished for listening for this event.</p> <pre><code>void IAudioPlayer::pause()\n</code></pre> <p>Pauses audio playback keeping playback progress.</p> <pre><code>void IAudioPlayer::play()\n</code></pre> <p>Starts audio playback, if playback was previously paused, it will continue from where it was paused.</p> <pre><code>PlaybackStatus IAudioPlayer::playbackStatus()\n</code></pre> Returns Current playback status. <pre><code>AOptional&lt;AAudioResampler&gt;&amp; IAudioPlayer::resamplerStream()\n</code></pre> <p>Get resampled stream for playback.</p> <pre><code>void IAudioPlayer::setLoop(bool loop)\n</code></pre> <p>Set loop flag, is loop flag is true then audio playback wouldn't be stopped after it ends and sound stream would be rewind.</p> Arguments <code>loop</code>  New loop flag <pre><code>void IAudioPlayer::setVolume(aui::audio::VolumeLevel volume)\n</code></pre> <p>Set level of volume.</p> Arguments <code>volume</code>  Integer number from 0 to 256 inclusively, works linear <pre><code>void IAudioPlayer::stop()\n</code></pre> <p>Pauses audio playback without keeping playback progress.</p> <pre><code>aui::audio::VolumeLevel IAudioPlayer::volume()\n</code></pre> Returns Current volume level."},{"location":"iaudioplayer/#IAudioPlayer::loop","title":"loop","text":""},{"location":"iaudioplayer/#IAudioPlayer::onFinished","title":"onFinished","text":""},{"location":"iaudioplayer/#IAudioPlayer::pause","title":"pause","text":""},{"location":"iaudioplayer/#IAudioPlayer::play","title":"play","text":""},{"location":"iaudioplayer/#IAudioPlayer::playbackStatus","title":"playbackStatus","text":""},{"location":"iaudioplayer/#IAudioPlayer::resamplerStream","title":"resamplerStream","text":""},{"location":"iaudioplayer/#IAudioPlayer::setLoop","title":"setLoop","text":""},{"location":"iaudioplayer/#IAudioPlayer::setVolume","title":"setVolume","text":""},{"location":"iaudioplayer/#IAudioPlayer::stop","title":"stop","text":""},{"location":"iaudioplayer/#IAudioPlayer::volume","title":"volume","text":""},{"location":"ibackgroundeffect/","title":"IBackgroundEffect","text":"<p>Custom-rendered background effect.</p> Header:<code>#include &lt;AUI/Util/IBackgroundEffect.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"ide-plugins/","title":"IDE Plugins","text":"<p>AUI project offers extensions for common IDEs to improve user experience and quality-of-live during development of AUI applications.</p>"},{"location":"ide-plugins/#clion","title":"CLion","text":"<ul> <li>JetBrains marketplace</li> <li>Releases</li> <li>Source code</li> </ul>"},{"location":"idrawable/","title":"IDrawable","text":"<p>An abstract image that determines itself how it is displayed. Essentially an abstraction from vector and        raster graphics.</p> Header:<code>#include &lt;AUI/Image/IDrawable.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"idrawable/#public-types","title":"Public Types","text":"<p><code>struct IDrawable::Params</code></p> <p>Empty structure.</p>"},{"location":"idrawable/#IDrawable::Params","title":"Params","text":""},{"location":"idrawable/#public-methods","title":"Public Methods","text":"<pre><code>virtual void IDrawable::draw(IRenderer&amp; render, const IDrawable::Params&amp; params)\n</code></pre> <p>Called when the image needs to be displayed. It is assumed that the renderer is already set to the        desired state (coordinates, color, etc.)</p> <pre><code>virtual glm::ivec2 IDrawable::getSizeHint()\n</code></pre> Returns Size of the stored image. Can be ignored by the renderer. If the size is unknown, it can be {0, 0} <pre><code>virtual bool IDrawable::isDpiDependent()\n</code></pre> Returns true if the size hint of this drawable needs to be multiplied by the DPI ratio <pre><code>virtual AImage IDrawable::rasterize(glm::ivec2 imageSize)\n</code></pre> <p>Converts possibly vector drawable to a raster image.</p> Arguments <code>imageSize</code>  image size Returns rasterized image <p>TODO Unimplemented for all drawables except raster image and svg</p>"},{"location":"idrawable/#IDrawable::draw","title":"draw","text":""},{"location":"idrawable/#IDrawable::getSizeHint","title":"getSizeHint","text":""},{"location":"idrawable/#IDrawable::isDpiDependent","title":"isDpiDependent","text":""},{"location":"idrawable/#IDrawable::rasterize","title":"rasterize","text":""},{"location":"ifontview/","title":"IFontView","text":"<p>Interface of a AView that works with fonts (i.e., ALabel, ATextField, AText, etc...)</p> Header:<code>#include &lt;AUI/Font/IFontView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"iimagefactory/","title":"IImageFactory","text":"<p>Produces images by the specified size.</p> Header:<code>#include &lt;AUI/Image/IImageFactory.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"iimagefactory/#public-methods","title":"Public Methods","text":"<pre><code>virtual glm::ivec2 IImageFactory::getSizeHint()\n</code></pre>"},{"location":"iimagefactory/#IImageFactory::getSizeHint","title":"getSizeHint","text":""},{"location":"iimageloader/","title":"IImageLoader","text":"<p>Class-loader of abstract images that can be displayed on the screen.</p> Header:<code>#include &lt;AUI/Image/IImageLoader.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"iimageloader/#public-methods","title":"Public Methods","text":"<pre><code>virtual _&lt;IImageFactory&gt; IImageLoader::getImageFactory(AByteBufferView buffer)\n</code></pre> <p>The drawable (vector) image loader implementation.</p> Returns image factory. Can be <code>nullptr</code> if <code>getRasterImage</code> implemented. <p>Called if and only if <code>matches</code> returned true.</p> <pre><code>virtual _&lt;AImage&gt; IImageLoader::getRasterImage(AByteBufferView buffer)\n</code></pre> <p>The image loader implementation (raster).</p> Returns raster image. Can be <code>nullptr</code> if <code>getDrawable</code> implemented. <p>Called if and only if <code>matches</code> returned true.</p> <pre><code>virtual bool IImageLoader::matches(AByteBufferView buffer)\n</code></pre> Arguments <code>buffer</code>  buffer with the raw image file contents. Returns true, if this IImageLoader accepts image stored in this buffer"},{"location":"iimageloader/#IImageLoader::getImageFactory","title":"getImageFactory","text":""},{"location":"iimageloader/#IImageLoader::getRasterImage","title":"getRasterImage","text":""},{"location":"iimageloader/#IImageLoader::matches","title":"matches","text":""},{"location":"iinputstream/","title":"IInputStream","text":"<p>Represents an input stream.</p> Header:<code>#include &lt;AUI/IO/IInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"iinputstream/#public-methods","title":"Public Methods","text":"<pre><code>template&lt;typename T &gt;\nT IInputStream::deserialize()\n</code></pre> Returns result value <p>Reads data using AUI serialization (see AUI/Traits/serializable.h)</p> <pre><code>virtual size_t IInputStream::read(char* dst, size_t size)\n</code></pre> <p>Reads up to <code>size</code> bytes from stream. Blocking (waiting for new data) is allowed.</p> Sneaky exceptions An implementation can throw any exception that subclasses AIOException. Arguments <code>dst</code>  destination buffer <code>size</code>  destination buffer's size. &gt; 0 Returns number of read bytes (including 0) <pre><code>size_t IInputStream::read(std::span&lt;std::byte&gt; destination)\n</code></pre> <p>Reads up to <code>destination.size()</code> bytes from stream. Blocking (waiting for new data) is allowed.</p> Sneaky exceptions An implementation can throw any exception that subclasses AIOException. Arguments <code>destination</code>  destination buffer Returns number of read bytes (including 0) <pre><code>void IInputStream::readExact(char* dst, size_t size)\n</code></pre> <p>Reads exact <code>size</code> bytes from stream. Blocking (waiting for new data) is allowed.</p> Sneaky exceptions An implementation can throw any exception that subclasses AIOException. Arguments <code>dst</code>  destination buffer. <code>size</code>  destination buffer's size."},{"location":"iinputstream/#IInputStream::deserialize","title":"deserialize","text":""},{"location":"iinputstream/#IInputStream::read","title":"read","text":""},{"location":"iinputstream/#IInputStream::readExact","title":"readExact","text":""},{"location":"imagerendering/","title":"ImageRendering","text":"<p>Controls the image rendering type.</p> Header:<code>#include &lt;AUI/Enum/ImageRendering.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"imagerendering/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"infinite-lazy-list/","title":"Infinite Lazy List","text":"<p>Example's page</p> <p>This page describes an example listed in ui category.</p> <p>Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <p>This example demonstrates making an optimal infinite list. That is, when you infinitely scroll down to load new items, the older items are unloaded from memory.</p> <p>The \"loading\" action is performed on a worker thread and a delay is simulated by AThread::sleep.</p> <p>As a bonus, we've added a spinner to indicate that loading is in progress.</p> <p>In this example, we've used functional style and decomposition technique instead of making custom view classes. The idea is hide the implementation specifics of <code>myLazyList</code> that makes a basic AView in return. The overall state of produced lazy list object is controlled by list model.</p> <p><code>myLazyList</code> is limited to specific type of model by intention. AUI does not provide some kind of generalization on its own. In fact, we're demonstrating the whole concept in less than 100 lines of code. You certainly can make a generalization that suits your project's needs.</p>"},{"location":"infinite-lazy-list/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"infinite-lazy-list/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>aui_executable(aui.example.infinite_lazy_list)\n\naui_link(aui.example.infinite_lazy_list PRIVATE aui::core aui::views)\n</code></pre>"},{"location":"infinite-lazy-list/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;range/v3/all.hpp&gt;\n\n#include &lt;AUI/Platform/Entry.h&gt;\n#include \"AUI/Platform/AWindow.h\"\n#include \"AUI/Util/UIBuildingHelpers.h\"\n#include \"AUI/View/AScrollArea.h\"\n#include \"AUI/View/ASpinnerV2.h\"\n#include \"AUI/View/AForEachUI.h\"\n#include \"AUI/Model/AListModel.h\"\n#include \"AUI/Thread/AAsyncHolder.h\"\n\nusing namespace declarative;\nusing namespace ass;\nusing namespace std::chrono_literals;\n\nstruct Item {\n    AProperty&lt;AString&gt; value;\n};\n\nstruct State {\n    AProperty&lt;AVector&lt;_&lt;Item&gt;&gt;&gt; items;\n    AProperty&lt;bool&gt; needMore = false;\n    AAsyncHolder asyncTasks;\n};\n\n_&lt;AView&gt; myLazyList(_&lt;State&gt; state) {\n    // note that we observe for transition to true here, not the current state of property\n    // see PropertyTest_Observing_changes for more info\n    AObject::connect(state-&gt;needMore.changed, AObject::GENERIC_OBSERVER, [state](bool newState){\n        if (!newState) { // we're interested in transitions to true state only.\n            return;\n        }\n        auto loadFrom = state-&gt;items-&gt;size(); // base index to load from.\n        state-&gt;asyncTasks &lt;&lt; AUI_THREADPOOL {\n            // perform \"loading\" task on a worker thread.\n\n            AThread::sleep(500ms); // imitate hard work here\n\n            // aka \"loaded\" from backend storage of some kind\n            auto loadedItems = AVector&lt;_&lt;Item&gt;&gt;::generate(20, [&amp;](size_t i) {\n                return aui::ptr::manage_shared(new Item { .value = \"Item {}\"_format(loadFrom + i) });\n            });\n\n            AUI_UI_THREAD { // back to main thread.\n                state-&gt;items.writeScope()-&gt;insertAll(loadedItems);\n                state-&gt;needMore = false;\n            };\n        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n                  });\n              },\n        },\n    };\n}\n\nAUI_ENTRY {\n    auto window = _new&lt;AWindow&gt;(\"Infinite Lazy List\", 200_dp, 300_dp);\n    window-&gt;setContents(Stacked { AScrollArea::Builder().withContents(myLazyList(_new&lt;State&gt;())) });\n    window-&gt;show();\n\n    return 0;\n}\n</code></pre>"},{"location":"inputstreamasync/","title":"InputStreamAsync","text":"<p>Converts a basic input stream to an asynchronous input stream so it's read in a separate thread.</p> Header:<code>#include &lt;AUI/IO/InputStreamAsync.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"io/","title":"IO streams","text":"<p>Input-output streams</p>"},{"location":"io/#related-pages","title":"Related Pages","text":"<ul> <li> <p>AIOException</p> <p>Exception caused by input/output stream.</p> </li> <li> <p>APath</p> <p>An add-on to AString with functions for working with the path.</p> </li> <li> <p>APathOwner</p> <p>RAII-style file owner for storing temporary data on disk.</p> </li> <li> <p>AStringStream</p> <p>A buffer input/output stream based on std::string.</p> </li> <li> <p>ARandomInputStream</p> <p>An input stream that generates random bytes.</p> </li> <li> <p>AFileOutputStream</p> <p>Opens a file for a binary write.</p> </li> <li> <p>APipe</p> <p>A thread safe buffer that converts an IInputStream to IOutputStream (and otherwise).</p> </li> <li> <p>AFileInputStream</p> <p>Opens a file for a binary read.</p> </li> <li> <p>AConcatInputStream</p> <p>Concatenates multiple sequential input streams into one.</p> </li> <li> <p>InputStreamAsync</p> <p>Converts a basic input stream to an asynchronous input stream so it's read in a separate thread.</p> </li> <li> <p>AEOFException</p> <p>Thrown when stream has reached end (end of file).</p> </li> <li> <p>ISeekableInputStream</p> <p>Represents an input stream with updating reading position.</p> </li> <li> <p>AByteBufferInputStream</p> <p>Converts a AByteBuffer to an IInputStream.</p> </li> <li> <p>AStdIStream</p> <p>std::istream implementation wrapping AUI's IInputStream.</p> </li> <li> <p>ADynamicPipe</p> <p>An asynchronous buffer that converts an IInputStream to IOutputStream (and otherwise).</p> </li> <li> <p>ALimitedInputStream</p> <p>Input stream that will pass through a maximum of a certain number of bytes - then it will return eof    (end of stream)</p> </li> <li> <p>AStrongByteBufferInputStream</p> <p>Input stream based on AByteBuffer with memory control, clears byte buffer on destruction</p> </li> <li> <p>IInputStream</p> <p>Represents an input stream.</p> </li> <li> <p>aui::archive::ExtractTo</p> <p>Default extracter for aui::zlib::readZip.</p> </li> </ul>"},{"location":"ios/","title":"iOS (operating system)","text":"<p>iOS is an operating system developed by Apple, designed for their mobile devices such as iPhone, iPad, and iPod touch. It provides a secure, user-friendly interface to manage apps, files, music, photos, and other content.</p> <p>Early Access Feature</p> <p>At the moment, support of iOS in AUI Framework is in early stage and lacks a lot of features.</p> <p>iOS shares its XNU kernel and codebase with macOS (operating system).</p>"},{"location":"ios/#key-considerations","title":"Key considerations","text":"<ul> <li>iOS is easier to support than Android (operating system) due to limited number of devices and OS versions</li> <li>You'd need a macOS (operating system) machine to build and run an iOS app</li> <li>smartphones come with high density displays, so you need to use density-independent dimension units such as _dp</li> </ul>"},{"location":"iplatformabstraction/","title":"IPlatformAbstraction","text":"<p>Platform Abstraction Layer</p> Header:<code>#include &lt;AUI/Platform/linux/IPlatformAbstraction.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"iplatformabstraction/#detailed-description","title":"Detailed Description","text":"<p>Runtime layer for switching between multiple displaying options (i.e, Linux = X11 or Wayland).</p> <p>This is a direct equivalent of Qt's Platform Abstraction.</p>"},{"location":"irenderer/","title":"IRenderer","text":"<p>Base class for rendering.</p> Header:<code>#include &lt;AUI/Render/IRenderer.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"irenderer/#detailed-description","title":"Detailed Description","text":"<p>Renderer is shared between windows. It's expected to share resources (if any). Thus, it does not perform any platform specific routines.</p>"},{"location":"irenderer/#public-types","title":"Public Types","text":"<p><code>class IRenderer::IPrerenderedString</code></p> <p>Empty structure.</p> <p><code>class IRenderer::IMultiStringCanvas</code></p> <p>Empty structure.</p>"},{"location":"irenderer/#IRenderer::IPrerenderedString","title":"IPrerenderedString","text":""},{"location":"irenderer/#IRenderer::IMultiStringCanvas","title":"IMultiStringCanvas","text":""},{"location":"irenderer/#public-methods","title":"Public Methods","text":"<pre><code>void IRenderer::backdrops(glm::ivec2 position, glm::ivec2 size, std::span&lt;ass::Backdrop::Any&gt; backdrops)\n</code></pre> <p>Draws rectangular backdrop effects.</p> Arguments <code>position</code>  rectangle position (px) <code>size</code>  rectangle size (px) <code>backdrops</code>  array of backdrop effects. Impl might apply optimizations on using several effects at once. <p>Implementation might draw stub (i.e., gray rectangle) instead of drawing complex backdrop effects.</p> <pre><code>virtual void IRenderer::boxShadow(glm::vec2 position, glm::vec2 size, float blurRadius, const AColor&amp; color)\n</code></pre> <p>Draws a rectangle-shaped shadow.</p> Arguments <code>position</code>  position <code>size</code>  rectangle size <code>blurRadius</code>  blur radius <code>color</code>  shadow color <pre><code>virtual void IRenderer::boxShadowInner(glm::vec2 position, glm::vec2 size, float blurRadius, float spreadRadius, float borderRadius, const AColor&amp; color, glm::vec2 offset)\n</code></pre> <p>Draws inner (inset) rectangle-shaped shadow.</p> Arguments <code>position</code>  position <code>size</code>  rectangle size <code>blurRadius</code>  blur radius <code>spreadRadius</code>  spread (offset) radius <code>borderRadius</code>  border radius of the rectangle. <code>color</code>  shadow color <code>offset</code>  shadow offset. Unlike outer shadow (ctx.render.boxShadow), the offset is passed to the shader instead               of a simple rectangle position offset. <pre><code>_&lt;ITexture&gt; IRenderer::getNewTexture()\n</code></pre> <p>Creates new texture (image representation optimized for GPU rendering).</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    _&lt;ITexture&gt; mTexture;\n\n    void updateTexture() {\n        if (!mTexture) {\n            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n\n        CellsImage image(mCells-&gt;size());\n        for (unsigned y = 0; y &lt; image.height(); ++y) {\n            for (unsigned x = 0; x &lt; image.width(); ++x) {\n</code></pre> <pre><code>void IRenderer::line(const ABrush&amp; brush, glm::vec2 p1, glm::vec2 p2, const ABorderStyle&amp; style = ABorderStyle::Solid { }, AMetric width = 1 _dp)\n</code></pre> Performance note if you want to drawElements multiple lines, consider using <code>ARender::lines</code> function instead. <pre><code>virtual void IRenderer::lines(const ABrush&amp; brush, AArrayView&lt;glm::vec2&gt; points, const ABorderStyle&amp; style, AMetric width)\n</code></pre> <p>Draws polyline (non-loop line strip).</p> Arguments <code>brush</code>  brush <code>points</code>  polyline points <code>style</code>  style <code>width</code>  line width <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n</code></pre> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>void DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre> <pre><code>void IRenderer::lines(const ABrush&amp; brush, AArrayView&lt;glm::vec2&gt; points, const ABorderStyle&amp; style = ABorderStyle::Solid { })\n</code></pre> <p>Draws polyline (non-loop line strip).</p> Arguments <code>brush</code>  brush <code>points</code>  polyline points <code>style</code>  style <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n</code></pre> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>void DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre> <pre><code>virtual void IRenderer::lines(const ABrush&amp; brush, AArrayView&lt;std::pair&lt;glm::vec2, glm::vec2&gt; &gt; points, const ABorderStyle&amp; style, AMetric width)\n</code></pre> <p>Draws multiple individual lines in a batch.</p> Arguments <code>brush</code>  brush <code>points</code>  line points <code>style</code>  style <code>width</code>  line width <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n</code></pre> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>void DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre> <pre><code>void IRenderer::lines(const ABrush&amp; brush, AArrayView&lt;std::pair&lt;glm::vec2, glm::vec2&gt; &gt; points, const ABorderStyle&amp; style = ABorderStyle::Solid { })\n</code></pre> <p>Draws multiple individual lines in a batch.</p> Arguments <code>brush</code>  brush <code>points</code>  line points <code>style</code>  style <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>            }\n            for (int i = 1; i &lt; mCells-&gt;size().y; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(0.f, i * SCALE), glm::vec2(getSize().x, i * SCALE));\n            }\n            ctx.render.lines(ASolidBrush { AColor::GRAY }, points);\n        };\n        drawGrid();\n    }\n\n    void onPointerPressed(const APointerPressedEvent&amp; event) override {\n</code></pre> examples/ui/views/src/DemoGraphView.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>void DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre> <pre><code>virtual _&lt;IMultiStringCanvas&gt; IRenderer::newMultiStringCanvas(const AFontStyle&amp; style)\n</code></pre> <p>Creates new canvas for batching multiple <code>prerender</code> string calls.</p> Returns a new instance of <code>IMultiStringCanvas</code> <pre><code>virtual _unique&lt;IRenderViewToTexture&gt; IRenderer::newRenderViewToTexture()\n</code></pre> <p>Returns a new instance of IRenderViewToTexture interface associated with this renderer.</p> Returns A new instance. Can return null if unsupported. <pre><code>virtual void IRenderer::points(const ABrush&amp; brush, AArrayView&lt;glm::vec2&gt; points, AMetric size)\n</code></pre> <p>Draws points list.</p> Arguments <code>brush</code>  brush <code>points</code>  points <code>size</code>  point size <pre><code>virtual void IRenderer::popMaskAfter()\n</code></pre> <p>Switches drawing to the color buffer back from the stencil. Decreases stencil depth.</p> <p>Stencil buffer should not be changed after calling this function. Should be called after the <code>popMaskBefore</code> function.</p> <pre><code>virtual void IRenderer::popMaskBefore()\n</code></pre> <p>Switches drawing to the stencil buffer instead of color buffer.</p> <p>Stencil pixel is decreased by each affected pixel. Should be called before the <code>popMaskAfter</code> function.</p> <pre><code>virtual _&lt;IPrerenderedString&gt; IRenderer::prerenderString(glm::vec2 position, const AString&amp; text, const AFontStyle&amp; fs)\n</code></pre> <p>Analyzes string and creates an instance of <code>IRenderer::IPrerenderedString</code> which helps <code>IRenderer</code> to efficiently render the string.</p> Arguments <code>position</code>  string baseline <code>text</code>  string to prerender <code>fs</code>  font style Returns an instance of IPrerenderedString <pre><code>virtual void IRenderer::pushMaskAfter()\n</code></pre> <p>Switches drawing to the color buffer back from the stencil. Increases stencil depth.</p> <p>Stencil buffer should not be changed after calling this function. Should be called after the <code>pushMaskBefore</code> function.</p> <pre><code>virtual void IRenderer::pushMaskBefore()\n</code></pre> <p>witches drawing to the stencil buffer instead of color buffer.</p> <p>Stencil pixel is increased by each affected pixel. Should be called before the <code>pushMaskAfter</code> function.</p> <pre><code>virtual void IRenderer::rectangle(const ABrush&amp; brush, glm::vec2 position, glm::vec2 size)\n</code></pre> <p>Draws simple rectangle.</p> Arguments <code>brush</code>  brush to use <code>position</code>  rectangle position (px) <code>size</code>  rectangle size (px) <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n        if (mTexture) {\n            ctx.render.rectangle(ATexturedBrush { mTexture }, { 0, 0 }, float(SCALE) * glm::vec2(mCells-&gt;size()));\n        }\n        auto drawGrid = [&amp;] {\n            ASmallVector&lt;std::pair&lt;glm::vec2, glm::vec2&gt;, 128 * 2&gt; points;\n            for (int i = 1; i &lt; mCells-&gt;size().x; ++i) {\n                points &lt;&lt; std::make_pair(glm::vec2(i * SCALE, 0.f), glm::vec2(i * SCALE, getSize().y));\n</code></pre> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>    AView::render(context);\n\n    mShader.use();\n    mTexture-&gt;bind();\n    context.render.rectangle(ACustomShaderBrush {}, { 0, 0 }, getSize());\n}\n\nvoid FractalView::setSize(glm::ivec2 size) {\n    AView::setSize(size);\n    mShader.use();\n</code></pre> <pre><code>virtual void IRenderer::rectangleBorder(const ABrush&amp; brush, glm::vec2 position, glm::vec2 size, float lineWidth = 1 . f)\n</code></pre> <p>Draws rectangle's border.</p> Arguments <code>brush</code>  brush to use <code>position</code>  rectangle position (px) <code>size</code>  rectangle size (px) <code>lineWidth</code>  border line width (px) <pre><code>void IRenderer::rotate(const glm::vec3&amp; axis, AAngleRadians angle)\n</code></pre> <p>wrapper for setTransform applying matrix rotation along the specified axis.</p> Arguments <code>axis</code>  axis <code>angle</code>  angle to rotate <pre><code>void IRenderer::rotate(AAngleRadians angle)\n</code></pre> <p>wrapper for setTransform applying matrix rotation along z axis.</p> Arguments <code>angle</code>  angle to rotate <pre><code>virtual void IRenderer::roundedRectangle(const ABrush&amp; brush, glm::vec2 position, glm::vec2 size, float radius)\n</code></pre> <p>Draws rounded rect (with antialiasing, if msaa enabled).</p> Arguments <code>brush</code>  brush to use <code>position</code>  rectangle position (px) <code>size</code>  rectangle size (px) <code>radius</code>  corner radius (px) <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        AView::render(ctx);\n\n        for (const auto&amp; circle : *mState-&gt;circles) {\n            if (&amp;circle == mHoveredCircle) {\n                ctx.render.roundedRectangle(\n                    ASolidBrush { AColor::GRAY }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n                    circle.radius);\n            }\n            ctx.render.roundedRectangleBorder(\n                ASolidBrush { AColor::BLACK }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n</code></pre> <pre><code>virtual void IRenderer::roundedRectangleBorder(const ABrush&amp; brush, glm::vec2 position, glm::vec2 size, float radius, int borderWidth)\n</code></pre> <p>Draws rounded rectangle's border.</p> Arguments <code>brush</code>  brush to use <code>position</code>  rectangle position (px) <code>size</code>  rectangle size (px) <code>radius</code>  corner radius (px) <code>borderWidth</code>  border line width (px) <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>                ctx.render.roundedRectangle(\n                    ASolidBrush { AColor::GRAY }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n                    circle.radius);\n            }\n            ctx.render.roundedRectangleBorder(\n                ASolidBrush { AColor::BLACK }, circle.position - circle.radius, glm::vec2(circle.radius * 2.f),\n                circle.radius, 1);\n        }\n    }\n</code></pre> <pre><code>virtual void IRenderer::setBlending(Blending blending)\n</code></pre> <p>Sets blending mode.</p> Arguments <code>blending</code>  new blending mode <pre><code>void IRenderer::setColor(const AColor&amp; color)\n</code></pre> <p>Sets the color which is multiplied with any brush. Unlike <code>setColorForced</code>, the new color is multiplied by the previous color.</p> Arguments <code>color</code>  color <p>Examples:</p> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>                    color = 0x808080ffu;\n                    break;\n            }\n\n            context.render.setColor(color);\n            context.render.string({getWidth() / 3, (getHeight() - fs.size) / 2 + fs.getAscenderHeight()}, AString::number(count), fs);\n        }\n    }\n}\n</code></pre> <pre><code>void IRenderer::setColorForced(const AColor&amp; color)\n</code></pre> <p>Sets the color which is multiplied with any brush.</p> Arguments <code>color</code>  color <pre><code>void IRenderer::setTransform(const glm::mat4&amp; transform)\n</code></pre> <p>Sets the transform matrix which is applicable for any figure. Unlike <code>setTransformForced</code>, the new matrix is multiplied by the previous matrix.</p> Arguments <code>transform</code>  transform matrix <pre><code>void IRenderer::setTransformForced(const glm::mat4&amp; transform)\n</code></pre> <p>Sets the transform matrix which is applicable for any figure.</p> Arguments <code>transform</code>  transform matrix <pre><code>virtual void IRenderer::setWindow(AWindowBase* window)\n</code></pre> <p>Sets the window to render on.</p> Arguments <code>window</code>  target window <pre><code>virtual void IRenderer::squareSector(const ABrush&amp; brush, const glm::vec2&amp; position, const glm::vec2&amp; size, AAngleRadians begin, AAngleRadians end)\n</code></pre> <p>Draws sector in rectangle shape. The sector is drawn clockwise from begin to end angles.</p> Arguments <code>brush</code>  brush to use <code>position</code>  rectangle position (px) <code>size</code>  rectangle size (px) <code>begin</code>  begin angle of the sector <code>end</code>  end angle of the sector <p>The method can be used as mask to ctx.render.roundedRect, creating arc shape.</p> <pre><code>virtual void IRenderer::string(glm::vec2 position, const AString&amp; string, const AFontStyle&amp; fs = { })\n</code></pre> <p>Draws string.</p> Arguments <code>position</code>  string baseline <code>string</code>  string to render <code>fs</code>  font style (optional) <p>This function is dramatically inefficient since it does symbol lookup for every character is the <code>string</code> and does GPU buffer allocations. If you want to render the same string for several times (frames), consider using the IRenderer::prerenderString function or high level views (such as ALabel) instead.</p> <p>Examples:</p> examples/app/minesweeper/src/CellView.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>                    break;\n            }\n\n            context.render.setColor(color);\n            context.render.string({getWidth() / 3, (getHeight() - fs.size) / 2 + fs.getAscenderHeight()}, AString::number(count), fs);\n        }\n    }\n}\n</code></pre> <pre><code>void IRenderer::stub(glm::vec2 position, glm::vec2 size)\n</code></pre> <p>Draws stub (i.e., gray rectangle)</p> <p>This can be used if implementation does not support or can't draw complex effects (i.e., blur)</p> <pre><code>void IRenderer::translate(const glm::vec2&amp; offset)\n</code></pre> <p>Wrapper for setTransform applying matrix translate transformation.</p> Arguments <code>offset</code>  offset in pixels to translate. <p>Examples:</p> examples/app/fractal/src/FractalView.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders.</p> <pre><code>void FractalView::onScroll(const AScrollEvent&amp; event) {\n    AView::onScroll(event);\n    auto projectedPos = (glm::dvec2(event.origin) / glm::dvec2(getSize()) - glm::dvec2(0.5)) * 2.0;\n    projectedPos.x *= mAspectRatio;\n    mTransform = glm::translate(mTransform, glm::vec3 { projectedPos, 0.0 });\n    mTransform = glm::scale(mTransform, glm::vec3(1.0 - event.delta.y / 1000.0));\n    mTransform = glm::translate(mTransform, -glm::vec3 { projectedPos, 0.0 });\n\n    handleMatrixUpdated();\n</code></pre>"},{"location":"irenderer/#IRenderer::backdrops","title":"backdrops","text":""},{"location":"irenderer/#IRenderer::boxShadow","title":"boxShadow","text":""},{"location":"irenderer/#IRenderer::boxShadowInner","title":"boxShadowInner","text":""},{"location":"irenderer/#IRenderer::getNewTexture","title":"getNewTexture","text":""},{"location":"irenderer/#IRenderer::line","title":"line","text":""},{"location":"irenderer/#IRenderer::lines","title":"lines","text":""},{"location":"irenderer/#IRenderer::newMultiStringCanvas","title":"newMultiStringCanvas","text":""},{"location":"irenderer/#IRenderer::newRenderViewToTexture","title":"newRenderViewToTexture","text":""},{"location":"irenderer/#IRenderer::points","title":"points","text":""},{"location":"irenderer/#IRenderer::popMaskAfter","title":"popMaskAfter","text":""},{"location":"irenderer/#IRenderer::popMaskBefore","title":"popMaskBefore","text":""},{"location":"irenderer/#IRenderer::prerenderString","title":"prerenderString","text":""},{"location":"irenderer/#IRenderer::pushMaskAfter","title":"pushMaskAfter","text":""},{"location":"irenderer/#IRenderer::pushMaskBefore","title":"pushMaskBefore","text":""},{"location":"irenderer/#IRenderer::rectangle","title":"rectangle","text":""},{"location":"irenderer/#IRenderer::rectangleBorder","title":"rectangleBorder","text":""},{"location":"irenderer/#IRenderer::rotate","title":"rotate","text":""},{"location":"irenderer/#IRenderer::roundedRectangle","title":"roundedRectangle","text":""},{"location":"irenderer/#IRenderer::roundedRectangleBorder","title":"roundedRectangleBorder","text":""},{"location":"irenderer/#IRenderer::setBlending","title":"setBlending","text":""},{"location":"irenderer/#IRenderer::setColor","title":"setColor","text":""},{"location":"irenderer/#IRenderer::setColorForced","title":"setColorForced","text":""},{"location":"irenderer/#IRenderer::setTransform","title":"setTransform","text":""},{"location":"irenderer/#IRenderer::setTransformForced","title":"setTransformForced","text":""},{"location":"irenderer/#IRenderer::setWindow","title":"setWindow","text":""},{"location":"irenderer/#IRenderer::squareSector","title":"squareSector","text":""},{"location":"irenderer/#IRenderer::string","title":"string","text":""},{"location":"irenderer/#IRenderer::stub","title":"stub","text":""},{"location":"irenderer/#IRenderer::translate","title":"translate","text":""},{"location":"irenderingcontext/","title":"IRenderingContext","text":"<p>Glue between AWindow and IRenderer.</p> Header:<code>#include &lt;AUI/Platform/IRenderingContext.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"irenderingcontext/#detailed-description","title":"Detailed Description","text":"<p>IRenderingContext is linker object between AWindow and IRenderer, that exposes IRenderer to the client code in order to draw.</p> <p>Unlike IRenderer, each AWindow has it's own instance of IRenderingContext, thus it can be used to carry platform-specific and window-specific objects, like handles and framebuffers.</p>"},{"location":"irenderingcontext/#public-types","title":"Public Types","text":"<p><code>struct IRenderingContext::Init</code></p> <p>Empty structure.</p>"},{"location":"irenderingcontext/#IRenderingContext::Init","title":"Init","text":""},{"location":"irenderviewtotexture/","title":"IRenderViewToTexture","text":"<p>Rendering view to texture storage interface.</p> Header:<code>#include &lt;AUI/Render/IRenderViewToTexture.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"irenderviewtotexture/#public-types","title":"Public Types","text":"<p><code>struct IRenderViewToTexture::InvalidArea</code></p> <p>Defines areas to invalidate (redraw).</p> <code>using Rectangles</code>  Specific areas redraw.  <code>using Underlying</code>"},{"location":"irenderviewtotexture/#IRenderViewToTexture::InvalidArea","title":"InvalidArea","text":""},{"location":"irenderviewtotexture/#public-methods","title":"Public Methods","text":"<pre><code>virtual bool IRenderViewToTexture::begin(IRenderer&amp; renderer, glm::ivec2 surfaceSize, IRenderViewToTexture::InvalidArea&amp; invalidArea)\n</code></pre> <p>Instructs the renderer to begin drawing to the surface (framebuffer) stored in IRenderViewToTexture.</p> Arguments <code>renderer</code>  renderer to draw with. IRenderViewToTexture is expected to be associated with the renderer it's created with and normally this parameter is used to assert check the used renderer is the same. <code>surfaceSize</code>  framebuffer size. Adjusts this value to achieve supersampling. Resizes the surface if mismatched with surfaceSize. <code>invalidArea</code>  invalid areas to update. Should not be empty. Can be changed to InvalidArea::Full{} by implementation and caller is expected to react accordingly. Returns true on success, false otherwise <p>If needed, implementation may adjust renderer's transform matrix.</p> <p>Examples:</p> examples/app/minesweeper/src/NewGameWindow.h <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>    _&lt;ALabel&gt; mDifficultyLabel;\n\n    void updateMinesMax();\n    void updateDifficultyLabel();\n    void begin();\n\n};\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>public:\n\n    void undo() {\n        if (nextAction == mStack.begin()) {\n            return;\n        }\n        nextAction = std::prev(*nextAction);\n        (**nextAction)-&gt;undo();\n    }\n</code></pre> examples/7guis/cells/src/Cell.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>}\n\nglm::uvec2 Cell::fromName(const AString&amp; name) {\n    glm::uvec2 out{UNDEFINED};\n    auto it = name.begin();\n    for (;it != name.end() &amp;&amp; 'A' &lt;= *it &amp;&amp; *it &lt;= 'Z'; ++it) {\n        if (out.x == UNDEFINED) { out.x = 0; }\n        out.x *= 26;\n        out.x += *it - 'A';\n    }\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                }\n            }\n            if (!binaryOperators.empty()) {\n                auto root = std::min_element(\n                    binaryOperators.begin(), binaryOperators.end(),\n                    [](const BinaryOperatorAndItsPriority&amp; lhs, const BinaryOperatorAndItsPriority&amp; rhs) {\n                        return lhs.priority &lt; rhs.priority;\n                    });\n                auto out = std::make_unique&lt;T&gt;();\n                AUI_ASSERT(root-&gt;owning != nullptr);\n</code></pre> <pre><code>virtual void IRenderViewToTexture::draw(IRenderer&amp; renderer)\n</code></pre> <p>Draws contents of the surface.</p> Arguments <code>renderer</code>  renderer to draw with. IRenderViewToTexture is expected to be associated with the renderer it's created with and normally this parameter is used to assert check the used renderer is the same. <pre><code>virtual void IRenderViewToTexture::end(IRenderer&amp; renderer)\n</code></pre> <p>Finishes drawing operation started with begin method.</p> Arguments <code>renderer</code>  renderer to draw with. IRenderViewToTexture is expected to be associated with the renderer it's created with and normally this parameter is used to assert check the used renderer is the same. <p>The caller is obligated to recover renderer's state prior to begin method call.</p> <p>Examples:</p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control.</p> <pre><code>        (**nextAction)-&gt;undo();\n    }\n\n    void redo() {\n        if (nextAction == mStack.end()) {\n            return;\n        }\n        (**nextAction)-&gt;redo();\n        nextAction = std::next(*nextAction);\n    }\n</code></pre> examples/7guis/cells/src/Cell.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>glm::uvec2 Cell::fromName(const AString&amp; name) {\n    glm::uvec2 out{UNDEFINED};\n    auto it = name.begin();\n    for (;it != name.end() &amp;&amp; 'A' &lt;= *it &amp;&amp; *it &lt;= 'Z'; ++it) {\n        if (out.x == UNDEFINED) { out.x = 0; }\n        out.x *= 26;\n        out.x += *it - 'A';\n    }\n    for (;it != name.end() &amp;&amp; '0' &lt;= *it &amp;&amp; *it &lt;= '9'; ++it) {\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>                }\n            }\n            if (!binaryOperators.empty()) {\n                auto root = std::min_element(\n                    binaryOperators.begin(), binaryOperators.end(),\n                    [](const BinaryOperatorAndItsPriority&amp; lhs, const BinaryOperatorAndItsPriority&amp; rhs) {\n                        return lhs.priority &lt; rhs.priority;\n                    });\n                auto out = std::make_unique&lt;T&gt;();\n                AUI_ASSERT(root-&gt;owning != nullptr);\n</code></pre>"},{"location":"irenderviewtotexture/#IRenderViewToTexture::begin","title":"begin","text":""},{"location":"irenderviewtotexture/#IRenderViewToTexture::draw","title":"draw","text":""},{"location":"irenderviewtotexture/#IRenderViewToTexture::end","title":"end","text":""},{"location":"iseekableinputstream/","title":"ISeekableInputStream","text":"<p>Represents an input stream with updating reading position.</p> Header:<code>#include &lt;AUI/IO/ISeekableInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"iseekableinputstream/#public-methods","title":"Public Methods","text":"<pre><code>size_t ISeekableInputStream::fileSize()\n</code></pre> <p>return size of the stream</p> Returns size of the stream <pre><code>virtual bool ISeekableInputStream::isEof()\n</code></pre> <p>returns true if end of stream has been reached</p> Returns true if end of stream has been reached <p>Examples:</p> examples/7guis/cells/src/Tokens.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>AVector&lt;token::Any&gt; token::parse(aui::no_escape&lt;ATokenizer&gt; t) {\n    AVector&lt;token::Any&gt; out;\n    t-&gt;readChar();   // =\n    try {\n        while (!t-&gt;isEof()) {\n            switch (char c = t-&gt;readChar()) {\n                case ' ':\n                    break;\n                case '(':\n                    out &lt;&lt; token::LPar {};\n</code></pre> <pre><code>virtual void ISeekableInputStream::seek(std::streamoff offset, ASeekDir seekDir)\n</code></pre> <p>change reading position, a way of changing depends on seekDir parameter</p> <pre><code>virtual std::streampos ISeekableInputStream::tell()\n</code></pre> <p>return current reading position</p> Returns current reading pos"},{"location":"iseekableinputstream/#ISeekableInputStream::fileSize","title":"fileSize","text":""},{"location":"iseekableinputstream/#ISeekableInputStream::isEof","title":"isEof","text":""},{"location":"iseekableinputstream/#ISeekableInputStream::seek","title":"seek","text":""},{"location":"iseekableinputstream/#ISeekableInputStream::tell","title":"tell","text":""},{"location":"isoundinputstream/","title":"ISoundInputStream","text":"<p>Base interface for representing sound input streams of different formats</p> Header:<code>#include &lt;AUI/Audio/ISoundInputStream.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"isoundinputstream/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p>"},{"location":"isoundinputstream/#public-methods","title":"Public Methods","text":"<pre><code>virtual AAudioFormat ISoundInputStream::info()\n</code></pre> <p>Get general info about sound stream</p> Returns AAudioFormat containing info about sound stream <p>Examples:</p> examples/basic/hello_world/src/main.cpp <p>Console Hello World Example - Basic CLI Hello World application.</p> <pre><code>static constexpr auto LOG_TAG = \"MyApp\";\n\nAUI_ENTRY {\n    ALogger::info(LOG_TAG) &lt;&lt; \"Hello world!\";\n    return 0;\n}\n</code></pre> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application.</p> <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre>"},{"location":"isoundinputstream/#ISoundInputStream::info","title":"info","text":""},{"location":"isoundpipe/","title":"ISoundPipe","text":"<p>ISoundPipe accepts sound data and outputs sound samples, useful for decoded audio passed in packets</p> Header:<code>#include &lt;AUI/Audio/ISoundPipe.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::audio)</code>"},{"location":"isoundpipe/#detailed-description","title":"Detailed Description","text":"<p>Note</p> <p>Pipe should decode audio on write() and give ready samples on read()</p>"},{"location":"istringable/","title":"IStringable","text":"<p>Object that can be converted to string.</p> Header:<code>#include &lt;AUI/Common/IStringable.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"istringable/#detailed-description","title":"Detailed Description","text":"<p>Used in reflection.</p>"},{"location":"istringable/#public-methods","title":"Public Methods","text":"<pre><code>virtual AString IStringable::toString()\n</code></pre> Returns string representation of the object <p>Examples:</p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> <pre><code>template&lt;typename T &gt;\nstatic AString IStringable::toString(const T* t)\n</code></pre> <p>Wrapper function. If the passed object is an instance of IStringable the supplyValue of toString of this object will be returned, AReflect::name() of this pointer otherwise</p> <p>Examples:</p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre> <pre><code>template&lt;typename T &gt;\nstatic AString IStringable::toString(const _&lt;T&gt;&amp; t)\n</code></pre> <p>Wrapper function. If the passed object is an instance of IStringable the supplyValue of toString of this object will be returned, AReflect::name() of this pointer otherwise</p> <p>Examples:</p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre>"},{"location":"istringable/#IStringable::toString","title":"toString","text":""},{"location":"itexture/","title":"ITexture","text":"<p>Renderer-friendly image representation.</p> Header:<code>#include &lt;AUI/Render/ITexture.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"itexture/#examples","title":"Examples","text":"examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>    int getContentMinimumHeight() override { return mCells-&gt;size().y * SCALE; }\n\nprivate:\n    _&lt;Cells&gt; mCells;\n    _&lt;ITexture&gt; mTexture;\n\n    void updateTexture() {\n        if (!mTexture) {\n            mTexture = AWindow::current()-&gt;getRenderingContext()-&gt;renderer().getNewTexture();\n        }\n</code></pre></p>"},{"location":"itexture/#public-methods","title":"Public Methods","text":"<pre><code>virtual void ITexture::setImage(AImageView image)\n</code></pre> <p>Copies image to the texture image representation (i.e. to GPU memory).</p> <p>Examples:</p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool.</p> <pre><code>                            ? AColor::WHITE\n                            : AColor::TRANSPARENT_BLACK));\n            }\n        }\n        mTexture-&gt;setImage(image);\n        redraw();\n    }\n}; /// end\n\nclass GameOfLifeWindow : public AWindow {\n</code></pre>"},{"location":"itexture/#ITexture::setImage","title":"setImage","text":""},{"location":"itreemodel/","title":"ITreeModel","text":"<p>Tree model.</p> Header:<code>#include &lt;AUI/Model/ITreeModel.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"itreemodel/#detailed-description","title":"Detailed Description","text":"<p>ITreeModel is an interface to a tree data structure used for ATreeView.</p> <p>Basic implementation of the tree model is available in ATreeModel.</p>"},{"location":"itreemodel/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>emits&lt;ATreeModelIndex&gt; dataChanged</code></p> <p>Model data was changed</p> <p><code>emits&lt;ATreeModelIndex&gt; dataInserted</code></p> <p>Model data was added</p>"},{"location":"itreemodel/#ITreeModel::dataChanged","title":"dataChanged","text":""},{"location":"itreemodel/#ITreeModel::dataInserted","title":"dataInserted","text":""},{"location":"itreemodel/#examples","title":"Examples","text":"examples/ui/views/src/DemoListModel.cpp <p>Views Example - All-in-one views building example.</p> <pre><code>}\n\nvoid DemoListModel::addItem() {\n    mListSize += 1;\n    emit dataInserted(range({mListSize - 1}));\n}\n\nvoid DemoListModel::removeItem() {\n    if (mListSize &gt; 0) {\n        mListSize -= 1;\n</code></pre> <p><code>emits&lt;ATreeModelIndex&gt; dataRemoved</code></p> <p>Model data about to remove</p>"},{"location":"itreemodel/#ITreeModel::dataRemoved","title":"dataRemoved","text":""},{"location":"itreemodel/#examples_1","title":"Examples","text":""},{"location":"itreemodel/#public-methods","title":"Public Methods","text":"<pre><code>virtual size_t ITreeModel::childrenCount(const ATreeModelIndexOrRoot&amp; vertex)\n</code></pre> <p>Count of children of the vertex.</p> Arguments <code>vertex</code>  the vertex to determine the children count of <pre><code>virtual ATreeModelIndex ITreeModel::indexOfChild(size_t row, size_t column, const ATreeModelIndexOrRoot&amp; vertex)\n</code></pre> <p>Creates valid ATreeModelIndex of the child.</p> Arguments <code>row</code>  child row (index) <code>column</code>  child column (typically 0) <code>vertex</code>  vertex Returns The child of the parent index with specified row and column. <pre><code>virtual T ITreeModel::itemAt(const ATreeModelIndex&amp; index)\n</code></pre> <p>value representation, used by ATreeView.</p> <pre><code>virtual ATreeModelIndexOrRoot ITreeModel::parent(const ATreeModelIndex&amp; vertex)\n</code></pre> <p>Creates index of parent vertex of the specified vertex.</p> <p>Examples:</p> examples/ui/views/tests/LayoutManagerTest.cpp <p>Views Example - All-in-one views building example.</p> <pre><code> */\nTEST_F(UILayoutManager, ButtonsAlignment) {\n    // buttons column should be perfectly aligned\n    By::name(\"Common button\")\n        .parent()\n        .allChildren()\n        .check(leftRightAligned(), \"elements should be perfectly aligned\");\n}\n</code></pre>"},{"location":"itreemodel/#ITreeModel::childrenCount","title":"childrenCount","text":""},{"location":"itreemodel/#ITreeModel::indexOfChild","title":"indexOfChild","text":""},{"location":"itreemodel/#ITreeModel::itemAt","title":"itemAt","text":""},{"location":"itreemodel/#ITreeModel::parent","title":"parent","text":""},{"location":"ixmldocumentvisitor/","title":"IXmlDocumentVisitor","text":"<p>Xml document visitor.</p> Header:<code>#include &lt;AUI/Xml/IXmlDocumentVisitor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::xml)</code>"},{"location":"ixmldocumentvisitor/#public-methods","title":"Public Methods","text":"<pre><code>virtual _&lt;IXmlHeaderVisitor&gt; IXmlDocumentVisitor::visitHeader()\n</code></pre> <p>Visits xml header.</p>"},{"location":"ixmldocumentvisitor/#IXmlDocumentVisitor::visitHeader","title":"visitHeader","text":""},{"location":"ixmlentityvisitor/","title":"IXmlEntityVisitor","text":"<p>Visit xml entity.</p> Header:<code>#include &lt;AUI/Xml/IXmlEntityVisitor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::xml)</code>"},{"location":"ixmlheadervisitor/","title":"IXmlHeaderVisitor","text":"<p>Xml header visitor.</p> Header:<code>#include &lt;AUI/Xml/IXmlHeaderVisitor.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::xml)</code>"},{"location":"jni/","title":"aui::jni","text":"<p>C++/Java bridge.</p>"},{"location":"jni/#detailed-description","title":"Detailed Description","text":"<p>Used to make AUI work on Android.</p>"},{"location":"jni/#related-pages","title":"Related Pages","text":"<ul> <li> <p>AUI_JNI_CLASS</p> <p>Defines getClassName and other useful methods required for Java class definition.</p> </li> <li> <p>AUI_JNI_STATIC_METHOD</p> <p>Defines static method C++ -&gt; Java.</p> </li> <li> <p>AUI_JNI_METHOD</p> <p>Defines nonstatic method C++ -&gt; Java.</p> </li> <li> <p>aui::jni::ArrayView</p> <p>Java array view.</p> </li> <li> <p>aui::jni::GlobalRef</p> <p>Global ref.</p> </li> </ul>"},{"location":"layout-managers/","title":"Layout Managers","text":"<p>Layout manager is an object that manages placement and size of views inside containers.</p>"},{"location":"layout-managers/#detailed-description","title":"Detailed Description","text":"<p>In AUI, layout building consists of layout managers. Layout manager determines position and size of container's children views. A container is a view that consists of other views, called children. In general, layout manager does not allow going beyond the border of the container. A container can be a child of an another container. Such nested combinations allows to replicate nearly any UI layout.</p> <p>This approach can be found in many popular declarative UI frameworks.</p> <p>The ALayout is the base class for all layout managers in AUI. Layout managers are responsible for:</p> <ul> <li>Positioning child views within their container</li> <li>Calculating minimum sizes</li> <li>Handling view additions and removals</li> <li>Managing spacing between views</li> <li>Respecting view margins and alignment</li> <li>Supporting expanding/stretching of views</li> </ul> <p>Note</p> <p>You can use AUI Devtools to play around with layouts, especially with Expanding property, to get better understanding on how does layout work in AUI.</p> <p>Common layout managers include:</p> <ul> <li>AHorizontalLayout - Arranges views in a horizontal row</li> <li>AVerticalLayout - Arranges views in a vertical column</li> <li>AStackedLayout - Centers views, displaying them on top of each other</li> <li>AAdvancedGridLayout - Arranges views in a grid with customizable cell sizing</li> </ul> <p>Key concepts:</p> <ol> <li> <p>Minimum Size - Layout managers calculate minimum size requirements by:</p> <ul> <li>Considering minimum sizes of child views</li> <li>Adding margins and spacing</li> <li>Respecting fixed size constraints</li> <li>Following AUI Box Model.</li> </ul> </li> <li> <p>Expanding Views - Children can expand to fill available space of their parent:</p> <ul> <li>Set via <code>AView::setExpanding()</code> or <code>ass::Expanding</code> on a child</li> <li>Requires parent to have <code>ass::FixedSize</code> or <code>ass::MinSize</code> or Expanding set to take effect</li> <li>Independent for horizontal/vertical directions</li> <li>Ignored if <code>ass::FixedSize</code> is set</li> </ul> </li> <li> <p>Spacing - Configurable gaps between views:</p> <ul> <li>Set via <code>ALayout::setSpacing()</code> or <code>ass::LayoutSpacing</code> of the parent view</li> <li>Part of minimum size calculations of the parent view</li> <li>Applied uniformly between its child views</li> </ul> </li> <li> <p>Margins - Space around individual views:</p> <ul> <li>Set per-view via ASS or margins property</li> <li>Respected during layout</li> <li>Part of minimum size calculations of the parent view</li> </ul> </li> <li> <p>Layout Direction - Overall flow direction:</p> <ul> <li>Horizontal layouts flow left-to-right</li> <li>Vertical layouts flow top-to-bottom</li> <li>Grid layouts use both directions</li> </ul> </li> <li> <p>Relativeness - children position is relative to parent's position, not an absolute position within a window.</p> </li> <li> <p>Nesting - you can nest containers into containers, and so on. When we say \"container\", it means a    AViewContainer. When we say \"Vertical\", we imply a AViewContainer with AVerticalLayout as the    layout manager.</p> </li> </ol>"},{"location":"layout-managers/#layout-examples","title":"Layout Examples","text":"<p>Horizontal layout:</p> Code Result <pre><code>setContents(\n  Horizontal {\n    _new&lt;AButton&gt;(\"1\"),\n    _new&lt;AButton&gt;(\"2\"),\n    _new&lt;AButton&gt;(\"3\"),\n  }\n);\n</code></pre> <p>Vertical layout:</p> Code Result <pre><code>setContents(\n  Vertical {\n    _new&lt;AButton&gt;(\"1\"),\n    _new&lt;AButton&gt;(\"2\"),\n    _new&lt;AButton&gt;(\"3\"),\n  }\n);\n</code></pre> <p>Since container can be child of other container, we can create complex UIs using basic layout managers:</p> Code Result <pre><code>setContents(\n  Vertical {\n    _new&lt;AButton&gt;(\"Up\"),\n    Horizontal {\n        _new&lt;AButton&gt;(\"Left\"),\n        _new&lt;AButton&gt;(\"Right\"),\n    },\n    _new&lt;AButton&gt;(\"Down\"),\n  }\n);\n</code></pre> <p>Stacked layout:</p> Code Result <pre><code>setContents(\n  Stacked {\n    _new&lt;AView&gt;() AUI_WITH_STYLE { BackgroundSolid(0xff0000_rgb), Expanding() },\n    Label { \"Test\" },\n  }\n);\n</code></pre>"},{"location":"layout-managers/#EXPANDING","title":"Expanding","text":"<p>Expanding (often referred as stretch factor) is a property of any AView. Expanding is an expansion coefficient set on per-axis basic (i.e, one value along x axis, another value along y axis), however it's convenient to set both values. Hints layout manager how much this AView should be extended relative to other AViews in the same container.</p> <p>Note</p> <p>You can use AUI Devtools to play around with layouts, especially with Expanding property, to get better understanding on how does layout work in AUI.</p> <p>Horizontal layouts ignore y expanding of their children, Vertical layouts ignore x expanding of their children.</p> <p>Views are normally created without any expanding set. When Expanding views appear in a layout they are given a share of space in accordance with their expanding or their minimum size whichever gives more space to them. Expanding is used to change how much space views are given in proportion to one another.</p> <p>Expanding view does not affect parent's size or parent's expanding property. Use AView::setExpanding() on parent, or <code>Expanding</code> variant of declarative container notation (<code>Vertical::Expanding</code>, <code>Horizontal::Expanding</code>, <code>Stacked::Expanding</code>) for such case.</p> <p>Expanding views use free space of their container to grow.</p> <p>Free space of a container is determined by its size subtracted by sum of minimum sizes of its children. Please note that your container would probably occupy minimum possible size (determined by minimum sizes of its children). It order to make container larger than minimum possible size, you can specify FixedSize or MinSize or Expanding to the container.</p> <p>You can use ass::Expanding ASS property, or AView::setExpanding method to specify Expanding:</p> Code Result <pre><code>setContents(\n  Vertical {\n    _new&lt;AButton&gt;(\"Up\"),\n    Horizontal {\n      _new&lt;AButton&gt;(\"Left\"),\n      _new&lt;AButton&gt;(\"Center\"),\n      _new&lt;AButton&gt;(\"Right\") AUI_LET { it-&gt;setExpanding(); },\n           // alias to it-&gt;setExpanding(2) ^^^^^^\n    },\n    _new&lt;AButton&gt;(\"Down\"),\n  } AUI_WITH_STYLE { MinSize { 300_dp, {} } },\n);\n</code></pre> <p>Expanding views push remaining views in their container:</p> Code Result <pre><code>setContents(\n  Vertical {\n    _new&lt;AButton&gt;(\"Up\"),\n    Horizontal {\n        _new&lt;AButton&gt;(\"Left\"),\n        _new&lt;AButton&gt;(\"Center\") AUI_LET { it-&gt;setExpanding(); },\n        _new&lt;AButton&gt;(\"Right\"),\n    },\n    _new&lt;AButton&gt;(\"Down\"),\n  } AUI_WITH_STYLE { MinSize { 300_dp, {} } },\n);\n</code></pre> <p>Expanding view does affect expanding environment inside a single container. If there's one view with expanding set to any positive value it would occupy all free space in the container. If there is a view with expanding equal to 1 and another view with expanding equal to 2 the first view would occupy one third of free space, the second view would occupy two thirds of free space: <pre><code>Vertical {\n  _new&lt;AButton&gt;(\"Left\") AUI_LET { it-&gt;setExpanding(1); },\n  _new&lt;AButton&gt;(\"Right\") AUI_LET { it-&gt;setExpanding(2); }, // will be twice as big as \"Left\"\n}\n</code></pre></p> <p>You can use ASpacerExpanding as blank expanding view: <pre><code>Vertical {\n  _new&lt;AButton&gt;(\"Left\"),\n  SpacerExpanding(),\n  _new&lt;AButton&gt;(\"Right\"),\n}\n</code></pre></p> <p>Note</p> <p>FixedSize nullifies Expanding's action (on per axis basic).</p>"},{"location":"layout-managers/#implementation-details","title":"Implementation details","text":"<p>The process of applying position and size involves several key functions: <pre><code>AWindow::redraw()\n\u2514\u2500&gt; AWindow::applyGeometryToChildrenIfNecessary()\n    \u2514\u2500&gt; AWindow::applyGeometryToChildren()\n        \u2514\u2500&gt; ALayout::onResize()                                                  \u2510\n            \u2514\u2500&gt; AViewContainerBase::getMinimumSize()              \u2510              \u2502\n                \u2514\u2500&gt; AViewContainerBase::getContentMinimumWidth()  \u2502              \u2502\n                    \u2514\u2500&gt; ALayout::getMinimumWidth()                \u2502              \u2502\n                        \u2514\u2500&gt; AView::getMinimumWidth()              \u2502 cached       \u2502\n                \u2514\u2500&gt; AViewContainerBase::getContentMinimumHeight() \u2502              \u2502 potentially\n                    \u2514\u2500&gt; ALayout::getMinimumHeight()               \u2502              \u2502 recursive\n                        \u2514\u2500&gt; AView::getMinimumHeight()             \u2518              \u2502\n            \u2514\u2500&gt; AViewContainerBase::setGeometry()                                \u2502\n                \u2514\u2500&gt; AViewContainerBase::setSize()                                \u2502\n                    \u2514\u2500&gt; AViewContainerBase::applyGeometryToChildrenIfNecessary() \u2502\n                        \u2514\u2500&gt; AViewContainerBase::applyGeometryToChildren()        \u2502\n                            \u2514\u2500&gt; ALayout::onResize()                              \u2518\n                                \u2514\u2500&gt; AView::setGeometry()\n</code></pre></p>"},{"location":"layout-managers/#applying-size","title":"Applying size","text":"<ul> <li>Size of each view in tree is calculated on this phase</li> <li>AView::redraw - geometry is applied before rendering</li> <li>applyGeometryToChildrenIfNecessary - applies geometry   only if really needed (i.e., if there were a resize event, or views were added or removed)</li> <li>applyGeometryToChildren - applies geometry to its children with   no preconditions</li> <li><code>ALayout::onResize()</code> - implemented by layout manager, whose have their own algorithms of arranging views</li> <li><code>AView::setGeometry()</code> - sets geometry of a view (which might be a container)</li> </ul>"},{"location":"layout-managers/#SIZE_CALCULATION","title":"Size calculation","text":"<ul> <li>Layout manager queries Minimum size which is determined with <code>AView::getMinimumSize()</code> and cached until the   view or its children call <code>AView::markMinContentSizeInvalid()</code>. It considers:<ul> <li>Children's minimum sizes (if any). A child includes its <code>ass::Padding</code> to its minimum size.</li> <li>Children's <code>ass::Margin</code></li> <li>Container's <code>ass::Padding</code></li> <li>Container's <code>ass::LayoutSpacing</code></li> <li>Other constraints such as <code>ass::FixedSize</code></li> </ul> </li> <li>After minimum sizes of children are calculated, layout manager queries their expanding ratios, and gives such   views a share of free space if available. Unlike minimum size, Expanding ratio does not depend on children's   Expanding ratios.</li> </ul>"},{"location":"layout-managers/#special-cases","title":"Special cases","text":"<ul> <li>AScrollArea: requires special handling for viewport positioning and size compensation</li> <li>AForEachUI: manages view inflation/deflation based on visibility</li> <li>Performance Optimizations: Views outside viewport may be left unupdated to improve performance</li> </ul>"},{"location":"layout-managers/#related-pages","title":"Related Pages","text":"<ul> <li> <p>ALayout</p> <p>Base class for all layout managers.</p> </li> <li> <p>AStackedLayout</p> <p>Places views in a stack (along z axis).</p> </li> <li> <p>AHorizontalLayout</p> <p>Places views in a row.</p> </li> <li> <p>AAbsoluteLayout</p> <p>Absolute positioning layout. Allows to explicitly set your own coordinates.</p> </li> <li> <p>AWordWrappingLayout</p> <p>Imitates behaviour of word wrapping, but uses views instead words</p> </li> <li> <p>AGridLayout</p> <p>Grid layout with fixed-size cells.</p> </li> <li> <p>AVerticalLayout</p> <p>Places views in a column.</p> </li> <li> <p>AAdvancedGridLayout</p> <p>Grid layout. Unlike AGridLayout, cells may have different sizes.</p> </li> </ul>"},{"location":"linux/","title":"Linux (-based desktop OSes)","text":"<p>Note</p> <p>AUI's codebase and documentation refer to the family of operating systems based on the Linux kernel with Freedesktop technology stack, which (mostly) excludes Android (operating system).</p> <p>Linux is a family of open-source operating systems based on the Linux kernel. It comes in various distributions (distros) that include software and libraries from third parties, with the most popular ones being Debian, Fedora, Ubuntu, and others. There are thousands of distros, which can be commercial or free.</p> <p>When developing an app for Linux, it's essential to consider the differences in core components of each Linux distro, including initialization systems, windowing systems, desktop environments, distribution methods and variable quality hardware drivers. Additionally, due to extensive customizability options and low number of actual Linux desktop users  this platform is often left unsupported by software. And, even in such case, users of your application can use compatibility layers such as WINE to launch your application under Linux.</p>"},{"location":"linux/#key-considerations","title":"Key considerations","text":"<ul> <li>Linux OS comes in form of a distro, most notable are:<ul> <li>Ubuntu</li> <li>Debian</li> <li>Fedora</li> <li>Arch</li> <li>Linux Mint</li> <li>Steam OS</li> </ul> </li> <li>Different display servers:<ul> <li>X11 (legacy) - supported natively by AUI</li> <li>Wayland (newer) - despite being unsupported by AUI natively, AUI applications still can run on Wayland through   compatibility layer, XWayland</li> </ul> </li> <li>Different distribution methods:<ul> <li>DEB (Debian+Ubuntu and flavors)</li> <li>RPM (Fedora+RHEL+SUSE and flavors)</li> <li>Snap (Ubuntu)</li> <li>Flatpak (all distros)</li> <li>AppImage (all distros)</li> </ul> </li> <li>Recent innovation but growing in popularity - immutable distros, featuring atomic updates and stable secured core   components by making them readonly. Hence, traditional distribution methods that require root access to user's   machine (such as DEB and RPM) are not applicable (with some exceptions).</li> <li>Extensive customizability options</li> <li>Different desktop environment, most notable are:<ul> <li>GNOME (GTK-based)</li> <li>KDE (Qt-based)</li> </ul> </li> <li>Some configurations might use macOS (operating system) style global menu:<ul> <li>KDE with global menu widget</li> <li>Ubuntu Unity</li> </ul> </li> <li>There are distros designed for smartphones but they're considered unusable at the moment</li> </ul>"},{"location":"linux/#wayland-support-status","title":"Wayland support status","text":"<p>AUI currently relies on X11 as its primary windowing system on Linux. As modern Linux distributions like Ubuntu and Fedora move away from X11, the application runs through the Xwayland compatibility layer.</p> <p>AUI includes experimental Wayland support implemented through GTK. This implementation appears native on GNOME desktop environments, while other desktop environments display a window with server-side decorations.</p> <p>Rather than directly linking to libraries, AUI uses a dynamic loading approach. This dynamic loading strategy using <code>dlopen</code> ensures broad compatibility while enabling a smooth transition toward modern windowing systems.</p> <p>To force AUI to use Wayland-friendly backends, use the following snippet inside your <code>AUI_ENTRY</code>:</p> <pre><code>AUI_ENTRY {\n  APlatformAbstractionOptions::set({\n    .initializationOrder = {\n      APlatformAbstractionOptions::Adwaita1{},\n      APlatformAbstractionOptions::Gtk4{},\n      APlatformAbstractionOptions::X11{},\n    },\n  });\n  ...\n  return 0;\n}\n</code></pre>"},{"location":"linux/#aui-implementation-specifics","title":"AUI implementation specifics","text":""},{"location":"macos/","title":"macOS (operating system)","text":"<p>macOS is a series of proprietary operating systems developed by Apple for their own hardware. It's designed exclusively for the Apple ecosystem, providing users with a powerful and user-friendly platform to operate their devices.</p> <p>Early Access Feature</p> <p>At the moment, support of macOS in AUI Framework is in early stage and lacks a lot of features.</p> <p>macOS shares its XNU kernel and codebase with iOS (operating system).</p> <p>Due to closed nature of Apple platforms, a single macOS machine is considered as the only option for AUI/application development for all supported platforms at once: - macOS - natively (obviously) - iOS - natively (via Xcode) - Android - natively (via Android Studio) - Windows - via VM - Linux - via VM - Emscripten (WebAssembly) - natively</p>"},{"location":"macos/#key-considerations","title":"Key considerations","text":"<ul> <li>You'd want to support both architectures - <code>x86_64</code> and Apple Silicon <code>arm64</code> by producing universal binaries</li> <li>Application menu is located in system's top bar instead of being inside the window</li> <li>macOS hardware offers high density displays (marketing name: Retina), so you need to use density-independent dimension   units such as _dp</li> <li>Apple laptops include high quality touchpads with high resolution scroll and possibility for multitouch gestures</li> </ul>"},{"location":"macos/#aui-implementation-specifics","title":"AUI implementation specifics","text":""},{"location":"macros/","title":"Macros","text":""},{"location":"macros/#writing-platform-dependent-code","title":"Writing platform dependent code","text":"<p>AUI provides a set of <code>AUI_PLATFORM_*</code> and <code>AUI_COMPILER_*</code> definitions for platform and compiler checking to use in both CMake and C++.</p>"},{"location":"macros/#platform-checks","title":"Platform checks","text":"Platform C++ CMake Platform specific dir(s)         [Windows (operating system)](windows.md)       <pre><code> #if AUI_PLATFORM_WIN\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_PLATFORM_WIN)\n   # ...\n endif()\n</code></pre>         src/Platform/win32        src/platform/win32               [Linux (-based desktop OSes)](linux.md)       <pre><code> #if AUI_PLATFORM_LINUX\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_PLATFORM_LINUX)\n   # ...\n endif()\n</code></pre>         src/Platform/linux        src/platform/linux         [macOS (operating system)](macos.md)       <pre><code> #if AUI_PLATFORM_MACOS\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_PLATFORM_MACOS)\n   # ...\n endif()\n</code></pre>         src/Platform/macos        src/platform/macos         [Android (operating system)](android.md)       <pre><code> #if AUI_PLATFORM_ANDROID\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_PLATFORM_ANDROID)\n   # ...\n endif()\n</code></pre>         src/Platform/android        src/platform/android         [iOS (operating system)](ios.md) (both iPhone and iPad)       <pre><code> #if AUI_PLATFORM_IOS\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_PLATFORM_IOS)\n   # ...\n endif()\n</code></pre>         src/Platform/ios        src/platform/ios         Apple([macOS](macos.md), [iOS](ios.md))       <pre><code> #if AUI_PLATFORM_APPLE\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_PLATFORM_APPLE)\n   # ...\n endif()\n</code></pre>         src/Platform/apple        src/platform/apple               Unix([Linux](linux.md), [Android](android.md), [macOS](macos.md), [iOS](ios.md))       <pre><code> #if AUI_PLATFORM_UNIX\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_PLATFORM_UNIX)\n   # ...\n endif()\n</code></pre>         src/Platform/unix        src/platform/unix               [Emscripten (WebAssembly)](emscripten.md)       <pre><code> #if AUI_PLATFORM_EMSCRIPTEN\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_PLATFORM_EMSCRIPTEN)\n   # ...\n endif()\n</code></pre>         src/Platform/emscripten        src/platform/emscripten"},{"location":"macros/#platform-specific-sources","title":"Platform specific sources","text":"<p>With AUI, the platform dependent code can be placed in <code>src/Platform/&lt;PLATFORM_NAME&gt;</code> or <code>src/platform/&lt;PLATFORM_NAME&gt;</code> dirs, where <code>&lt;PLATFORM_NAME&gt;</code> is one of the supported platforms (see the table above).</p> <p>Note</p> <p>Both cases (Platform and platform) were added to honor projects with various directory naming agreements.</p>"},{"location":"macros/#compiler-checks","title":"Compiler checks","text":"Compiler C++ CMake         MSVC       <pre><code> #if AUI_COMPILER_MSVC\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_COMPILER_MSVC)\n   # ...\n endif()\n</code></pre>         GCC (including MinGW)       <pre><code> #if AUI_COMPILER_GCC\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_COMPILER_GCC)\n   # ...\n endif()\n</code></pre>         CLANG       <pre><code> #if AUI_COMPILER_CLANG\n   // ...\n #endif\n</code></pre> <pre><code> if(AUI_COMPILER_CLANG)\n   # ...\n endif()\n</code></pre>"},{"location":"macros/#other","title":"Other","text":"<p><code>AUI_MODULE_NAME</code></p> <p>Target name exposed by aui_module and aui_executable.</p> <p><code>AUI_CMAKE_PROJECT_VERSION</code></p> <p><code>${CMAKE_PROJECT_VERSION}</code> exposed by aui_module and aui_executable.</p> <p><code>CMAKE_PROJECT_VERSION</code> is typically defined by project  CMake command:</p> <pre><code>project(test_project VERSION 2.2.8)\n</code></pre> <p><code>API_\\&lt;module name\\&gt;</code></p> <p><code>dllexport</code> (on Windows) or <code>visibility</code> (on other platforms) policy for the symbol.</p> <pre><code>class API_AUI_VIEWS AView ... { // defined in aui.views module\n  ...\n};\n</code></pre> <p><code>AJSON_FIELDS</code></p> <p>Json fields definition.</p> <p><code>AJSON_FIELDS_ENTRY</code></p> <p>Json entry of the same C++ and JSON field name.</p> <p><code>AUI_ASSERT</code></p> <p>Asserts that the passed condition evaluates to true.</p> <p><code>AUI_ASSERTX</code></p> <p>Asserts that the passed condition evaluates to true. Adds extra message string.</p> <p><code>AUI_ASSERT_NO_CONDITION</code></p> <p>Always triggers assertion fail.</p> <p><code>AUI_ASSERT_UI_THREAD_ONLY</code></p> <p>Asserts that the macro invocation has been performed in the UI thread.</p> <p><code>AUI_ASSERT_WORKER_THREAD_ONLY</code></p> <p>Asserts that the macro invocation has not been performed in the UI thread.</p> <p><code>AUI_BREAKPOINT</code></p> <p>Stops program execution in attached debugger as if a breakpoint were set.</p> <p><code>AUI_DECLARATIVE_FOR</code></p> <p>ranged-for-loop style wrapped for AForEachUI.</p> <p><code>AUI_DEFER</code></p> <p>Defers execution of the next block to the end of current block (RAII scope).</p> <p><code>AUI_DO_ONCE</code></p> <p>Executes following function call or {} block once per program execution</p> <p><code>AUI_EMIT_FOREIGN</code></p> <p>emits the specified signal in context of specified object.</p> <p><code>AUI_EMIT_FOREIGN_SIGNAL</code></p> <p>Emits a signal of a foreign object.</p> <p><code>AUI_ENTRY</code></p> <p>Application entry point.</p> <p><code>AUI_ENUM_FLAG</code></p> <p>Make a bitfield-style enum class.</p> <p><code>AUI_ENUM_VALUES</code></p> <p>Defines all enum values for AEnumerate.</p> <p><code>AUI_JNI_CLASS</code></p> <p>Defines getClassName and other useful methods required for Java class definition.</p> <p><code>AUI_JNI_METHOD</code></p> <p>Defines nonstatic method C++ -&gt; Java.</p> <p><code>AUI_JNI_STATIC_METHOD</code></p> <p>Defines static method C++ -&gt; Java.</p> <p><code>AUI_LET</code></p> <p>Performs multiple operations on a single object without repeating its name (in place)        This function can be used as an operator on object.</p> <p><code>AUI_MARK_AS_USED</code></p> <p>Marks the variable as being used.</p> <p><code>AUI_NO_OPTIMIZE_OUT</code></p> <p>Forbids object from being optimized out by compiler.</p> <p><code>AUI_PERFORM_AS_MEMBER</code></p> <p>Performs multiple operations on a single object without repeating its name.</p> <p><code>AUI_PP_CAT</code></p> <p>Expands and concatenates the arguments. Constructed macros reevaluate.</p> <p><code>AUI_PP_COMMA</code></p> <p>Returns a comma. Given a variadic number of arguments.</p> <p><code>AUI_PP_COMMA_IF</code></p> <p>Returns comma if <code>_i != 0</code>. Requires <code>_i</code> to be between 0 and 15.</p> <p><code>AUI_PP_EMPTY</code></p> <p>Returns empty. Given a variadic number of arguments.</p> <p><code>AUI_PP_FOR_EACH</code></p> <p>Expands to _Macro(0, _Data, e1) _Macro(1, _Data, e2) ... _Macro(K -1, _Data, eK) as many of AUI_INTERNAL_NARG0 _Tuple.</p> <p><code>AUI_PP_GENERIC_IF</code></p> <p>Similar to AUI_PP_IF but takes _Then and _Else in parentheses.</p> <p><code>AUI_PP_HAS_COMMA</code></p> <p>Returns 1 if the expansion of arguments has an unprotected comma.Otherwise returns 0.</p> <p><code>AUI_PP_HEAD</code></p> <p>Returns the first argument.</p> <p><code>AUI_PP_IDENTITY</code></p> <p>Returns the only argument.</p> <p><code>AUI_PP_IF</code></p> <p>Evaluates to _Then if _Cond is 1 and _Else if _Cond is 0.</p> <p><code>AUI_PP_INC</code></p> <p>Increments the argument, requires the argument to be between 0 and 15.</p> <p><code>AUI_PP_IS_BEGIN_PARENS</code></p> <p>Expands to 1 if the first argument starts with something in parentheses, otherwise to 0.</p> <p><code>AUI_PP_IS_EMPTY</code></p> <p>If the arguments after expansion have no tokens, evaluates to <code>1</code>. Otherwise evaluates to <code>0</code>.</p> <p><code>AUI_PP_IS_ENCLOSED_PARENS</code></p> <p>Expands to 1 is there is only one argument and it is enclosed in parentheses.</p> <p><code>AUI_PP_NARG</code></p> <p>Evaluates to the number of arguments after expansion.</p> <p><code>AUI_PP_NARG0</code></p> <p>Evaluates to the number of arguments after expansion. Identifies 'empty' as 0.</p> <p><code>AUI_PP_REMOVE_PARENS</code></p> <p>Remove the parens, requires AUI_PP_IS_ENCLOSED_PARENS(args) =&gt; 1.</p> <p><code>AUI_PP_REPEAT</code></p> <p>Expands to _Macro(0, _Data, ) _Macro(1, _Data, ) ... _Macro(K - 1, _Data, )</p> <p><code>AUI_PP_STRINGIZE</code></p> <p>Expands and stringifies the only argument.</p> <p><code>AUI_PP_TAIL</code></p> <p>Returns the tail. A variadic list of all arguments minus the first</p> <p><code>AUI_PP_VARIADIC_CALL</code></p> <p>Calls CAT(_Macro, NARG(VA_ARGS))(VA_ARGS)</p> <p><code>AUI_PTR_ALIAS</code></p> <p>Constructs an alias shared_ptr.</p> <p><code>AUI_REACT</code></p> <p>Explicitly denotes a reactive expression.</p> <p><code>AUI_SLOT</code></p> <p>Passes some variable and type of the variable separated by comma. It's convenient to use with the connect        function (see examples).</p> <p><code>AUI_THREADPOOL</code></p> <p>Executes following {} block asynchronously in the global thread pool. Unlike AUI_THREADPOOL_X, does now allow to set lambda's capture. Lambda's capture is <code>[=]</code>.</p> <p><code>AUI_THREADPOOL_X</code></p> <p>Executes following {} block asynchronously in the global thread pool. Unlike AUI_THREADPOOL, allows to set lambda's capture but you should always specify lambda's capture.</p> <p><code>AUI_UI_THREAD</code></p> <p>Executes lambda on main thread.</p> <p><code>AUI_UI_THREAD_X</code></p> <p>Executes lambda on main thread. Allows to determine lambda's capture.</p> <p><code>AUI_WITH_STYLE</code></p> <p>Allows to define a style to the view right in place.</p> <p><code>emit</code></p> <p>emits the specified signal in context of <code>this</code> object.</p> <p><code>me</code></p> <p>Passes the current class and type of the current class separated by comma. It's convenient to use with the        connect function:</p> <p><code>signals</code></p> <p>A signal declaration.</p>"},{"location":"me/","title":"me","text":"<p>Passes the current class and type of the current class separated by comma. It's convenient to use with the        connect function:</p> Header:<code>#include &lt;AUI/Util/kAUI.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"me/#definition","title":"Definition","text":"<pre><code>#define me this, &amp;std::remove_reference_t&lt;decltype(*this)&gt;\n</code></pre>"},{"location":"me/#detailed-description","title":"Detailed Description","text":"without with <pre><code>connect(clicked, this, &amp;MyObject::handleClicked);\n</code></pre> <pre><code>connect(clicked, me::handleClicked);\n</code></pre>"},{"location":"me/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>          },\n        });\n        load();\n\n        connect(mNotes.changed, me::markDirty);\n\n        setContents(Vertical {\n          ASplitter::Horizontal()\n                  .withItems({\n                    Vertical {\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>                  if (editor != nullptr) {\n                      connect(selectedContact-&gt;displayName.changed, editor, [this] {\n                          *mContacts.writeScope() |= CONTACTS_SORT;\n                      });\n                      connect(editor-&gt;deleteAction, me::deleteCurrentContact);\n                  }\n                  return editor;\n              }) AUI_WITH_STYLE { Expanding(), MinSize(300_dp), BackgroundSolid { AColor::WHITE } },\n            } AUI_WITH_STYLE {\n              Padding(0),\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>              }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n          Horizontal {\n            Button { Label { \"Create\" }, {me::createClicked} } &amp; mCreateEnabled &gt; &amp;AView::setEnabled,\n            Button { Label { \"Update\" }, {me::updateClicked} } &amp; mUpdateEnabled &gt; &amp;AView::setEnabled,\n            Button { Label { \"Delete\" }, {me::deleteClicked} } &amp; mDeleteEnabled &gt; &amp;AView::setEnabled,\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n    }\n</code></pre></p> examples/app/game_of_life/src/main.cpp <p>Game of Life - Game of Life implementation that uses advanced large dynamic data rendering techniques such as ITexture, AImage to be GPU friendly. The computation is performed in AThreadPool. <pre><code>        for (auto s : { &amp;mStorage, &amp;mNextPopulation }) {\n            s-&gt;resize(size.x * size.y);\n        }\n\n        connect(mTimer-&gt;fired, me::frame);\n        connect(isRunning.changed, AUI_SLOT(mTimer)::setRunning);\n    }\n\n    void frame() {\n        mFrame = AThreadPool::global() * [&amp;] {\n</code></pre></p> examples/7guis/circle_drawer/src/main.cpp <p>7GUIs Circle Drawer - Undo, redo, dialog control. <pre><code>          BackgroundSolid(AColor::WHITE),\n          Border(1_px, AColor::GRAY),\n          AOverflow::HIDDEN_FROM_THIS,\n        });\n        connect(mState-&gt;circles.changed, me::redraw);\n        connect(mHoveredCircle.changed, me::redraw);\n    }\n\n    void render(ARenderContext ctx) override {\n        AView::render(ctx);\n</code></pre></p> examples/app/minesweeper/src/NewGameWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n</code></pre></p> examples/7guis/timer/src/main.cpp <p>7GUIs Timer - Timer example. <pre><code>                  },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            _new&lt;AButton&gt;(\"Reset Timer\") AUI_WITH_STYLE {\n                  Expanding { 1, 0 },\n                } AUI_LET { connect(it-&gt;clicked, me::reset); },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n\n        connect(mTimer-&gt;fired, me::update);\n        mTimer-&gt;start();\n</code></pre></p> examples/app/fractal/src/JumpToCoordsWindow.cpp <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>                } catch (...) {\n                    AMessageBox::show(this, \"Error\", \"Please check your values are valid numbers.\");\n                }\n            }) AUI_LET { it-&gt;setDefault(); },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    pack();\n}\n</code></pre></p> examples/7guis/cells/src/main.cpp <p>7GUIs Cells - Spreadsheet processor (Excel). <pre><code>                      [](const AString&amp; v) -&gt; _&lt;AView&gt; { return Label { \"{}\"_format(v) }; },\n                      [](const formula::Range&amp; v) -&gt; _&lt;AView&gt; { return Label { \"#RANGE?\" }; },\n                    },\n                    v));\n            connect(getViews().first()-&gt;clicked, me::inflateEditor);\n        });\n    }\n\n    void inflateEditor() {\n        mState-&gt;currentExpression = mCell.expression;\n</code></pre></p> examples/7guis/flight_booker/src/main.cpp <p>7GUIs Flight Booker - Flight Booker. <pre><code>                },\n            dateTextField(mDepartureDate),\n            dateTextField(mReturnDate) AUI_LET { connect(mIsReturnFlight, AUI_SLOT(it)::setEnabled); },\n            _new&lt;AButton&gt;(\"Book\") AUI_LET {\n                    connect(it-&gt;clicked, me::book);\n                    connect(mIsValid, AUI_SLOT(it)::setEnabled);\n                },\n          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n        });\n    }\n</code></pre></p>"},{"location":"me/#examples_1","title":"Examples","text":"examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass. <pre><code>MinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>          }),\n          Centered {\n            Horizontal::Expanding {\n              SpacerExpanding(),\n              Button { Label { mEditorMode ? \"Discard\" : \"Delete\" }, {me::drop} },\n              Button { Label { mEditorMode ? \"Done\" : \"Edit\" }, {me::toggleEdit} },\n            } AUI_WITH_STYLE { MaxSize(EDITOR_CONTENT_MAX_WIDTH, {}), Padding(4_dp), LayoutSpacing { 4_dp } },\n          },\n        });\n    });\n</code></pre></p>"},{"location":"minesweeper-game/","title":"Minesweeper Game","text":"<p>Example's page</p> <p>This page describes an example listed in app category.</p> <p>Minesweeper game implementation driven by ass.</p> <p></p>"},{"location":"minesweeper-game/#game-logic","title":"Game Logic","text":"<p>The entire game logic is located in MinesweeperWindow.cpp.</p>"},{"location":"minesweeper-game/#initialization","title":"Initialization","text":"<p>The game starts with <code>beginGame</code> function. <code>beginGame</code> Initializes a new Minesweeper game with specified dimensions and bomb count. Clears any previous game state, sets up the grid layout, initializes cell views, connects click handlers for opening cells and flagging, and finally packs UI elements to be displayed.</p> <ul> <li>Generates a grid with <code>AGridLayout</code></li> <li>Dynamically creates <code>CellView</code>s based on game data</li> <li>Handles user events (left clicks and right clicks)</li> </ul> <pre><code>void MinesweeperWindow::beginGame(int columns, int rows, int bombs) {\n    mOpenedCells = 0;\n    mBombs = bombs;\n    mFieldColumns = columns;\n    mFieldRows = rows;\n    mReveal = false;\n    mBombsPlanted = false;\n    mGrid-&gt;setLayout(std::make_unique&lt;AGridLayout&gt;(columns, rows));\n    mField.clear();\n    mField.resize(columns * rows);\n\n    for (int i = 0; i &lt; columns * rows; ++i) {\n        int x = i % columns;\n        int y = i / columns;\n        auto cell = _new&lt;CellView&gt;(fieldAt(x, y));\n\n        setupEventHandlers(x, y, cell);\n        mGrid-&gt;addView(cell);\n    }\n\n    pack();\n}\n</code></pre>"},{"location":"minesweeper-game/#event-handling","title":"Event handling","text":"<p>As was mentioned, the game handles events by setting signal handlers on <code>CellView</code>. This is done inside <code>setupEventHandlers</code>. Here's a little breakdown:</p>"},{"location":"minesweeper-game/#toggle-flag-right-click","title":"Toggle flag (right click)","text":"<p>In a minesweeper game, right click toggles the flag. First, we check that game is not finished (<code>mReveal</code>), then we check if cell is open. Finally, we toggle the flag:</p> <pre><code>connect(cell-&gt;clickedRight, this, [&amp;, x, y]() {\n    if (mReveal) {\n        return;\n    }\n    auto&amp; c = fieldAt(x, y);\n    if (!(c &amp; FieldCell::OPEN)) {\n        c ^= FieldCell::HAS_FLAG;\n        updateCellViewStyle(x, y);\n    }\n});\n</code></pre> <p>As you can see, game data is represented by <code>FieldCell</code> enum:</p> <pre><code>AUI_ENUM_FLAG(FieldCell) {\n    EMPTY = 0,\n    HAS_BOMB = 1,\n    OPEN = 2,\n    HAS_FLAG = 4,\n    RED_BG = 8,\n    DONT_PLANT_BOMB_HERE = 16,\n};\n</code></pre> <p><code>FieldCell</code> is just a bitfield implemented thanks to AUI_ENUM_FLAG.</p>"},{"location":"minesweeper-game/#open-cell-left-click","title":"Open cell (left click)","text":"<p>Left click delegates cell opening logic to <code>openCell</code> which contain game-specific logic.</p> <pre><code>connect(cell-&gt;clicked, this, [&amp;, x, y]() {\n    if (mReveal) {\n        return;\n    }\n    openCell(x, y, true);\n});\n</code></pre>"},{"location":"minesweeper-game/#cell-style","title":"Cell style","text":"<p>In response to user's actions, the game updates its internal state. To visualize the state, <code>updateCellViewStyle</code> function is called. This method updates the style of a cell at coordinates (x, y) based on its state or any other conditions (e.g., game over, win/lose states). It triggers an event to let the framework know that custom styles need to be re-evaluated and applied accordingly.</p> <p>In game style sheets, a custom selector tied to <code>CellView</code> is used to display various cell states:</p> <pre><code>template&lt;FieldCell fieldCell&gt;\nstruct CellSelector: IAssSubSelector {\npublic:\n    bool isPossiblyApplicable(AView* view) override {\n        return dynamic_cast&lt;CellView*&gt;(view) != nullptr;\n    }\n\n    bool isStateApplicable(AView* view) override {\n        if (auto c = dynamic_cast&lt;CellView*&gt;(view)) {\n            return (c-&gt;fieldCell() &amp; fieldCell) == fieldCell;\n        }\n        return false;\n    }\n\n    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n</code></pre> <p>Such selector is used in style sheets accordingly:</p> <pre><code>{\n  CellSelector&lt;FieldCell::OPEN&gt;(),\n  Border { 1_px, 0xffffff_rgb },\n  BackgroundSolid { 0xeeeeee_rgb },\n},\n{\n  CellSelector&lt;FieldCell::HAS_FLAG&gt;(),\n  BackgroundImage { \":minesweeper/flag.svg\" },\n},\n</code></pre> <p>Also, for reveal game state (on win/lose) there's an additional selector:</p> <pre><code>struct RevealSelector : IAssSubSelector {\npublic:\n    bool isPossiblyApplicable(AView* view) override {\n        return dynamic_cast&lt;MinesweeperWindow*&gt;(view) != nullptr;\n    }\n\n    bool isStateApplicable(AView* view) override {\n        if (auto c = dynamic_cast&lt;MinesweeperWindow*&gt;(view)) {\n            return c-&gt;isReveal();\n        }\n        return false;\n    }\n\n    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n</code></pre> <p><code>RevealSelector</code> and <code>CellSelector</code> are used together to show game results:</p> <p></p> <pre><code>{\n  RevealSelector {} &gt;&gt; CellSelector&lt;FieldCell::HAS_BOMB&gt;(),\n  BackgroundImage { \":minesweeper/bomb.svg\" },\n},\n{\n  RevealSelector {} &gt;&gt; CellSelector&lt;FieldCell::HAS_FLAG&gt;(),\n  BackgroundImage { \":minesweeper/no_bomb_flag.svg\" },\n},\n{\n  RevealSelector {} &gt;&gt; CellSelector&lt;FieldCell::HAS_FLAG | FieldCell::HAS_BOMB&gt;(),\n  BackgroundImage { \":minesweeper/bomb_flag.svg\" },\n},\n</code></pre>"},{"location":"minesweeper-game/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"minesweeper-game/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>if (NOT (AUI_PLATFORM_WIN OR AUI_PLATFORM_LINUX OR AUI_PLATFORM_MACOS))\n    return()\nendif ()\n\naui_executable(aui.example.minesweeper)\naui_compile_assets(aui.example.minesweeper)\n\naui_link(aui.example.minesweeper PRIVATE aui::core aui::views)\n</code></pre>"},{"location":"minesweeper-game/#srcnewgamewindowcpp","title":"src/NewGameWindow.cpp","text":"<pre><code>#include \"NewGameWindow.h\"\n\n#include \"AUI/Layout/AGridLayout.h\"\n#include \"AUI/Layout/AHorizontalLayout.h\"\n#include \"AUI/Layout/AVerticalLayout.h\"\n#include \"AUI/View/AButton.h\"\n#include \"AUI/View/ALabel.h\"\n#include \"AUI/View/ANumberPicker.h\"\n#include \"AUI/Util/UIBuildingHelpers.h\"\n\nusing namespace declarative;\n\nint gWidth = 10;\nint gHeight = 10;\nint gMines = 10;\n\nvoid NewGameWindow::updateMinesMax() { mMines-&gt;setMax(mWidth-&gt;getValue() * mHeight-&gt;getValue() - 25); }\n\nvoid NewGameWindow::updateDifficultyLabel() {\n    mMines-&gt;setMax(mWidth-&gt;getValue() * mHeight-&gt;getValue() * 3 / 4);\n    int difficulty = mWidth-&gt;getValue() * mHeight-&gt;getValue() / glm::max(mMines-&gt;getValue(), int64_t(1));\n\n    AString text = \"Difficulty: \";\n    switch (difficulty) {\n        default:\n        case 0:\n        case 1:\n            text += \"very low\";\n            break;\n        case 2:\n        case 3:\n            text += \"high\";\n            break;\n        case 4:\n        case 5:\n            text += \"medium\";\n            break;\n        case 6:\n        case 7:\n        case 8:\n            text += \"low\";\n            break;\n    }\n    mDifficultyLabel-&gt;setText(text);\n}\n\nNewGameWindow::NewGameWindow(MinesweeperWindow* minesweeper)\n  : AWindow(\"New game\", 100, 100, minesweeper), mMinesweeper(minesweeper) {\n    setWindowStyle(WindowStyle::MODAL);\n\n    setLayout(std::make_unique&lt;AVerticalLayout&gt;());\n    setContents(Vertical {\n      _form({\n        {\n          \"Cells by width:\"_as,\n          mWidth = _new&lt;ANumberPicker&gt;() AUI_LET {\n                       it-&gt;setMin(8);\n                       it-&gt;setMax(25);\n                   },\n        },\n        {\n          \"Cells by height:\"_as,\n          mHeight =\n              _new&lt;ANumberPicker&gt;() AUI_LET {\n                  it-&gt;setMin(8);\n                  it-&gt;setMax(25);\n              },\n        },\n        {\n          \"Mines count:\"_as,\n          mMines = _new&lt;ANumberPicker&gt;() AUI_LET { it-&gt;setMin(8); },\n        },\n      }) AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n      mDifficultyLabel = _new&lt;ALabel&gt;(),\n      Horizontal {\n        _new&lt;ASpacerExpanding&gt;(),\n        _new&lt;AButton&gt;(\"Start game\") AUI_LET {\n                it-&gt;setDefault();\n                connect(it-&gt;clicked, me::begin);\n            },\n        _new&lt;AButton&gt;(\"Cancel\").connect(&amp;AButton::clicked, me::close),\n      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    mWidth-&gt;setValue(gWidth);\n    mHeight-&gt;setValue(gHeight);\n\n    updateMinesMax();\n\n    mMines-&gt;setValue(gMines);\n\n    updateDifficultyLabel();\n\n    connect(mWidth-&gt;valueChanging, me::updateMinesMax);\n    connect(mWidth-&gt;valueChanging, me::updateDifficultyLabel);\n    connect(mHeight-&gt;valueChanging, me::updateMinesMax);\n    connect(mHeight-&gt;valueChanging, me::updateDifficultyLabel);\n    connect(mMines-&gt;valueChanging, me::updateDifficultyLabel);\n\n    pack();\n}\n\nvoid NewGameWindow::begin() {\n    close();\n    mMinesweeper-&gt;beginGame(gWidth = mWidth-&gt;getValue(), gHeight = mHeight-&gt;getValue(), gMines = mMines-&gt;getValue());\n}\n</code></pre>"},{"location":"minesweeper-game/#srcminesweeperwindowcpp","title":"src/MinesweeperWindow.cpp","text":"<pre><code>#include \"MinesweeperWindow.h\"\n\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include \"CellView.h\"\n#include \"NewGameWindow.h\"\n#include \"AUI/Platform/AMessageBox.h\"\n#include \"AUI/Util/ARandom.h\"\n\nusing namespace declarative;\n\nMinesweeperWindow::MinesweeperWindow() : AWindow(\"Minesweeper\", 100_dp, 100_dp) {\n    setContents(Vertical {\n      Horizontal {\n        Centered::Expanding {\n          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    beginGame(10, 10, 20);\n}\n\nvoid MinesweeperWindow::openCell(int x, int y, bool doGameLoseIfBomb) {\n    if (mReveal) {\n        // beginGame(16, 10);\n        return;\n    }\n    FieldCell&amp; c = fieldAt(x, y);\n\n    if (!mBombsPlanted) {\n        for (int i = -1; i &lt;= 1; ++i) {\n            for (int j = -1; j &lt;= 1; ++j) {\n                if (isValidCell(x + i, y + j))\n                    fieldAt(x + i, y + j) |= FieldCell::DONT_PLANT_BOMB_HERE;\n            }\n        }\n\n        mBombsPlanted = true;\n\n        ARandom r;\n        for (int i = 0; i &lt; mBombs;) {\n            int x = r.nextInt() % mFieldColumns;\n            int y = r.nextInt() % mFieldRows;\n\n            if (fieldAt(x, y) == FieldCell::EMPTY) {\n                fieldAt(x, y) |= FieldCell::HAS_BOMB;\n                ++i;\n            }\n        }\n    } else if (bool(c &amp; (FieldCell::OPEN | FieldCell::HAS_FLAG))) {\n        return;\n    }\n\n    if (bool(c &amp; FieldCell::HAS_BOMB)) {\n        if (doGameLoseIfBomb) {\n            c |= FieldCell::RED_BG;\n            mReveal = true;\n            emit customCssPropertyChanged();\n            redraw();\n            AMessageBox::show(this, \"You lost!\", \"You lost! Ahahahhaa!\");\n        }\n        return;\n    }\n    c |= FieldCell::OPEN;\n    mOpenedCells += 1;\n\n    int bombCount = countBombsAround(x, y);\n    c |= FieldCell(bombCount &lt;&lt; 16);\n    updateCellViewStyle(x, y);\n\n    if (mOpenedCells + mBombs == mFieldRows * mFieldColumns) {\n        mReveal = true;\n        emit customCssPropertyChanged();\n        redraw();\n        AMessageBox::show(this, \"You won!\", \"Respect +\");\n    }\n\n    if (bombCount == 0) {\n        for (int i = -1; i &lt;= 1; ++i) {\n            for (int j = -1; j &lt;= 1; ++j) {\n                if (!(i == 0 &amp;&amp; j == 0)) {\n                    int cellX = x + i;\n                    int cellY = y + j;\n                    if (isValidCell(cellX, cellY)) {\n                        openCell(cellX, cellY, false);\n                    }\n                }\n            }\n        }\n    }\n}\nvoid MinesweeperWindow::updateCellViewStyle(int x, int y) const {\n    AUI_EMIT_FOREIGN(mGrid-&gt;getViews()[y * mFieldColumns + x], customCssPropertyChanged);\n}\n\nint MinesweeperWindow::countBombsAround(int x, int y) {\n    int count = 0;\n    for (int i = -1; i &lt;= 1; ++i) {\n        for (int j = -1; j &lt;= 1; ++j) {\n            if (!(i == 0 &amp;&amp; j == 0)) {\n                int cellX = x + i;\n                int cellY = y + j;\n\n                if (isValidCell(cellX, cellY)) {\n                    if (bool(fieldAt(cellX, cellY) &amp; FieldCell::HAS_BOMB)) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}\n\nvoid MinesweeperWindow::newGame() { _new&lt;NewGameWindow&gt;(this)-&gt;show(); }\n\n\n/// [beginGame]\nvoid MinesweeperWindow::beginGame(int columns, int rows, int bombs) {\n    mOpenedCells = 0;\n    mBombs = bombs;\n    mFieldColumns = columns;\n    mFieldRows = rows;\n    mReveal = false;\n    mBombsPlanted = false;\n    mGrid-&gt;setLayout(std::make_unique&lt;AGridLayout&gt;(columns, rows));\n    mField.clear();\n    mField.resize(columns * rows);\n\n    for (int i = 0; i &lt; columns * rows; ++i) {\n        int x = i % columns;\n        int y = i / columns;\n        auto cell = _new&lt;CellView&gt;(fieldAt(x, y));\n\n        setupEventHandlers(x, y, cell);\n        mGrid-&gt;addView(cell);\n    }\n\n    pack();\n}\n/// [beginGame]\n\nvoid MinesweeperWindow::setupEventHandlers(int x, int y, const _&lt;CellView&gt;&amp; cell) {\n    /// [clicked]\n    connect(cell-&gt;clicked, this, [&amp;, x, y]() {\n        if (mReveal) {\n            return;\n        }\n        openCell(x, y, true);\n    });\n    /// [clicked]\n\n    /// [clickedRight]\n    connect(cell-&gt;clickedRight, this, [&amp;, x, y]() {\n        if (mReveal) {\n            return;\n        }\n        auto&amp; c = fieldAt(x, y);\n        if (!(c &amp; FieldCell::OPEN)) {\n            c ^= FieldCell::HAS_FLAG;\n            updateCellViewStyle(x, y);\n        }\n    });\n    /// [clickedRight]\n\n}\n</code></pre>"},{"location":"minesweeper-game/#srcminesweeperwindowh","title":"src/MinesweeperWindow.h","text":"<pre><code>#pragma once\n\n#include \"FieldCell.h\"\n#include \"AUI/Platform/ACustomCaptionWindow.h\"\n#include \"CellView.h\"\n\nclass MinesweeperWindow : public AWindow {\npublic:\n    void beginGame(int columns, int rows, int bombs);\n    MinesweeperWindow();\n\n    [[nodiscard]]\n    bool isReveal() const { return mReveal; }\n\nprivate:\n    int mFieldColumns;\n    int mFieldRows;\n    bool mBombsPlanted = false;\n    int mBombs;\n    int mOpenedCells;\n\n    _&lt;AViewContainer&gt; mGrid;\n    AVector&lt;FieldCell&gt; mField;\n\n    void openCell(int x, int y, bool doGameLoseIfBomb);\n    int countBombsAround(int x, int y);\n    bool isValidCell(int x, int y) { return x &gt;= 0 &amp;&amp; x &lt; mFieldColumns &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; mFieldRows; }\n    FieldCell&amp; fieldAt(int x, int y) { return mField[mFieldColumns * y + x]; }\n\n    bool mReveal = false;\n\n    void newGame();\n\n    void updateCellViewStyle(int x, int y) const;\n    void setupEventHandlers(int x, int y, const _&lt;CellView&gt;&amp; cell);\n};\n</code></pre>"},{"location":"minesweeper-game/#srcnewgamewindowh","title":"src/NewGameWindow.h","text":"<pre><code>#pragma once\n#include \"MinesweeperWindow.h\"\n#include \"AUI/Platform/AWindow.h\"\n#include \"AUI/View/ANumberPicker.h\"\n#include \"AUI/View/ALabel.h\"\n\nclass NewGameWindow : public AWindow {\npublic:\n    NewGameWindow(MinesweeperWindow* minesweeper);\n\nprivate:\n    MinesweeperWindow* mMinesweeper;\n    _&lt;ANumberPicker&gt; mWidth;\n    _&lt;ANumberPicker&gt; mHeight;\n    _&lt;ANumberPicker&gt; mMines;\n    _&lt;ALabel&gt; mDifficultyLabel;\n\n    void updateMinesMax();\n    void updateDifficultyLabel();\n    void begin();\n\n};\n</code></pre>"},{"location":"minesweeper-game/#srcfieldcellh","title":"src/FieldCell.h","text":"<pre><code>#pragma once\n\n#include \"AUI/Reflect/AEnumerate.h\"\n\n/// [FieldCell]\nAUI_ENUM_FLAG(FieldCell) {\n    EMPTY = 0,\n    HAS_BOMB = 1,\n    OPEN = 2,\n    HAS_FLAG = 4,\n    RED_BG = 8,\n    DONT_PLANT_BOMB_HERE = 16,\n};\n/// [FieldCell]\n\nnamespace field_cell {\n    inline uint16_t getBombCountAround(FieldCell fc) {\n        return int(fc) &gt;&gt; 16;\n    }\n\n    inline void setBombCountAround(FieldCell&amp; fc, uint16_t count) {\n        reinterpret_cast&lt;std::underlying_type_t&lt;FieldCell&gt;&amp;&gt;(fc) &amp;= 0xffff;\n        reinterpret_cast&lt;std::underlying_type_t&lt;FieldCell&gt;&amp;&gt;(fc) |= int(count) &lt;&lt; 16;\n    }\n}\n</code></pre>"},{"location":"minesweeper-game/#srcstylecpp","title":"src/Style.cpp","text":"<pre><code>//\n// Created by alex2772 on 1/4/21.\n//\n\n#include &lt;AUI/View/AButton.h&gt;\n#include \"CellView.h\"\n#include \"MinesweeperWindow.h\"\n#include \"NewGameWindow.h\"\n#include &lt;AUI/ASS/ASS.h&gt;\n\nusing namespace ass;\n\n/// [CellSelector]\ntemplate&lt;FieldCell fieldCell&gt;\nstruct CellSelector: IAssSubSelector {\npublic:\n    bool isPossiblyApplicable(AView* view) override {\n        return dynamic_cast&lt;CellView*&gt;(view) != nullptr;\n    }\n\n    bool isStateApplicable(AView* view) override {\n        if (auto c = dynamic_cast&lt;CellView*&gt;(view)) {\n            return (c-&gt;fieldCell() &amp; fieldCell) == fieldCell;\n        }\n        return false;\n    }\n\n    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [CellSelector]\n\n\n/// [RevealSelector]\nstruct RevealSelector : IAssSubSelector {\npublic:\n    bool isPossiblyApplicable(AView* view) override {\n        return dynamic_cast&lt;MinesweeperWindow*&gt;(view) != nullptr;\n    }\n\n    bool isStateApplicable(AView* view) override {\n        if (auto c = dynamic_cast&lt;MinesweeperWindow*&gt;(view)) {\n            return c-&gt;isReveal();\n        }\n        return false;\n    }\n\n    void setupConnections(AView* view, const _&lt;AAssHelper&gt;&amp; helper) override {\n        IAssSubSelector::setupConnections(view, helper);\n        view-&gt;customCssPropertyChanged.clearAllOutgoingConnectionsWith(helper.get());\n        AObject::connect(view-&gt;customCssPropertyChanged, AUI_SLOT(helper)::onInvalidateStateAss);\n    }\n};\n/// [RevealSelector]\n\n\nstruct GlobalStyle {\n    GlobalStyle() {\n        AStylesheet::global().addRules({\n          {\n            t&lt;CellView&gt;(),\n            FixedSize { 26_dp },\n            BackgroundSolid { 0xdedede_rgb },\n            Border { 1_px, 0xeaeaea_rgb },\n          },\n          {\n            !RevealSelector{} &gt;&gt; t&lt;CellView&gt;::hover(),\n            BackgroundSolid { 0xfdfdfd_rgb },\n          },\n          /// [open]\n          {\n            CellSelector&lt;FieldCell::OPEN&gt;(),\n            Border { 1_px, 0xffffff_rgb },\n            BackgroundSolid { 0xeeeeee_rgb },\n          },\n          {\n            CellSelector&lt;FieldCell::HAS_FLAG&gt;(),\n            BackgroundImage { \":minesweeper/flag.svg\" },\n          },\n          /// [open]\n\n          // display mines for dead\n\n          /// [reveal]\n          {\n            RevealSelector {} &gt;&gt; CellSelector&lt;FieldCell::HAS_BOMB&gt;(),\n            BackgroundImage { \":minesweeper/bomb.svg\" },\n          },\n          {\n            RevealSelector {} &gt;&gt; CellSelector&lt;FieldCell::HAS_FLAG&gt;(),\n            BackgroundImage { \":minesweeper/no_bomb_flag.svg\" },\n          },\n          {\n            RevealSelector {} &gt;&gt; CellSelector&lt;FieldCell::HAS_FLAG | FieldCell::HAS_BOMB&gt;(),\n            BackgroundImage { \":minesweeper/bomb_flag.svg\" },\n          },\n          /// [reveal]\n          {\n            CellSelector&lt;FieldCell::RED_BG&gt;(),\n            BackgroundSolid { 0xff0000_rgb },\n            Border { nullptr },\n          },\n\n          // misc\n          {\n            class_of(\".frame\"),\n            Border { 1_dp, 0x444444_rgb },\n          },\n          { class_of(\".frame\") &gt; t&lt;AButton&gt;(), Margin { 4_dp } },\n          { t&lt;NewGameWindow&gt;(), Padding { 4_dp } },\n        });\n    }\n} s;\n</code></pre>"},{"location":"minesweeper-game/#srccellviewh","title":"src/CellView.h","text":"<pre><code>#pragma once\n#include \"FieldCell.h\"\n#include \"AUI/View/AView.h\"\n\nclass CellView : public AView {\npublic:\n    CellView(FieldCell&amp; cell);\n\n    void render(ARenderContext context) override;\n\n    [[nodiscard]]\n    FieldCell fieldCell() const { return mCell; }\n\nprivate:\n    FieldCell&amp; mCell;\n    FieldCell mCellValueCopy;\n\n};\n</code></pre>"},{"location":"minesweeper-game/#srccellviewcpp","title":"src/CellView.cpp","text":"<pre><code>#include \"CellView.h\"\n\n#include \"AUI/Render/IRenderer.h\"\n\nCellView::CellView(FieldCell&amp; cell) : mCell(cell), mCellValueCopy(cell) {\n    connect(clickedButton, this, [&amp;]() {\n        emit customCssPropertyChanged();\n    });\n}\n\nvoid CellView::render(ARenderContext context) {\n    if (mCell != mCellValueCopy) {\n        mCellValueCopy = mCell;\n    }\n    AView::render(context);\n\n    if (bool(mCell &amp; FieldCell::OPEN)) {\n        int count = field_cell::getBombCountAround(mCell);\n        if (count) {\n            AFontStyle fs;\n            fs.size = getHeight() * 6 / 7;\n            fs.align = ATextAlign::CENTER;\n            auto color = AColor::BLACK;\n\n            switch (count) {\n                case 1:\n                    color = 0x0000ffffu;\n                    break;\n                case 2:\n                    color = 0x008000ffu;\n                    break;\n                case 3:\n                    color = 0xff0000ffu;\n                    break;\n                case 4:\n                    color = 0x000080ffu;\n                    break;\n                case 5:\n                    color = 0x800000ffu;\n                    break;\n                case 6:\n                    color = 0x008080ffu;\n                    break;\n                case 7:\n                    color = 0x000000ffu;\n                    break;\n                case 8:\n                    color = 0x808080ffu;\n                    break;\n            }\n\n            context.render.setColor(color);\n            context.render.string({getWidth() / 3, (getHeight() - fs.size) / 2 + fs.getAscenderHeight()}, AString::number(count), fs);\n        }\n    }\n}\n</code></pre>"},{"location":"minesweeper-game/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"MinesweeperWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MinesweeperWindow&gt;()-&gt;show();\n\n    return 0;\n}\n</code></pre>"},{"location":"minimal-ui-template-with-assets/","title":"Minimal UI Template with Assets","text":"<p>Example's page</p> <p>This page describes an example listed in ui category.</p> <p>Minimal UI boilerplate template with AUI Assets.</p> <p></p>"},{"location":"minimal-ui-template-with-assets/#source-code","title":"Source Code","text":""},{"location":"minimal-ui-template-with-assets/#project-structure","title":"Project Structure","text":"<pre><code>graph TD\n    A[project_template_assets_ui] --&gt; B[CMakeLists.txt]\n    A --&gt; C[src/]\n    C --&gt; D[MainWindow.h]\n    C --&gt; E[MainWindow.cpp]\n    C --&gt; F[main.cpp]\n    A --&gt; G[assets/img/]\n    G --&gt; H[logo.svg]</code></pre>"},{"location":"minimal-ui-template-with-assets/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code># Standard routine\ncmake_minimum_required(VERSION 3.16)\nproject(project_template_assets_ui)\n\nset(AUI_VERSION v8.0.0-rc.8)\n\n# Use AUI.Boot\nfile(\n        DOWNLOAD\n        https://raw.githubusercontent.com/aui-framework/aui/${AUI_VERSION}/aui.boot.cmake\n        ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n\n# import AUI\nauib_import(aui https://github.com/aui-framework/aui\n        COMPONENTS core views\n        VERSION ${AUI_VERSION})\n\n\n# Create the executable. This function automatically links all sources from the src/ folder,\n# creates CMake target and places the resulting executable to bin/ folder.\naui_executable(${PROJECT_NAME})\n\n# Link required libs\naui_link(${PROJECT_NAME} PRIVATE aui::core aui::views)\n\naui_compile_assets(${PROJECT_NAME})\n</code></pre>"},{"location":"minimal-ui-template-with-assets/#srcmainwindowh","title":"src/MainWindow.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass MainWindow: public AWindow {\npublic:\n    MainWindow();\n};\n</code></pre>"},{"location":"minimal-ui-template-with-assets/#srcmainwindowcpp","title":"src/MainWindow.cpp","text":"<pre><code>#include \"MainWindow.h\"\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/ALabel.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/Platform/APlatform.h&gt;\n#include &lt;AUI/View/ADrawableView.h&gt;\n\nusing namespace declarative;\n\nMainWindow::MainWindow(): AWindow(\"Project template app\", 300_dp, 200_dp) {\n    setContents(\n        Centered{\n            Vertical{\n                Centered { Icon { \":img/logo.svg\" } AUI_WITH_STYLE { FixedSize(64_dp) } },\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n                _new&lt;AButton&gt;(\"Submit an issue\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui/issues/new\");\n                }),\n            }\n        }\n    );\n}\n</code></pre>"},{"location":"minimal-ui-template-with-assets/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"MainWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MainWindow&gt;()-&gt;show();\n    return 0;\n};\n</code></pre> <p>This example is located outside AUI's source tree. Checkout its repository.</p>"},{"location":"minimal-ui-template-xmake/","title":"Minimal UI Template XMake","text":"<p>Example's page</p> <p>This page describes an example listed in ui category.</p> <p>Minimal UI boilerplate template XMake.</p> <p></p>"},{"location":"minimal-ui-template-xmake/#source-code","title":"Source Code","text":""},{"location":"minimal-ui-template-xmake/#project-structure","title":"Project Structure","text":"<pre><code>graph TD\n    A[project_template_ui_xmake] --&gt; B[xmake.lua]\n    A --&gt; C[src/]\n    C --&gt; D[MainWindow.h]\n    C --&gt; E[MainWindow.cpp]\n    C --&gt; F[main.cpp]\n    A --&gt; G[.vscode/]\n    G --&gt; H[c_cpp_properties.json]</code></pre>"},{"location":"minimal-ui-template-xmake/#xmakelua","title":"xmake.lua","text":"<pre><code>-- Specify available build configurations\nadd_rules(\"mode.release\", \"mode.debug\")\n-- Specify compile commands output directory and LSP to analyze C++ code files and highlight IntelliSense\nadd_rules(\"plugin.compile_commands.autoupdate\", {outputdir = \".vscode\", lsp = \"clangd\"})\n\n-- Specify C++ standard to use, as AUI uses C++20 by default\nset_languages(\"c++20\")\n\n-- Download aui package to use for targets later\nadd_requires(\"aui\")\n-- Use shared GLEW to resolve LNK2019 errors\nadd_requireconfs(\"**.glew\", {override = true, configs = {shared = true}})\n\n-- Define our target executable to build\ntarget(\"aui-minimal-example\")\n    -- Add source code and headers to target\n    add_files(\"src/*.cpp\")\n    add_includedirs(\"src\")\n    -- Add AUI package to target while linking only required components\n    add_packages(\"aui\", {components = {\"core\", \"image\", \"views\", \"xml\"}})\n    -- Add defines that point to your OS and link against required syslinks/frameworks\n    if is_plat(\"windows\") then\n        add_defines(\n            \"AUI_PLATFORM_WIN=1\", \"AUI_PLATFORM_LINUX=0\", \"AUI_PLATFORM_APPLE=0\"\n        )\n        add_syslinks(\"gdi32\", \"ole32\")\n    elseif is_plat(\"linux\") then\n        add_defines(\n            \"AUI_PLATFORM_WIN=0\", \"AUI_PLATFORM_LINUX=1\", \"AUI_PLATFORM_APPLE=0\"\n        )\n    elseif is_plat(\"macosx\") then\n        add_defines(\n            \"AUI_PLATFORM_WIN=0\", \"AUI_PLATFORM_LINUX=0\", \"AUI_PLATFORM_APPLE=1\"\n        )\n    end\n    -- Add defines that point to symbol exports\n    add_defines(\n        \"API_AUI_VIEWS=AUI_IMPORT\", \"API_AUI_IMAGE=AUI_IMPORT\"\n    )\n</code></pre>"},{"location":"minimal-ui-template-xmake/#srcmainwindowh","title":"src/MainWindow.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass MainWindow: public AWindow {\npublic:\n    MainWindow();\n};\n</code></pre>"},{"location":"minimal-ui-template-xmake/#srcmainwindowcpp","title":"src/MainWindow.cpp","text":"<pre><code>#include \"MainWindow.h\"\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/ALabel.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/Platform/APlatform.h&gt;\n\nusing namespace declarative;\n\nMainWindow::MainWindow(): AWindow(\"Project template app\", 300_dp, 200_dp) {\n    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n                _new&lt;AButton&gt;(\"Submit an issue\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui/issues/new\");\n                }),\n            }\n        }\n    );\n}\n</code></pre>"},{"location":"minimal-ui-template-xmake/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"MainWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MainWindow&gt;()-&gt;show();\n    return 0;\n};\n</code></pre>"},{"location":"minimal-ui-template-xmake/#vscodec_cpp_propertiesjson","title":".vscode/c_cpp_properties.json","text":"<pre><code>{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [\n                \"_DEBUG\",\n                \"UNICODE\",\n                \"_UNICODE\"\n            ],\n            \"windowsSdkVersion\": \"10.0.26100.0\",\n            \"compilerPath\": \"cl.exe\",\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++20\",\n            \"intelliSenseMode\": \"windows-msvc-x64\"\n        }\n    ],\n    \"version\": 4\n}\n</code></pre>"},{"location":"minimal-ui-template-xmake/#source-code_1","title":"Source Code","text":"<p> Repository </p>"},{"location":"minimal-ui-template-xmake/#srcmainwindowcpp_1","title":"src/MainWindow.cpp","text":"<pre><code>#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/ALabel.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/Platform/APlatform.h&gt;\n\nusing namespace declarative;\n\nMainWindow::MainWindow(): AWindow(\"Project template app\", 300_dp, 200_dp) {\n    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n                _new&lt;AButton&gt;(\"Submit an issue\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui/issues/new\");\n                }),\n            }\n        }\n    );\n}\n</code></pre>"},{"location":"minimal-ui-template-xmake/#srcmainwindowh_1","title":"src/MainWindow.h","text":"<pre><code>#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass MainWindow: public AWindow {\npublic:\n    MainWindow();\n};\n</code></pre>"},{"location":"minimal-ui-template-xmake/#srcmaincpp_1","title":"src/main.cpp","text":"<pre><code>#include \"MainWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MainWindow&gt;()-&gt;show();\n    return 0;\n};\n</code></pre>"},{"location":"minimal-ui-template/","title":"Minimal UI Template","text":"<p>Example's page</p> <p>This page describes an example listed in ui category.</p> <p>Minimal UI boilerplate template.</p> <p></p>"},{"location":"minimal-ui-template/#source-code","title":"Source Code","text":""},{"location":"minimal-ui-template/#project-structure","title":"Project Structure","text":"<pre><code>graph TD\n    A[project_template_ui] --&gt; B[CMakeLists.txt]\nA --&gt; C[src/]\nC --&gt; D[MainWindow.h]\nC --&gt; E[MainWindow.cpp]\nC --&gt; F[main.cpp]</code></pre>"},{"location":"minimal-ui-template/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code># Standard routine\ncmake_minimum_required(VERSION 3.16)\nproject(project_template_ui)\n\n# Tip: in a production project don't use branch name, use a specific name tag (i.e. v1.1.1),\n# but for a sandbox project branch name is perfectly enough\nset(AUI_VERSION v8.0.0-rc.8)\n\n# Use AUI.Boot\nfile(\n        DOWNLOAD\n        https://raw.githubusercontent.com/aui-framework/aui/${AUI_VERSION}/aui.boot.cmake\n        ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n\n# import AUI\nauib_import(aui https://github.com/aui-framework/aui\n        COMPONENTS core views\n        VERSION ${AUI_VERSION})\n\n\n# Create the executable. This function automatically links all sources from the src/ folder,\n# creates CMake target and places the resulting executable to bin/ folder.\naui_executable(${PROJECT_NAME})\n\n# Link required libs\naui_link(${PROJECT_NAME} PRIVATE aui::core aui::views)\n</code></pre>"},{"location":"minimal-ui-template/#srcmainwindowh","title":"src/MainWindow.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n\nclass MainWindow: public AWindow {\npublic:\n    MainWindow();\n};\n</code></pre>"},{"location":"minimal-ui-template/#srcmainwindowcpp","title":"src/MainWindow.cpp","text":"<pre><code>#include \"MainWindow.h\"\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/ALabel.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/Platform/APlatform.h&gt;\n\nusing namespace declarative;\n\nMainWindow::MainWindow(): AWindow(\"Project template app\", 300_dp, 200_dp) {\n    setContents(\n        Centered{\n            Vertical{\n                Centered { Label { \"Hello world from AUI!\" } },\n                _new&lt;AButton&gt;(\"Visit GitHub repo\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui\");\n                }),\n                _new&lt;AButton&gt;(\"Visit docs\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://aui-framework.github.io/\");\n                }),\n                _new&lt;AButton&gt;(\"Submit an issue\").connect(&amp;AView::clicked, this, [] {\n                    APlatform::openUrl(\"https://github.com/aui-framework/aui/issues/new\");\n                }),\n            }\n        }\n    );\n}\n</code></pre>"},{"location":"minimal-ui-template/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include \"MainWindow.h\"\n\nAUI_ENTRY {\n    _new&lt;MainWindow&gt;()-&gt;show();\n    return 0;\n};\n</code></pre> <p>This example is located outside AUI's source tree. Checkout its repository.</p>"},{"location":"mousecollisionpolicy/","title":"MouseCollisionPolicy","text":"Header:<code>#include &lt;AUI/Enum/MouseCollisionPolicy.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"mousecollisionpolicy/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"notes-app/","title":"Notes App","text":"<p>Example's page</p> <p>This page describes an example listed in app category.</p> <p>Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading.</p> <p></p> <p>The functionality includes loading, saving, creating and deleting notes, as well as marking the UI state as dirty when changes are made.</p>"},{"location":"notes-app/#models","title":"Models","text":"<p><code>Note</code> struct describes a note:</p> <p>@dontinclude examples/app/notes/src/main.cpp @skip struct Note @until };</p> <p>The JSON representation is described as follows:</p> <p>@line AJSON</p>"},{"location":"notes-app/#mainwindow-class","title":"MainWindow class","text":"<p>The <code>MainWindow</code> class is responsible for managing the overall view and logic related to notes.</p>"},{"location":"notes-app/#fields","title":"Fields","text":"<ul> <li><code>mNotes</code>: a member that holds a list of notes.</li> <li><code>mCurrentNote</code>: a property holding a pointer to the currently selected note.</li> <li><code>mDirty</code>: a boolean property indicating whether there are unsaved changes in the application.</li> </ul>"},{"location":"notes-app/#methods","title":"Methods","text":"<ul> <li><code>load()</code>: loads notes from a JSON file.</li> </ul> <p><pre><code>void load() {\n    try {\n        if (!\"notes.json\"_path.isRegularFileExists()) {\n            return;\n        }\n        aui::from_json(AJson::fromStream(AFileInputStream(\"notes.json\")), mNotes);\n    } catch (const AException&amp; e) {\n        ALogger::info(LOG_TAG) &lt;&lt; \"Can't load notes: \" &lt;&lt; e;\n    }\n}\n</code></pre> - <code>save()</code>: saves the current list of notes to a JSON file. Also resets the dirty state.</p> <p><pre><code>void save() {\n    AFileOutputStream(\"notes.json\") &lt;&lt; aui::to_json(*mNotes);\n    mDirty = false;\n}\n</code></pre> - <code>newNote()</code>: creates a new note with a default title and adds it to the list of notes. Sets this note as the currently   selected note.</p> <p><pre><code>void newNote() {\n    auto note = aui::ptr::manage_shared(new Note { .title = \"Untitled\" });\n    mNotes.writeScope()-&gt;push_back(note);\n    mCurrentNote = std::move(note);\n}\n</code></pre> - <code>deleteCurrentNote()</code>: deletes the current note, if one is selected. Prompts the user for confirmation before   proceeding with deletion.</p> <p><pre><code>void deleteCurrentNote() {\n    if (mCurrentNote == nullptr) {\n        return;\n    }\n    if (AMessageBox::show(\n            this, \"Do you really want to delete this note?\",\n            \"{}\\n\\nThis operation is irreversible!\"_format((*mCurrentNote)-&gt;title), AMessageBox::Icon::NONE,\n            AMessageBox::Button::OK_CANCEL) != AMessageBox::ResultButton::OK) {\n        return;\n    }\n\n    auto it = ranges::find(*mNotes, *mCurrentNote);\n    it = mNotes.writeScope()-&gt;erase(it);\n    mCurrentNote = it != mNotes-&gt;end() ? *it : nullptr;\n}\n</code></pre> - <code>markDirty()</code>: marks the application state as dirty when changes made that require saving. Such a simple operation is   extracted to a dedicated method, so the signals can be easily connected to.   @skip markDirty()   @until }</p>"},{"location":"notes-app/#ui-components-and-layout","title":"UI Components and Layout","text":"<p>@dontinclude examples/app/notes/src/main.cpp - <code>TitleTextArea</code>: derivative of <code>ATextArea</code> that focuses next text area when <code>Enter</code> is pressed.   @skip TitleTextArea   @until }; - 'New note' button: creates a new note using <code>newNote()</code>. - 'Save' button: saves application data via <code>save()</code> method. It's <code>enabled</code> state is controlled by <code>mDirty</code> property. - 'Delete' button: deletes current note via <code>deleteCurrentNote()</code> method. It's <code>enabled</code> state is controlled by   <code>mCurrentNote</code> property. - Previews: contains dynamically generated previews of all notes, allowing users to select the one they want to view   or edit.</p> <p><pre><code>AScrollArea::Builder()\n    .withContents(\n    AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n        observeChangesForDirty(note);\n        return notePreview(note) AUI_LET {\n            connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n            it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n                view.setAssName(\".plain_bg\", currentNote == note);\n            };\n        };\n    })\n    .build(),\n</code></pre> <code>notePreview()</code> function generates a single preview for a note.</p> <p><pre><code>_&lt;AView&gt; notePreview(const _&lt;Note&gt;&amp; note) {\n    struct StringOneLinePreview {\n        AString operator()(const AString&amp; s) const {\n            if (s.empty()) {\n                return \"Empty\";\n            }\n            return s.restrictLength(100, \"\").replacedAll('\\n', ' ');\n        }\n    };\n\n    return Vertical {\n        Label {} AUI_WITH_STYLE { FontSize { 10_pt }, ATextOverflow::ELLIPSIS } &amp;\n            note-&gt;title.readProjected(StringOneLinePreview {}),\n        Label {} AUI_WITH_STYLE {\n                  ATextOverflow::ELLIPSIS,\n                  Opacity { 0.7f },\n                } &amp;\n            note-&gt;content.readProjected(StringOneLinePreview {}),\n    } AUI_WITH_STYLE {\n        Padding { 4_dp, 8_dp },\n        BorderRadius { 8_dp },\n        Margin { 4_dp, 8_dp },\n    };\n}\n</code></pre> - Main area of the application is occupied by note editor generated by <code>noteEditor()</code> function. <code>noteEditor()</code> consists   of 2 text areas - one for title, one for contents.</p> <pre><code>_&lt;AView&gt; noteEditor(const _&lt;Note&gt;&amp; note) {\n    if (note == nullptr) {\n        return Centered { Label { \"No note selected\" } };\n    }\n    return AScrollArea::Builder().withContents(\n        Vertical {\n          _new&lt;TitleTextArea&gt;(\"Untitled\") AUI_LET {\n                  it-&gt;setCustomStyle({ FontSize { 14_pt }, Expanding { 1, 0 } });\n                  AObject::biConnect(note-&gt;title, it-&gt;text());\n                  if (note-&gt;content-&gt;empty()) {\n                      it-&gt;focus();\n                  }\n              },\n          _new&lt;ATextArea&gt;(\"Text\") AUI_WITH_STYLE { Expanding() } &amp;&amp; note-&gt;content,\n        } AUI_WITH_STYLE {\n          Padding { 8_dp, 16_dp },\n        });\n}\n</code></pre>"},{"location":"notes-app/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"notes-app/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>cmake_minimum_required(VERSION 3.16)\n\n# Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n# auib_import(aui https://github.com/aui-framework/aui\n#             COMPONENTS core views json)\n\naui_executable(aui.example.notes)\naui_compile_assets(aui.example.notes)\n\naui_link(aui.example.notes PUBLIC aui::core aui::views aui::json)\n</code></pre>"},{"location":"notes-app/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include &lt;range/v3/all.hpp&gt;\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AScrollArea.h&gt;\n#include &lt;AUI/View/ASplitter.h&gt;\n#include &lt;AUI/View/ATextArea.h&gt;\n#include &lt;AUI/Model/AListModel.h&gt;\n#include \"AUI/View/AButton.h\"\n#include \"AUI/View/ADrawableView.h\"\n#include \"AUI/Json/Conversion.h\"\n#include \"AUI/IO/AFileInputStream.h\"\n#include \"AUI/Reflect/for_each_field.h\"\n#include \"AUI/Platform/AMessageBox.h\"\n#include \"AUI/View/ASpacerFixed.h\"\n\n#include &lt;AUI/View/AForEachUI.h&gt;\n#include &lt;AUI/Util/AWordWrappingEngineImpl.h&gt;\n\nstatic constexpr auto LOG_TAG = \"Notes\";\n\nusing namespace declarative;\nusing namespace ass;\n\nstruct Note {\n    AProperty&lt;AString&gt; title;\n    AProperty&lt;AString&gt; content;\n};\n\nAJSON_FIELDS(Note, AJSON_FIELDS_ENTRY(title) AJSON_FIELDS_ENTRY(content))\n\nclass TitleTextArea : public ATextArea {\npublic:\n    using ATextArea::ATextArea;\n    void onCharEntered(AChar c) override {\n        if (c == '\\r') {\n            AWindow::current()-&gt;focusNextView();\n            return;\n        }\n        ATextArea::onCharEntered(c);\n    }\n};\n\n/// [notePreview]\n_&lt;AView&gt; notePreview(const _&lt;Note&gt;&amp; note) {\n    struct StringOneLinePreview {\n        AString operator()(const AString&amp; s) const {\n            if (s.empty()) {\n                return \"Empty\";\n            }\n            return s.restrictLength(100, \"\").replacedAll('\\n', ' ');\n        }\n    };\n\n    return Vertical {\n        Label {} AUI_WITH_STYLE { FontSize { 10_pt }, ATextOverflow::ELLIPSIS } &amp;\n            note-&gt;title.readProjected(StringOneLinePreview {}),\n        Label {} AUI_WITH_STYLE {\n                  ATextOverflow::ELLIPSIS,\n                  Opacity { 0.7f },\n                } &amp;\n            note-&gt;content.readProjected(StringOneLinePreview {}),\n    } AUI_WITH_STYLE {\n        Padding { 4_dp, 8_dp },\n        BorderRadius { 8_dp },\n        Margin { 4_dp, 8_dp },\n    };\n}\n/// [notePreview]\n\n/// [noteEditor]\n_&lt;AView&gt; noteEditor(const _&lt;Note&gt;&amp; note) {\n    if (note == nullptr) {\n        return Centered { Label { \"No note selected\" } };\n    }\n    return AScrollArea::Builder().withContents(\n        Vertical {\n          _new&lt;TitleTextArea&gt;(\"Untitled\") AUI_LET {\n                  it-&gt;setCustomStyle({ FontSize { 14_pt }, Expanding { 1, 0 } });\n                  AObject::biConnect(note-&gt;title, it-&gt;text());\n                  if (note-&gt;content-&gt;empty()) {\n                      it-&gt;focus();\n                  }\n              },\n          _new&lt;ATextArea&gt;(\"Text\") AUI_WITH_STYLE { Expanding() } &amp;&amp; note-&gt;content,\n        } AUI_WITH_STYLE {\n          Padding { 8_dp, 16_dp },\n        });\n}\n/// [noteEditor]\n\nclass MainWindow : public AWindow {\npublic:\n    MainWindow() : AWindow(\"Notes\") {\n        setExtraStylesheet(AStylesheet {\n          {\n            c(\".plain_bg\"),\n            BackgroundSolid { AColor::WHITE },\n          },\n          {\n            t&lt;AWindow&gt;(),\n            Padding { 0 },\n          },\n        });\n        load();\n\n        connect(mNotes.changed, me::markDirty);\n\n        setContents(Vertical {\n          ASplitter::Horizontal()\n                  .withItems({\n                    Vertical {\n                      Centered {\n                        Horizontal {\n                          Button { Horizontal { Icon { \":img/save.svg\" }, SpacerFixed { 2_dp }, Label { \"Save\" } }, {me::save} }\n                              &amp; mDirty &gt; &amp;AView::setEnabled,\n                          Button { Horizontal { Icon { \":img/new.svg\" }, SpacerFixed { 2_dp }, Label { \"New Note\" } }, {me::newNote} },\n                        } AUI_WITH_STYLE { LayoutSpacing { 4_dp }, Padding { 4_dp } },\n                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n                                      view.setAssName(\".plain_bg\", currentNote == note);\n                                  };\n                              };\n                          })\n                          .build(),\n                        /// [scrollarea]\n                    } AUI_WITH_STYLE { MinSize { 200_dp } },\n\n                    Vertical::Expanding {\n                      Centered {\n                        Button { Horizontal { Icon { \":img/trash.svg\" }, SpacerFixed { 2_dp }, Label { \"Delete\" } }, {me::deleteCurrentNote} } &amp;\n                            mCurrentNote.readProjected([](const _&lt;Note&gt;&amp; n) {\n                                return n != nullptr;\n                            }) &gt; &amp;AView::setEnabled,\n                      },\n                      CustomLayout::Expanding {} &amp; mCurrentNote.readProjected(noteEditor),\n                    }&lt;&lt; \".plain_bg\" AUI_WITH_STYLE { MinSize { 200_dp } },\n                  })\n                  .build() AUI_WITH_STYLE { Expanding() },\n        });\n\n        if (mNotes-&gt;empty()) {\n            newNote();\n        }\n    }\n\n    ~MainWindow() {\n        if (mDirty) {\n            save();\n        }\n    }\n\n    /// [load]\n    void load() {\n        try {\n            if (!\"notes.json\"_path.isRegularFileExists()) {\n                return;\n            }\n            aui::from_json(AJson::fromStream(AFileInputStream(\"notes.json\")), mNotes);\n        } catch (const AException&amp; e) {\n            ALogger::info(LOG_TAG) &lt;&lt; \"Can't load notes: \" &lt;&lt; e;\n        }\n    }\n    /// [load]\n\n    /// [save]\n    void save() {\n        AFileOutputStream(\"notes.json\") &lt;&lt; aui::to_json(*mNotes);\n        mDirty = false;\n    }\n    /// [save]\n\n    /// [newNote]\n    void newNote() {\n        auto note = aui::ptr::manage_shared(new Note { .title = \"Untitled\" });\n        mNotes.writeScope()-&gt;push_back(note);\n        mCurrentNote = std::move(note);\n    }\n    /// [newNote]\n\n    /// [deleteCurrentNote]\n    void deleteCurrentNote() {\n        if (mCurrentNote == nullptr) {\n            return;\n        }\n        if (AMessageBox::show(\n                this, \"Do you really want to delete this note?\",\n                \"{}\\n\\nThis operation is irreversible!\"_format((*mCurrentNote)-&gt;title), AMessageBox::Icon::NONE,\n                AMessageBox::Button::OK_CANCEL) != AMessageBox::ResultButton::OK) {\n            return;\n        }\n\n        auto it = ranges::find(*mNotes, *mCurrentNote);\n        it = mNotes.writeScope()-&gt;erase(it);\n        mCurrentNote = it != mNotes-&gt;end() ? *it : nullptr;\n    }\n    /// [deleteCurrentNote]\n\n    void markDirty() {\n        mDirty = true;\n    }\n\n    void observeChangesForDirty(const _&lt;Note&gt;&amp; note) {\n        aui::reflect::for_each_field_value(\n                *note,\n                aui::lambda_overloaded {\n                        [&amp;](auto&amp; field) {},\n                        [&amp;](APropertyReadable auto&amp; field) {\n                            ALOG_DEBUG(LOG_TAG) &lt;&lt; \"Observing for changes \" &lt;&lt; &amp;field;\n                            AObject::connect(field.changed, me::markDirty);\n                        },\n                });\n    }\n\nprivate:\n    AProperty&lt;AVector&lt;_&lt;Note&gt;&gt;&gt; mNotes;\n    AProperty&lt;_&lt;Note&gt;&gt; mCurrentNote;\n    AProperty&lt;bool&gt; mDirty = false;\n};\n\nAUI_ENTRY {\n    auto w = _new&lt;MainWindow&gt;();\n    w-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"packaging/","title":"App Packaging","text":"<p>Cross-platform app packaging is a large topic that involves various build systems, platform-specific tools and techniques. AUI unifies package building process while still relying on <code>CMake</code> as the central build system.</p> <p>AUI Framework focuses on minimizing efforts for AUI-based project to produce production-ready packages as easily as possible. AUI refrains from self-promotion in placeholders and \"default values\"; instead it carefully uses the information about your project passed to aui_app where needed.</p> <p>AUI provides a convenient configure time variable for choosing target packaging method - AUI_APP_PACKAGING \"-DAUI_APP_PACKAGING=...\". Furthermore, if you are using AUI_BUILD_FOR \"-DAUI_BUILD_FOR=...\" (for cross-compiling), <code>AUI_APP_PACKAGING</code> is not required to specify. This page provides full usage examples.</p> <p><code>AUI_APP_PACKAGING</code> and <code>AUI_BUILD_FOR</code> are handled by aui_app.</p> <p>aui_app is a CMake command provided by AUI that defines platform-specific technical information about your application:</p> <ul> <li>Display name</li> <li>Icon</li> <li>Vendor (author) information</li> <li>Version</li> <li>Package id (if required by target platform)</li> <li>etc...</li> </ul> <p>In addition, this command populates some <code>CPACK_*</code> variables (if undefined). This approach allows you not to bother about various installation methods but also override the variables if needed by simply calling <code>set</code> on them, no matter prior to or after <code>aui_app</code> invocation.</p> <p>These adjustments are needed to configure the installer packages. AUI replaces installers' defaults with the information passed to <code>aui_app</code>, such as app name, id, icon, license information, authors, etc. to produce production-ready packages out of the box.</p> <p>This guide covers various packaging techniques for all supported platforms.</p> <p>Note</p> <p>This guide assumes you have already called aui_app inside your <code>CMakeLists.txt</code>.</p>"},{"location":"packaging/#windows","title":"Windows","text":"<p>Historically, Windows has been associated with installers in the form of executable files (<code>exe</code>s) and Windows Installer files (<code>msi</code>s), often downloaded from the internet. This method can be considered unsecure.</p> <p>Although Windows offers its official store and numerous unofficial repositories for distributing software, many developers still opt for traditional methods. This guide will cover the latter.</p> <p>Note</p> <p>Guides about packaging for Windows assume you are running Windows with Chocolatey preinstalled. This way the process is easily reproducible (i.e., on a CI/CD runner).</p>"},{"location":"packaging/#INNOSETUP","title":"Inno Setup","text":"<p>CMake Documentation</p> <p></p> <p>Inno Setup is a free installer framework for Windows program by Jordan Russell and Martijn Laan.</p> <pre><code># install requirements\nchoco install innosetup\n\n# standard CMake build process\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DAUI_APP_PACKAGING=INNOSETUP\ncmake --build . --config Release\n\n# packaging\ncpack . -c Release -B artifacts\n\n# publishing\ngh release upload ${{ github.ref }} artifacts/*.*\n</code></pre> <p>The script above produces a file <code>artifacts/&lt;APP_NAME&gt;-VERSION-windows-ARCH-setup.exe</code>, where <code>&lt;APP_NAME&gt;</code> is the <code>NAME</code> arg of aui_app (unless not overridden by <code>CPACK_PACKAGE_FILE_NAME</code>).</p> <p>aui_app populates the following INNOSETUP-related variables (only if they haven't been defined already):</p> <ul> <li><code>CPACK_INNOSETUP_ICON_FILE</code> = <code>${_ico}</code> (installer icon)</li> <li><code>CPACK_INNOSETUP_IGNORE_LICENSE_PAGE</code> = <code>ON</code> (skips license page)</li> <li><code>CPACK_INNOSETUP_IGNORE_README_PAGE</code> = <code>ON</code> (skips README page)</li> <li><code>CPACK_INNOSETUP_INSTALL_ROOT</code> = <code>\"{localappdata}\"</code> (installs To AppData\\Local)</li> <li><code>CPACK_INNOSETUP_PROGRAM_MENU_FOLDER</code> = <code>\".\"</code> (omits Start menu folder)</li> <li><code>CPACK_INNOSETUP_RUN_EXECUTABLES</code> = <code>${_executable}</code> (runs the program after installation)</li> <li><code>CPACK_INNOSETUP_SETUP_PrivilegesRequired</code> = <code>\"lowest\"</code> (hence we're installing to user dir, we don't need UAC)</li> <li><code>CPACK_INNOSETUP_SETUP_UninstallDisplayIcon</code> = <code>\"{app}\\\\\\\\\\\\\\\\bin\\\\\\\\\\\\\\\\${_executable}.exe\"</code> (displays app icon in Control Panel/Settings)</li> <li><code>CPACK_INNOSETUP_SETUP_WizardSmallImageFile</code> = <code>${_ico}</code> (small icon inside INNOSETUP window)</li> <li><code>CPACK_PACKAGE_ICON</code> = <code>${_ico}</code> (app icon inside INNOSETUP window)</li> <li><code>_aui_package_file_name</code> = <code>${_aui_package_file_name}-setup</code> (append -setup suffix for INNOSETUP)</li> </ul> <p>aui_app generates some image assets for the installer from your icon.</p> <p>By default, in addition to branding adjustments (such as app logo and name), AUI configures INNOSETUP so the installer won't prompt a UAC dialog (leverage to admin privileges). This way the installation process is more secure from perspective of the end user. Moreover, installation to user's directory allows updater to work without prompting leverage to admin privileges during update installation.</p>"},{"location":"packaging/#PORTABLE_WINDOWS","title":"AUI_PORTABLE_ZIP, AUI_PORTABLE_TGZ","text":"<p>Note</p> <p>This packaging method is AUI-specific and provided by <code>aui_app</code> via <code>AUI_APP_PACKAGING</code>.</p> <p>This packaging method creates an <code>*.zip</code> or <code>*.tar.gz</code> archive with your application \"preinstalled\". After unpacking, no extra actions are needed. The user can launch executable of your application directly.</p> <p>Note</p> <p>updater requires ZIP portable to be published. Other archive formats such tar <code>tar.gz</code> are not supported.</p> <pre><code># standard CMake build process\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DAUI_APP_PACKAGING=AUI_PORTABLE_ZIP\ncmake --build . --config Release\n\n# packaging\ncpack . -c Release -B artifacts\n\n# publishing\ngh release upload ${{ github.ref }} artifacts/*.*\n</code></pre> <p><code>AUI_PORTABLE_ZIP</code> appends <code>-portable</code> suffix to archive file name, if not overridden by <code>CPACK_PACKAGE_FILE_NAME</code>.</p>"},{"location":"packaging/#wix","title":"WIX","text":"<p>CMake Documentation</p> <p></p> <p>WIX is the installer framework that produces <code>msi</code> packages.</p> <p>Note</p> <p>updater requires application to be installed in user's directory and thus AUI's autoupdating functionality can't be used with WIX.</p> <pre><code># install requirements\nchoco install wixtoolset\n\n# standard CMake build process\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DAUI_APP_PACKAGING=WIX\ncmake --build . --config Release\n\n# packaging\ncpack . -c Release -B artifacts\n\n# publishing\ngh release upload ${{ github.ref }} artifacts/*.*\n</code></pre> <p>The script above produces a file <code>artifacts/&lt;APP_NAME&gt;-VERSION-windows-ARCH.msi</code>, where <code>&lt;APP_NAME&gt;</code> is the <code>NAME</code> arg of aui_app (unless not overridden by <code>CPACK_PACKAGE_FILE_NAME</code>).</p> <p>aui_app populates the following WIX-related variables (only if they haven't been defined already):</p> <ul> <li><code>CPACK_WIX_PRODUCT_ICON</code> = <code>${_ico}</code> (displays app icon in Control Panel/Settings)</li> <li><code>CPACK_WIX_PROGRAM_MENU_FOLDER</code> = <code>\".\"</code> (omits Start menu folder)</li> <li><code>CPACK_WIX_UI_BANNER</code> = <code>${_ico}</code> (image at top of all installer pages)</li> <li><code>CPACK_WIX_UI_DIALOG</code> = <code>${_ico}</code> (background image used on the welcome and completion dialogs)</li> </ul> <p>aui_app generates some image assets for the installer from your icon.</p> <p></p>"},{"location":"packaging/#macos","title":"macOS","text":"<p>Note</p> <p>Guides about packaging for macOS assume you are running macOS with Xcode preinstalled.</p> <p>The simplest and the most user-friendly installation method is <code>DragNDrop</code> which you are probably looking for.</p>"},{"location":"packaging/#dragndrop","title":"DragNDrop","text":"<p>CMake Documentation</p> <p>The DragNDrop CPack generator creates a DMG image. When opened, a Finder window appears with your application and a symlink to <code>/Applications</code>, effectively prompting the user to copy the application from the medium to his app library.</p> <p>This packaging method for macOS covers non-install (portable) use case as well. If one chooses to keep your application not in <code>/Applications</code> but in some other place they can do that intuitively by copying your application from DMG image to whatever place they want.</p> <p>Default DMG image produced by CPack is sparse: it's just a regular Finder window with sidebar and top bar showing your application bundle and a symlink. aui_app configures CPack to rearrange icons and place a background image so no extra configuration by an AUI-based project is needed:</p> <p></p> <pre><code># standard CMake build process\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DAUI_APP_PACKAGING=DragNDrop\ncmake --build . --config Release\n\n# packaging\ncpack . -c Release -B artifacts\n\n# publishing\ngh release upload ${{ github.ref }} artifacts/*.*\n</code></pre> <p>The script above produces a file <code>artifacts/&lt;APP_NAME&gt;-VERSION-macos-ARCH.dmg</code>, where <code>&lt;APP_NAME&gt;</code> is the <code>NAME</code> arg of aui_app (unless not overridden by <code>CPACK_PACKAGE_FILE_NAME</code>).</p> <p>aui_app populates the following DMG-related variables (only if they haven't been defined already):</p> <ul> <li><code>CPACK_DMG_BACKGROUND_IMAGE</code> = <code>${_current_app_build_files}/dmg_background.png</code> (sets the default DMG background)</li> <li><code>CPACK_DMG_DS_STORE_SETUP_SCRIPT</code> = <code>${_current_app_build_files}/dmg_ds_store_setup.scpt</code> (rearranges icons in DMG)</li> </ul>"},{"location":"packaging/#PACKAGING_WITH_AUI_BUILD_FOR","title":"Android and iOS","text":"<p><code>-DAUI_BUILD_FOR=...</code> implies <code>AUI_APP_PACKAGING</code>, no further configuration is needed.</p> <p>Please refer to cross-compiling.</p>"},{"location":"pipe/","title":"Pipe","text":"<p>Native pipe RAII wrapper.</p> Header:<code>#include &lt;AUI/Platform/Pipe.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"pipe/#public-methods","title":"Public Methods","text":"<pre><code>void Pipe::closeIn()\n</code></pre> <p>Close in. Also known as <code>close(pipe[1])</code></p> <pre><code>void Pipe::closeOut()\n</code></pre> <p>Close out. Also known as <code>close(pipe[0])</code></p> <pre><code>pipe_t Pipe::in()\n</code></pre> <p>In pipe. Also known as <code>pipe[1]</code>.</p> <p>Examples:</p> examples/app/minesweeper/src/MinesweeperWindow.cpp <p>Minesweeper Game - Minesweeper game implementation driven by ass.</p> <pre><code>          _new&lt;AButton&gt;(\"New game...\").connect(&amp;AButton::clicked, me::newGame),\n        },\n      },\n      _container&lt;AStackedLayout&gt;(\n          { // also assign \".frame\" ASS class in place\n            mGrid = _new&lt;AViewContainer&gt;() &lt;&lt; \".frame\" }),\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n\n    beginGame(10, 10, 20);\n}\n</code></pre> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list.</p> <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre> <pre><code>pipe_t Pipe::out()\n</code></pre> <p>Out pipe. Also known as <code>pipe[0]</code>.</p> <p>Examples:</p> examples/7guis/cells/src/Cell.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>    return formula::evaluate(*spreadsheet, expression);\n}\n\nglm::uvec2 Cell::fromName(const AString&amp; name) {\n    glm::uvec2 out{UNDEFINED};\n    auto it = name.begin();\n    for (;it != name.end() &amp;&amp; 'A' &lt;= *it &amp;&amp; *it &lt;= 'Z'; ++it) {\n        if (out.x == UNDEFINED) { out.x = 0; }\n        out.x *= 26;\n        out.x += *it - 'A';\n</code></pre> examples/7guis/cells/src/AST.cpp <p>7GUIs Cells - Spreadsheet processor (Excel).</p> <pre><code>            mIterator++;\n            const int currentPriority = int(p);\n\n            if (temporaryValue) {\n                auto out = std::make_unique&lt;T&gt;();\n                out-&gt;left = std::move(temporaryValue);\n                binaryOperators &lt;&lt; BinaryOperatorAndItsPriority {\n                    .op = out.get(),\n                    .priority = currentPriority,\n                    .owning = std::move(out),\n</code></pre> <pre><code>pipe_t Pipe::stealIn()\n</code></pre> <p>Steals ownership of the in pipe outside of the Pipe class.</p> <p>Resets the pipe value to zero. Caller is responsible for closing the pipe.</p> <pre><code>pipe_t Pipe::stealOut()\n</code></pre> <p>Steals ownership of the out pipe outside of the Pipe class.</p> <p>Resets the pipe value to zero. Caller is responsible for closing the pipe.</p>"},{"location":"pipe/#Pipe::closeIn","title":"closeIn","text":""},{"location":"pipe/#Pipe::closeOut","title":"closeOut","text":""},{"location":"pipe/#Pipe::in","title":"in","text":""},{"location":"pipe/#Pipe::out","title":"out","text":""},{"location":"pipe/#Pipe::stealIn","title":"stealIn","text":""},{"location":"pipe/#Pipe::stealOut","title":"stealOut","text":""},{"location":"profiling/","title":"Profiling","text":"<p>Performance profiling set of Devtools</p>"},{"location":"profiling/#detailed-description","title":"Detailed Description","text":"<p>Performance profiling capabilities are disabled by default. Compile with -DAUI_PROFILING=TRUE in order to enable.</p>"},{"location":"profiling/#related-pages","title":"Related Pages","text":"<ul> <li> <p>APerformanceFrame</p> <p>Defines beginning and ending of window frame by RAII.</p> </li> <li> <p>APerformanceSection</p> <p>Defines performance profiling named (and colored) span within RAII range.</p> </li> </ul>"},{"location":"prometheus-exporter-template/","title":"Prometheus Exporter Template","text":"<p>Example's page</p> <p>This page describes an example listed in desktop category.</p> <p>Example of using aui.boot to pull Prometheus library.</p>"},{"location":"prometheus-exporter-template/#source-code","title":"Source Code","text":"<p>This example is located outside AUI's source tree. Checkout its repository.</p>"},{"location":"property-system/","title":"Property System","text":"<p>Property System is a data binding mechanism based on signal-slot system.</p>"},{"location":"property-system/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>AUI property system, a compiler-agnostic framework to make observable variables. This is a pure C++ alternative to:</p> <ul> <li>QProperty</li> <li>RxJS</li> <li>JavaRX</li> </ul> <p>Note</p> <p>This page is about presenting individual values. For lists, see AForEachUI.</p> <p>AUI property system is relatively complex, as it involves a lot of features in a single place:</p> <ol> <li>thread safe</li> <li>many-to-many relationships between objects</li> <li>optional data modification when passing values between objects (like STL projections)</li> <li>emitter can be either signal or property</li> <li>slot can be either lambda, method or property</li> <li>for the latter case, system must set up backward connection as well (including projection support)</li> <li>again, for the latter case, there's an option to make property-to-slot connection, where the \"slot\" is property's    assignment operation</li> <li>2 syntax variants: procedural (straightforward) and declarative</li> <li>three property variants: simple field (AProperty), custom getter/setter (APropertyDef) and custom evaluation    (APropertyPrecomputed)</li> <li>some properties can be readonly</li> <li>propagating strong types' traits on views</li> </ol> <p>Learning curve is relatively flat, so be sure to ask questions and open issues on our GitHub page.</p> <p>Main difference between basic value lying somewhere inside your class and a property is that the latter explicitly ties getter, setter and a signal reporting value changes. Property acts almost transparently, as if there's no extra wrapper around your data. This allows to work with properties in the same way as with their underlying values. You can read the intermediate value of a property and subscribe to its changes via a single <code>connect</code> call. Also, when connecting property to property, it is possible to make them observe changes of each other bia <code>biConnect</code> call: <pre><code>struct User {\n    AProperty&lt;AString&gt; name;\n};\n\nauto user = aui::ptr::manage_shared(new User { .name = \"Robert\" });\nauto tf = _new&lt;ATextField&gt;();\nAObject::biConnect(user-&gt;name, tf-&gt;text());\nauto window = _new&lt;AWindow&gt;();\nwindow-&gt;setContents(Centered { tf });\nwindow-&gt;show();\n</code></pre> Or simpler: <pre><code>// ...\nwindow-&gt;setContents(Centered {\n  tf &amp;&amp; user-&gt;name,\n});\n// ...\n</code></pre> The code above generates a window with a text field:</p> <p>A single call of <code>biConnect</code>:</p> <ul> <li>Prefills text field with the current <code>user-&gt;name</code> value (pre fire): <pre><code>EXPECT_EQ(tf-&gt;text(), \"Robert\");\n</code></pre></li> <li>Connects <code>user-&gt;named.changed</code> to <code>tf</code> to notify the text field about changes of <code>user-&gt;name</code>: <pre><code>user-&gt;name = \"Angela\";           // changing user-&gt;name programmatically...\nEXPECT_EQ(tf-&gt;text(), \"Angela\"); // ...should reflect on the text field\n</code></pre></li> </ul> <ul> <li>Connects <code>tf-&gt;text().changed</code> to notify the <code>user-&gt;name</code> property about changes in text field (i.e., if the    user typed another value to the text field):</li> </ul> <pre><code>// user typed \"Snezhana\", now let's check the value in user-&gt;name:\nEXPECT_EQ(user-&gt;name, \"Snezhana\");\n</code></pre> <p>This is basic example of setting up property-to-property connection.</p>"},{"location":"property-system/#declaring-properties","title":"Declaring Properties","text":"<p>There are several ways to define a property in AUI:</p> <ul> <li>AProperty - basic wrapper property type for data models</li> <li>APropertyDef - property-compliant view type to tie custom getter, setter and signal together</li> <li>APropertyPrecomputed - readonly property whose value is determined by a callable that references other properties</li> </ul> <p>Please check their respective documentation pages for an additional information.</p>"},{"location":"property-system/#ui-data-binding-with-aui_let","title":"UI data binding with AUI_LET","text":"<p>Note</p> <p>This is a comprehensive, straightforward way of setting up a connection. We are demonstrating it here so you can get deeper understanding on how connections are made and what does declarative way do under the hood. This way may be used in favour of declarative way if the latter not work for you. For declarative way, go to UI declarative data binding.</p> <p>This approach allows more control over the binding process by using <code>AObject::connect</code>/<code>AObject::biConnect</code> which is a procedural way of setting up connections. As a downside, it requires \"AUI_LET\" syntax clause which may seem as overkill for such a simple operation.</p>"},{"location":"property-system/#UIDataBindingTest_Label_via_let","title":"Label via let","text":"<p>Use <code>AUI_LET</code> expression to connect the model's username property to the label's text() property. <pre><code>using namespace declarative;\n\nstruct User {\n    AProperty&lt;AString&gt; name;\n};\n\nauto user = aui::ptr::manage_shared(new User { .name = \"Roza\" });\n\nclass MyWindow: public AWindow {\npublic:\n    MyWindow(const _&lt;User&gt;&amp; user) {\n        setContents(Centered {\n            _new&lt;ALabel&gt;() AUI_LET {\n              // Data goes from left to right:\n              // current value (pre fire) or changed event\n              // goes to assignment operation of it-&gt;text()\n              AObject::connect(user-&gt;name, it-&gt;text());\n              //                -&gt;  -&gt;  -&gt;  -&gt;  -&gt;\n              // in other words, this connection is essentially the\n              // same as\n              // AObject::connect(user-&gt;name, AUI_SLOT(it)::setText);\n              //\n              // if you want user-&gt;name to be aware or it-&gt;text()\n              // changes (i.e., if it were an editable view\n              // like ATextField) use AObject::biConnect instead\n              // (see \"Bidirectional connection\" sample).\n            },\n        });\n    }\n};\n_new&lt;MyWindow&gt;(user)-&gt;show();\n</code></pre></p> <p>This gives the following result:  Note that label already displays the value stored in User.</p> <p>Let's change the name: <pre><code>user-&gt;name = \"Vasil\";\n</code></pre> </p> <p>By simply performing assignment on <code>user</code> we changed ALabel display text. Magic, huh?</p>"},{"location":"property-system/#UIDataBindingTest_Label_via_let_projection","title":"Label via let projection","text":"<p>It's fairly easy to define a projection because one-sided connection requires exactly one projection, obviously. <pre><code>_new&lt;ALabel&gt;() AUI_LET {\n    // Data goes from left to right:\n    // current value (pre fire) or changed event\n    // goes through projection (&amp;AString::uppercase) first\n    // then it goes to assignment operation of it-&gt;text()\n    // property.\n    AObject::connect(user-&gt;name.readProjected(&amp;AString::uppercase), it-&gt;text());\n    //                -&gt;  -&gt;  -&gt;  -&gt;  -&gt;  -&gt;  -&gt;  -&gt;  -&gt;  -&gt;  -&gt;  -&gt;\n    // in other words, this connection is essentially the same as\n    // AObject::connect(user-&gt;name.projected(&amp;AString::uppercase), AUI_SLOT(it)::setText);\n\n    // if view's property gets changed (i.e., by user or by occasional\n    // ALabel::setText), these changes DO NOT reflect on model\n    // as we requested connect() here instead of biConnect().\n},\n</code></pre></p> <p>This gives the following result:  Note that the label already displays the projected value stored in User.</p> <p>Let's change the name: <pre><code>user-&gt;name = \"Vasil\";\n</code></pre> </p> <p>This way, we've set up data binding with projection.</p>"},{"location":"property-system/#UIDataBindingTest_Bidirectional_connection","title":"Bidirectional connection","text":"<p>In previous examples, we've used <code>AObject::connect</code> to make one directional (one sided) connection. This is perfectly enough for ALabel because it cannot be changed by user.</p> <p>In some cases, you might want to use property-to-property as it's bidirectional. It's used for populating view from model and obtaining data from view back to the model.</p> <p>For this example, let's use ATextField instead of ALabel as it's an editable view. In this case, we'd want to use <code>AObject::biConnect</code> because we do want <code>user-&gt;name</code> to be aware of changes of the view. <pre><code>_new&lt;ATextField&gt;() AUI_LET {\n  // Data goes from left to right in the first place\n  // (i.e., user-&gt;name current value overrides it-&gt;text())\n  // if view's property gets changed (i.e., by user),\n  // these changes reflect on model\n  // as we requested biConnect here\n\n  //                -&gt; value + changes -&gt;\n  AObject::biConnect(user-&gt;name, it-&gt;text());\n  //                &lt;-  changes only   &lt;-\n},\n</code></pre></p> <p>This gives the following result: </p> <p>Let's change the name programmatically: <pre><code>user-&gt;name = \"Vasil\";\n</code></pre></p> <p>ATextField will respond: </p> <p>If the user changes the value from UI, these changes will reflect on <code>user-&gt;model</code> as well:  <pre><code>EXPECT_EQ(user-&gt;name, \"Changed from UI\");\n</code></pre></p> <p>This way we've set up bidirectional projection via <code>AObject::biConnect</code> which makes <code>user-&gt;name</code> aware of UI changes.</p>"},{"location":"property-system/#UIDataBindingTest_Bidirectional_projection","title":"Bidirectional projection","text":"<p>Bidirectional connection updates values in both directions, hence it requires the projection to work in both sides as well.</p> <p>It is the case for ADropdownList with enums. ADropdownList works with string list model and indices. It does not know anything about underlying values.</p> <p>For example, define enum with AUI_ENUM_VALUES and model:</p> <p><pre><code>enum class Gender {\n    MALE,\n    FEMALE,\n    OTHER,\n};\nAUI_ENUM_VALUES(Gender,\n                Gender::MALE,\n                Gender::FEMALE,\n                Gender::OTHER)\n</code></pre> <pre><code>struct User {\n    AProperty&lt;Gender&gt; gender;\n    // we've omitted other fields for sake of simplicity\n};\n</code></pre></p> <p>Now, let's get a mapping for our <code>Gender</code> enum: <pre><code>static constexpr auto GENDERS = aui::enumerate::ALL_VALUES&lt;Gender&gt;;\n</code></pre></p> <p>The compile-time constant above is equivalent to: <pre><code>/* pseudocode */\nGENDERS = std::array { Gender::MALE, Gender::FEMALE, GENDER::OTHER };\n</code></pre></p> <p>We just using <code>aui::enumerate::ALL_VALUES</code> because it was provided conveniently by <code>AUI_ENUM_VALUES</code> for us.</p> <p>It's not hard to guess that we'll use indices of this array to uniquely identify <code>Gender</code> associated with this index: <pre><code>/* pseudocode */\nGENDERS[0]; // -&gt; MALE\nGENDERS[1]; // -&gt; FEMALE\nGENDERS[2]; // -&gt; OTHER\n</code></pre></p> <p>To perform opposite operation (i.e., <code>Gender</code> to int), we can use <code>aui::indexOf</code>: <pre><code>/* pseudocode */\naui::indexOf(GENDERS, Gender::MALE);   // -&gt; 0\naui::indexOf(GENDERS, Gender::FEMALE); // -&gt; 1\naui::indexOf(GENDERS, Gender::OTHER);  // -&gt; 2\n</code></pre></p> <p>To bring these conversions together, let's use overloaded lambda: <pre><code>static constexpr auto GENDER_INDEX_PROJECTION = aui::lambda_overloaded {\n    [](Gender g) -&gt; int { return aui::indexOf(GENDERS, g).valueOr(0); },\n    [](int i) -&gt; Gender { return GENDERS[i]; },\n};\n</code></pre></p> <p>Note</p> <p>It's convenient to use lambda trailing return type syntax (i.e., <code>... -&gt; int</code>, <code>... -&gt; Gender</code>) to make it obvious what do transformations do and how one type is transformed to another.</p> <p>The function-like object above detects the direction of transformation and performs as follows: <pre><code>GENDER_INDEX_PROJECTION(0); // -&gt; MALE\nGENDER_INDEX_PROJECTION(Gender::MALE); // -&gt; 0\n</code></pre></p> <p>It is all what we need to set up bidirectional transformations. Inside AUI_ENTRY: <pre><code>auto user = aui::ptr::manage_shared(new User { .gender = Gender::MALE });\n\nclass MyWindow: public AWindow {\npublic:\n    MyWindow(const _&lt;User&gt;&amp; user) {\n        // generate a string list model for genders from GENDERS array defined earlier\n        auto gendersStr = AListModel&lt;AString&gt;::fromVector(\n            GENDERS\n            | ranges::views::transform(AEnumerate&lt;Gender&gt;::toName)\n            | ranges::to_vector);\n\n        // equivalent:\n        // gendersStr = { \"MALE\", \"FEMALE\", \"OTHER\" }\n        // you can customize the displayed strings by playing with\n        // ranges::views::transform argument.\n\n        setContents(Centered {\n          _new&lt;ADropdownList&gt;(gendersStr) AUI_LET {\n              // AObject::connect(user-&gt;gender, it-&gt;selectionId());\n              //\n              // The code above would break, because Gender and int\n              // (selectionId() type) are incompatible.\n              //\n              // Instead, define bidirectional projection:\n               AObject::biConnect(\n                   user-&gt;gender.biProjected(GENDER_INDEX_PROJECTION),\n                   it-&gt;selectionId());\n              },\n        });\n    }\n};\n_new&lt;MyWindow&gt;(user)-&gt;show();\n</code></pre> </p> <ul> <li> <p>If we try to change <code>user-&gt;gender</code> programmatically, ADropdownList will respond: <pre><code>user-&gt;gender = Gender::FEMALE;\nEXPECT_EQ(dropdownList-&gt;getSelectedId(), 1); // second option\n</code></pre> </p> </li> <li> <p>If the user changes the value of ADropdownList, it reflects on the model as well: <pre><code>EXPECT_EQ(user-&gt;gender, Gender::OTHER);\n</code></pre> </p> </li> </ul>"},{"location":"property-system/#UI_declarative_data_binding","title":"UI declarative data binding","text":"<p>As said earlier, <code>AUI_LET</code> syntax is a little bit clunky and requires extra boilerplate code to set up.</p> <p>Here's where declarative syntax comes into play. The logic behind the syntax is the same as in <code>AObject::connect</code>/<code>AObject::biConnect</code> (for ease of replacement/understanding).</p> <p>The example below is essentially the same as Label via let but uses declarative connection set up syntax.</p>"},{"location":"property-system/#UIDataBindingTest_Label_via_declarative","title":"Label via declarative","text":"<p>Use <code>&amp;</code> and <code>&gt;</code> expression to connect the model's username property to the label's text property. <pre><code>using namespace declarative;\nstruct User {\n    AProperty&lt;AString&gt; name;\n};\n\nauto user = aui::ptr::manage_shared(new User { .name = \"Roza\" });\n\nclass MyWindow: public AWindow {\npublic:\n    MyWindow(const _&lt;User&gt;&amp; user) {\n        setContents(Centered {\n          Label { AUI_REACT(user-&gt;name) },\n        });\n    }\n};\nauto window = _new&lt;MyWindow&gt;(user);\nwindow-&gt;show();\n</code></pre>  Note that the label already displays the value stored in User.</p> <p>Let's change the name: <pre><code>user-&gt;name = \"Vasil\";\n</code></pre>  In this example, we've achieved the same intuitive behaviour of data binding of <code>user-&gt;name</code> (like in Label via let example) but using declarative syntax.</p>"},{"location":"property-system/#UIDataBindingTest_ADataBindingDefault_for_omitting_view_property","title":"ADataBindingDefault for omitting view property","text":"<p>In previous example we have explicitly specified ALabel's property to connect with.</p> <p>One of notable features of declarative way (in comparison to procedural <code>AUI_LET</code> way) is that we can omit the view's property to connect with if such <code>ADataBindingDefault</code> specialization exist for the target view and the property type. Some views have already predefined such specialization for their underlying types. For instance, ALabel has such specialization:</p> <pre><code>/* PREDEFINED! You don't need to define it! This listing is an example */\ntemplate&lt;&gt;\nstruct ADataBindingDefault&lt;ALabel, AString&gt; {\npublic:\n    static auto property(const _&lt;ALabel&gt;&amp; view) { return view-&gt;text(); }\n};\n</code></pre> <p>We can use this predefined specialization to omit the destination property: <pre><code>_new&lt;ALabel&gt;() &amp; user-&gt;name\n</code></pre></p> <p>Behaviour of such connection is equal to Label via declarative:</p> <p> Note that the label already displays the value stored in User.</p> <p>Let's change the name: <pre><code>user-&gt;name = \"Vasil\";\n</code></pre>  In this example, we've omitted the destination property of the connection while maintaining the same behaviour as in Label via declarative.</p>"},{"location":"property-system/#UIDataBindingTest_ADataBindingDefault_strong_type_propagation","title":"ADataBindingDefault strong type propagation","text":"<p>Think of <code>ADataBindingDefault</code> as we're not only connecting properties to properties, but also creating a \"property to view\" relationship. This philosophy covers the following scenario.</p> <p>In AUI, there's aui::ranged_number template which stores valid value range right inside the type: <pre><code>struct User {\n    AProperty&lt;aui::ranged_number&lt;int, 1, 99&gt;&gt; age;\n};\n</code></pre></p> <p>These strong types can be used to propagate their traits on views, i.e., ANumberPicker. When using declarative syntax, the property system calls <code>ADataBindingDefault::setup</code> to apply some extra traits of the bound value on the view. Here's an abstract on how <code>ANumberPicker</code> defines specialization of <code>ADataBingingDefault</code> with <code>aui::ranged_number</code>: <pre><code>/* PREDEFINED! You don't need to define it! This listing is an example */\ntemplate &lt;aui::arithmetic UnderlyingType, auto min, auto max&gt;\nstruct ADataBindingDefault&lt;ANumberPicker, aui::ranged_number&lt;UnderlyingType, min, max&gt;&gt; {\npublic:\n    static auto property(const _&lt;ANumberPicker&gt;&amp; view) {\n        return view-&gt;value();\n    }\n    static void setup(const _&lt;ANumberPicker&gt;&amp; view) {\n        view-&gt;setMin(aui::ranged_number&lt;UnderlyingType, min, max&gt;::MIN);\n        view-&gt;setMax(aui::ranged_number&lt;UnderlyingType, min, max&gt;::MAX);\n    }\n    // ...\n};\n</code></pre></p> <p>As you can see, this specialization pulls the min and max values from <code>aui::ranged_number</code> type and sets them to <code>ANumberPicker</code>. This way <code>ANumberPicker</code> finds out the valid range of values by simply being bound to value that has constraints encoded inside its type. <pre><code>_new&lt;ANumberPicker&gt;() &amp;&amp; user-&gt;age,\n</code></pre></p> <p>Note</p> <p>We're using <code>operator&amp;&amp;</code> here to set up bidirectional connection. For more info, go to Declarative bidirectional connection.</p> <p>By creating this connection, we've done a little bit more. We've set ANumberPicker::setMin and ANumberPicker::setMax as well: <pre><code>EXPECT_EQ(numberPicker-&gt;getMin(), 1);\nEXPECT_EQ(numberPicker-&gt;getMax(), 99);\n</code></pre></p> <p>This example demonstrates how to use declarative binding to propagate strong types. <code>aui::ranged_number</code> propagates its constraints on <code>ANumberPicker</code> thanks to <code>ADataBindingDefault</code> specialization.</p>"},{"location":"property-system/#UIDataBindingTest_Label_via_declarative_projection","title":"Label via declarative projection","text":"<p>We can use projections in the same way as with <code>AUI_LET</code>. <pre><code>using namespace declarative;\nstruct User {\n    AProperty&lt;AString&gt; name;\n};\n\nauto user = aui::ptr::manage_shared(new User { .name = \"Roza\" });\n\nclass MyWindow: public AWindow {\npublic:\n    MyWindow(const _&lt;User&gt;&amp; user) {\n        _&lt;ALabel&gt; label;\n        setContents(Centered {\n            _new&lt;ALabel&gt;() &amp; user-&gt;name.readProjected(&amp;AString::uppercase)\n        });\n    }\n};\nauto window = _new&lt;MyWindow&gt;(user);\nwindow-&gt;show();\n</code></pre> </p> <p>Note that the label already displays the projected value stored in User.</p> <p>Projection applies to value changes as well. Let's change the name: <pre><code>user-&gt;name = \"Vasil\";\n\nEXPECT_EQ(user-&gt;name, \"Vasil\");\nEXPECT_EQ(label-&gt;text(), \"VASIL\"); // projected\n</code></pre> </p>"},{"location":"property-system/#UIDataBindingTest_Declarative_bidirectional_connection","title":"Declarative bidirectional connection","text":"<p>In previous examples, we've used <code>&amp;</code> to make one directional (one sided) connection. This is perfectly enough for ALabel because it cannot be changed by user.</p> <p>In some cases, you might want to use property-to-property as it's bidirectional. It's used for populating view from model and obtaining data from view back to the model.</p> <p>For this example, AUI_LET's use ATextField instead of ALabel as it's an editable view. In this case, we'd want to use <code>&amp;&amp;</code> because we do want <code>user-&gt;name</code> to be aware of changes of the view. <pre><code>_new&lt;ATextField&gt;() &amp;&amp; user-&gt;name\n</code></pre></p> <p>This gives the following result: </p> <p>Let's change the name programmatically: <pre><code>user-&gt;name = \"Vasil\";\n</code></pre></p> <p>ATextField will respond: </p> <p>If the user changes the value from UI, these changes will reflect on <code>user-&gt;model</code> as well:  <pre><code>EXPECT_EQ(user-&gt;name, \"Changed from UI\");\n</code></pre></p> <p>This way we've set up bidirectional projection via <code>&amp;&amp;</code> which makes <code>user-&gt;name</code> aware of UI changes.</p>"},{"location":"property-system/#UIDataBindingTest_Declarative_bidirectional_projection","title":"Declarative bidirectional projection","text":"<p>We can use projections in the same way as with <code>AUI_LET</code>.</p> <p>Let's repeat the Bidirectional projection sample in declarative way: <pre><code>_new&lt;ADropdownList&gt;(gendersStr) &amp;&amp; user-&gt;gender.biProjected(GENDER_INDEX_PROJECTION) &gt; &amp;ADropdownList::selectionId\n</code></pre> </p> <p>Note</p> <p>We used the <code>&amp;&amp;</code> operator here instead of <code>&amp;</code> because we want the connection work in both directions: <code>user.gender -&gt; ADropdownList</code> and <code>ADropdownList -&gt; user.gender</code>.</p> <ul> <li> <p>If we try to change <code>user-&gt;gender</code> programmatically, ADropdownList will respond: <pre><code>user-&gt;gender = Gender::FEMALE;\nEXPECT_EQ(dropdownList-&gt;getSelectedId(), 1); // second option\n</code></pre> </p> </li> <li> <p>If the user changes the value of ADropdownList, it reflects on the model as well: <pre><code>EXPECT_EQ(user-&gt;gender, Gender::OTHER);\n</code></pre> </p> </li> </ul>"},{"location":"property-system/#related-pages","title":"Related Pages","text":"<ul> <li> <p>APropertyPrecomputed</p> <p>Readonly property that holds a value computed by an expression.</p> </li> <li> <p>AProperty</p> <p>Observable container of <code>T</code>.</p> </li> <li> <p>APropertyDef</p> <p>Property implementation to use with custom getter/setter.</p> </li> <li> <p>aui::PropertyModifier</p> <p>Temporary transparent object that gains write access to underlying property's value, notifying about value changes when destructed.</p> </li> </ul>"},{"location":"reactive/","title":"Reactive expressions","text":""},{"location":"reactive/#detailed-description","title":"Detailed Description","text":"<p>Reactive expressions are a way to create dynamic values that automatically update when their dependencies change. They're particularly useful for creating computed properties that depend on other properties.</p> <pre><code>APropertyPrecomputed&lt;int&gt; sum = [&amp;] {\n  return property1 + property2;  // automatically tracks dependencies\n};\n</code></pre> <p>This creates a readonly property that computes its value based on other properties. Dependencies are automatically tracked when the expression accesses other properties. The value is recomputed lazily when accessed after dependencies change.</p>"},{"location":"reactive/#related-pages","title":"Related Pages","text":"<ul> <li> <p>AForEachUI</p> <p>Customizable lists display.</p> </li> </ul> <p></p> <ul> <li> <p>declarative::contract::In</p> <p>Denotes a potentially reactive value in declarative contracts.</p> </li> <li> <p>APropertyPrecomputed</p> <p>Readonly property that holds a value computed by an expression.</p> </li> <li> <p>AUI_REACT</p> <p>Explicitly denotes a reactive expression.</p> </li> </ul>"},{"location":"render-to-texture/","title":"Render to texture","text":"<p>Starting from 6.x.x, AUI supports render to texture optimization (experimental). That is, instead of redrawing every view each frame (known as immediate mode) framework redraws views that actually updated, copying persisting pixel data from the last frame. Sometimes this technique is referred as backbuffering.</p> <p>This may gradually improve performance especially if there are a lot of static views.</p> <p>Starting from 6.x.x, Devtools has several options to debug and visualise render-to-texture optimization.</p> <p></p>"},{"location":"render-to-texture/#highlight-redraw-requests","title":"Highlight redraw requests","text":"<p>When enabled, highlights the views that requested repaint with purple overlay.</p> <p>This setting shows which pixel areas should be repainted. Also, you can find views that trigger window repaint event.</p> <p></p> <p>In this example, text field and spinner box are highlighted. Text field has to display cursor blinking, spinner box spins infinitely so it always highlighted.</p>"},{"location":"render-to-texture/#render-to-texture-decay","title":"Render to texture decay","text":"<p>When enabled, gradually grays out pixel areas that were copied from previous frame. That is, redrawn views would appear bright and saturated and views that didn't requested repaint become grayed out.</p>"},{"location":"renderhints_pushmask/","title":"RenderHints::PushMask","text":"<p>Decreases mask stack. Used by AView.</p> Header:<code>#include &lt;AUI/Render/RenderHints.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"renderhints_pushmask/#detailed-description","title":"Detailed Description","text":"<p>This function is unsafe. It is faster, simpler and safer to use the <code>RenderHints::PushMask</code> wrapper class instead.</p>"},{"location":"rendertotexture/","title":"RenderToTexture","text":"<p>Floating value for AText.</p> Header:<code>#include &lt;AUI/View/AView.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"rendertotexture/#public-fields-and-signals","title":"Public fields and Signals","text":"<p><code>bool skipRedrawUntilTextureIsPresented</code></p> <p>Helps avoiding unwanted redrawing if RenderToTexture-capable view is not actually visible.</p>"},{"location":"rendertotexture/#RenderToTexture::skipRedrawUntilTextureIsPresented","title":"skipRedrawUntilTextureIsPresented","text":""},{"location":"repainttrap/","title":"RepaintTrap","text":"<p>Emitted when addView(s)/removeView/setLayout was called.</p> Header:<code>#include &lt;AUI/View/AViewContainerBase.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"retained_immediate_ui/","title":"Retained and immediate UI","text":"<p>This page describes specifics and differences of retained and immediate mode UIs, and how the latter was adopted to AUI.</p>"},{"location":"retained_immediate_ui/#retained_ui","title":"Retained Mode UI","text":"<p>Retained Mode UI is the traditional approach to building user interfaces that most developers are familiar with. In this model, UI elements are created and persist in memory as a tree or graph structure. Think of it like arranging furniture in a room - once you place the elements, they stay there until explicitly moved or removed.</p> <pre><code>class MainWindow: public AWindow {\npublic:\n    MainWindow() {\n        setContents(Centered {\n            // pain point: has to set initial value\n            // pain point: has to use scary statements\n            // instead of invoking a contract that\n            // explicitly describes what the view\n            // expects to receive and give\n            mButton = _new&lt;AButton&gt;(\"0\") AUI_LET {\n                connect(it-&gt;clicked, me::increase);\n            },\n        });\n    }\n\n    void increase() {\n        // pain point: has to manually maintain view's\n        // state\n        // pain point: has to somehow put together\n        // business logic and UI state updates\n        mButton-&gt;setText(\"{}\"_format(++mCounter));\n    }\n\nprivate:\n    _&lt;AButton&gt; mButton;\n    int mCounter = 0;\n};\n</code></pre> <p>When you create a button or a window in retained mode, it continues to exist even when not visible, maintaining its state, properties, and position. This approach is what powers most desktop applications, web browsers, and mobile apps. Systems like Qt Widgets, GTK, Swing, WinAPI, or the HTML DOM are classic examples of retained mode UIs.</p>"},{"location":"retained_immediate_ui/#immediate_ui","title":"Immediate Mode UI","text":"<p>Immediate Mode UI takes a radically different approach. Instead of maintaining persistent UI elements, it rebuilds the entire interface from scratch every frame. Imagine having to redraw everything on a whiteboard multiple times per second - that's essentially what immediate mode UI does.</p> <p>This approach, popularized by libraries like Dear ImGui, is particularly prevalent in game development and debugging tools. The UI is described procedurally, with the application explicitly controlling the state. Rather than creating a button that persists in memory, you essentially say \"draw a button here\" every frame, and if it's clicked, react immediately.</p> <pre><code>// Create a window called \"My First Tool\", with a menu bar.\nImGui::Begin(\"My First Tool\", &amp;my_tool_active, ImGuiWindowFlags_MenuBar);\nif (ImGui::BeginMenuBar())\n{\n    if (ImGui::BeginMenu(\"File\"))\n    {\n        if (ImGui::MenuItem(\"Open..\", \"Ctrl+O\")) { /* Do stuff */ }\n        if (ImGui::MenuItem(\"Save\", \"Ctrl+S\"))   { /* Do stuff */ }\n        if (ImGui::MenuItem(\"Close\", \"Ctrl+W\"))  { my_tool_active = false; }\n        ImGui::EndMenu();\n    }\n    ImGui::EndMenuBar();\n}\n\n// Edit a color stored as 4 floats\nImGui::ColorEdit4(\"Color\", my_color);\n\n// Generate samples and plot them\nfloat samples[100];\nfor (int n = 0; n &lt; 100; n++)\n    samples[n] = sinf(n * 0.2f + ImGui::GetTime() * 1.5f);\nImGui::PlotLines(\"Samples\", samples, 100);\n\n// Display contents in a scrolling region\nImGui::TextColored(ImVec4(1,1,0,1), \"Important Stuff\");\nImGui::BeginChild(\"Scrolling\");\nfor (int n = 0; n &lt; 50; n++)\n    ImGui::Text(\"%04d: Some text\", n);\nImGui::EndChild();\nImGui::End();\n</code></pre> <p></p> <p>This approach is convenient for dynamic interfaces, at the cost of reevaluating layout each frame and drawing everything from scratch.</p>"},{"location":"retained_immediate_ui/#practical-implications","title":"Practical Implications","text":"<p>Immediate mode UI can't be really used in most applications due to high resource consumption, especially on mobile platforms. However, the expressiveness and stateless approach give significant benefits in terms of software development speed.</p> <p>Modern UI frameworks (SwiftUI, QML, Jetpack Compose, including AUI) actually represent a hybrid approach that blends concepts from both retained and immediate mode UIs. They're often called \"declarative UI frameworks\".</p> <p>These frameworks create what appears to be an immediate-mode-like developer experience while maintaining retained-mode-like performance benefits.</p> <p>With declarative syntax, the code style feels similar to immediate mode - you describe what you want the UI to look like at the given moment, rather than how to change it.</p> <pre><code>class MainWindow: public AWindow {\npublic:\n    MainWindow() {\n        setContents(Centered {\n            // 1. you don't need to set the initial string \"0\"\n            Button {\n                .text = AUI_REACT(\"{}\"_format(mCounter)),\n                .onClick = { me::increase },\n            },\n        });\n    }\n\n    void increase() {\n        // 2. the click handler was stripped down to\n        // \"business logic\" only, no explicit actions\n        // to UI.\n        ++mCounter;\n    }\n\nprivate:\n    AProperty&lt;int&gt; mCounter = 0;\n};\n</code></pre> <p>Behind the scenes, these frameworks maintain a virtual representation of the UI (similar to retained mode) but update it efficiently through diffing algorithms. The visual representation is reevaluated only if the state is changed.</p> <p>They use sophisticated state management systems that track dependencies and trigger recompositions only when needed. This is more efficient than pure immediate mode (which redraws everything) but more automated than traditional retained mode.</p> <p>The key innovation is that they provide the mental model and simplicity of immediate mode while maintaining the performance benefits of retained mode. This is why they're often called \"declarative UI frameworks\" rather than being categorized as either retained or immediate mode.</p>"},{"location":"retained_immediate_ui/#aui-specifics","title":"AUI specifics","text":"<p>AUI is historically a retained mode UI. However, it has adopted the \"hybrid mode\" concept. This is why most of AUI's views components provide \"a traditional way\", which consists of creating an object and maintaining its state manually via setters; and a \"declarative way\", which immediately describes the behavior and relationship of a view to the properties, the latter control the state.</p> <p>In the examples above, we've used AButton for retained mode UI, and its declarative notation, <code>declarative::Button</code>, which accepts properties to control it. The latter is a declarative contract.</p> <pre><code>/**\n * &lt;!-- aui:no_dedicated_page --&gt;\n */\nstruct Button {\n    /**\n     * @brief Content of the button.\n     * @details\n     * Can be any view, i.e., `Label` to display text.\n     */\n    _&lt;AView&gt; content;\n\n    /**\n     * @brief Handler for button click event.\n     * @details\n     * Called when user activates the button.\n     */\n    contract::Slot&lt;&gt; onClick;\n\n    /**\n     * @brief Determines if the button is default.\n     * @details\n     * Default buttons are colored with user's accent color and respond to ++enter++ key.\n     */\n    bool isDefault = false;\n\n    _&lt;AButton&gt; operator()() {\n        auto button = _new&lt;AButton&gt;();\n        onClick.bindTo(button-&gt;clicked);\n        if (isDefault) {\n            button-&gt;setDefault();\n        }\n        button-&gt;setContents(Centered { std::move(content) });\n        return button;\n    }\n};\n</code></pre> <p>The declarative contracts are implemented as C++ structures, taking advantage of C++20's aggregate initialization to provide a named-argument syntax. This makes the view's requirements and capabilities immediately obvious to developers while reducing the amount of boilerplate code needed to create and manage views.</p> <p>AUI allows you to choose using between retained and declarative mode. Under the hood, both <code>_new&lt;AButton&gt;</code> and <code>declarative::Button</code> evaluate to creating a new instance of <code>_&lt;AButton&gt;</code>, which allows you to fall back to retained mode in declarative UIs if necessary. Due to growing expectations in regard to dynamism and responsiveness, we strongly suggest using declarative mode only.</p> <p>A good example for preferring retained mode to declarative is a simple text editor, where everything goes around of a single view.</p>"},{"location":"runtime-dependency-resolution/","title":"Runtime dependency resolution","text":"<p>Runtime dependencies are files that are required by your application during execution. Typically, those files are program modules such as <code>*.dll</code>, <code>*.so</code> or <code>*.dylib</code>.</p> <p>Note</p> <p>Runtime dependencies are not easy to deploy and might require additional building process tinkering. For icons, images, sounds and other resources consider using AUI Assets to embed them right into your binary.</p>"},{"location":"runtime-dependency-resolution/#build-time-shared-library-resolution","title":"Build-time shared library resolution","text":"<p>This section describes how runtime dependencies are resolved during build time (and development).</p> <pre><code>-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/api-ms-win-crt-convert-l1-1-0.dll -&gt; D:/a/aui/aui/build/bin\n-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/api-ms-win-crt-environment-l1-1-0.dll -&gt; D:/a/aui/aui/build/bin\n-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/aui.core.dll -&gt; D:/a/aui/aui/build/bin\n-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/aui.views.dll -&gt; D:/a/aui/aui/build/bin\n-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/freetype.dll -&gt; D:/a/aui/aui/build/bin\n-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/libcurl.dll -&gt; D:/a/aui/aui/build/bin\n-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/libsharpyuv.dll -&gt; D:/a/aui/aui/build/bin\n-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/libssl.dll -&gt; D:/a/aui/aui/build/bin\n-- [AUI.BOOT/Runtime Dependency] D:/aui/bin/zlib1.dll -&gt; D:/a/aui/aui/build/bin\n...\n</code></pre>"},{"location":"runtime-dependency-resolution/#dll-platforms-windows-only","title":"DLL platforms (Windows only)","text":"<p>Windows runtime linking process is simple. The dll lookup is performed as follows (ordered by priority):</p> <ol> <li>Find dll in the same directory as exe or dll itself.</li> <li>If 1. is failed, find dll in <code>PATH</code> environment variable.</li> <li>If both 1. and 2. are failed, show an error message box. (A helpful message indicating that some specific dll    was not found is actually a rare case, Windows often displays an error with confusing text such as    \"error code 0xc000007b\").</li> </ol> <p>On DLL targets, the first way is used: the runtime part of shared libraries (dll) are copied to <code>${CMAKE_BINARY_DIR}/bin</code> directory alongside exe files by aui.boot. <pre><code>tree build/\nbin/aui_app.exe\nbin/aui.core.dll\nbin/aui.views.dll\n...\n</code></pre></p>"},{"location":"runtime-dependency-resolution/#other-platforms-unix-like-only","title":"Other platforms (UNIX-like only)","text":"<p>On UNIX-like platforms, a special directory hierarchy should be maintained, for both build tree and portable installations (for compatibility reasons), hence aui.boot copies imported shared objects to <code>${CMAKE_BINARY_DIR}/lib</code>.</p> <p>These libraries are picked up by targets defined via aui_module and aui_executable by adjusting <code>RUNPATH</code>/<code>RPATH</code> which is a special field inside executables indicating where to find required shared libraries.</p> <pre><code>function(_auib_apply_rpath AUI_MODULE_NAME)\n    if (BUILD_SHARED_LIBS AND AUI_PLATFORM_LINUX)\n        set(_rpath \"$ORIGIN;$ORIGIN/../lib\")\n        set_target_properties(${AUI_MODULE_NAME} PROPERTIES BUILD_RPATH \"${_rpath}\"\n                INSTALL_RPATH \"${_rpath}\")\n    endif()\nendfunction()\n</code></pre> <p>Additionally, RPATH is populated by compiler with hardcoded absolute paths to the dependencies hence shared object copying might seem redundant when the entire project with all its dependencies are built on the same machine. Since AUI Boot allows usage of precompiled binaries, instead of paying extra cost determining whether the dependencies are built locally or externally it just copies them to the build tree regardless of their origin.</p> <p>Note</p> <p>The hardcoded full path is suitable for the only machine where binary is built. CMake's <code>cmake --install</code> command clears these paths, opting to use an universal RPATH to make these binaries relocable. AUI.Boot populates RPATH on its own, see the section above.</p>"},{"location":"runtime-dependency-resolution/#install-time-shared-library-resolution","title":"Install-time shared library resolution","text":"<p><code>cmake --install . --prefix=install_prefix</code> produces a portable project installation in <code>install_prefix</code> directory. This involves copying runtime dependencies (for example, <code>.dll</code>, <code>.so</code>, <code>.dylib</code>) alongside executables in a special way so the executables can actually find their dependencies. CPack and other deployment methods use <code>cpack --install</code> so the behaviour is common.</p> <p>In addition to CMake's installation behaviour, targets defined with AUI's aui_executable and  aui_module implement an additional installation behaviour to copy all the required dependencies to installation prefix.</p> <pre><code>-- Installing aui\ninstall_dependencies_for aui/test/aui.boot/Tests/b/repo/aui/build/aui/48af8f8e13e479dbffc65d9a15ab1561/lib/libaui.core.so \naui/test/aui.boot/Tests/b/prefix/zlib/48af8f8e13e479dbffc65d9a15ab1561/lib/libz.so.1\nResolved[1]: aui/test/aui.boot/Tests/b/prefix/zlib/48af8f8e13e479dbffc65d9a15ab1561/lib/libz.so.1\ninstall_dependencies_for aui/test/aui.boot/Tests/b/prefix/zlib/48af8f8e13e479dbffc65d9a15ab1561/lib/libz.so.1  \n[Installing aui] -- Installing aui.core\n[Installing aui] -- Installing dependencies for aui.core\n[Installing aui] -- Installing: aui/test/aui.boot/Tests/b/prefix/aui/48af8f8e13e479dbffc65d9a15ab1561/lib/libz.so.1\n[Installing aui] -- Installing: aui/test/aui.boot/Tests/b/prefix/aui/48af8f8e13e479dbffc65d9a15ab1561/lib/libz.so.1.2.11\n[Installing aui] -- Installing: aui/test/aui.boot/Tests/b/prefix/aui/48af8f8e13e479dbffc65d9a15ab1561/lib/libaui.core.so\n[Installing aui] -- Set non-toolchain portion of runtime path of \"aui/test/aui.boot/Tests/b/prefix/aui/48af8f8e13e479dbffc65d9a15ab1561/lib/libaui.core.so\" to \"$ORIGIN/../lib\"\n...\n</code></pre> <p>The behavior involves utilizing platform-specific tools to analyze the produced binaries. These tools identify all non-system requirements present in the binaries, mitigating the risk of link-time errors on end-user machines by incorporating these requirements into the installation prefix. If some of the shared libraries was not found during installation, an install-time error is thrown.</p> <p>This behaviour can be disabled by setting <code>-DAUI_INSTALL_RUNTIME_DEPENDENCIES=OFF</code>.</p>"},{"location":"runtime-dependency-resolution/#dll-platforms-windows-only_1","title":"DLL platforms (Windows only)","text":"<p>On Windows, dlls and exes are copied together to the same directory (<code>bin/</code>). <pre><code>tree install_prefix/\nbin/aui_app.exe\nbin/aui.core.dll\nbin/aui.views.dll\n...\n</code></pre></p> <p>Note</p> <p>On Windows, if aui_app was used to produce an application, it reconfigures the installation to put dlls and exe to installation root directory (common practice). From perspective of a user, extra directory hierarchy is redundant. <pre><code>tree install_prefix/\naui_app.exe\naui.core.dll\naui.views.dll\n...\n</code></pre> This behaviour is achieved by setting <code>AUI_INSTALL_RUNTIME_DIR</code> target property to <code>\".\"</code>. To mitigate this behaviour, simply set the property back to \"bin\" after <code>aui_app</code> call. <pre><code>set_target_properties(your_app PROPERTIES AUI_INSTALL_RUNTIME_DIR \"bin\")\n</code></pre></p>"},{"location":"runtime-dependency-resolution/#other-platforms-unix-like-only_1","title":"Other platforms (UNIX-like only)","text":"<p>aui.boot updates RUNPATH/RPATH CMake install variables to follow that convention:</p> <ul> <li>ld (Linux/Android):   <pre><code>set(CMAKE_INSTALL_RPATH $ORIGIN/../lib)\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)\n</code></pre></li> <li>dyld (macOS/iOS):   <pre><code>set(CMAKE_INSTALL_NAME_DIR \"@rpath\")\nset(CMAKE_INSTALL_RPATH \"@loader_path/../lib\")\n</code></pre></li> </ul> <p>Typical Linux app installation consists of <code>bin/</code> directory where the executables are located and <code>lib/</code> directory for shared libraries (*.so). The <code>lib/</code> directory should contain all shared libraries required by the executable. <pre><code>tree install_prefix/\nbin/aui_app\nlib/libaui.core.so\nlib/libaui.views.so\n...\n</code></pre></p> <p>Additionally, <code>cmake --install .</code> removes hardcoded absolute library paths from executables that were required for development.</p>"},{"location":"scopedhglobal/","title":"ScopedHGlobal","text":"<p>RAII helper to access HGLOBAL data.</p> Header:<code>#include &lt;AUI/Platform/win32/ScopedHGlobal.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"signal_slot/","title":"Signal-slot","text":"<p>Signal-slots is an object messaging mechanism that creates seamless relations between objects.</p>"},{"location":"signal_slot/#detailed-description","title":"Detailed Description","text":"<p>Signal-slots were originally implemented in Qt and it has proven themselves as an object messaging mechanism making it easy to implement the observer pattern without boilerplate code. Signal-slot tracks object existence on the both ends so destruction of either sender or receiver object breaks the link between them. When the sender or receiver object is destroyed slot execution is never possible even in a multithreaded environment. Almost any signal can be connected to almost any slot (even lambda) by any code.</p> <p>All classes that inherit from AObject or one of its subclasses (e.g., AView) can contain signals and slots. Signals are emitted by objects when they change their state in a way that may be interesting to other objects. This is all the object does to communicate. It does not know or care whether anything is receiving the signals it emits. This is true information encapsulation, and ensures that the object can be used as a software component.</p> <p>Signal declarations (emits) are special public fields of any class that inherit from AObject. <pre><code>class Counter: public AObject {\npublic:\n  Counter() = default;\n\n  void setValue(int value) {\n    mValue = value;\n    emit valueChanged;\n  }\n\nsignals:\n  emits&lt;&gt; valueChanged;\n\nprivate:\n  int mValue = 0;\n};\n</code></pre></p> <p>They can specify arguments: <pre><code>emits&lt;int&gt; valueChanged;\n...\nemit valueChanged(mValue);\n</code></pre></p> <p>Any member function of a class can be used as a slot.</p> <p>You can connect as many signals as you want to a single slot, and a signal can be connected to as many slots as you need.</p>"},{"location":"signal_slot/#signals","title":"Signals","text":"<p>Signals are publicly accessible fields that notify an object's client when its internal state has changed in some way that might be interesting or significant. These signals can be emitted from various locations, but it is generally recommended to only emit them from within the class that defines the signal and its subclasses.</p> <p>The slots connected to a signal are generaly executed immediately when the signal is emitted like a regular function call. \\c emit returns control after all slots are called. If receiver has AObject::setSlotsCallsOnlyOnMyThread set to true and \\c emit was called on a different thread, \\c emit queues slot execution to the AEventLoop associated with receiver's thread. All AView have this behaviour enabled by default.</p>"},{"location":"signal_slot/#slots","title":"Slots","text":"<p>A slot is triggered by the emission of a related signal. Slot is no more than a regular class method with a signal connected to it.</p> <p>When called directly, slots follow standard C++ rules and syntax. However, through a signal-slot connection, any component can invoke a slot regardless of its accessibility level. Visibility scope matters only when creating connection (AObject::connect). This means a signal from one class can call a private slot in another unrelated class if connection is created within class itself (with access to its private/protected methods).</p> <p>Furthermore, slots can be defined as virtual functions, which have been found to be beneficial in practical application development.</p> <p>Compared to callbacks, the signals and slots system has some performance overhead due to its increased flexibility. The difference is typically insignificant for real-world applications. In general, emitting a signal connected to various slots can result in an execution time roughly ten times slower than direct function calls. This delay comes from locating the connection object and safely iterating over connections.</p> <p>The trade-off between the signals and slots mechanism's simplicity and flexibility compared to pure function calls or callbacks is well-justified for most applications, given its minimal performance cost that users won't perceive.</p>"},{"location":"signal_slot/#basic-example","title":"Basic example","text":"<p>Let's use \\c Counter from our previous example: <pre><code>class Counter: public AObject {\npublic:\n  Counter() = default;\n\n  void setValue(int value) {\n    mValue = value;\n    emit valueChanged(value);\n  }\n\nsignals:\n  emits&lt;int&gt; valueChanged;\n\nprivate:\n  int mValue = 0;\n};\n\nclass MyApp: public AObject {\npublic:\n  MyApp() {}\n\n  void run() {\n    connect(mCounter-&gt;valueChanged, this, &amp;MyApp::printCounter);\n    mCounter-&gt;setValue(123); // prints \"New value: 123\"\n  }\n\nprivate:\n  _&lt;Counter&gt; mCounter = _new&lt;Counter&gt;();\n\n  void printCounter(int value) {\n    ALogger::info(\"MyApp\") &lt;&lt; value;\n  }\n};\n\nAUI_ENTRY {\n  auto app = _new&lt;MyApp&gt;();\n  app-&gt;run();\n  return 0;\n}\n</code></pre></p> <p>If <code>connect(mCounter-&gt;valueChanged, this, &amp;MyApp::printCounter);</code> looks too long for you, you can use AUI_SLOT macro: <pre><code>connect(mCounter-&gt;valueChanged, AUI_SLOT(this)::printCounter);\n</code></pre></p> <p>Furthermore, when connecting to <code>this</code>, AUI_SLOT(this) can be replaced with me: <pre><code>connect(mCounter-&gt;valueChanged, me::printCounter);\n</code></pre></p> <p>Lambda can be used as a slot either: <pre><code>connect(mCounter-&gt;valueChanged, this, [](int value) {\n  ALogger::info(\"MyApp\") &lt;&lt; value;\n});\n</code></pre></p> <p>As with methods, <code>this</code> can be omitted: <pre><code>connect(mCounter-&gt;valueChanged, [](int value) {\n  ALogger::info(\"MyApp\") &lt;&lt; value;\n});\n</code></pre></p>"},{"location":"signal_slot/#ui-example","title":"UI example","text":"<p>Knowing basics of signal slots, you can now utilize UI signals: <pre><code>mOkButton = _new&lt;AButton&gt;(\"OK\");\n...\nconnect(mOkButton-&gt;clicked, [] { // the signal is connected to \"this\" object\n    ALogger::info(\"Example\") &lt;&lt; \"The button was clicked\";\n});\n</code></pre></p> <p>Pitfall</p> <p>In lambda, do not capture shared pointer (AUI's _) of signal emitter or receiver object by value. This would cause a memory leak: <pre><code>mOkButton = _new&lt;AButton&gt;(\"OK\");\n...\nconnect(mOkButton-&gt;clicked, [view] { // WRONG!!!\n    view-&gt;setText(\"clicked\");\n});\n</code></pre> Do this way: <pre><code>mOkButton = _new&lt;AButton&gt;(\"OK\");\n...\nconnect(mOkButton-&gt;clicked, [view = view.get()] { // ok\n    view-&gt;setText(\"clicked\");\n});\n</code></pre></p>"},{"location":"signal_slot/#going-further","title":"Going further","text":"<p>Let's take our previous example with <code>Counter</code> and make an UI app. Signal slot reveals it's power when your objects have small handy functions, so lets add <code>increase</code> method to our counter:</p> <pre><code>class Counter: public AObject {\npublic:\n  Counter() = default;\n\n  void setValue(int value) {\n    mValue = value;\n    emit valueChanged(value);\n  }\n\n  void increase() {\n    setValue(mCounter + 1);\n  }\n\nsignals:\n  emits&lt;int&gt; valueChanged;\n\nprivate:\n  int mValue = 0;\n};\n\nclass MyApp: public AWindow {\npublic:\n  MyApp() {\n    auto label = _new&lt;ALabel&gt;(\"-\");\n    auto button = _new&lt;AButton&gt;(\"Increase\");\n\n    using namespace declarative;\n    setContents(Vertical {\n      label,\n      button,\n    });\n\n    connect(button-&gt;clicked, AUI_SLOT(mCounter)::increase); // beauty, huh?\n    connect(mCounter-&gt;valueChanged, label, [label = label.get()](int value) {\n      label-&gt;setText(\"{}\"_format(value));\n    });\n  }\n\nprivate:\n  _&lt;Counter&gt; mCounter = _new&lt;Counter&gt;();\n};\n\nAUI_ENTRY {\n  auto app = _new&lt;MyApp&gt;();\n  app-&gt;show();\n  return 0;\n}\n</code></pre> <p>This way, by clicking on \"Increase\", it would increase the counter and immediately display value via label.</p> <p>Let's make things more declarative and use AUI_LET syntax to set up connections: <pre><code>MyApp() {\n  using namespace declarative;\n  setContents(Vertical {\n    _new&lt;ALabel&gt;(\"-\") AUI_LET {\n      connect(counter-&gt;valueChanged, label, [label = it.get()](int value) {\n        label-&gt;setText(\"{}\"_format(value));\n      });\n    },\n    _new&lt;AButton&gt;(\"Increase\") AUI_LET {\n      connect(it-&gt;clicked, AUI_SLOT(mCounter)::increase);\n    },\n  });\n}\n</code></pre></p> <p>See also property-system for making reactive UI's on trivial data.</p>"},{"location":"signal_slot/#arguments","title":"Arguments","text":"<p>If signal declares arguments (i.e, like AView::keyPressed), you can accept them: <pre><code>view = _new&lt;ATextField&gt;();\n...\nconnect(view-&gt;keyPressed, [](AInput::Key k) { // the signal is connected to \"this\" object\n    ALogger::info(\"Example\") &lt;&lt; \"Key was pressed: \" &lt;&lt; k;\n});\n</code></pre></p> <p>The signals and slots mechanism is type safe: The signature of a signal must match the signature of the receiving slot. Also, a slot may have a shorter signature than the signal it receives because it can ignore extra arguments: <pre><code>view = _new&lt;ATextField&gt;();\n...\nconnect(view-&gt;keyPressed, [] { // the signal is connected to \"this\" object\n    ALogger::info(\"Example\") &lt;&lt; \"Key was pressed\";\n});\n</code></pre></p>"},{"location":"signal_slot/#differences-between-qt-and-aui-implementation","title":"Differences between Qt and AUI implementation","text":"<p>Suppose we want to emit <code>statusChanged</code> signal with a string argument and connect it with <code>showMessage</code> slot:</p> Qt AUI Signal declaration <pre><code>signals:\n  void statusChanged(QString str);\n</code></pre> <pre><code>signals:\n  emits&lt;AString&gt; statusChanged;\n</code></pre> Slot declaration <pre><code>slots:\n  void showMessage(QString str);\n</code></pre> <pre><code>  void showMessage(AString str);\n</code></pre> Connect from <code>this</code> to <code>this</code> <pre><code>connect(this, SIGNAL(statusChanged(QString), this, SLOT(showMessage(QString)));\n</code></pre> <pre><code>  connect(statusChanged, me::showMessage);\n</code></pre> Connect from the <code>emitter</code> object to the <code>sender</code> object <pre><code> QObject::connect(emitter, SIGNAL(statusChanged(QString), receiver, SLOT(showMessage(QString)));\n</code></pre> <pre><code>  AObject::connect(emitter-&gt;statusChanged, AUI_SLOT(receiver)::showMessage);\n</code></pre>"},{"location":"signal_slot/#related-pages","title":"Related Pages","text":"<ul> <li> <p>emit</p> <p>emits the specified signal in context of <code>this</code> object.</p> </li> <li> <p>AUI_EMIT_FOREIGN</p> <p>emits the specified signal in context of specified object.</p> </li> <li> <p>AAbstractSignal</p> <p>Base class for signal.</p> </li> <li> <p>signals</p> <p>A signal declaration.</p> </li> <li> <p>me</p> <p>Passes the current class and type of the current class separated by comma. It's convenient to use with the    connect function:</p> </li> <li> <p>AUI_SLOT</p> <p>Passes some variable and type of the variable separated by comma. It's convenient to use with the connect    function (see examples).</p> </li> <li> <p>AUI_EMIT_FOREIGN_SIGNAL</p> <p>Emits a signal of a foreign object.</p> </li> </ul>"},{"location":"signals/","title":"signals","text":"<p>A signal declaration.</p> Header:<code>#include &lt;AUI/Common/ASignal.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"signals/#definition","title":"Definition","text":"<pre><code>#define signals public\n</code></pre>"},{"location":"signals/#examples","title":"Examples","text":"examples/app/fractal/src/FractalView.h <p>Fractal Example - Fractal viewer application demonstrating usage of custom shaders. <pre><code>    double getPlotScale() const;\n\n    void setPlotPositionAndScale(glm::dvec2 position, double scale);\n\nsignals:\n\n    emits&lt;glm::dvec2, double&gt; centerPosChanged;\n};\n</code></pre></p> examples/ui/contacts/src/view/ContactDetailsView.h <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>class ContactDetailsView : public AViewContainerBase {\npublic:\n    ContactDetailsView(_&lt;Contact&gt; contact);\n\nsignals:\n    emits&lt;&gt; deleteAction;\n\nprivate:\n    _&lt;Contact&gt; mContact;\n    _&lt;Contact&gt; mOriginalContact;\n</code></pre></p>"},{"location":"signals/#examples_1","title":"Examples","text":""},{"location":"sizeinjector/","title":"SizeInjector","text":"<p>AView-like object that forwards some methods from AView and injects overridedSize if set.</p> Header:<code>#include &lt;AUI/Util/SplitterSizeInjector.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"texttransform/","title":"TextTransform","text":"<p>Controls the text transform of AView.</p> Header:<code>#include &lt;AUI/Enum/TextTransform.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"texttransform/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"troubleshoot-list/","title":"Troubleshoot list","text":"<p>If neither of these suggestions helped and you think you encountered an AUI's issue, consider reporting it on GitHub.</p>"},{"location":"troubleshoot-list/#linking-problems","title":"Linking problems","text":"<ol> <li>Make sure you are using <code>aui_link</code> instead of <code>target_link_libraries</code> at least for AUI's components.</li> <li> <p>Try using static build instead of shared libraries.</p> <pre><code>cd build\ncmake .. -DBUILD_SHARED_LIBS=OFF\n</code></pre> </li> </ol>"},{"location":"troubleshoot-list/#assets","title":"Assets","text":"<p>See also: AUI Assets</p> <ol> <li>Ensure you have called <code>aui_compile_assets()</code> in your <code>CMakeLists.txt</code>.</li> <li>Make sure you are using <code>aui_link</code> instead of <code>target_link_libraries</code> at least for AUI's components.</li> <li>If you are <code>aui_link</code>'ing asset-containing modules (i.e. <code>aui::views</code>) against static library, consider link them    also with the final executable (<code>PUBLIC</code> linking does not solve this issue on Linux).</li> <li>Try using WHOLEARCHIVE flag.</li> </ol>"},{"location":"troubleshoot-list/#BUILD_CACHE_INVALIDATION","title":"Build cache invalidation","text":"<p>Symptoms:</p> <ol> <li>Linking problems</li> <li>Newly added/removed files not being recognized by the build system</li> <li>Changes in CMake scripts are not \"visible\" in IDE</li> <li>Other weird issues</li> </ol> <p>Cache invalidation is one of the software engineering problems (along with naming). There's cheatsheet on how to invalidate caches: </p> <ol> <li>Reload CMake cache</li> <li>In CLion: File &gt; Reload CMake Project</li> <li>In Visual Studio Code: <code>F1</code> &gt; <code>CMake: Configure</code></li> <li>In CLI:     <pre><code>cd &lt;YOUR_BUILD_DIR&gt;\ncmake ..\n</code></pre>     or     <pre><code>cmake --build &lt;YOUR_BUILD_DIR&gt;\n</code></pre></li> <li>Delete <code>CMakeCache.txt</code> from your CMake binary dir (<code>cmake-build-debug</code> or <code>cmake-build-release</code> in CLion).</li> <li>Delete your CMake binary dir.</li> <li>Change AUI version (also may need <code>CMakeCache.txt</code> to be deleted)</li> <li>Delete aui.boot cache dir (~/.aui (AUI.Boot Cache Dir) unless otherwise specified)</li> </ol>"},{"location":"ui-building-overview/","title":"UI Building Overview","text":"<p>AUI Framework provides a comprehensive set of tools and libraries for building robust, scalable, and maintainable user interfaces. With its modular architecture and extensive feature set, developers can create complex UI components with ease. See Getting started with AUI for quick start.</p>"},{"location":"ui-building-overview/#views","title":"Views","text":"<p>Views are basic units to build UIs with AUI. There is a wide range of pre-built views for common UI elements, such as buttons, labels, and text inputs.</p> <p></p>"},{"location":"ui-building-overview/#layout","title":"Layout","text":"<p>Layout is flexible and customizable way of managing your views in a logical and visually appealing manner. From simple linear layouts to complex grid-based adaptive arrangements.</p> <p></p>"},{"location":"ui-building-overview/#styles","title":"Styles","text":"<p>ASS supports for custom themes and styling using CSS-like syntax. Customize the look and feel of your UI using robust styling and theming capabilities.</p> <p></p>"},{"location":"ui-building-overview/#event-handling-with-signal-slot","title":"Event handling with signal-slot","text":"<p>signal_slot can be used to handle UI events and respond to them accordingly.</p> <pre><code>mOkButton = _new&lt;AButton&gt;(\"OK\");\nconnect(mOkButton-&gt;clicked, [] { \n    ALogger::info(\"Example\") &lt;&lt; \"The button was clicked\";\n});\n</code></pre>"},{"location":"ui-building-overview/#data-binding","title":"Data Binding","text":"<p>Data binding, based on signal_slot \"signal-slot\", allows to establish a connection between UI and application data objects.</p> <p></p>"},{"location":"ui-building-overview/#devtools","title":"Devtools","text":"<p>AUI Devtools provide a set of features that makes it easier to design, test, and debug your UI components. With visual debugging tools, and more, you can streamline your development workflow and focus on building amazing user experiences.</p> <p></p>"},{"location":"ui-building-overview/#api-reference","title":"API Reference","text":"<ul> <li>All Views</li> <li>ASS<ul> <li>Selectors</li> <li>Properties</li> </ul> </li> </ul>"},{"location":"unixeventfd/","title":"UnixEventFd","text":"<p>File-descriptor object to trigger select/poll/epoll/kqueue</p> Header:<code>#include &lt;AUI/Platform/unix/UnixEventFd.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"unixeventfd/#detailed-description","title":"Detailed Description","text":"<p>On Linux implemented with eventfd. On FreeBSD/Apple implemented with pipes.</p>"},{"location":"unixiothread/","title":"UnixIoThread","text":"<p>Poll-based event loop to handle events of file descriptors.</p> Header:<code>#include &lt;AUI/Platform/unix/UnixIoThread.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::core)</code>"},{"location":"updater/","title":"aui::updater","text":"<p>Deliver updates on non-centralized distribution methods</p>"},{"location":"updater/#detailed-description","title":"Detailed Description","text":"<p>Experimental Feature</p> <p>This API is experimental. Experimental APIs are likely to contain bugs, might be changed or removed in the future.</p> <p>This module is purposed for delivering updates to your end users on distribution methods that do not support that by themselves (i.e., occasional Windows installers, portables for Windows and Linux, macOS app bundles downloaded from your website). Here's small breakdown:</p> Platform Distribution method Auto updating solution Windows (operating system) Installer/exe updater Windows (operating system) Microsoft Store (used rarely) Microsoft Store Linux (-based desktop OSes) Portables updater Linux (-based desktop OSes) Flatpak Flathub macOS (operating system) DMG (*.app) - macOS (operating system) Apple App Store Apple App Store Android (operating system) APK Google Play Store iOS (operating system) IPA Apple App Store What is portable? <p>Portable is a term used to describe a software distribution method that does not require the user to install the software on their computer.</p> <p>Portable software is typically distributed as a single executable file (i.e., a single file with all dependencies packed into it), usually not requiring to \"install\" it to the system.</p> <p><code>aui.updater</code> module expects your program to be installed to user's directory (i.e., updating does not require admin privileges). If that's not your case, you'll need to update your installer configuration (Inno Setup) to install to user's directory (i.e., in <code>AppData</code>).</p> <p>Note</p> <p>Check out our App Template \u26a1 for a GitHub-hosted app template with auto update implemented.</p>"},{"location":"updater/#supported-platforms","title":"Supported platforms","text":"<p><code>aui::updater</code> supports the following platforms:</p> <ul> <li>Windows - portables (AUI_PORTABLE_ZIP, AUI_PORTABLE_TGZ) only, installers to user's directory only (Inno Setup)</li> <li>Linux - portables only</li> </ul> <p>On a supported platform, <code>aui::updater</code> checks if the app executable is writable by the current user. If the executable is not writeable, or running on a non-supported platform, <code>AUpdater</code> stubs it's methods (i.e., they do nothing). You can check that the <code>aui::updater</code> functionality is engaged by calling <code>AUpdater::isAvailable()</code>.</p> <p>Updating process requires the initial application running instance to be stopped to replace its files with newer ones. Additionally, the updater process starts the newer version of the application after replacing the files (applying/deploying an update). To minimize downtime for end-users, the replacement should be seamless and quick and thus the deployment process just copies newer files (overwriting old ones), it does not involve network operations.</p>"},{"location":"updater/#getting-started","title":"Getting started","text":"<p><code>AUpdater</code> lives inside entrypoint of your application. It needs you to pass program arguments. It might decide to terminate process execution via std::exit. <pre><code>class MyUpdater : public AUpdater {\nprotected:\n    AFuture&lt;void&gt; checkForUpdatesImpl() override { return AUI_THREADPOOL { /* stub */ }; }\n    AFuture&lt;void&gt; downloadUpdateImpl(const APath&amp; unpackedUpdateDir) override { return AUI_THREADPOOL { /* stub */ }; }\n};\n\nAUI_ENTRY {\n    auto updater = _new&lt;MyUpdater&gt;();\n    updater-&gt;handleStartup(args);\n\n    // your program routines (i.e., open a window)\n    _new&lt;MainWindow&gt;(updater)-&gt;show();\n    return 0;\n}\n</code></pre></p> <p>You can pass updater instance to your window (as shown in the example) and display update information from <code>AUpdater::status</code> and perform the update when requested.</p>"},{"location":"updater/#observing-update-progress","title":"Observing update progress","text":"<p>See <code>AUpdater::status</code></p>"},{"location":"updater/#update-process","title":"Update process","text":""},{"location":"updater/#checking-for-updates","title":"Checking for updates","text":"<p>AUpdater expects <code>AUpdater::checkForUpdates()</code> to be called to check for updates. It can be called once per some period of time. It calls user-defined <code>AUpdater::checkForUpdatesImpl()</code> to perform an update checking.</p> <p>The update steps are reported by changing <code>AUpdater::status</code> property.</p> <pre><code>sequenceDiagram\n autonumber\n participant a as Your App\n participant u as AUpdater\n\n a-&gt;&gt;u: handleStartup(...)\n u--&gt;&gt;a: status = AUpdater::StatusIdle\n u--&gt;&gt;a: control flow\n\n Note over a,u: App Normal Lifecycle\n a-&gt;&gt;u: checkForUpdates()\n u--&gt;&gt;a: status = AUpdater::StatusCheckingForUpdates\n u--&gt;&gt;a: control flow\n u-&gt;&gt;u: checkForUpdatesImpl()\n u--&gt;&gt;a: status = AUpdater::StatusIdle\n\n Note over a,u: update published\n a-&gt;&gt;u: checkForUpdates()\n u--&gt;&gt;a: status = AUpdater::StatusCheckingForUpdates\n u--&gt;&gt;a: control flow\n u-&gt;&gt;u: checkForUpdatesImpl()\n Note over u: update was found\n u--&gt;&gt;a: status = AUpdater::StatusIdle</code></pre> <p>You might want to store update check results (i.e., download url) in your implementation of AUpdater::checkForUpdatesImpl so your <code>AUpdater::downloadUpdateImpl()</code> might reuse this information.</p>"},{"location":"updater/#downloading-the-update","title":"Downloading the update","text":"<p>When an update is found, your app should call <code>AUpdater::downloadUpdate()</code> to download and unpack the update. It is up to you to decide when to download an update. If you wish, you can call AUpdater::downloadUpdate in <code>AUpdater::checkForUpdatesImpl()</code> to proceed to download process right after update was found (see Updater workflows for more information about update workflow decisions). It calls user-defined <code>AUpdater::downloadUpdateImpl()</code> which might choose to call default <code>AUpdater::downloadAndUnpack(&lt;YOUR DOWNLOAD URL&gt;, unpackedUpdateDir)</code>.</p> <pre><code>sequenceDiagram\n   autonumber\n   participant a as Your App\n   participant u as AUpdater\n\n   a-&gt;&gt;u: downloadUpdate()\n   u--&gt;&gt;a: status = AUpdater::StatusDownloading\n   u-&gt;&gt;u: downloadUpdateImpl()\n   u--&gt;&gt;a: status = AUpdater::StatusWaitingForApplyAndRestart\n\n   Note over a,u: Your App Prompts User to Update</code></pre>"},{"location":"updater/#applying-deploying-the-update","title":"Applying (deploying) the update","text":"<p>At this moment, AUpdater waits <code>AUpdater::applyUpdateAndRestart()</code> to be called. When <code>AUpdater::applyUpdateAndRestart()</code> is called (i.e., when user accepted update installation), AUpdater executes the newer copy of your app downloaded before with a special command line argument which is handled by <code>AUpdater::handleStartup()</code> in that executable. The initial app process is finished, closing your app window as well. From now, your app is in \"downtime\" state, so we need to apply the update and reopen app back again as quickly as possible. This action is required to perform update installation. The copy then replaces old application (where it actually installed) with itself (that is, the downloaded, newer copy). After operation is complete, it passes the control back to the updated application executable. At last, the newly updated application performs a cleanup after update.</p> <pre><code>sequenceDiagram\n   autonumber\n   participant a as Your App\n   participant u as AUpdater\n   u --&gt;&gt; a: applyUpdateAndRestart()\n   create participant da as Your App Copy\n   u --&gt;&gt; da: Execute with update arg\n   u --&gt;&gt; u: exit(0)\n   Note over a,u: Process Finished\n   create participant du as AUpdater Copy\n   da --&gt;&gt; du: handleStartup\n   du --&gt;&gt; du: deployUpdate(...)\n   du --&gt;&gt; a: Execute\n   destroy du\n   du --&gt;&gt; da: exit(0)\n   destroy da\n   da--&gt;a:\n   Note over a,u: Process Started\n   a --&gt;&gt; u: handleStartup\n   u --&gt;&gt; u: cleanup download dir\n   a --x u: App Normal Lifecycle</code></pre> <p>After these operations complete, your app is running in its normal lifecycle.</p>"},{"location":"updater/#UpdaterTest_Typical_Implementation","title":"Typical Implementation","text":"<p>AUpdater is an abstract class; it needs some functions to be implemented by you.</p> <p>In this example, let's implement auto update from GitHub release pages. <pre><code>static constexpr auto LOG_TAG = \"MyUpdater\";\nclass MyUpdater: public AUpdater {\npublic:\n    ~MyUpdater() override = default;\n\nprotected:\n    AFuture&lt;void&gt; checkForUpdatesImpl() override {\n        return AUI_THREADPOOL {\n            try {\n                auto githubLatestRelease = aui::updater::github::latestRelease(\"aui-framework\", \"example_app\");\n                ALogger::info(LOG_TAG) &lt;&lt; \"Found latest release: \" &lt;&lt; githubLatestRelease.tag_name;\n                auto ourVersion = aui::updater::Semver::fromString(AUI_PP_STRINGIZE(AUI_CMAKE_PROJECT_VERSION));\n                auto theirVersion = aui::updater::Semver::fromString(githubLatestRelease.tag_name);\n\n                if (theirVersion &lt;= ourVersion) {\n                    getThread()-&gt;enqueue([] {\n                      AMessageBox::show(\n                          nullptr, \"No updates found\", \"You are running the latest version.\", AMessageBox::Icon::INFO);\n                    });\n                    return;\n                }\n                aui::updater::AppropriatePortablePackagePredicate predicate {};\n                auto it = ranges::find_if(\n                    githubLatestRelease.assets, predicate, &amp;aui::updater::github::LatestReleaseResponse::Asset::name);\n                if (it == ranges::end(githubLatestRelease.assets)) {\n                    ALogger::warn(LOG_TAG)\n                        &lt;&lt; \"Newer version was found but a package appropriate for your platform is not available. \"\n                           \"Expected: \"\n                        &lt;&lt; predicate.getQualifierDebug() &lt;&lt; \", got: \"\n                        &lt;&lt; (githubLatestRelease.assets |\n                            ranges::view::transform(&amp;aui::updater::github::LatestReleaseResponse::Asset::name));\n                    return;\n                }\n                ALogger::info(LOG_TAG) &lt;&lt; \"To download: \" &lt;&lt; (mDownloadUrl = it-&gt;browser_download_url);\n\n                getThread()-&gt;enqueue([this, self = shared_from_this(), version = githubLatestRelease.tag_name] {\n                    if (AMessageBox::show(\n                            nullptr, \"New version found!\", \"Found version: {}\\n\\nWould you like to update?\"_format(version),\n                            AMessageBox::Icon::INFO, AMessageBox::Button::YES_NO) != AMessageBox::ResultButton::YES) {\n                        return;\n                    }\n\n                    downloadUpdate();\n                });\n\n            } catch (const AException&amp; e) {\n                ALogger::err(LOG_TAG) &lt;&lt; \"Can't check for updates: \" &lt;&lt; e;\n                getThread()-&gt;enqueue([] {\n                    AMessageBox::show(\n                        nullptr, \"Oops!\", \"There is an error occurred while checking for updates. Please try again later.\",\n                        AMessageBox::Icon::CRITICAL);\n                });\n            }\n        };\n    }\n\n    AFuture&lt;void&gt; downloadUpdateImpl(const APath&amp; unpackedUpdateDir) override {\n        return AUI_THREADPOOL {\n          try {\n              AUI_ASSERTX(!mDownloadUrl.empty(), \"make a successful call to checkForUpdates first\");\n              downloadAndUnpack(mDownloadUrl, unpackedUpdateDir);\n              reportReadyToApplyAndRestart(makeDefaultInstallationCmdline());\n          } catch (const AException&amp; e) {\n              ALogger::err(LOG_TAG) &lt;&lt; \"Can't check for updates: \" &lt;&lt; e;\n              getThread()-&gt;enqueue([] {\n                AMessageBox::show(\n                    nullptr, \"Oops!\", \"There is an error occurred while downloading update. Please try again later.\",\n                    AMessageBox::Icon::CRITICAL);\n              });\n          }\n        };\n    }\n\nprivate:\n    AString mDownloadUrl;\n};\n</code></pre></p>"},{"location":"updater/#UPDATER_WORKFLOWS","title":"Updater workflows","text":"<p>When using AUpdater for your application, you need to consider several factors including usability, user experience, system resources, and particular needs of your project.</p> <p>Either way, you might want to implement a way to disable auto update feature in your application.</p>"},{"location":"updater/#prompt-user-on-every-step","title":"Prompt user on every step","text":"<p>This approach is implemented in AUI's App Template \u26a1.</p> <p>The updater checks for updater periodically or upon user request and informs the user that an update is available. The user then decides whether to proceed with update or not. If they agree the application will download and install the update.</p> <p>This way can be considered as better approach because the user may feel they control the situation and the application never does things that user never asked to (trust concerns). On the other hand, such requirement of additional user interaction to can distract them from doing their work, so these interactions should not be annoying.</p> <p>You should not use AMessageBox (unless user explicitly asked to check for update) as it literally interrupts the user's workflow, opting them to make a decision before they can continue their work. A great example of a bad auto update implementation is qBittorrent client on Windows: hence this application typically launches on OS startup, it checks for updates in background and pops the message box if update was found, even if user is focused on another application or away from keyboard.</p>"},{"location":"updater/#silent-download","title":"Silent download","text":"<p>This approach is implemented in AUI Telegram Client (AUIgram), as well as in official Qt-based Telegram Desktop client.</p> <p>The updater silently downloads the update in the background while the user continues working within the application or even other tasks. The update then is applied automatically upon restart. Optionally, the application might show a button/message/notification bubble to restart and apply update.</p> <p>Despite user trust concerns, this approach allows seamless experience - users don't need to be interrupted during their work. They even might not care about updates.</p>"},{"location":"updater/#related-pages","title":"Related Pages","text":"<ul> <li> <p>aui::updater::Semver</p> <p>Semantic version.</p> </li> <li> <p>AUpdater</p> <p>Updater class.</p> </li> <li> <p>aui::updater::AppropriatePortablePackagePredicate</p> <p>Determines whether the passed package name is a portable package that matches current arch and platform.</p> </li> </ul>"},{"location":"useful_macros/","title":"Useful macros","text":"<p>A set of functionality that introduces non-standard syntax which seems like the language features.</p>"},{"location":"useful_macros/#related-pages","title":"Related Pages","text":"<ul> <li> <p>AUI_ASSERT_UI_THREAD_ONLY</p> <p>Asserts that the macro invocation has been performed in the UI thread.</p> </li> <li> <p>AUI_ASSERT_WORKER_THREAD_ONLY</p> <p>Asserts that the macro invocation has not been performed in the UI thread.</p> </li> <li> <p>AUI_DECLARATIVE_FOR</p> <p>ranged-for-loop style wrapped for AForEachUI.</p> </li> <li> <p>AUI_ENTRY</p> <p>Application entry point.</p> </li> <li> <p>AUI_ENUM_VALUES</p> <p>Defines all enum values for AEnumerate.</p> </li> <li> <p>AUI_NO_OPTIMIZE_OUT</p> <p>Forbids object from being optimized out by compiler.</p> </li> <li> <p>AUI_MARK_AS_USED</p> <p>Marks the variable as being used.</p> </li> <li> <p>AUI_REACT</p> <p>Explicitly denotes a reactive expression.</p> </li> <li> <p>AUI_PERFORM_AS_MEMBER</p> <p>Performs multiple operations on a single object without repeating its name.</p> </li> <li> <p>AUI_DEFER</p> <p>Defers execution of the next block to the end of current block (RAII scope).</p> </li> <li> <p>AUI_LET</p> <p>Performs multiple operations on a single object without repeating its name (in place)    This function can be used as an operator on object.</p> </li> <li> <p>AUI_WITH_STYLE</p> <p>Allows to define a style to the view right in place.</p> </li> <li> <p>AUI_THREADPOOL</p> <p>Executes following {} block asynchronously in the global thread pool. Unlike AUI_THREADPOOL_X, does now allow to set lambda's capture. Lambda's capture is <code>[=]</code>.</p> </li> <li> <p>AUI_THREADPOOL_X</p> <p>Executes following {} block asynchronously in the global thread pool. Unlike AUI_THREADPOOL, allows to set lambda's capture but you should always specify lambda's capture.</p> </li> <li> <p>AUI_DO_ONCE</p> <p>Executes following function call or {} block once per program execution</p> </li> <li> <p>AUI_UI_THREAD</p> <p>Executes lambda on main thread.</p> </li> <li> <p>AUI_UI_THREAD_X</p> <p>Executes lambda on main thread. Allows to determine lambda's capture.</p> </li> <li> <p>AUI_ASSERT</p> <p>Asserts that the passed condition evaluates to true.</p> </li> <li> <p>AUI_ASSERTX</p> <p>Asserts that the passed condition evaluates to true. Adds extra message string.</p> </li> <li> <p>AUI_ASSERT_NO_CONDITION</p> <p>Always triggers assertion fail.</p> </li> <li> <p>AUI_BREAKPOINT</p> <p>Stops program execution in attached debugger as if a breakpoint were set.</p> </li> <li> <p>AUI_PP_CAT</p> <p>Expands and concatenates the arguments. Constructed macros reevaluate.</p> </li> <li> <p>AUI_PP_STRINGIZE</p> <p>Expands and stringifies the only argument.</p> </li> <li> <p>AUI_PP_EMPTY</p> <p>Returns empty. Given a variadic number of arguments.</p> </li> <li> <p>AUI_PP_COMMA</p> <p>Returns a comma. Given a variadic number of arguments.</p> </li> <li> <p>AUI_PP_IDENTITY</p> <p>Returns the only argument.</p> </li> <li> <p>AUI_PP_NARG</p> <p>Evaluates to the number of arguments after expansion.</p> </li> <li> <p>AUI_PP_HAS_COMMA</p> <p>Returns 1 if the expansion of arguments has an unprotected comma.Otherwise returns 0.</p> </li> <li> <p>AUI_PP_HEAD</p> <p>Returns the first argument.</p> </li> <li> <p>AUI_PP_TAIL</p> <p>Returns the tail. A variadic list of all arguments minus the first</p> </li> <li> <p>AUI_PP_VARIADIC_CALL</p> <p>Calls CAT(_Macro, NARG(VA_ARGS))(VA_ARGS)</p> </li> <li> <p>AUI_PP_IS_EMPTY</p> <p>If the arguments after expansion have no tokens, evaluates to <code>1</code>. Otherwise evaluates to <code>0</code>.</p> </li> <li> <p>AUI_PP_IF</p> <p>Evaluates to _Then if _Cond is 1 and _Else if _Cond is 0.</p> </li> <li> <p>AUI_PP_GENERIC_IF</p> <p>Similar to AUI_PP_IF but takes _Then and _Else in parentheses.</p> </li> <li> <p>AUI_PP_NARG0</p> <p>Evaluates to the number of arguments after expansion. Identifies 'empty' as 0.</p> </li> <li> <p>AUI_PP_IS_BEGIN_PARENS</p> <p>Expands to 1 if the first argument starts with something in parentheses, otherwise to 0.</p> </li> <li> <p>AUI_PP_IS_ENCLOSED_PARENS</p> <p>Expands to 1 is there is only one argument and it is enclosed in parentheses.</p> </li> <li> <p>AUI_PP_REMOVE_PARENS</p> <p>Remove the parens, requires AUI_PP_IS_ENCLOSED_PARENS(args) =&gt; 1.</p> </li> <li> <p>AUI_PP_FOR_EACH</p> <p>Expands to _Macro(0, _Data, e1) _Macro(1, _Data, e2) ... _Macro(K -1, _Data, eK) as many of AUI_INTERNAL_NARG0 _Tuple.</p> </li> <li> <p>AUI_PP_REPEAT</p> <p>Expands to _Macro(0, _Data, ) _Macro(1, _Data, ) ... _Macro(K - 1, _Data, )</p> </li> <li> <p>AUI_PP_INC</p> <p>Increments the argument, requires the argument to be between 0 and 15.</p> </li> <li> <p>AUI_PP_COMMA_IF</p> <p>Returns comma if <code>_i != 0</code>. Requires <code>_i</code> to be between 0 and 15.</p> </li> </ul>"},{"location":"verticalalign/","title":"VerticalAlign","text":"<p>Controls the text vertical alignment of AView.</p> Header:<code>#include &lt;AUI/Enum/VerticalAlign.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::views)</code>"},{"location":"verticalalign/#examples","title":"Examples","text":"examples/app/notes/src/main.cpp <p>Notes App - Note taking app that demonstrates usage of AListModel, AProperty, user data saving and loading. <pre><code>                      },\n                      /// [scrollarea]\n                      AScrollArea::Builder()\n                          .withContents(\n                          AUI_DECLARATIVE_FOR(note, *mNotes, AVerticalLayout) {\n                              observeChangesForDirty(note);\n                              return notePreview(note) AUI_LET {\n                                  connect(it-&gt;clicked, [this, note] { mCurrentNote = note; });\n                                  it&amp; mCurrentNote &gt; [note](AView&amp; view, const _&lt;Note&gt;&amp; currentNote) {\n                                      ALOG_DEBUG(LOG_TAG) &lt;&lt; \"currentNote == note \" &lt;&lt; currentNote &lt;&lt; \" == \" &lt;&lt; note;\n</code></pre></p> examples/ui/contacts/src/main.cpp <p>AUI Contacts - Usage of AUI_DECLARATIVE_FOR to make a contacts-like application. <pre><code>        mSelectedContact = nullptr;\n    }\n\n    _&lt;AView&gt; indexedList() {\n        return AUI_DECLARATIVE_FOR(group, *mContacts | ranges::views::chunk_by([](const _&lt;Contact&gt;&amp; lhs, const _&lt;Contact&gt;&amp; rhs) {\n                                return groupLetter(lhs-&gt;displayName) == groupLetter(rhs-&gt;displayName);\n                            }), AVerticalLayout) {\n            auto firstContact = *ranges::begin(group);\n            auto firstLetter = groupLetter(firstContact-&gt;displayName);\n            ALogger::info(\"Test\") &lt;&lt; \"Computing view for group \" &lt;&lt; AString(1, firstLetter);\n</code></pre></p> examples/ui/views/src/ExampleWindow.cpp <p>Views Example - All-in-one views building example. <pre><code>                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n</code></pre></p> examples/ui/infinite_lazy_list/src/main.cpp <p>Infinite Lazy List - Usage of AUI_DECLARATIVE_FOR to make an infinite lazy list. <pre><code>        };\n    });\n\n    return Vertical {\n        AUI_DECLARATIVE_FOR(i, *state-&gt;items, AVerticalLayout) { return Label{} &amp; i-&gt;value; },\n        Centered {\n          _new&lt;ASpinnerV2&gt;() AUI_LET {\n                  AObject::connect(it-&gt;redrawn, AObject::GENERIC_OBSERVER, [state] {\n                      // when a spinner appears, we indicate that we need more items.\n                      state-&gt;needMore = true;\n</code></pre></p> examples/7guis/crud/src/main.cpp <p>7GUIs CRUD - Create/Read/Update/Delete example. <pre><code>                Label { \"Filter prefix:\" },\n                _new&lt;ATextField&gt;() AUI_WITH_STYLE { Expanding(1, 0) } &amp;&amp; mFilterPrefix,\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              AScrollArea::Builder().withExpanding().withContents(\n                  AUI_DECLARATIVE_FOR(i, *mUsers | FILTER_VIEW, AVerticalLayout) {\n                    auto view = _new&lt;ALabel&gt;();\n                    view &amp; i-&gt;displayName;\n                    connect(mSelectedUser, view, [this, &amp;view = *view, i] {\n                        view.setAssName(\"selected\", mSelectedUser == i);\n                    });\n</code></pre></p>"},{"location":"views-example/","title":"Views Example","text":"<p>Example's page</p> <p>This page describes an example listed in ui category.</p> <p>All-in-one views building example.</p> <p></p> <p>This example project is used to test various UI things. As framework was growing, this particular project is bloated with various components. At the moment, some efforts are performed to this application to split and categorize things up.</p>"},{"location":"views-example/#source-code","title":"Source Code","text":"<p> Repository </p>"},{"location":"views-example/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>cmake_minimum_required(VERSION 3.16)\n\n# Uncomment this code to pull AUI:\n#\n# file(\n#         DOWNLOAD\n#         https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake\n#         ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n# include(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n#\n# auib_import(aui https://github.com/aui-framework/aui\n#             COMPONENTS core views audio curl)\n\naui_executable(aui.example.views)\naui_compile_assets(aui.example.views)\n\n# [aui_link]\naui_link(aui.example.views PRIVATE aui::core aui::views aui::audio aui::curl)\n# [aui_link]\n\n# [aui_app]\naui_app(TARGET aui.example.views\n        NAME \"AUI Examples\"\n        APPLE_BUNDLE_IDENTIFIER \"aui.Examples\"\n        APPLE_SIGN_IDENTITY \"iPhone Developer\"\n        APPLE_TEAM_ID \"98S256N2KJ\"\n        ANDROID_PACKAGE \"com.github.aui.examples\"\n        ICON \"assets/img/logo.svg\"\n        )\n# [aui_app]\n</code></pre>"},{"location":"views-example/#testslayoutmanagertestcpp","title":"tests/LayoutManagerTest.cpp","text":"<pre><code>#include &lt;AUI/UITest.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;ExampleWindow.h&gt;\n#include &lt;AUI/View/ATextField.h&gt;\n\n/**\n * &lt;p&gt;\n *   A bug appeared in this example application related to AUI layout managers. This suite checks the following issues:\n * &lt;/p&gt;\n * &lt;ul&gt;\n *   &lt;li&gt;height of the latest element sometimes (not always!) seems to be incorrect&lt;/li&gt;\n *   &lt;li&gt;latest elements sometimes (again, not always!) seems to be not fit to the parent's border&lt;/li&gt;\n * &lt;/ul&gt;\n *\n * &lt;p&gt;Details: &lt;a href=\"https://github.com/aui-framework/aui/issues/18\"&gt;https://github.com/aui-framework/aui/issues/18&lt;/a&gt;&lt;/p&gt;\n * &lt;p&gt;Photo:&lt;/p&gt;\n * &lt;img src=\"https://user-images.githubusercontent.com/19491414/144756936-173e5d65-9433-4c00-92d6-142ca217164d.png\" /&gt;\n *\n */\n\n\nclass UILayoutManager: public testing::UITest {\npublic:\nprotected:\n    void SetUp() override {\n        UITest::SetUp();\n        _new&lt;ExampleWindow&gt;()-&gt;show();\n    }\n\n    void TearDown() override {\n        UITest::TearDown();\n    }\n};\n\n\n/**\n * Checks height of all buttons - they should be the same (see \"Show all views...\" button above).\n */\nTEST_F(UILayoutManager, Height) {\n    // check height\n    (By::text(\"Common button\") | By::text(\"Show all views...\")).check(sameHeight(), \"height mismatch\");\n}\n\n\n/**\n * Checks alignment (see \"Alex2772, 2021, alex2772.ru\" - it is not perfectly aligned)\n */\nTEST_F(UILayoutManager, LastElementAlignment) {\n    // copyright width can be also not minimal\n    By::name(\"#copyright\").check(widthIsMinimal(), \"copyright width should be minimal\");\n}\n\n/**\n * Checks alignment (looks like buttons and list views are not perfectly aligned)\n */\nTEST_F(UILayoutManager, ButtonsAlignment) {\n    // buttons column should be perfectly aligned\n    By::name(\"Common button\")\n        .parent()\n        .allChildren()\n        .check(leftRightAligned(), \"elements should be perfectly aligned\");\n}\n</code></pre>"},{"location":"views-example/#srcexamplewindowcpp","title":"src/ExampleWindow.cpp","text":"<pre><code>#include &lt;range/v3/all.hpp&gt;\n#include &lt;AUI/View/ARadioButton.h&gt;\n#include &lt;AUI/View/ARadioGroup.h&gt;\n#include &lt;AUI/Model/AListModel.h&gt;\n#include &lt;AUI/Audio/ASS/Property/Sound.h&gt;\n#include \"AUI/ASS/Property/BackgroundSolid.h\"\n#include \"AUI/ASS/Property/Border.h\"\n#include \"AUI/ASS/Property/TransformOffset.h\"\n#include \"AUI/ASS/Selector/on_state.h\"\n#include \"ExampleWindow.h\"\n#include \"AUI/Layout/AVerticalLayout.h\"\n#include \"AUI/Model/ATreeModel.h\"\n#include \"AUI/Util/AMetric.h\"\n#include \"AUI/View/A2FingerTransformArea.h\"\n#include \"AUI/View/AButton.h\"\n#include \"AUI/Layout/AHorizontalLayout.h\"\n#include \"AUI/Platform/ACustomCaptionWindow.h\"\n#include \"AUI/View/ACircleProgressBar.h\"\n#include \"AUI/View/ALabel.h\"\n#include \"AUI/Layout/AStackedLayout.h\"\n#include \"AUI/View/ACheckBox.h\"\n#include \"AUI/View/AProgressBar.h\"\n#include \"AUI/View/ATextField.h\"\n#include \"AUI/View/ANumberPicker.h\"\n#include \"AUI/View/ADoubleNumberPicker.h\"\n#include \"AUI/View/ASpacerExpanding.h\"\n#include \"AUI/Util/UIBuildingHelpers.h\"\n#include \"DemoListModel.h\"\n#include \"AUI/View/ASpinnerV2.h\"\n#include \"DemoGraphView.h\"\n\n#include \"AUI/Audio/IAudioPlayer.h\"\n\n#include \"AUI/View/AGroupBox.h\"\n#include \"AUI/View/ADragNDropView.h\"\n#include \"AUI/Util/ALayoutInflater.h\"\n#include \"AUI/View/ASlider.h\"\n#include \"AUI/Platform/APlatform.h\"\n#include \"AUI/IO/AByteBufferInputStream.h\"\n#include \"AUI/Curl/ACurl.h\"\n#include \"AUI/View/ASpinnerV2.h\"\n#include \"AUI/View/ASpacerFixed.h\"\n#include &lt;AUI/Model/AListModel.h&gt;\n#include &lt;AUI/View/ADropdownList.h&gt;\n#include &lt;AUI/i18n/AI18n.h&gt;\n#include &lt;AUI/i18n/AI18n.h&gt;\n#include &lt;AUI/ASS/ASS.h&gt;\n#include &lt;AUI/View/AListView.h&gt;\n#include &lt;AUI/View/ATextArea.h&gt;\n#include &lt;AUI/View/ARulerView.h&gt;\n#include &lt;AUI/View/AForEachUI.h&gt;\n#include &lt;AUI/View/ARulerArea.h&gt;\n#include &lt;AUI/View/ATreeView.h&gt;\n#include &lt;AUI/Platform/ADesktop.h&gt;\n#include &lt;AUI/Platform/AMessageBox.h&gt;\n#include &lt;AUI/View/ADragArea.h&gt;\n#include &lt;memory&gt;\n#include &lt;random&gt;\n#include &lt;AUI/View/ASplitter.h&gt;\n#include &lt;AUI/View/AScrollArea.h&gt;\n#include &lt;AUI/View/ATabView.h&gt;\n#include &lt;AUI/View/AGridSplitter.h&gt;\n#include &lt;AUI/View/AText.h&gt;\n#include &lt;AUI/View/ADrawableView.h&gt;\n#include &lt;AUI/Traits/platform.h&gt;\n\nusing namespace declarative;\n\nvoid fillWindow(_&lt;AViewContainer&gt; t) {\n    t-&gt;setLayout(std::make_unique&lt;AStackedLayout&gt;());\n    t-&gt;addView(_new&lt;ALabel&gt;(\"Window contents\"));\n}\n\nclass AllViewsWindow : public AWindow {\npublic:\n    AllViewsWindow() : AWindow(\"All views\", 300_dp, 500_dp, nullptr, WindowStyle::MODAL) {\n        setContents(Centered {\n          AScrollArea::Builder()\n              .withContents(\n                  Vertical {\n                    Centered { _new&lt;ALabel&gt;(\"ALabel\") },\n                    Centered { _new&lt;AButton&gt;(\"AButton\") },\n                    Centered { _new&lt;ATextField&gt;() AUI_LET { it-&gt;setText(\"ATextField\"); } },\n                  }\n                  &lt;&lt; \".all_views_wrap\")\n              .withExpanding() });\n    }\n};\n\n/// [label_coloring]\nstatic _&lt;AView&gt; link(const AString&amp; url) {\n    return Label { url } AUI_WITH_STYLE {\n               TextColor { AColor::BLUE },\n               BorderBottom { 1_px, AColor::BLUE },\n               ACursor::POINTER,\n           } AUI_LET { AObject::connect(it-&gt;clicked, AObject::GENERIC_OBSERVER, [url] { APlatform::openUrl(url); }); };\n}\n/// [label_coloring]\n\nstatic _&lt;AView&gt; checkBoxesDemo() {\n    struct State {\n        AProperty&lt;bool&gt; checked1 = false, checked2 = true;\n    };\n    auto state = _new&lt;State&gt;();\n    return Vertical {\n        CheckBox {\n          AUI_REACT(state-&gt;checked1),\n          [state](bool checked) { state-&gt;checked1 = checked; },\n          Label { \"Unchecked checkbox\" },\n        },\n        CheckBox {\n          AUI_REACT(state-&gt;checked2),\n          [state](bool checked) { state-&gt;checked2 = checked; },\n          Label { \"Checked checkbox\" },\n        },\n        CheckBox {\n          AUI_REACT(false),\n          Label { \"Disabled checkbox\" },\n        } AUI_LET { it-&gt;disable(); },\n    };\n}\n\nstatic _&lt;AView&gt; radioButtonsDemo() {\n    auto selection = _new&lt;AProperty&lt;int&gt;&gt;(0);\n    return Vertical {\n        RadioButton {\n          AUI_REACT(*selection == 0),\n          [selection] { *selection = 0; },\n          Label { \"Radiobutton 1\" },\n        },\n        RadioButton {\n          AUI_REACT(*selection == 1),\n          [selection] { *selection = 1; },\n          Label { \"Radiobutton 2\" },\n        },\n        RadioButton {\n          AUI_REACT(*selection == 2),\n          [selection] { *selection = 2; },\n          Label { \"Radiobutton 3\" },\n        },\n        RadioButton {\n          AUI_REACT(*selection == 3),\n          [selection] { *selection = 3; },\n          Label { \"Radiobutton 4\" },\n        } AUI_LET { it-&gt;disable(); },\n    };\n}\n\nExampleWindow::ExampleWindow() : AWindow(\"Examples\", 800_dp, 700_dp) {\n    allowDragNDrop();\n\n    setLayout(std::make_unique&lt;AVerticalLayout&gt;());\n    AStylesheet::global().addRules({ {\n      c(\".all_views_wrap\") &gt; t&lt;AViewContainer&gt;(),\n      Padding { 16_dp },\n    } });\n#if AUI_PLATFORM_IOS || AUI_PLATFORM_ANDROID\n    setCustomStyle({\n      Padding { 64_dp, {}, 16_dp },\n    });\n#endif\n\n    setCustomStyle({\n      LayoutSpacing { 4_dp },\n    });\n\n    addView(Horizontal {\n      _new&lt;ADrawableView&gt;(IDrawable::fromUrl(\":img/logo.svg\")) AUI_WITH_STYLE { FixedSize { 32_dp } },\n      AText::fromString(\"Building beautiful programs in pure C++ without chromium embedded framework\") AUI_WITH_STYLE {\n            Expanding(1, 0),\n          },\n      Horizontal {} AUI_LET {\n              mAsync &lt;&lt; AUI_THREADPOOL {\n                  auto drawable = IDrawable::fromUrl(\n                      \"https://raster.shields.io/github/stars/aui-framework/aui?style=raster&amp;logo=github\");\n                  AUI_UI_THREAD {\n                      auto view = Icon { drawable } AUI_WITH_STYLE {\n                          FixedSize { 80_dp, 20_dp },\n                          BackgroundImage { {}, {}, {}, Sizing::COVER },\n                          Margin { 4_dp },\n                          ACursor::POINTER,\n                      };\n                      connect(view-&gt;clicked, [] {\n                          APlatform::openUrl(\"https://github.com/aui-framework/aui/stargazers\");\n                      });\n                      it-&gt;addView(view);\n                  };\n              };\n          },\n    });\n\n    _&lt;ATabView&gt; tabView;\n    _&lt;AProgressBar&gt; progressBar = _new&lt;AProgressBar&gt;();\n    _&lt;ACircleProgressBar&gt; circleProgressBar = _new&lt;ACircleProgressBar&gt;();\n\n    addView(tabView = _new&lt;ATabView&gt;() AUI_LET {\n        it-&gt;addTab(\n            AScrollArea::Builder().withContents(std::conditional_t&lt;\n                                                aui::platform::current::is_mobile(), Vertical, Horizontal&gt; {\n              Vertical {\n                // buttons\n                GroupBox {\n                  Label { \"Buttons\" },\n                  Vertical {\n                    Button {\n                      Label { \"Common button\" },\n                      [this] {},\n                    },\n                    Button {\n                      Label { \"Default button\" },\n                      [this] {},\n                      true,\n                    },\n                    Button { Label { \"Disabled button\" } } AUI_LET { it-&gt;setDisabled(); },\n                    Button {\n                          Horizontal {\n                            Icon { \":img/logo.svg\" },\n                            SpacerFixed { 2_dp },\n                            Label { \"Button with icon\" },\n                          },\n                      [this] {\n                        AMessageBox::show(this, \"Title\", \"Message\");\n                      },\n                    },\n                  } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                },\n\n                // checkboxes\n                GroupBox {\n                  Label { \"Checkboxes\" } ,\n                  checkBoxesDemo(),\n                },\n\n                // radiobuttons\n                GroupBox {\n                  Label { \"Radiobuttons\" },\n                  radioButtonsDemo(),\n                },\n\n                // dropdown lists\n                GroupBox {\n                  Label { \"Dropdown lists\" },\n                  Vertical {\n                    _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({\n                      \"Dropdown list 1\",\n                      \"Dropdown list 2\",\n                      \"Dropdown list 3\",\n                      \"Dropdown list 4\",\n                      \"Dropdown list 5\",\n                      \"Dropdown list 6\",\n                    })),\n                    _new&lt;ADropdownList&gt;(AListModel&lt;AString&gt;::make({ \"Disabled dropdown\" })) AUI_LET { it-&gt;setDisabled(); },\n                  } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                },\n                GroupBox {\n                  Label { \"Drag area\" },\n\n                  _new&lt;ADragArea&gt;() AUI_LET {\n                          it AUI_WITH_STYLE {\n                              MinSize { 100_dp },\n                              Border { 1_px, 0x0_rgb },\n                          };\n                          it-&gt;addView(ADragArea::convertToDraggable(_new&lt;AButton&gt;(\"Drag me!\"), false));\n                      },\n                } AUI_WITH_STYLE { Expanding {} },\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              Vertical {\n#if AUI_PLATFORM_WIN || AUI_PLATFORM_LINUX || AUI_PLATFORM_MACOS\n                GroupBox {\n                  Label { \"Window factory\" },\n                  Vertical {\n                    // CheckBoxWrapper { Label { \"Resizeable\" } }, TODO\n                    _new&lt;AButton&gt;(\"Show window\")\n                        .connect(&amp;AButton::clicked, this,\n                                 [&amp;] {\n                                     auto w = _new&lt;AWindow&gt;(\"Basic window\", 400_dp, 300_dp, this, WindowStyle::MODAL);\n                                     fillWindow(w);\n                                     w-&gt;show();\n                                     mWindows &lt;&lt; w;\n                                 }),\n                    _new&lt;AButton&gt;(\"Show window without caption\")\n                        .connect(&amp;AButton::clicked, this,\n                                 [&amp;] {\n                                     auto w = _new&lt;ACustomWindow&gt;(\"Custom window without caption\", 400_dp, 300_dp);\n                                     fillWindow(w);\n                                     w-&gt;show();\n                                     mWindows &lt;&lt; w;\n                                 }),\n                    _new&lt;AButton&gt;(\"Show window custom caption\")\n                        .connect(&amp;AButton::clicked, this,\n                                 [&amp;] {\n                                     auto w =\n                                         _new&lt;ACustomCaptionWindow&gt;(\"Custom window custom caption\", 400_dp, 300_dp);\n                                     fillWindow(w-&gt;getContentContainer());\n                                     w-&gt;show();\n                                     w-&gt;setWindowStyle(WindowStyle::MODAL);\n                                     mWindows &lt;&lt; w;\n                                 }),\n                    _new&lt;AButton&gt;(\"Close all windows\")\n                        .connect(&amp;AButton::clicked, this,\n                                 [&amp;] {\n                                     for (auto&amp; w : mWindows) w-&gt;close();\n                                     mWindows.clear();\n                                 }),\n                  } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                },\n#endif\n\n                GroupBox {\n                  Label { \"System dialog\" },\n                  Vertical {\n                    _new&lt;AButton&gt;(\"Show file chooser\")\n                        .connect(&amp;AView::clicked, this,\n                                 [&amp;] {\n                                     mAsync &lt;&lt; ADesktop::browseForFile(this).onSuccess([&amp;](const APath&amp; f) {\n                                         if (f.empty()) {\n                                             AMessageBox::show(this, \"Result\", \"Cancelled\");\n                                         } else {\n                                             AMessageBox::show(this, \"Result\", \"File: {}\"_format(f));\n                                         }\n                                     });\n                                 }),\n                    _new&lt;AButton&gt;(\"Show folder chooser\")\n                        .connect(&amp;AView::clicked, this,\n                                 [&amp;] {\n                                     mAsync &lt;&lt; ADesktop::browseForDir(this).onSuccess([&amp;](const APath&amp; f) {\n                                         if (f.empty()) {\n                                             AMessageBox::show(this, \"Result\", \"Cancelled\");\n                                         } else {\n                                             AMessageBox::show(this, \"Result\", \"Folder: {}\"_format(f));\n                                         }\n                                     });\n                                 }),\n                    _new&lt;AButton&gt;(\"Message box\")\n                        .connect(&amp;AView::clicked, this,\n                                 [&amp;] {\n                                     /// [AMessageBox]\n                                     auto response = AMessageBox::show(this,\n                                                       \"Title\",\n                                                       \"Message\",\n                                                       AMessageBox::Icon::NONE,\n                                                       AMessageBox::Button::OK);\n                                     ALogger::info(\"Example\") &lt;&lt; \"Response: \" &lt;&lt; int(response);\n                                     /// [AMessageBox]\n                                 }),\n                    _new&lt;AButton&gt;(\"Cause assertion fail\")\n                        .connect(&amp;AView::clicked, this, [&amp;] { AUI_ASSERT_NO_CONDITION(\"assertion fail\"); }),\n                    _new&lt;AButton&gt;(\"Cause hang\")\n                        .connect(&amp;AView::clicked, this,\n                                 [&amp;] {\n                                     for (;;)\n                                         ;\n                                 }),\n                    _new&lt;AButton&gt;(\"Cause access violation\")\n                        .connect(&amp;AView::clicked, this,\n                                 [&amp;] {\n                                     try {\n                                         *((volatile int*) nullptr) = 123;\n                                     } catch (const AException&amp; e) {\n                                         ALogger::info(\"Example\") &lt;&lt; \"Successfully caught access violation: \" &lt;&lt; e;\n                                     }\n                                 }),\n                  } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                },\n\n                // list view\n                GroupBox {\n                  Label { \"List view\" },\n                  [] {   // lambda style inlining\n                      auto model = _new&lt;DemoListModel&gt;();\n\n                      return Vertical {\n                          Horizontal {\n                            _new&lt;AButton&gt;(\"Add\").connect(&amp;AButton::clicked, AUI_SLOT(model)::addItem),\n                            _new&lt;AButton&gt;(\"Remove\").connect(&amp;AButton::clicked, AUI_SLOT(model)::removeItem),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          _new&lt;AListView&gt;(model)\n                      } AUI_WITH_STYLE { LayoutSpacing { 4_dp } };\n                  }(),\n                },\n\n                // foreach\n                GroupBox {\n                  Label { \"AForEachUI\" },\n                  [this] {   // lambda style inlining\n                      struct State {\n                          AProperty&lt;AVector&lt;AColor&gt;&gt; colors;\n                      };\n                      auto state = _new&lt;State&gt;();\n\n                      return Vertical {\n                          Horizontal {\n                            _new&lt;AButton&gt;(\"Add\").connect(\n                                &amp;AButton::clicked, this,\n                                [state] {\n                                    static std::default_random_engine re;\n                                    AUI_DO_ONCE { re.seed(std::time(nullptr)); };\n                                    static std::uniform_real_distribution&lt;float&gt; d(0.f, 1.f);\n                                    state-&gt;colors.writeScope()-&gt;push_back({ AColor(d(re), d(re), d(re), 1.f) });\n                                }),\n                            _new&lt;AButton&gt;(\"Remove\").connect(\n                                &amp;AButton::clicked, this,\n                                [state] {\n                                    if (!state-&gt;colors-&gt;empty()) {\n                                        state-&gt;colors.writeScope()-&gt;pop_back();\n                                    }\n                                }),\n                            _new&lt;ASpacerExpanding&gt;(),\n                          } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                          AUI_DECLARATIVE_FOR(i, *state-&gt;colors, AWordWrappingLayout) {\n                              return Horizontal {\n                                  _new&lt;ALabel&gt;(i.toString()) AUI_WITH_STYLE {\n                                      TextColor { i.readableBlackOrWhite() },\n                                  }\n                              } AUI_WITH_STYLE {\n                                  BackgroundSolid { i },\n                                  BorderRadius { 6_pt },\n                                  Margin { 2_dp, 4_dp },\n                              };\n                          }\n                      };\n                  }(),\n                },\n\n                // tree view\n                GroupBox {\n                  Label { \"Tree view\" },\n                  [] {   // lambda style inlining\n                      return _new&lt;ATreeView&gt;(_new&lt;ATreeModel&lt;AString&gt;&gt;(AVector&lt;ATreeModel&lt;AString&gt;::Item&gt;{\n                              {\n                                \"dir1\",\n                                {\n                                  { \"file1\" },\n                                  { \"file2\" },\n                                }\n                              },\n                              {\n                                \"dir2\",\n                                {\n                                  { \"file3\" },\n                                  { \"file4\" },\n                                }\n                              },\n                            }));\n                  }(),\n                } AUI_WITH_STYLE { Expanding {} },\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              Vertical::Expanding {\n                // fields\n                GroupBox {\n                  Label { \"Progressbar\" },\n                  Vertical {\n                    progressBar,\n                    circleProgressBar,\n                    GroupBox {\n                      Label { \"Slider\" },\n                      Vertical {\n                        _new&lt;ASlider&gt;()\n                            .connect(&amp;ASlider::valueChanging, AUI_SLOT(progressBar)::setValue)\n                            .connect(&amp;ASlider::valueChanging, AUI_SLOT(circleProgressBar)::setValue),\n                      },\n                    },\n                  } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                },\n                GroupBox {\n                  Label { \"Scaling factor\" },\n                  Horizontal {\n                    _new&lt;ANumberPicker&gt;().connect(&amp;ANumberPicker::valueChanged,\n                                                  [](int64_t x) {\n                                                      AWindow::current()-&gt;setScalingParams(\n                                                          { x * 0.25f,\n                                                            std::nullopt });\n                                                  }) AUI_LET {\n                            it-&gt;setMin(1);\n                            it-&gt;setMax(12);\n                            it-&gt;setValue(4);\n                        },\n                    Label { \"x0.25\" } } },\n                GroupBox {\n                  Label { \"Fields\" },\n                  Vertical::Expanding {\n                    Label { \"Text field\" },\n                    _new&lt;ATextField&gt;() AUI_LET { it-&gt;focus(); },\n                    Label { \"Number picker\" },\n                    _new&lt;ANumberPicker&gt;(),\n                    _new&lt;ADoubleNumberPicker&gt;(),\n                    Label { \"Text area\" },\n                    AScrollArea::Builder()\n                            .withContents(_new&lt;ATextArea&gt;(\n                                \"AUI Framework - Declarative UI toolkit for modern C++20\\n\"\n                                \"Copyright (C) 2020-2025 Alex2772 and Contributors\\n\"\n                                \"\\n\"\n                                \"SPDX-License-Identifier: MPL-2.0\\n\"\n                                \"\\n\"\n                                \"This Source Code Form is subject to the terms of the Mozilla \"\n                                \"Public License, v. 2.0. If a copy of the MPL was not distributed with this \"\n                                \"file, You can obtain one at http://mozilla.org/MPL/2.0/.\"))\n                            .build()\n                        &lt;&lt; \".input-field\" AUI_LET { it-&gt;setExpanding(); },\n                  } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                } AUI_WITH_STYLE { Expanding {} },\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } }\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } }),\n            \"Common\");\n\n#if !AUI_PLATFORM_EMSCRIPTEN\n        mWavAudio = IAudioPlayer::fromUrl(\":sound/sound1.wav\");\n        mOggAudio = IAudioPlayer::fromUrl(\":sound/sound1.ogg\");\n\n        it-&gt;addTab(\n            AScrollArea::Builder().withContents(std::conditional_t&lt;\n                                                aui::platform::current::is_mobile(), Vertical, Horizontal&gt; {\n              Horizontal {\n                Vertical {\n                  _new&lt;ALabel&gt;(\"Play music using AUI!\"),\n                  _new&lt;AButton&gt;(\"Play .wav music\").connect(&amp;AButton::clicked, AUI_SLOT(mWavAudio)::play),\n                  _new&lt;AButton&gt;(\"Stop .wav music\").connect(&amp;AButton::clicked, AUI_SLOT(mWavAudio)::stop),\n                  _new&lt;AButton&gt;(\"Pause .wav music\").connect(&amp;AButton::clicked, AUI_SLOT(mWavAudio)::pause),\n                  _new&lt;ALabel&gt;(\"Volume control\"),\n                  _new&lt;ASlider&gt;().connect(\n                      &amp;ASlider::valueChanging, this,\n                      [player = mWavAudio](aui::float_within_0_1 value) {\n                          player-&gt;setVolume(static_cast&lt;uint32_t&gt;(float(value) * 256.f));\n                      }),\n                } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                Vertical {\n                  _new&lt;ALabel&gt;(\"Play music using AUI!\"),\n                  _new&lt;AButton&gt;(\"Play .ogg music\").connect(&amp;AButton::clicked, AUI_SLOT(mOggAudio)::play),\n                  _new&lt;AButton&gt;(\"Stop .ogg music\").connect(&amp;AButton::clicked, AUI_SLOT(mOggAudio)::stop),\n                  _new&lt;AButton&gt;(\"Pause .ogg music\").connect(&amp;AButton::clicked, AUI_SLOT(mOggAudio)::pause),\n                  _new&lt;ALabel&gt;(\"Volume control\"),\n                  _new&lt;ASlider&gt;().connect(\n                      &amp;ASlider::valueChanging, this,\n                      [player = mOggAudio](aui::float_within_0_1 value) {\n                          player-&gt;setVolume(static_cast&lt;uint32_t&gt;(float(value) * 256.f));\n                      }),\n                } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                Vertical {\n                  _new&lt;AButton&gt;(\"Button produces sound when clicked\") AUI_WITH_STYLE {\n                        ass::on_state::Activated {\n                          ass::Sound { IAudioPlayer::fromUrl(\":sound/click.ogg\") },\n                        },\n                      },\n                } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            }),\n            \"Sounds\");\n#endif\n\n        it-&gt;addTab(\n            AScrollArea::Builder().withContents(\n                std::conditional_t&lt;aui::platform::current::is_mobile(), Vertical, Horizontal&gt; { Horizontal {\n                  Vertical {\n                    _new&lt;ALabel&gt;(\"Gif support!\"),\n                    _new&lt;ADrawableView&gt;(IDrawable::fromUrl(\":img/gf.gif\")) AUI_WITH_STYLE { FixedSize { 100_dp } },   // gif from https://tenor.com/view/cat-gif-26024730\n                  },\n                  Vertical {\n                    _new&lt;ALabel&gt;(\"Animated WebP support!\"),\n                    _new&lt;ADrawableView&gt;(AUrl(\":img/anim.webp\")) AUI_WITH_STYLE { FixedSize { 320_px, 240_px } } } } }),\n            \"Images\");\n\n        it-&gt;addTab(\n            Vertical {\n              _new&lt;ALabel&gt;(\"Horizontal splitter\"),\n              ASplitter::Horizontal().withItems({\n                _new&lt;AButton&gt;(\"One\"),\n                _new&lt;AButton&gt;(\"Two\"),\n                _new&lt;AButton&gt;(\"Three\"),\n                _new&lt;AButton&gt;(\"Four\"),\n                _new&lt;AButton&gt;(\"Five\"),\n              }).build() AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              ASplitter::Horizontal().withItems({\n                _new&lt;AButton&gt;(\"One\"),\n                _new&lt;AButton&gt;(\"Two\"),\n                _new&lt;AButton&gt;(\"Three\"),\n                SpacerExpanding(),\n                _new&lt;AButton&gt;(\"Four\"),\n                _new&lt;AButton&gt;(\"Five\"),\n              }).build() AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n              _new&lt;ALabel&gt;(\"Vertical splitter\"),\n              ASplitter::Vertical()\n                      .withItems({ _new&lt;AButton&gt;(\"One\"), _new&lt;AButton&gt;(\"Two\"), _new&lt;AButton&gt;(\"Three\"),\n                                   _new&lt;AButton&gt;(\"Four\"), _new&lt;AButton&gt;(\"Five\") })\n                      .build() AUI_WITH_STYLE { LayoutSpacing { 4_dp }, Expanding{} },\n              _new&lt;ALabel&gt;(\"Grid splitter\"),\n              AGridSplitter::Builder()\n                      .withItems(AVector&lt;AVector&lt;_&lt;AView&gt;&gt;&gt;::generate(\n                          5,\n                          [](size_t y) {\n                              return AVector&lt;_&lt;AView&gt;&gt;::generate(5, [&amp;](size_t x) {\n                                  return _new&lt;AButton&gt;(\"{}x{}\"_format(x, y));\n                              });\n                          }))\n                      .build() AUI_WITH_STYLE { LayoutSpacing { 4_dp }, Expanding{} },\n            } AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n            \"Splitters\");\n\n        it-&gt;addTab(\n            AScrollArea::Builder().withContents(\n                Vertical {\n                  ASplitter::Horizontal().withItems({\n                    Vertical::Expanding {\n                      _new&lt;ALabel&gt;(\"Default\"),\n                      AText::fromString(\n                          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod \"\n                          \"tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \"\n                          \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo \"\n                          \"consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse \"\n                          \"cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non \"\n                          \"proident, sunt in culpa qui officia deserunt mollit anim id est laborum\") AUI_WITH_STYLE { ATextAlign::JUSTIFY },\n                    } AUI_WITH_STYLE { MinSize { 200_dp } },\n                    Vertical::Expanding {\n                      _new&lt;ALabel&gt;(\"Word breaking\"),\n                      AText::fromString(\n                          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod \"\n                          \"tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \"\n                          \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo \"\n                          \"consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse \"\n                          \"cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non \"\n                          \"proident, sunt in culpa qui officia deserunt mollit anim id est laborum\",\n                          { WordBreak::BREAK_ALL }),\n                    } AUI_WITH_STYLE { MinSize { 200_dp } },\n                  }).build() AUI_WITH_STYLE { LayoutSpacing { 4_dp } },\n                  [] {\n                      _&lt;AViewContainer&gt; v1 = Vertical {};\n                      _&lt;AViewContainer&gt; v2 = Vertical {};\n                      for (int i = 0; i &lt;= 9; ++i) {\n                          v1-&gt;addView(Horizontal {\n                            _new&lt;ALabel&gt;(\"{} px\"_format(i + 6)),\n                            _new&lt;ALabel&gt;(\"Hello! [] .~123`\") AUI_WITH_STYLE { FontSize { AMetric(i + 6, AMetric::T_PX) } } });\n                          v2-&gt;addView(Horizontal {\n                            _new&lt;ALabel&gt;(\"{} px\"_format(i + 16)),\n                            _new&lt;ALabel&gt;(\"Hello! [].~123`\") AUI_WITH_STYLE { FontSize { AMetric(i + 16, AMetric::T_PX) } } });\n                      }\n                      return Horizontal { v1, v2 };\n                  }(),\n                } AUI_LET { it-&gt;setExpanding(); }),\n            \"Text\");\n\n        it-&gt;addTab(\n            Vertical {\n              _new&lt;A2FingerTransformArea&gt;() AUI_LET {\n                      it-&gt;setCustomStyle({\n                        MinSize { 256_dp },\n                        Border { 1_px, AColor::BLACK },\n                      });\n\n                      _&lt;AView&gt; blackRect = Stacked {\n                          Stacked { _new&lt;AButton&gt;(\"Hi\") } AUI_WITH_STYLE {\n                            FixedSize { 200_dp, 100_dp },\n                            BackgroundSolid { AColor::BLACK },\n                            TextColor { AColor::WHITE },\n                            ATextAlign::CENTER,\n                          }\n                      };\n                      ALayoutInflater::inflate(it, Stacked { blackRect });\n                      connect(\n                          it-&gt;transformed, blackRect,\n                          [blackRect = blackRect.get(),\n                           keptTransform = _new&lt;A2DTransform&gt;()](const A2DTransform&amp; transform) {\n                              keptTransform-&gt;applyDelta(transform);\n                              blackRect-&gt;setCustomStyle({\n                                TransformOffset {\n                                  AMetric(keptTransform-&gt;offset.x, AMetric::T_PX),\n                                  AMetric(keptTransform-&gt;offset.y, AMetric::T_PX) },\n                                TransformScale { keptTransform-&gt;scale },\n                                TransformRotate { keptTransform-&gt;rotation },\n                              });\n                          });\n                  },\n              _new&lt;ADragNDropView&gt;(),\n\n              Horizontal {\n                Centered {\n                  Vertical {\n                    Label { \"Custom cursor\" } AUI_WITH_STYLE {\n                          ACursor { \":img/logo.svg\", 64 },\n                        },\n                    link(\"https://github.com/aui-framework/aui\"),\n                  },\n                },\n                Stacked {\n                  Icon { \":img/logo.svg\" } AUI_WITH_STYLE { FixedSize(32_dp) },\n                  Centered {\n                    Label { \"Blur\" } AUI_WITH_STYLE { Margin { 1_dp, 16_dp } },\n                  } AUI_WITH_STYLE {\n                        Expanding(1, 0),\n                        Backdrop { Backdrop::GaussianBlur { 9_dp } },\n                        BackgroundSolid { AColor::WHITE.transparentize(0.5f) },\n                      },\n                },\n              },\n            } AUI_LET { it-&gt;setExpanding(); },\n            \"Others\");\n\n        it-&gt;setExpanding();\n    });\n\n    addView(Horizontal {\n      Centered {\n        _new&lt;AButton&gt;(\"Show all views...\").connect(&amp;AButton::clicked, this, [] { _new&lt;AllViewsWindow&gt;()-&gt;show(); }),\n      },\n      SpacerExpanding{},\n      Centered { _new&lt;ASpinnerV2&gt;() },\n      CheckBox {\n        AUI_REACT(tabView-&gt;enabled()),\n        [tabView](bool checked) { tabView-&gt;enabled() = checked; },\n        Label { \"Enabled\" },\n      },\n      _new&lt;ALabel&gt;(\"\\u00a9 Alex2772, 2025, alex2772.ru\") AUI_LET {\n              it &lt;&lt; \"#copyright\";\n              it-&gt;setEnabled(false);\n          },\n    } AUI_WITH_STYLE { LayoutSpacing { 4_dp } });\n}\n\nvoid ExampleWindow::onDragDrop(const ADragNDrop::DropEvent&amp; event) {\n    AWindowBase::onDragDrop(event);\n\n    for (const auto&amp; [k, v] : event.data.data()) {\n        ALogger::info(\"Drop\") &lt;&lt; \"[\" &lt;&lt; k &lt;&lt; \"] = \" &lt;&lt; AString::fromUtf8(v);\n    }\n\n    auto surface = createOverlappingSurface({ 0, 0 }, { 100, 100 }, false);\n    _&lt;AViewContainer&gt; popup = Vertical {\n        Label { \"Drop event\" } AUI_WITH_STYLE {\n              FontSize { 18_pt },\n              ATextAlign::CENTER,\n            },\n        [&amp;]() -&gt; _&lt;AView&gt; {\n            if (auto u = event.data.urls()) {\n                auto url = u-&gt;first();\n                if (auto icon = ADesktop::iconOfFile(url.path())) {\n                    return Centered { _new&lt;ADrawableView&gt;(icon) AUI_WITH_STYLE { FixedSize { 64_dp } } };\n                }\n            }\n            return nullptr;\n        }(),\n        AText::fromString(\"Caught drop event. See the logger output for contents.\") AUI_WITH_STYLE { ATextAlign::CENTER, MinSize { 100_dp, 40_dp } },\n        Centered { Button { Label { \"OK\" }, [surface] { surface-&gt;close(); } } },\n    };\n    ALayoutInflater::inflate(surface, popup);\n    popup-&gt;pack();\n\n    surface-&gt;setOverlappingSurfaceSize(popup-&gt;size());\n    surface-&gt;setOverlappingSurfacePosition((size() - *popup-&gt;size()) / 2);\n}\n\nbool ExampleWindow::onDragEnter(const ADragNDrop::EnterEvent&amp; event) { return true; }\n</code></pre>"},{"location":"views-example/#srcdemolistmodelh","title":"src/DemoListModel.h","text":"<pre><code>//\n// Created by alex2 on 13.04.2021.\n//\n\n\n#pragma once\n\n\n#include &lt;AUI/Common/AObject.h&gt;\n#include &lt;AUI/Common/AString.h&gt;\n#include &lt;AUI/Model/IListModel.h&gt;\n\n\nclass DemoListModel: public IListModel&lt;AString&gt; {\nprivate:\n    size_t mListSize = 3;\n\npublic:\n    ~DemoListModel() override = default;\n\n    size_t listSize() override;\n    AString listItemAt(const AListModelIndex&amp; index) override;\n\n    void addItem();\n    void removeItem();\n};\n</code></pre>"},{"location":"views-example/#srcdemolistmodelcpp","title":"src/DemoListModel.cpp","text":"<pre><code>//\n// Created by alex2 on 13.04.2021.\n//\n\n\n#include \"DemoListModel.h\"\n\n#include &lt;AUI/Traits/strings.h&gt;\n\nsize_t DemoListModel::listSize() {\n    return mListSize;\n}\n\nAString DemoListModel::listItemAt(const AListModelIndex&amp; index) {\n    return \"List item #{}\"_format(index.getRow() + 1);\n}\n\nvoid DemoListModel::addItem() {\n    mListSize += 1;\n    emit dataInserted(range({mListSize - 1}));\n}\n\nvoid DemoListModel::removeItem() {\n    if (mListSize &gt; 0) {\n        mListSize -= 1;\n        emit dataRemoved(range({mListSize}));\n    }\n}\n</code></pre>"},{"location":"views-example/#srcdemographviewh","title":"src/DemoGraphView.h","text":"<pre><code>#pragma once\n\n\n#include \"AUI/View/AView.h\"\n\nclass DemoGraphView: public AView {\npublic:\n    DemoGraphView();\n\n    void render(ARenderContext ctx) override;\n\nprivate:\n    AVector&lt;glm::vec2&gt; mPoints;\n};\n</code></pre>"},{"location":"views-example/#srcdemographviewcpp","title":"src/DemoGraphView.cpp","text":"<pre><code>#include \"DemoGraphView.h\"\n#include &lt;AUI/ASS/ASS.h&gt;\n\nconstexpr auto POINT_COUNT = 100.f;\n\nDemoGraphView::DemoGraphView()\n{\n    setFixedSize({ 5_dp * POINT_COUNT, 100_dp }); // set fixed size\n\n\n    mPoints.reserve(POINT_COUNT);\n    for (std::size_t i = 0; i &lt; POINT_COUNT; ++i) {\n        // map a sinusoid to view\n        mPoints &lt;&lt; glm::vec2{ 5_dp * float(i), 100_dp * ((glm::sin(i / 10.f) + 1.f) / 2.f) };\n    }\n}\n\nvoid DemoGraphView::render(ARenderContext ctx) {\n    AView::render(ctx);\n\n    ctx.render.lines(ASolidBrush{0xff0000_rgb }, mPoints, ABorderStyle::Dashed{}, 4_dp);\n\n}\n</code></pre>"},{"location":"views-example/#srcexamplewindowh","title":"src/ExampleWindow.h","text":"<pre><code>#pragma once\n\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include \"AUI/Thread/AAsyncHolder.h\"\n\nclass API_AUI_AUDIO IAudioPlayer;\n\nclass ExampleWindow: public AWindow {\npublic:\n    ExampleWindow();\n\n    void onDragDrop(const ADragNDrop::DropEvent&amp; event) override;\n\n    bool onDragEnter(const ADragNDrop::EnterEvent&amp; event) override;\n\nprivate:\n    ADeque&lt;_&lt;AWindow&gt;&gt; mWindows;\n    AAsyncHolder mAsync;\n    _&lt;IAudioPlayer&gt; mWavAudio;\n    _&lt;IAudioPlayer&gt; mOggAudio;\n};\n</code></pre>"},{"location":"views-example/#srcmaincpp","title":"src/main.cpp","text":"<pre><code>#include \"ExampleWindow.h\"\n#include &lt;AUI/Platform/Entry.h&gt;\n\nAUI_ENTRY {\n    _new&lt;ExampleWindow&gt;()-&gt;show();\n    return 0;\n}\n</code></pre>"},{"location":"views/","title":"Views overview","text":"<p>AUI offers implementations of basic views. You can use compose them to make custom components.</p>"},{"location":"views/#actions","title":"Actions","text":"Button Button with text, which can be pushed to make some action. Learn more"},{"location":"views/#indication","title":"Indication","text":"ACircleProgressBar A circle-shaped progress bar. Learn more Images Simple view to draw images. Learn more Label Represents a simple single-line text display view. Learn more Progress indicators Progress bars show the progress of an operation. Learn more ASpinner Circular infinite progress indicator. Learn more ASpinnerV2 Circular infinite progress indicator. Learn more AText HTML-capable text container. Learn more"},{"location":"views/#user-input","title":"User Input","text":"Check box Checkboxes let users select one or more items from a list, or turn an item on or off. Learn more ADirChooserView A text field with \"...\" button prompting path to a dir. Learn more ADoubleNumberPicker A text field for numbers with increase/decrease buttons. Learn more ADropdownList A button with dropdown list. Learn more AFileChooserView A text field with \"...\" button prompting path to a file. Learn more ANumberPicker A text field for numbers with increase/decrease buttons. Learn more Radio button Radio buttons let people select one option from a set of options. Learn more ASlider Slider control. Learn more ATextArea Multiline text input area. Learn more ATextField Editable field with text to receive a text input from the user. Learn more"},{"location":"views/#containment","title":"Containment","text":"A2FingerTransformArea Handles and processes the multitouch scale, transform and rotation events based on two-finger gestures. Learn more ADragArea Wrapping container to drag views inside of it. Learn more Lists Customizable lists display. Learn more AGridSplitter A resizable grid layout. Learn more AGroupBox A titled frame Learn more AListView Displays a list model of strings. Learn more APageView Like ATabView but without tabs line. Learn more ARulerArea Photoshop-like ruler area for measuring display units. Learn more ARulerView A Photoshop-like ruler for measuring display units. Learn more AScrollArea A scrollable container with vertical and horizontal scrollbars. Learn more AScrollAreaViewport Inner component of AScrollArea that manages rendering and event handling with custom offset (scroll). Learn more AScrollbar A single scrollbar Learn more ASplitter A resizeable horizontal or vertical layout. Learn more ATabView Tab host Learn more ATreeView Displays a tree model of strings. Learn more"},{"location":"views/#arrangement","title":"Arrangement","text":"AHDividerView A horizontal line. Learn more ASpacerExpanding Expanding view which is useful in UI building. Learn more ASpacerFixed Fixed-size view which is useful in UI building. Learn more AVDividerView A vertical line. Learn more"},{"location":"views/#other","title":"Other","text":"AView Base class of all UI objects. Learn more AViewContainer A trivial modifiable view that represents a set of views. Learn more AViewContainerBase A view that represents a set of views. Learn more"},{"location":"webpimagefactory/","title":"WebpImageFactory","text":"Header:<code>#include &lt;AUI/Image/webp/WebpImageFactory.h&gt;</code> CMake:<code>aui_link(my_target PUBLIC aui::image)</code>"},{"location":"webpimagefactory/#public-types","title":"Public Types","text":"<p><code>enum class WebpImageFactory::FrameSkipMode</code></p> Constant Description <code>FrameSkipMode::PAUSE</code> <code>FrameSkipMode::SKIP_FRAMES</code> <code>FrameSkipMode::CATCH_UP</code>"},{"location":"webpimagefactory/#WebpImageFactory::FrameSkipMode","title":"FrameSkipMode","text":""},{"location":"windows/","title":"Windows (operating system)","text":"<p>Windows is a family of operating systems developed by Microsoft. It was first released in 1985 and has since become the most popular desktop operating system worldwide, with a market share of about 70%. The latest version for consumer PCs and tablets is Windows 11, while certain older versions are still supported and maintained by Microsoft.</p>"},{"location":"windows/#windows-xp-support","title":"Windows XP support","text":"<ul> <li>If ucrtbase.dll is missing, download and place it next to folder where it is missing. </li> <li>Compatibility with modern C++ (MSVC v143+ C++20 standard or newer) is provided by YY_Thunks project (span, concepts).</li> <li>aui.boot relies over v141_xp toolset and cl.exe compiler with UCRT runtime by VC-LTL5, that are specified by winxp-x86.cmake cmake toolchain file.</li> <li>google/benchmark is removed, as v141_xp toolset was unable to build that dependency, because <code>#include &lt;versionhelpers.h&gt;</code> is missing.</li> <li>Windows XP support lower bound is SP2, as SP1 is not supported.</li> <li>In order to bring your own dependencies you would need to use /MT /MTd MSVC runtime and acquire UCRT runtime by VC-LTL5.</li> <li>If you are searching for v141_xp toolset download link take a look here https://aka.ms/vs/16/release/vs_buildtools.exe.</li> </ul>"},{"location":"windows/#key-considerations","title":"Key considerations","text":"<ul> <li>You'll need to make an installer and potentially a portable package with   auto updating to distribute your application despite Windows offers an \"official\" software repository</li> <li>Windows is the only system that is not Unix-like, despite it provides POSIX-compliant APIs</li> <li>You might need to sign your executables, otherwise Windows would probably treat your application as a virus and make   launching your executables a lot harder</li> </ul>"},{"location":"windows/#aui-implementation-specifics","title":"AUI implementation specifics","text":""},{"location":"writing-tests/","title":"Writing tests","text":"<p>AUI uses GTest as the tests framework and provides a simple way to use it in your application.</p> <p>It also includes GMock library.</p> <p>GoogleTest is Google's C++ testing and mocking framework. This user's guide has the following contents:</p> <ul> <li>GoogleTest Primer - Teaches you how to write simple tests using     GoogleTest. Read this first if you are new to GoogleTest.</li> <li>GoogleTest Advanced - Read this when you've finished the     Primer and want to utilize GoogleTest to its full potential.</li> <li>GoogleTest Samples - Describes some GoogleTest samples.</li> <li>GoogleTest FAQ - Have a question? Want some tips? Check here     first.</li> <li>Mocking for Dummies - Teaches you how to create mock     objects and use them in tests.</li> <li>Mocking Cookbook - Includes tips and approaches to     common mocking use cases.</li> <li>Mocking Cheat Sheet - A handy reference for     matchers, actions, invariants, and more.</li> <li>Mocking FAQ - Contains answers to some mocking-specific     questions.</li> </ul>"},{"location":"writing-tests/#in-aui","title":"In AUI","text":"<p>In order to enable tests for your project, call <code>aui_enable_tests(&lt;target-name&gt;)</code> in the end of your <code>CMakeLists.txt</code> and create <code>tests/</code> dir along with <code>src/</code> and <code>CMakeLists.txt</code>. Place your test suites inside the <code>tests/</code> directory.</p>"},{"location":"writing-tests/#usage-example","title":"Usage Example","text":"<p>Suppose we want to test the <code>sum</code> function of the following program:</p> main.cpp<pre><code>#include &lt;AUI/Platform/Entry.h&gt;\n#include &lt;AUI/Logging/ALogger.h&gt;\n#include \"main.h\"\n\nstatic constexpr auto LOG_TAG = \"MyApp\";\n\nint sum(int a, int b) {\n  return a + b;\n}\n\nAUI_ENTRY {\n    ALogger::info(LOG_TAG) &lt;&lt; \"2 + 2 = \" &lt;&lt; sum(2, 2);\n    return 0;\n}\n</code></pre> <p>Possible output:</p> <pre><code>[14:57:02][UI Thread][MyApp][INFO]: 2 + 2 = 4\n</code></pre>"},{"location":"writing-tests/#project-structure","title":"Project structure","text":"<p>To write a test, enable tests for your projects first. Add <code>aui_enable_tests(&lt;target-name&gt;)</code> to the end of your <code>CMakeLists.txt</code>:</p> CMakeLists.txt<pre><code># Standard routine\ncmake_minimum_required(VERSION 3.16)\nproject(project_template)\n\n# Use AUI.Boot\nfile(\n    DOWNLOAD \n    https://raw.githubusercontent.com/aui-framework/aui/master/aui.boot.cmake \n    ${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\ninclude(${CMAKE_CURRENT_BINARY_DIR}/aui.boot.cmake)\n\n# link AUI\nauib_import(\n    AUI https://github.com/aui-framework/aui \n    COMPONENTS core)\n\n\n# Create the executable. This function automatically links all sources from the src/ folder, creates CMake target and\n# places the resulting executable to bin/ folder.\naui_executable(project_template)\n\n# Link required libs\ntarget_link_libraries(project_template PRIVATE aui::core)\n\naui_enable_tests(project_template) # &lt;----------------------------------------------\n</code></pre> <p>and create the <code>tests/</code> dir along with <code>CMakeLists.txt</code> and <code>src/</code>. Inside <code>tests/</code>, create <code>MyTest.cpp</code>:</p> tree<pre><code>CMakeLists.txt\nsrc\n\u251c\u2500\u2500 main.cpp\n\u2514\u2500\u2500 main.h\ntests\n\u2514\u2500\u2500 MyTest.cpp\n</code></pre> <p>Note the <code>main.h</code> file. Since we would like to access the <code>sum</code> function of <code>main.cpp</code>, we should put <code>sum</code> declaration to the <code>main.h</code> file:</p> main.h<pre><code>#pragma once\n\nint sum(int a, int b);\n</code></pre> <p>Put the basic test case to <code>MyTest.cpp</code>:</p> MyTest.cpp<pre><code>#include &lt;gtest/gtest.h&gt;\n#include \"main.h\"\n\nTEST(MyTest, Sum) {\n  ASSERT_EQ(sum(2, 2), 4);\n}\n</code></pre> <p>Build <code>Tests</code> and run <code>bin/Tests</code>. Possible output:</p> Console<pre><code>[==========] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from MyTest\n[ RUN      ] MyTest.Sum\n[       OK ] MyTest.Sum (0 ms)\n[----------] 1 test from MyTest (0 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test suite ran. (0 ms total)\n[  PASSED  ] 1 test.\n</code></pre> <p>AUI does the following fundamental things for you:</p> <ol> <li>Collect all tests from your <code>tests/</code> dir</li> <li>Provide an entry point for the <code>Tests</code> program (testing::InitGoogleTest)</li> <li>Mirror all linked libraries and compile options to the <code>Tests</code> program</li> <li>If you are testing a shared library, the shared library is linked to the <code>Tests</code> program</li> <li>If you are testing an executable, the executable's sources are automatically compiled with the <code>Tests</code> program and    the <code>include</code> scope of the executable is copied to the <code>Tests</code> program (this is why we have easily accessed the    <code>main.h</code> header)</li> </ol>"},{"location":"writing-tests/#writing-ui-tests","title":"Writing UI Tests","text":"<p>Since AUI is a UI framework it is also capable of UI tests.</p> <p>In addition to the previous example, we'd create some window:</p> UITest.cpp<pre><code>#include &lt;AUI/UITest.h&gt;\n#include &lt;AUI/Util/UIBuildingHelpers.h&gt;\n#include &lt;AUI/View/AButton.h&gt;\n#include &lt;AUI/Platform/AWindow.h&gt;\n#include &lt;AUI/View/ATextField.h&gt;\n#include &lt;AUI/View/AScrollArea.h&gt;\n#include &lt;gmock/gmock.h&gt;\n\nclass TestWindow: public AWindow {\npublic:\n    TestWindow() {\n        setContents(Centered {\n            _new&lt;AButton&gt;(\"Hello!\")\n        });\n    }\n};\n\nclass UIScrollTest: public testing::UITest {\npublic:\nprotected:\n\n    class TestWindow: public AWindow {\n    public:\n        TestWindow(): AWindow(\"Test window\", 200_dp, 100_dp) {\n            setContents(Vertical {\n                    AScrollArea::Builder().withContents(_new&lt;MockedViewContainer&gt;()).withExpanding().build()\n            });\n        }\n    };\n    _&lt;TestWindow&gt; mTestWindow;\n\n\n    void SetUp() override {\n        UITest::SetUp();\n\n        // prepare the window\n        mTestWindow = _new&lt;TestWindow&gt;();\n        mTestWindow-&gt;show();\n    }\n};\n</code></pre>"}]}